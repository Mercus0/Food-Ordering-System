<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.Diagram</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatch">
            <summary>
            The NBatch class represents a set of diagram items and serves as base class for more specialized batches
            </summary>
            <remarks>
            Before using a batch you must call the Build method, which takes only one parameter - the diagram items from which the batch must be built
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatch.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatch.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.Batches.NBatch.Items">
            <summary>
            Gets the nodes representing the batch
            </summary>
            <remarks>
            The batch nodes are automatically populated from the Build method.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.Batches.NBatch.Document">
            <summary>
            Gets the document associated with the batch
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Batches.NBatch.Bounds">
            <summary>
            Gets the bounds of the items in this batch
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatch.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the batch from the specified nodes
            </summary>
            <param name="items">nodes from which to build the batch</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatch.Build(Nevron.Nov.Diagram.NDiagramItem[])">
            <summary>
            Builds the batch from the specified nodes
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatch.Reset(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Initializes this batch
            </summary>
            <param name="document"></param>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchCompose">
            <summary>
            The NBatchCompose class is used to perform different Composite Solid Geometry (CSG) operations, such as union, intersection, subtraction and exclusive or.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the group batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionCompositeGeometry
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.CanCompose(Nevron.Nov.DataStructures.ENSetOperator,Nevron.Nov.Diagram.NPage,Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether all contained batch nodes can be deleted
            </summary>
            <returns>true if all nodes can be deleted, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.Union(Nevron.Nov.Diagram.NPage,Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShape@)">
            <summary>
            Performs a union on the batch set of shapes.
            </summary>
            <param name="activePage">active page in which to add resulting shape</param>
            <param name="anchorShape">anchor shape</param>
            <param name="resultShape">resulting shape</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.Intersect(Nevron.Nov.Diagram.NPage,Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShape@)">
            <summary>
            Performs an intersection on the batch set of shapes.
            </summary>
            <param name="activePage">active page in which to add resulting shape</param>
            <param name="anchorShape">anchor shape</param>
            <param name="resultShape">resulting shape</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.Subtract(Nevron.Nov.Diagram.NPage,Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShape@)">
            <summary>
            Performs a subraction on the batch set of shapes.
            </summary>
            <param name="activePage">active page in which to add resulting shape</param>
            <param name="anchorShape">anchor shape</param>
            <param name="resultShape">resulting shape</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchCompose.ExclusiveOr(Nevron.Nov.Diagram.NPage,Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShape@)">
            <summary>
            Performs a subraction on the batch set of shapes.
            </summary>
            <param name="activePage">active page in which to add resulting shape</param>
            <param name="anchorShape">anchor shape</param>
            <param name="resultShape">resulting shape</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchDelete">
            <summary>
            The NBatchDelete class is used to facilitate the deletion of multiple nodes 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchDelete.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchDelete.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchDelete.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchDelete.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the delete batch from the specified building nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchDelete.CanDelete">
            <summary>
            Determines whether the delete operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchDelete.Delete">
            <summary>
            Deletes all batch nodes from their composites 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchFormat">
            <summary>
            The NBatchFormat class is used to provide transaction based format operations for page items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the group batch from the specified building items
            </summary>
            <remarks>
            The implementation will filter the building items for PermissionFormat
            </remarks>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.CanFormat">
            <summary>
            Determines whether any of the format commands can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.CanFormatTable">
            <summary>
            Determines whether any of the table format commands can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeGeometryFill(Nevron.Nov.Graphics.NFill)">
            <summary>
            Changes the Fill of all shape's Geometry objects.
            </summary>
            <param name="fill"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeGeometryStroke(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Changes the Stroke of all shape's Geometry objects.
            </summary>
            <param name="stroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeThemeAndStyle(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle)">
            <summary>
            Changes the theme and style of all shapes.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeGeometryShadow(Nevron.Nov.Graphics.NShadow)">
            <summary>
            Changes the Shadow of all shape's Geometry objects.
            </summary>
            <param name="shadow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeGeometryBeginArrowhead(Nevron.Nov.Diagram.NArrowhead)">
            <summary>
            Changes the start arrowhead style of all contained items 
            </summary>
            <param name="arrow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeGeometryEndArrowhead(Nevron.Nov.Diagram.NArrowhead)">
            <summary>
            Changes the end arrowhead style of all contained items.
            </summary>
            <param name="arrow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeGeometryCornerRounding(System.Double)">
            <summary>
            Changes the corner rounding of all contained items.
            </summary>
            <param name="cornerRounding"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockFontName(System.String)">
            <summary>
            Changes the FontName of all shape's TextBlock objects.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockFontSize(System.Double)">
            <summary>
            Changes the FontSize of all shape's TextBlock objects.
            </summary>
            <param name="fontSize"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockLineHeightFactor(System.Double)">
            <summary>
            Changes the LineGap of all shape's TextBlock objects
            </summary>
            <param name="lineHeightFactor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockFill(Nevron.Nov.Graphics.NFill)">
            <summary>
            Changes the Fill of all shape's TextBlock objects.
            </summary>
            <param name="fill"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockStroke(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Changes the Stroke of all shape's TextBlock objects.
            </summary>
            <param name="stroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockShadow(Nevron.Nov.Graphics.NShadow)">
            <summary>
            Changes the Shadow of all shape's TextBlock objects.
            </summary>
            <param name="shadow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockBackgroundFill(Nevron.Nov.Graphics.NFill)">
            <summary>
            Changes the BackgroundFill of all shape's TextBlock objects.
            </summary>
            <param name="fill"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockHorizontalAlignment(Nevron.Nov.Text.ENAlign)">
            <summary>
            Changes the HorizontalAlignment of all shape's TextBlock objects.
            </summary>
            <param name="halign"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockBaseline(Nevron.Nov.Graphics.ENBaseline)">
            <summary>
            Changes the HorizontalAlignment of all shape's TextBlock objects.
            </summary>
            <param name="baseline"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockVerticalAlignment(Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Changes the VerticalAlignment of all shape's TextBlock objects.
            </summary>
            <param name="valign"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTablePortsMode(Nevron.Nov.Diagram.ENPortsDistributionMode)">
            <summary>
            Changes the table ports mode
            </summary>
            <param name="portsDistributionMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTableResizeMode(Nevron.Nov.Diagram.ENTableBlockResizeMode)">
            <summary>
            Changes the Table resize mode of all shape's TableBlock objects.
            </summary>
            <param name="resizeMode"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearGeometryFill">
            <summary>
            Clears the Fill of all shape's Geometry objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearGeometryStroke">
            <summary>
            Clears the Stroke of all shape's Geometry objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearGeometryShadow">
            <summary>
            Clears the Shadow of all shape's Geometry objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearGeometryBeginArrowhead">
            <summary>
            Clears the start arrowhead style of all contained items 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearGeometryEndArrowhead">
            <summary>
            Clears the end arrowhead style of all contained items 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearGeometryCornerRounding">
            <summary>
            Clears the corner rounding of all contained items 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockFontName">
            <summary>
            Clears the FontName of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockFontSize">
            <summary>
            Clears the FontSize of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockLineHeightFactor">
            <summary>
            Clears the LineHeightFactor of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockFill">
            <summary>
            Clears the Fill of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockStroke">
            <summary>
            Clears the Stroke of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockShadow">
            <summary>
            Clears the Shadow of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockBackgroundFill">
            <summary>
            Clears the BackgroundFill of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockHorizontalAlignment">
            <summary>
            Clears the HorizontalAlignment of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockVerticalAlignment">
            <summary>
            Clears the VerticalAlignment of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.SetTextBlockFontStyle(Nevron.Nov.Graphics.ENFontStyle,System.Boolean)">
            <summary>
            Sets the specified FontStyle bit value for all shape's TextBlock objects to either true or false.
            </summary>
            <param name="fontStyle"></param>
            <param name="raise"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ApplyBulletListTemplateType(Nevron.Nov.Text.ENBulletListTemplateType)">
            <summary>
            Applies the specified bullet list template type to the selection
            </summary>
            <param name="bulletListTemplateType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeFontSize(System.Boolean)">
            <summary>
            Changes the FontStyle of all shape's TextBlock objects.
            </summary>
            <param name="increase"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ChangeTextBlockFontStyle(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Changes the FontStyle of all shape's TextBlock objects.
            </summary>
            <param name="fontStyle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextBlockFontStyle">
            <summary>
            Changes the FontStyle of all shape's TextBlock objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearBullets">
            <summary>
            Clears the bulleting in all text block objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchFormat.ClearTextFormatting">
            <summary>
            Changes the formatting of all text block objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchGroup">
            <summary>
            The NBatchGroup class is used to facilitate the grouping of shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchGroup.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchGroup.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchGroup.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the group batch from the specified building items
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchGroup.CanGroup">
            <summary>
            Determines whether the group operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchGroup.Group(Nevron.Nov.Diagram.NPage,Nevron.Nov.Diagram.NGroup@)">
            <summary>
            Creates a new group containing all batch shapes and adds it in the specified composite (if it is provided)
            </summary>
            <param name="page">page in the items of which to add the newly created group (can be null)</param>
            <param name="group">the newly created group</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchInsert">
            <summary>
            The NBatchInsert class is used to facilitate the insertion of multiple items in one collection element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchInsert.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchInsert.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchInsert.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchInsert.CanInsert(Nevron.Nov.Dom.NElement,System.Int32)">
            <summary>
            Determines whether the items contained in the batch can be inserted in the specified composite
            </summary>
            <param name="collection">composite</param>
            <param name="startIndex">index from which to start insertion</param> 
            <returns>true if the nodes can be inserted in the composite, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchInsert.Insert(Nevron.Nov.Dom.NElement,System.Int32)">
            <summary>
            Inserts all batch nodes in the specified collection.
            </summary>
            <param name="collection">Collection.</param>
            <param name="startIndex">Index from which to start the insertion.</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchInsert.Append(Nevron.Nov.Dom.NElement)">
            <summary>
            Appends all batch nodes to the specified composite
            </summary>
            <param name="collection">composite</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchLayout">
            <summary>
            The NBatchLayout class is used to provide transaction based layout operations
            </summary>
            <remarks>
            The Build method filters the building nodes for valid bounds. Once the batch is built you can execute the following set of layout commands:
            <list type="bullet">
            <item>
            	<term>Alignment</term>
            	<description>helps you align nodes to a virtual grid, align their lefts, rights, tops and bottoms as well as align their centers and middles</description>
            </item>	
            <item>
            	<term>Resize</term>
            	<description>helps you size to nodes to a virtual grid, make their size, width and height identical, as well as increase the nodes width and height</description>
            </item>	
            <item>
            	<term>Horizontal spacing</term>
            	<description>helps you increase, decrease, remove and make equal the horizontal spacing of nodes</description>
            </item>	
            <item>
            	<term>Vertical spacing</term>
            	<description>helps you increase, decrease, remove and make equal the vertical spacing of nodes</description>
            </item>	
            <item>
            	<term>Center in document</term>
            	<description>helps you center the nodes horizontally or vertically in the document</description>
            </item>	
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new layout batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new layout batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the layout batch from the specified building nodes
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanAlignToGrid(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Determines whether the aling to grid operation can be performed
            </summary>
            <param name="gridOrigin">grid origin</param> 
            <param name="gridCellSize">grid cell size</param> 
            <returns>true if the to align grid operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.AlignToGrid(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Aligns the locations of the nodes from this batch to the specified virtual grid (defined by origin and cell size)
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="gridOrigin">origin point of the grid in scene coordinates</param>
            <param name="gridCellSize">grid cell size in scene coordinates</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanSizeToGrid(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Determines whether the size to grid operation can be performed
            </summary>
            <param name="gridOrigin">grid origin</param> 
            <param name="gridCellSize">grid cell size</param> 
            <returns>true if the to align grid operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.SizeToGrid(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Sizes the nodes from this batch to fit specified virtual grid cells (defined by origin and cell size)
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="gridOrigin">origin point of the grid in scene coordinates</param>
            <param name="gridCellSize">grid cell size in scene coordinates</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanAlignHorizontally(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the aling lefts operation can be performed
            </summary>
            <param name="anchor">anchor to which to align</param>
            <returns>true if the align lefts operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.AlignHorizontally(Nevron.Nov.Diagram.NShape,Nevron.Nov.ENHorizontalAlignment)">
            <summary>
            Aligns the lefts of the nodes from this batch to the specified anchor left
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor to which to align</param>
            <param name="align">horizontal align</param> 
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanAlignVertically(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the aling tops operation can be performed
            </summary>
            <param name="anchor">anchor to which to align</param>
            <returns>true if the align tops operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.AlignVertically(Nevron.Nov.Diagram.NShape,Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Aligns the tops of the nodes from this batch to the specified anchor top
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor to which to align</param>
            <param name="align">vertical align</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanMakeSameWidth(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the make same width operation can be performed
            </summary>
            <param name="anchor">anchor</param>
            <returns>true if the make same width operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.MakeSameWidth(Nevron.Nov.Diagram.NShape)">
            <summary>
            Makes the width of the nodes from this batch equal to the specified anchor width
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor whose width to use</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanMakeSameHeight(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the make same height operation can be performed
            </summary>
            <param name="anchor">anchor</param>
            <returns>true if the make same height operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.MakeSameHeight(Nevron.Nov.Diagram.NShape)">
            <summary>
            Makes the height of the nodes from this batch equal to the specified anchor height
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor whose height to use</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanMakeSameSize(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the make same size operation can be performed
            </summary>
            <param name="anchor">anchor</param>
            <returns>true if the make same size operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.MakeSameSize(Nevron.Nov.Diagram.NShape)">
            <summary>
            Makes the size of the nodes from this batch equal to the specified anchor size
            </summary>
            <remarks>
            If a valid document is provided this method will record the changes in a single transaction.
            </remarks>
            <param name="anchor">anchor whose size to use</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanIncreaseWidth(System.Double)">
            <summary>
            Determines whether the increase width operation can be performed
            </summary>
            <param name="step">step with which to increase the width of all nodes (can be negative)</param>
            <returns>true if the increase width operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.IncreaseWidth(System.Double)">
            <summary>
            Increased the width of the nodes from this batch with the specified step
            </summary>
            <remarks>
            Depending on whether the step is positive or not this method will record either an increase width or decrease width transaction. 
            </remarks>
            <param name="step">step with which to increase the width of all nodes (can be negative)</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanIncreaseHeight(System.Double)">
            <summary>
            Determines whether the increase height operation can be performed
            </summary>
            <param name="step">step with which to increase the height of all nodes (can be negative)</param>
            <returns>true if the increase height operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.IncreaseHeight(System.Double)">
            <summary>
            Increased the height of the nodes from this batch with the specified step
            </summary>
            <remarks>
            Depending on whether the step is positive or not this method will record either an increase height or decrease height transaction. 
            </remarks>
            <param name="step">step with which to increase the height of all nodes (can be negative)</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanMakeHorizontalSpacingEqual">
            <summary>
            Determines whether the make horizontal spacing equal operation can be performed
            </summary>
            <returns>true if the make horizontal spacing equal operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.MakeHorizontalSpacingEqual">
            <summary>
            Makes the horizontal spacing between the batch nodes equal
            </summary>
            <remarks>
            The first and end nodes between which the rest of the batch nodes are evenly spaced are the nodes with smaller and larger X position.
            </remarks>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanIncreaseHorizontalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Determines whether the increase horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the increase horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.IncreaseHorizontalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Increases the horizontal spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanDecreaseHorizontalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Determines whether the decrease horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the decrease horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.DecreaseHorizontalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Decreases the horizontal spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanRemoveHorizontalSpacing(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the remove horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <returns>true if the remove horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.RemoveHorizontalSpacing(Nevron.Nov.Diagram.NShape)">
            <summary>
            Removes the horizontal spacing between the batch nodes and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanMakeVerticalSpacingEqual">
            <summary>
            Determines whether the make vertical spacing equal operation can be performed
            </summary>
            <returns>true if the make vertical spacing equal operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.MakeVerticalSpacingEqual">
            <summary>
            Makes the vertical spacing between the batch nodes equal
            </summary>
            <remarks>
            The first and end nodes between which the rest of the batch nodes are evenly spaced are the nodes with smaller and larger Y position.
            </remarks>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanIncreaseVerticalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Determines whether the increase horizontal spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the increase horizontal spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.IncreaseVerticalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Increases the vertical spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanDecreaseVerticalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Determines whether the decrease vertical spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <param name="spacingStep">spacing step</param> 
            <returns>true if the decrease vertical spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.DecreaseVerticalSpacing(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Decreases the vertical spacing between the batch nodes with the specified spacing step and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <param name="spacingStep">spacing step</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanRemoveVerticalSpacing(Nevron.Nov.Diagram.NShape)">
            <summary>
            Determines whether the remove vertical spacing operation can be performed
            </summary>
            <param name="anchor">anchor</param> 
            <returns>true if the remove vertical spacing operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.RemoveVerticalSpacing(Nevron.Nov.Diagram.NShape)">
            <summary>
            Removes the vertical spacing between the batch nodes and preserves the location of the specified anchor
            </summary>
            <param name="anchor">anchor node</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanCenterInPageHorizontally(Nevron.Nov.Diagram.NPage)">
            <summary>
            Determines whether the center in document horizontally operation can be performed
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CenterInPagetHorizontally(Nevron.Nov.Diagram.NPage)">
            <summary>
            Centers the batch nodes horizontally in the document
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CanCenterInPageVertically(Nevron.Nov.Diagram.NPage)">
            <summary>
            Determines whether the center in document vertically operation can be performed
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.CenterInPageVertically(Nevron.Nov.Diagram.NPage)">
            <summary>
            Centers the batch nodes vertically in the document
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.EQxG.Compare(Nevron.Nov.Diagram.NDiagramItem,Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Compares the X position of the a and b object bounds
            </summary>
            <param name="fQxG"></param>
            <param name="GQxG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchLayout.hQxG.Compare(Nevron.Nov.Diagram.NDiagramItem,Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Compares the Y position of the a and b object bounds
            </summary>
            <param name="IQxG"></param>
            <param name="jQxG"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchOperation">
            <summary>
            The NBatchOperation class is used to provide miscellaneous transaction based operations, 
            which are not constrained by permissions and purely rely on the type of items inside the batch.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building items</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the group batch from the specified building items
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.CanUpdateBounds">
            <summary>
            Determines whether the batch contains at least one node which is a NAggregateModel instance
            </summary>
            <returns>true if the batch contains at least one node which implements the NAggregateModel interface, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.UpdateBounds">
            <summary>
            Calls the UpdateModelBounds method of all contained items, which are NAggregateModel instances
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.CanReroute">
            <summary>
            Determines whether the batch contains at least one routable connector, which can be rerouted.
            </summary>
            <returns>true if the batch contains at least one shape, which can be rerouted, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.Reroute">
            <summary>
            Calls the Reroute method of all contained NRoutableConnector instances
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.CanChangeVisibility">
            <summary>
            Determines whether the batch contains at least one node which implements the INVisible interface
            </summary>
            <returns>true if the batch contains at least one node which implements the INVisible interface, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ChangeVisibility(System.Boolean)">
            <summary>
            Changes the visible property of all contained items which implement INVisible interface
            </summary>
            <param name="visible">whether show/hide the items</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.CanChangeProtection">
            <summary>
            Determines whether the batch contains at least one node, which implements the INDiagramElement interface
            </summary>
            <returns>true if the batch contains at least one diagram element, othwerwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ChangeProtection(Nevron.Nov.Diagram.ENDiagramItemOperationMask)">
            <summary>
            Changes the protection of all contained items
            </summary>
            <param name="protectionMask">protection to set</param>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.CanPerformConnectorOperation">
            <summary>
            Determines whether the batch contains at least one routable connector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ConnectorMakeLine">
            <summary>
            Calls the MakeLine method of all contained NRoutableConnector instances
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ConnectorMakePolyline">
            <summary>
            Calls the MakePolyline method of all contained NRoutableConnector instances
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ConnectorMakeOrthogonal">
            <summary>
            Calls the MakePolyline method of all contained NRoutableConnector instances
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ConnectorRerouteAlways(System.Boolean)">
            <summary>
            Sets the RerouteMode of all containted NRoutableConnector instances to Always
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ConnectorRerouteWhenNeeded(System.Boolean)">
            <summary>
            Sets the RerouteMode of all containted NRoutableConnector instances to Always
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchOperation.ConnectorRerouteNever">
            <summary>
            Sets the RerouteMode of all containted NRoutableConnector instances to Always
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchReorder">
            <summary>
            The NBatchReorder class is used to facilitate the reorder of nodes in their containers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the reorder batch from the specified building items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.CanBringForward">
            <summary>
            Determines whether the bring forward operation can be performed
            </summary>
            <returns>true if the operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.BringForward(Nevron.Nov.Diagram.NPage)">
            <summary>
            Brings the batch nodes forward in the ZOrder
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.BringToFront(Nevron.Nov.Diagram.NPage)">
            <summary>
            Brings the batch nodes to front most position in the ZOrder
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.CanSendBackward">
            <summary>
            Determines whether the send backward operation can be performed
            </summary>
            <returns>true if the operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.SendBackward(Nevron.Nov.Diagram.NPage)">
            <summary>
            Sends the batch nodes backward in the ZOrder
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReorder.SendToBack(Nevron.Nov.Diagram.NPage)">
            <summary>
            Sends the batch nodes to back most position in the ZOrder
            </summary>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchReplaceAll">
            <summary>
            The NBatchUngroup class is used to facilitate the ungrouping of groups
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReplaceAll.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReplaceAll.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReplaceAll.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReplaceAll.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionUngroup
            </remarks>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReplaceAll.CanReplaceAll">
            <summary>
            Determines whether there are items which can be edited
            </summary>
            <returns>true if all groups can be ungrouped, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchReplaceAll.ReplaceAll(Nevron.Nov.Diagram.NReplaceTextSettings,System.Int32@)">
            <summary>
            Replaces all occurrences of text
            </summary>
            <param name="replaceTextSettings"></param>
            <param name="replaceCount"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchTransform">
            <summary>
            The NBatchTransform class is used to facilitate transformation based operations on a set of nodes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.#ctor(Nevron.Nov.Dom.NDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="items">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the transformer batch from the specified building items.
            </summary>
            <remarks>
            The implementation will filter the building nodes for NModel base type.
            </remarks>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.CanFlip">
            <summary>
            Determines whether a flip operation can be performed
            </summary>
            <returns>true if a flip operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.FlipHorizontal">
            <summary>
            Flips the batch nodes horizontally
            </summary>
            <returns>true if the flip was successful, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.FlipVertical">
            <summary>
            Flips the batch nodes vertically
            </summary>
            <returns>true if the flip was successful, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.CanRotate(System.Double)">
            <summary>
            Determines whether the rotate operation can be performed
            </summary>
            <param name="rotationStep"></param>
            <returns>true if the rotate operation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTransform.Rotate(System.Double)">
            <summary>
            Rotates the batch nodes to the left with the specified step (in degrees)
            </summary>
            <param name="rotationStep">rotation step in degrees</param>
            <returns>true if the rotate was successful, otherwise false</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchTranslate">
            <summary>
            The NBatchTranslate class is used to facilitate the translation 
            of multiple nodes together with their translation slaves
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new translate entity associated with the specified document and builds it
            </summary>
            <param name="document">document with which the entity is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the translator entity from the specified building nodes
            </summary>
            <remarks>
            The implementation will first filter the building nodes for INTranslatable interface implementation. 
            Then it will append the resulting node translation slaves. 
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.CanTranslate(System.Double,System.Double,System.Boolean)">
            <summary>
            Determines whether the translate can be performed with the specified offsets
            </summary>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <returns>true if the translation can be performed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.CanTranslate(Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Boolean)">
            <summary>
            Determines whether the translate can be performed with the specified parameterd
            </summary>
            <param name="direction">translate direction</param> 
            <param name="step">translate step</param> 
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <returns>true if the operation succeeded, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.Translate(System.Double,System.Double,System.Boolean)">
            <summary>
            Translates the entity with the specified x and y amount
            </summary>
            <remarks>
            If the move permissions of a particular node do not allow x or y move the respective delta will be set to 0. 
            In this case the transaction will be considered as incomplete.
            </remarks>
            <param name="dx">x translate in scene coordinates</param>
            <param name="dy">y translate in scene coordinates</param>
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <returns>true if the nodes were successfully translated, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.Translate(Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Boolean)">
            <summary>
            Translates the entity with the specified step in the specified direction
            </summary>
            <param name="direction">translate direction</param> 
            <param name="step">translate step</param> 
            <param name="discardMovePermissions">indicates whether the move permissions of the nodes must be discarded</param>
            <returns>batch result</returns> 
        </member>
        <member name="P:Nevron.Nov.Diagram.Batches.NBatchTranslate.ContainsXMoveable">
            <summary>
            Indicates whether the entity contains a X moveable node
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Batches.NBatchTranslate.ContainsYMoveable">
            <summary>
            Indicates whether the entity contains a Y moveable node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.AppendMoveSlaves">
            <summary>
            Appends all translation slaves to the Nodes array.
            </summary>
            <remarks>
            The method will recursively add the translation slaves of translation slaves. 
            This method is called by the Build method after the Nodes array has been initialized with the specified building nodes.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.UnionMovePermissions">
            <summary>
            Unions the entity nodes move permissions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchTranslate.GetOffsetFromDirectionAndStep(Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Double@,System.Double@)">
            <summary>
            Obtains a translation offset from a compass direction and step 
            </summary>
            <param name="direction"></param>
            <param name="step"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Batches.NBatchUngroup">
            <summary>
            The NBatchUngroup class is used to facilitate the ungrouping of groups
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchUngroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchUngroup.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Creates a new batch associated with the specified document
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchUngroup.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Creates a new batch associated with the specified document and builds it
            </summary>
            <param name="document">document with which the batch is associated (can be null)</param>
            <param name="nodes">building nodes</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchUngroup.Build(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Builds the batch from the specified building nodes
            </summary>
            <remarks>
            The implementation will filter the building nodes for PermissionUngroup
            </remarks>
            <param name="nodes"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchUngroup.CanUngroup">
            <summary>
            Determines whether all contained groups can be ungrouped
            </summary>
            <returns>true if all groups can be ungrouped, otherwise false</returns>s
        </member>
        <member name="M:Nevron.Nov.Diagram.Batches.NBatchUngroup.Ungroup(Nevron.Nov.Diagram.NPage,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem}@)">
            <summary>
            Ungroups all contained groups and adds their shapes in the specified composite (if it is provided).
            </summary>
            <param name="page">page in the items of which to add the ungroupped shapes</param>
            <param name="shapes">List of resulting shapes.</param>
            <returns>batch result</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingCodeBehind">
            <summary>
            Serves as base class for drawing code behind objects
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingCodeBehind.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageCodeBehind">
            <summary>
            Serves as base class for page code behind objects
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageCodeBehind.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeCodeBehind">
            <summary>
            Serves as base class for shape code behind objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCodeBehind.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCodeBehind.LoadLibraryDocument(System.String)">
            <summary>
            Unix-based path relative to the root libraries folder of the library browser.
            </summary>
            <param name="relativeLibraryPath"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Database.ENDatabaseType">
            <summary>
            Supported database types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Database.ENDatabaseType.SqlServer">
            <summary>
            Sql Server
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Database.ENEnrtyRelationshipModel">
            <summary>
            Represents different types of database shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Database.ENEnrtyRelationshipModel.IDEF1X">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Database.ENEnrtyRelationshipModel.CrowsFoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Database.ENSqlServerAuthentication">
            <summary>
            Enumerates the SQL server authentications.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Database.ENSqlServerAuthentication.WindowsAuthentication">
            <summary>
            Windows authentication.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Database.ENSqlServerAuthentication.SqlServerAuthentication">
            <summary>
            SQL server authentication.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.ENPosition">
            <summary>
            Enumerates the positions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENPosition.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENPosition.Executive">
            <summary>
            Executive.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENPosition.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENPosition.Assistant">
            <summary>
            Assistant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENPosition.Consultant">
            <summary>
            Consultant.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENPosition.Vacancy">
            <summary>
            Vacancy.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer">
            <summary>
            Data visualizer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.OnDataSourceUriChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when data source URI has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.DataSourceURI">
            <summary>
            Gets/Sets the value of the DataSourceURI property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.Sheet">
            <summary>
            Gets/Sets the value of the Sheet property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.NDataVisualizerSchema">
            <summary>
            Schema associated with NDataVisualizer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.DataSourceURIProperty">
            <summary>
            Reference to the DataSourceURI property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.SheetProperty">
            <summary>
            Reference to the Sheet property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.NDataVisualizerDesigner">
            <summary>
            Designer of NDataVisualizer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NDataVisualizer.NDataVisualizerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer">
            <summary>
            Builds flowchart diagrams from an Excel data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.BuildDiagram(Nevron.Nov.Diagram.NDrawingView)">
            <summary>
            
            </summary>
            <param name="drawingView"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.BuildDiagram(Nevron.Nov.Diagram.NDrawingView,Nevron.Nov.Data.NDataSet)">
            <summary>
            Creates a diagram using the data from the given data set.
            </summary>
            <param name="drawingView"></param>
            <param name="dataSet"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.DiagramType">
            <summary>
            Gets/Sets the value of the DiagramType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.LayoutDirection">
            <summary>
            Gets/Sets the value of the LayoutDirection property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.NFlowchartVisualizerSchema">
            <summary>
            Schema associated with NFlowchartVisualizer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.DiagramTypeProperty">
            <summary>
            Reference to the DiagramType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.LayoutDirectionProperty">
            <summary>
            Reference to the LayoutDirection property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.NFlowchartVisualizerDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizer.NFlowchartVisualizerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.ENFlowchartVisualizerDiagramType">
            <summary>
            Enumerates the data visualizer types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENFlowchartVisualizerDiagramType.FlowChartProcessMap">
            <summary>
            FlowChartProcessMap
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.ENFlowchartVisualizerDiagramType.CrossFunctionalProcessMap">
            <summary>
            CrossFunctionalProcessMap
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizerUnit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizerUnit.ShapeType">
            <summary>
            Shape type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizerUnit.ProcessStepId">
            <summary>
            Process step ID.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizerUnit.ProcessStepDescription">
            <summary>
            Process step description.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizerUnit.NextStepId">
            <summary>
            Next step ID.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NFlowchartVisualizerUnit.ConnectorLabel">
            <summary>
            Connector label.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.OnOpened">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.OnClosing">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.OrganizationChartVisualizer">
            <summary>
            Gets/Sets the value of the OrganizationChartVisualizer property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartEditorWindow.NOrganizationChartEditorWindowSchema">
            <summary>
            Schema associated with NOrganizationChartEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.BuildDiagram(Nevron.Nov.Diagram.NDrawingView)">
            <summary>
            Builds a diagram.
            </summary>
            <param name="drawingView"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.Columns">
            <summary>
            Gets/Sets the value of the Columns property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.ShowImages">
            <summary>
            Gets/Sets the value of the ShowImages property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.Images">
            <summary>
            Gets/Sets the value of the Images property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.NOrganizationChartVisualizerSchema">
            <summary>
            Schema associated with NOrganizationChartVisualizerSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.ColumnsProperty">
            <summary>
            Reference to the Columns property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.ShowImagesProperty">
            <summary>
            Reference to the ShowImages property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizer.ImagesProperty">
            <summary>
            Reference to the Images property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit">
            <summary>
            Org chart visualizer unit.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="uniqueId"></param>
            <param name="employeeName"></param>
            <param name="reportsToId"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit.UniqueId">
            <summary>
            Gets/Sets the Unique Id of the unit.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit.EmployeeName">
            <summary>
            Gets/Sets employee's name. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit.ReportsToId">
            <summary>
            Gets/Sets the id of the unit that this unit reports to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DataVisualizer.NOrganizationChartVisualizerUnit.ImagePath">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Export.NDrawingImageExportDialog">
            <summary>
            Represents the drawing image export dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingImageExportDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingImageExportDialog.CreateBoundsEditWidget">
            <summary>
            Creates the bounds edit widget.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Export.NDrawingImageExportDialog.NDrawingImageExportDialogSchema">
            <summary>
            Schema associated with NDrawingImageExportDialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter">
            <summary>
            Exports the active page of a drawing document to an image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Creates a new drawing raster image exporter, which renders the content of the active page.
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter.#ctor(Nevron.Nov.Diagram.NDrawing,Nevron.Nov.IO.NFile)">
            <summary>
            Creates a new drawing raster image exporter, which renders the content of the active page.
            </summary>
            <param name="drawing"></param>
            <param name="file"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter.GetDocumentContentBounds">
            <summary>
            Gets the bounds of the document content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter.CreateExportDialog(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates an image export dialog.
            </summary>
            <param name="ownerWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter.OnImageDocumentContentCreated(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Called when content of the export document has been initialized.
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingRasterImageExporter.GetVisualToRender(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Gets the visual, which should be rendered.
            </summary>
            <param name="drawing"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter">
            <summary>
            Exports a drawing document to a vector image such as SVG.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Creates a new drawing vector image exporter, which renders the content of the active page.
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.#ctor(Nevron.Nov.Diagram.NDrawing,Nevron.Nov.IO.NFile)">
            <summary>
            Creates a new drawing vector image exporter, which renders the content of the active page.
            </summary>
            <param name="drawing"></param>
            <param name="file"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.GetDocumentContentBounds">
            <summary>
            Gets the bounds of the document content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.SaveToStream(System.IO.Stream,System.String,Nevron.Nov.Graphics.NRectangle,System.Double,Nevron.Nov.Graphics.NImageEncoderSettings)">
            <summary>
            Exports the specified bounds of the document to an image and saves it to the given stream.
            </summary>
            <param name="stream">The stream to save the image to.</param>
            <param name="extension">The extension of the file format to save in without the dot,
            for example "png", "jpg", "svg", etc.</param>
            <param name="bounds">Bounding box of the area to be exported.</param>
            <param name="dpi">Resolution of the image.</param>
            <param name="encoderSettings">Image encoder settings.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.CreateExportDialog(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates an image export dialog.
            </summary>
            <param name="ownerWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.OnImageDocumentContentCreated(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Called when content of the export document has been initialized.
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingVectorImageExporter.GetVisualToRender(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Gets the visual, which should be rendered.
            </summary>
            <param name="drawing"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Export.NDrawingPdfExporter">
            <summary>
            Exports the drawing active page to Pdf.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingPdfExporter.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="drawing">The drawing to export.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingPdfExporter.#ctor(Nevron.Nov.Diagram.NDrawing,Nevron.Nov.IO.NFile)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="drawing">The drawing to export.</param>
            <param name="targetFile">The file to export to.</param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Export.NDrawingPrintExporter">
            <summary>
            Faciliates the printing of a drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Export.NDrawingPrintExporter.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NGedcomLoadSettings">
            <summary>
            Contains settings for loading of GEDCOM files.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NGedcomLoadSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NGedcomLoadSettings.#ctor(Nevron.Nov.Diagram.NLibrary)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="familyTreeLibrary"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NGedcomLoadSettings.FamilyTreeLibrary">
            <summary>
            Gets/Sets the family tree library to use for creating family tree shapes
            when importing data from a GEDCOM file. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat">
            <summary>
            Base class for all raster image drawing formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.#ctor(Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="imageFormat"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.Extensions">
            <summary>
            Gets the file extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.CanLoad">
            <summary>
            Gets whether documents in this format can be loaded. Overriden to return false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="loadSettings"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NRasterImageDrawingFormat.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="stream"></param>
            <param name="saveSettings"></param>
            <param name="progress"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat">
            <summary>
            Base class for vector image draing formats.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.CanLoad">
            <summary>
            Gets whether documents in this format can be loaded. Overriden to return false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.Mime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.OnUse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="loadSettings"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NVectorImageDrawingFormat.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="stream"></param>
            <param name="saveSettings"></param>
            <param name="progress"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings">
            <summary>
            Settings for loading an ESRI shapefile.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.#ctor">
            <summary>
            Constructors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.MapWidth">
            <summary>
            The width of the imported map. By default set to the default page width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.MapHeight">
            <summary>
            The height of the imported map. By default set to the default page height.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.Projection">
            <summary>
            The map projection to use.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.ParallelRenderMode">
            <summary>
            The parallels render mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.MeridianRenderMode">
            <summary>
            The meridians render mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.NameColumnName">
            <summary>
            The name of the DBF column to use for naming the shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.ShapeMinZoomPercent">
            <summary>
            The minimum zoom percentage at which to show imported shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.ShapeMaxZoomPercent">
            <summary>
            The maximum zoom percentage at which to show imported shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.TextColumnName">
            <summary>
            The name of the DBF column to use for setting the text of the shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.TextMinZoomPercent">
            <summary>
            The minimum zoom percentage at which to show imported shape texts.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.TextMaxZoomPercent">
            <summary>
            The maximum zoom percentage at which to show imported shape texts.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.FillColumnName">
            <summary>
            The name of the DBF column to use for filling the shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.ColorCount">
            <summary>
            The number of color shades to fill the imported shapes with.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.BeginColor">
            <summary>
            The begin color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NEsriShapefileLoadSettings.EndColor">
            <summary>
            The end color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NDrawingFormat">
            <summary>
            The base of all NOV diagram drawing formats.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.LossySaving">
            <summary>
            Gets whether this drawing format may lead to loss of information when saving.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.Gedcom">
            <summary>
            Genealogical Data Communication (GEDCOM) data format. It is used for exchanging genealogical data
            between different genealogy software, for example, for family trees.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.Html">
            <summary>
            Represents the Web page (HTML) drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.RasterBmp">
            <summary>
            Represents the bitmap (BMP) drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.RasterPng">
            <summary>
            Represents the PNG drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.RasterJpeg">
            <summary>
            Represents the JPEG drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.RasterTiff">
            <summary>
            Represents the TIFF drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.VectorAutoCadDxf">
            <summary>
            Represents the AutoCAD Drawing Interchange (DXF) drawing format.
            </summary>
            <remarks>
            The AutoCAD Drawing Interchange (DXF) format does not have support for pages,
            so only the active page of the drawing document is exported.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.VectorEmf">
            <summary>
            Represents the EMF drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.VectorSvg">
            <summary>
            Represents the SVG drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.EsriShapefile">
            <summary>
            Represents the ESRI shapefile format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.NevronBinary">
            <summary>
            Represents the Nevron Binary Drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.NevronXml">
            <summary>
            Represents the Nevron XML drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.NevronXmlDrawingTemplate">
            <summary>
            Represents the Nevron XML drawing template format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.Pdf">
            <summary>
            Represents the Nevron PDF drawing format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.Visio">
            <summary>
            Represents the Visio drawing format (VSDX).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.Visio2003">
            <summary>
            Represents the Visio 2003-2010 drawing format (VSD).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormat.Visio2003Xml">
            <summary>
            Represents the Visio 2003-2010 XML drawing format (VDX).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NDrawingFormatRegistry">
            <summary>
            A document format registry for drawing formats - such as XML and Binary drawing formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingFormatRegistry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingFormatRegistry.DefaultFormatExtension">
            <summary>
            Gets the fallback format extension of this document format registry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingFormatRegistry.GetDocumentTypeName">
            <summary>
            Gets the document type name.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NDrawingFormatRegistry.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NDrawingLoadSettings">
            <summary>
            Settings for loading drawings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingLoadSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingLoadSettings.DrawingInfo">
            <summary>
            Gets the drawing info (thumbnail, description and library settings) for the loaded drawing.
            Automatically updated by Nevron after loading the drawing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings">
            <summary>
            Settings for saving drawings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings.#ctor(Nevron.Nov.Compression.ENCompressionLevel)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="compressionLevel"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings.#ctor(Nevron.Nov.Diagram.Formats.NLibrarySettings)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="librarySettings"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings.#ctor(Nevron.Nov.Compression.ENCompressionLevel,Nevron.Nov.Diagram.Formats.NLibrarySettings)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="compressionLevel"></param>
            <param name="librarySettings"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings.CompressionLevel">
            <summary>
            The compression level to use for saving. By default set to BestSpeed for drawings
            and BestCompression for drawing templates.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NDrawingSaveSettings.LibrarySettings">
            <summary>
            Gets/Sets the library settings to save for a drawing document.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NLibrarySettings">
            <summary>
            Contains settings for the libraries used in a Nevron Drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NLibrarySettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibrarySettings.OpenedLibraries">
            <summary>
            Gets/Sets the opened libraries.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NLibrarySettings.NLibrarySettingsSchema">
            <summary>
            Schema associated with NLibrarySettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NLibrarySettings.OpenedLibrariesChild">
            <summary>
            Reference to the OpenedLibraries child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NPredefinedShapeLibraryInfo">
            <summary>
            Stores information for a predefined shape library (shape factory).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NPredefinedShapeLibraryInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NPredefinedShapeLibraryInfo.#ctor(Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NPredefinedShapeLibraryInfo.Type">
            <summary>
            Gets/Sets the value of the Type property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NPredefinedShapeLibraryInfo.NPredefinedShapeLibraryInfoSchema">
            <summary>
            Schema associated with NPredefinedShapeLibraryInfo.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NPredefinedShapeLibraryInfo.TypeProperty">
            <summary>
            Reference to the Type property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NShapeLibraryInfo">
            <summary>
            Contains information about a shape library.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NShapeLibraryInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NShapeLibraryInfo.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NShapeLibraryInfo.ResourceName">
            <summary>
            Gets/Sets the resource name of this shape library info in Unix notation,
            i.e. with slash ('/') as directory separator character.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NShapeLibraryInfo.NShapeLibraryInfoSchema">
            <summary>
            Schema associated with NShapeLibraryInfo.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NShapeLibraryInfo.ResourceNameProperty">
            <summary>
            Reference to the ResourceName property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NShapeLibraryInfoCollection">
            <summary>
            A collection of shape library infos.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NShapeLibraryInfoCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NShapeLibraryInfoCollection.SelectedIndex">
            <summary>
            Gets/Sets the index of the selected library.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NShapeLibraryInfoCollection.NShapeLibraryInfoCollectionSchema">
            <summary>
            Schema associated with NShapeLibraryInfoCollection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NShapeLibraryInfoCollection.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NDrawingInfo">
            <summary>
            Holds information about a Nevron Diagram drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NDrawingInfo.#ctor(Nevron.Nov.Graphics.NImage,System.String,Nevron.Nov.Diagram.Formats.NLibrarySettings)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="thumbnail"></param>
            <param name="description"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingInfo.Thumbnail">
            <summary>
            Gets the drawing thumbnail.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingInfo.Description">
            <summary>
            Gets the drawing description.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NDrawingInfo.LibrarySettings">
            <summary>
            Gets the libraries settings for the drawing.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat">
            <summary>
            Base class for Nevron Diagram's native formats.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.PersistencyFormat">
            <summary>
            Gets the persistency format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.DocumentFileName">
            <summary>
            Gets the document file name in the package.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.LoadDrawingInfoFromFileAsync(Nevron.Nov.IO.NFile)">
            <summary>
            Loads only the drawing info (thumbnail, description and library settings) for the drawing stored in the specified file
            without loading the drawing document.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.LoadDrawingInfoFromStream(System.IO.Stream)">
            <summary>
            Loads only the drawing info (thumbnail, description and library settings) for the drawing stored in the specified stream
            without loading the drawing document.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.OnUse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="loadSettings"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingFormat.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="stream"></param>
            <param name="saveSettings"></param>
            <param name="progress"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingSaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingSaveSettings.#ctor(Nevron.Nov.Compression.ENCompressionLevel)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="compressionLevel"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingSaveSettings.#ctor(Nevron.Nov.Diagram.Formats.NLibrarySettings)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="librarySettings"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NNevronDrawingSaveSettings.#ctor(Nevron.Nov.Compression.ENCompressionLevel,Nevron.Nov.Diagram.Formats.NLibrarySettings)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="compressionLevel"></param>
            <param name="librarySettings"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NNevronDrawingSaveSettings.SerializeObjectProperties">
            <summary>
            Determines whether to serialize object properties or not. By default set to true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.Visio.ENVisioPrintPageOrientation">
            <summary>
            Enumerates the Visio print page orientations.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.Visio.ENVisioPrintPageOrientation.SameAsPrinter">
            <summary>
            Same as printer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.Visio.ENVisioPrintPageOrientation.Portrait">
            <summary>
            Portrait.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.Visio.ENVisioPrintPageOrientation.Landscape">
            <summary>
            Landscape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.Visio.NVisioDrawingSaveSettings">
            <summary>
            Contains a set of settings to use when saving a Visio Drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.Visio.NVisioDrawingSaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.Visio.NVisioDrawingSaveSettings.EmbedPreview">
            <summary>
            Gets/Sets whether to embed a preview (in EMF format) of the document in the generated
            Visio package. By default set to true.
            </summary>
            <remarks>
            If you are after maximum performance, set this property to false to instruct the Visio Exporter
            not to generate and embed a preview of the document in the generated Visio package.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.Visio.NVisioDrawingSaveSettings.TableProtections">
            <summary>
            Gets/Sets the protections to apply to the Visio shapes created for a NOV table block.
            By default set to move, resize, rotate, delete, ungroup, geometry and trackers edit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NLibraryFormat">
            <summary>
            The base of all library formats.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibraryFormat.NevronBinary">
            <summary>
            Represents the Nevron Binary library format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibraryFormat.NevronXml">
            <summary>
            Represents the Nevron XML library format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibraryFormat.Visio2003">
            <summary>
            Represents the Visio 2003-2010 Stencil format (VSS).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibraryFormat.Visio2003Xml">
            <summary>
            Represents the Visio 2003-2010 XML Stencil format (VSX).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibraryFormat.Visio">
            <summary>
            Represents the Visio Stencil format (VSSX).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NLibraryFormatRegistry">
            <summary>
            A document format registry for Library Formats - such as XML and Binary library formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NLibraryFormatRegistry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Formats.NLibraryFormatRegistry.DefaultFormatExtension">
            <summary>
            Gets the fallback format extension of document format registry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NLibraryFormatRegistry.GetDocumentTypeName">
            <summary>
            Gets the document type name.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NLibraryFormatRegistry.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NLibraryLoadSettings">
            <summary>
            This class holds the settings that are used when loading documents in different library formats.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Formats.NLibrarySaveSettings">
            <summary>
            This class holds the settings that are used when saving documents to different library formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NLibrarySaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Formats.NLibrarySaveSettings.#ctor(Nevron.Nov.Compression.ENCompressionLevel)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="compressionLevel"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Formats.NLibrarySaveSettings.CompressionLevel">
            <summary>
            The compression level to use for saving. By default set to best compression.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor">
            <summary>
            Represents the property editor for the shape translation slaves property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor.PopulateStackPanel(Nevron.Nov.UI.NStackPanel,Nevron.Nov.DataStructures.NList{Nevron.Nov.Editors.NEditor})">
            <summary>
            Populates the stack panel of the editor.
            </summary>
            <param name="stackPanel"></param>
            <param name="editors"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor.AttachToEditedNode">
            <summary>
            Hooks the editor to the current edited node's events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor.DetachFromEditedNode">
            <summary>
            Unhooks the editor from the current edited node's events.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor.NPageDrawingScaleCategoryEditorSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NPageDrawingScaleCategoryEditor.DefaultTemplate">
            <summary>
            The default editor template.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NShapeMoveSlavesPropertyEditor">
            <summary>
            Represents the property editor for the shape translation slaves property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NShapeMoveSlavesPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NShapeMoveSlavesPropertyEditor.CreateControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NShapeMoveSlavesPropertyEditor.OnUpdateFromEditedNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NShapeMoveSlavesPropertyEditor.NShapeMoveSlavesPropertyEditorSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NShapeMoveSlavesPropertyEditor.DefaultTemplate">
            <summary>
            The default editor template.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NSelectFileOrUrlPropertyEditor">
            <summary>
            Selects a File or an URL.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectFileOrUrlPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectFileOrUrlPropertyEditor.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectFileOrUrlPropertyEditor.AttachToEditedNode">
            <summary>
            Hooks the editor to the current edited node's events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectFileOrUrlPropertyEditor.DetachFromEditedNode">
            <summary>
            Unhooks the editor from the current edited node's events.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectFileOrUrlPropertyEditor.NSelectFileOrUrlPropertyEditorSchema">
            <summary>
            Schema associated with NSelectFileOrUrlPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NSelectPagePropertyEditor">
            <summary>
            A property editor for selecting a page from a drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPagePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPagePropertyEditor.GetOptions">
            <summary>
            Gets the list of pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPagePropertyEditor.GetWidgetForOption(Nevron.Nov.Dom.NNodeRef)">
            <summary>
            Gets a widget for the given page.
            </summary>
            <param name="pageRef"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectPagePropertyEditor.NSelectPagePropertyEditorSchema">
            <summary>
            Schema associated with NSelectPagePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectPagePropertyEditor.DefaultTemplate">
            <summary>
            The default template of the Select Page property editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NSelectBookmarkPropertyEditor">
            <summary>
            A property editor for selecting a bookmark from a page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectBookmarkPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectBookmarkPropertyEditor.GetItemsForPage(Nevron.Nov.Diagram.NPage)">
            <summary>
            Gets the bookmarks of the given page.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectBookmarkPropertyEditor.NSelectBookmarkPropertyEditorSchema">
            <summary>
            Schema associated with NSelectBookmarkPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectBookmarkPropertyEditor.DefaultTemplate">
            <summary>
            The default select bookmark property editor template.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1">
            <summary>
            Base class for selecting page items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.GetItemsForPage(Nevron.Nov.Diagram.NPage)">
            <summary>
            Gets the items for the given page.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.GetTextForItem(`0)">
            <summary>
            Gets the text for the given page item.
            </summary>
            <param name="pageItem"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.GetOptions">
            <summary>
            Gets the list of pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.GetWidgetForOption(Nevron.Nov.Dom.NNodeRef)">
            <summary>
            Gets a widget for the given shape.
            </summary>
            <param name="shapeRef"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.AttachToEditedNode">
            <summary>
            Hooks the editor to the current edited node's events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.DetachFromEditedNode">
            <summary>
            Unhooks the editor from the current edited node's events.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectPageItemPropertyEditor`1.NSelectPageItemPropertyEditorSchema">
            <summary>
            Schema associated with NSelectPageItemPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Editors.NSelectShapePropertyEditor">
            <summary>
            A property editor for selecting a shape from a page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectShapePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Editors.NSelectShapePropertyEditor.GetItemsForPage(Nevron.Nov.Diagram.NPage)">
            <summary>
            Gets the shapes of the given page.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectShapePropertyEditor.NSelectShapePropertyEditorSchema">
            <summary>
            Schema associated with NSelectShapePropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Editors.NSelectShapePropertyEditor.DefaultTemplate">
            <summary>
            The default template of the Select Shape property editor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NControlGlueFx">
            <summary>
            An expression that is applied to the X and Y properties of a shape control point.
            This type of expression works in collaboration with the Glue object of the control point.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NControlGlueFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NControlGlueFx.#ctor(Nevron.Nov.Diagram.Expressions.NControlGlueFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NControlGlueFx.AppliedToX">
            <summary>
            Returns true, if the fx is applied to the X property of the port.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NControlGlueFx.AppliedToY">
            <summary>
            Returns true, if the fx is applied to the Y property of the port.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NControlGlueFx.Target">
            <summary>
            The target control point to which the fx is applied
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NControlGlueFx.Glue">
            <summary>
            Gets the control glue of the target control that manages this expression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NControlGlueFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NControlGlueFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx">
            <summary>
            An expression that is applied to the BeginX, BeginY, EndX and EndY properties of a shape.
            This type of expression works in collaboration with the BeginGlue/EndGlue objects of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.#ctor(Nevron.Nov.Diagram.Expressions.NEndPointGlueFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.AppliedToX">
            <summary>
            Returns true, if the fx is applied to the BeginX or EndX property of the shape.
            Returns false, if the fx is applied to the BeginY or EndY property of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.AppliedToBegin">
            <summary>
            Returns true, if the fx is applied to the BeginX or BeginY property of the shape.
            Returns false, if the fx is applied to the EndX or EndY property of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.TargetShape">
            <summary>
            The target shape to which the fx is applied
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.Glue">
            <summary>
            Gets the end point glue of the target shape that manages this expression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NEndPointGlueFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx">
            <summary>
            An expression that is applied to the PinX, PinY and Angle properties of a text block.
            This type of expression works in collaboration with the ImageBlockGlue object of the text block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx.#ctor(Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx.Glue">
            <summary>
            Gets the end point glue of the target text block that manages this expression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NImageBlockGlueFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NMasterGlueFx">
            <summary>
            An expression that is applied to the PinX, PinY and Angle properties of a shape.
            This type of expression works in collaboration with the MasterGlue object of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.#ctor(Nevron.Nov.Diagram.Expressions.NMasterGlueFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.AppliedToPinX">
            <summary>
            Returns true, if the fx is applied to the PinX property of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.AppliedToPinY">
            <summary>
            Returns true, if the fx is applied to the PinY property of the shape
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.AppliedToAngle">
            <summary>
            Returns true, if the fx is applied to the Angle property of the shape
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.TargetShape">
            <summary>
            The target shape to which the fx is applied
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.MasterGlue">
            <summary>
            Gets the end point glue of the target shape that manages this expression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NMasterGlueFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NPortGlueFx">
            <summary>
            An expression that is applied to the X, Y, DirX and DirY properties of a shape port.
            This type of expression works in collaboration with the Glue object of the port.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NPortGlueFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NPortGlueFx.#ctor(Nevron.Nov.Diagram.Expressions.NPortGlueFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NPortGlueFx.AppliedToX">
            <summary>
            Returns true, if the fx is applied to the X property of the port.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NPortGlueFx.AppliedToY">
            <summary>
            Returns true, if the fx is applied to the Y property of the port.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NPortGlueFx.AppliedToDirX">
            <summary>
            Returns true, if the fx is applied to the DirX property of the port.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NPortGlueFx.AppliedToDirY">
            <summary>
            Returns true, if the fx is applied to the DirY property of the port.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NPortGlueFx.TargetPort">
            <summary>
            The target control point to which the fx is applied
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NPortGlueFx.Glue">
            <summary>
            Gets the port glue of the target port that manages this expression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NPortGlueFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NPortGlueFx.ToString">
            <summary>
            Overriden to return a human readable description of the expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1">
            <summary>
            An expression that is applied to the PinX, PinY and Angle properties of a shape block.
            Serves as base class for NImageBlockGlueFx and NTextBlockGlueFx.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1.#ctor(Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1.AppliedToPinX">
            <summary>
            Returns true, if the fx is applied to the PinX property of the text block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1.AppliedToPinY">
            <summary>
            Returns true, if the fx is applied to the PinY property of the text block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1.AppliedToAngle">
            <summary>
            Returns true, if the fx is applied to the Angle property of the text block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeBlockGlueFx`1.Target">
            <summary>
            The target text block to which the fx is applied
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx">
            <summary>
            An expression that is applied to the PinX, PinY and Angle properties of a text block.
            This type of expression works in collaboration with the TextBlockGlue object of the text block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx.#ctor(Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx.Glue">
            <summary>
            Gets the end point glue of the target text block that manages this expression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NTextBlockGlueFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx">
            <summary>
            NCompositeHeightFactorFx
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.#ctor(System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.#ctor(Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.Factor">
            <summary>
            Gets or sets the factor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NGroupHeightFactorFx.s_Factor">
            <summary>
            The factor name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx">
            <summary>
            NGroupWidthFactorFx.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.#ctor(Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.Factor">
            <summary>
            Gets or sets the factor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.ToString">
            <summary>
            Gets the string representation of this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NGroupWidthFactorFx.s_Factor">
            <summary>
            The factor name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx">
            <summary>
            NResizeInGroupFx.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.#ctor(Nevron.Nov.Diagram.Expressions.NResizeInGroupFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.Factor1">
            <summary>
            Gets the first factor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.Factor2">
            <summary>
            Gets the second factor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.ToString">
            <summary>
            Gets the string representation of this expression.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.s_Factor1">
            <summary>
            The factor 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NResizeInGroupFx.s_Factor2">
            <summary>
            The factor 2.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeEndPointsAngleFx">
            <summary>
            An expression that calculates the angle that the line 
            connecting the Begin and End points of a shape forms with the X axis (e.g. =ATAN2(EndY-BeginY,EndX-BeginX)).
            This expression is commonly used as Angle of 1D shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsAngleFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsAngleFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeEndPointsAngleFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsAngleFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsAngleFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDistanceFx">
            <summary>
            An expression that calculates the length of the line 
            connecting the Begin and End points of a shape (e.g. =SQRT((EndX-BeginX)^2+(EndY-BeginY)^2)).
            This expression is commonly used as Width of 1DShapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDistanceFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDistanceFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeEndPointsDistanceFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDistanceFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDistanceFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleXFx">
            <summary>
            An expression that calculates middle X coordinate of the line 
            connecting the Begin and End points of a shape (e.g. (BeginX + EndX) / 2).
            This expression is commonly used as PinX location of 1DShapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleXFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleXFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleXFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleXFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleXFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleYFx">
            <summary>
            An expression that calculates middle Y coordinate of the line 
            connecting the Begin and End points of a shape (e.g. (BeginY + EndY) / 2).
            This expression is commonly used as PinY location of 1DShapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleYFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleYFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleYFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleYFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsMiddleYFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx">
            <summary>
            An expression that calculates the difference between the the shape BeginX and EndX values.
            This expression is commonly used as Width of 1DShapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="absolute"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.Absolute">
            <summary>
            Whether the delta is measured by its absolute value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaXFx.s_Absolute">
            <summary>
            Absolute name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx">
            <summary>
            An expression that calculates the difference between the the shape EndY and BeginY values.
            This expression is commonly used as Width of 1DShapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="absolute"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.Absolute">
            <summary>
            Whether the delta is measured by its absolute value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NShapeEndPointsDeltaYFx.s_Absolute">
            <summary>
            Absolute name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx">
            <summary>
            NShapeHeightFactorExpression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.Factor">
            <summary>
            Gets the factor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NShapeHeightFactorFx.s_Factor">
            <summary>
            The factor constant.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx">
            <summary>
            NShapeWidthFactorExpression
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.#ctor(Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.Factor">
            <summary>
            Gets the factor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.DeepClone(Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Creates an exact replica of this object.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Expressions.NShapeWidthFactorFx.s_Factor">
            <summary>
            The factor constant.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramFilters">
            <summary>
            A static class that contains some commonly used diagram filters.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.InwardPort">
            <summary>
            Filters inward ports
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.OutwardPort">
            <summary>
            Filters outward ports
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.InputPort">
            <summary>
            Filter for input ports
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.OutputPort">
            <summary>
            Filter for output ports
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionSelect">
            <summary>
            Permissions filter for Select operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionTrackersEdit">
            <summary>
            Permissions filter for TrackersEdit operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionContextMenuEdit">
            <summary>
            Permissions filter for ContextMenuEdit operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionInplaceEdit">
            <summary>
            Permissions filter for InplaceEdit operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionFormat">
            <summary>
            Permissions filter for ChangeStyle operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionMoveX">
            <summary>
            Permissions filter for MoveX operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionMoveY">
            <summary>
            Permissions filter for MoveY operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionResizeX">
            <summary>
            Permissions filter for Width operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionResizeY">
            <summary>
            Permissions filter for Height operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionChangeAspectRatio">
            <summary>
            Permissions filter for AspectRatio operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionRotate">
            <summary>
            Permissions filter for Rotate operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionDelete">
            <summary>
            Permissions filter for Delete operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionUngroup">
            <summary>
            Permissions filter for Ungroup operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionChangeBeginPoint">
            <summary>
            Permissions filter for BeginPoint operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionChangeEndPoint">
            <summary>
            Permissions filter for EndPoint operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionPrint">
            <summary>
            Permissions filter for Print operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.PermissionUpdateBounds">
            <summary>
            Permissions filter for UpdateBounds operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.TableFormatFilter">
            <summary>
            Permissions filter for ChangeStyle operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.IsSelectedFilter">
            <summary>
            Filters diagram items by their IsSelected property value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeType2D">
            <summary>
            Filter for shapes, whose ShapeType is 2D.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeType1D">
            <summary>
            Filter for shapes, whose ShapeType is 1D.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeRoutableConnector">
            <summary>
            Filter for NRoutableConnector shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeConnector">
            <summary>
            Filter for 1D shapes, whose UserClass is set to "Connector".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeFamilyTree">
            <summary>
            Filter for family tree shapes - <see cref="T:Nevron.Nov.Diagram.NPersonShape"/> and <see cref="T:Nevron.Nov.Diagram.NFamilyShape"/>.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapePerson">
            <summary>
            Filter for <see cref="T:Nevron.Nov.Diagram.NPersonShape"/> shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeGraphEdge">
            <summary>
            Filter for 1D shapes, whose GraphPart property is set to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramFilters.ShapeGraphVertex">
            <summary>
            Filter for 2D shapes, whose GraphPart property is set to true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramItemIsSelectedFilter">
            <summary>
            Filters shapes nodes with the specified type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemIsSelectedFilter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemIsSelectedFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Returns true if the shape.ShapeType matches the target ShapeType.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemIsSelectedFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the node is a shape and its ShapeType matches the target ShapeType.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemIsSelectedFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Returns true if the item is a shape and its ShapeType matches the target ShapeType.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemIsSelectedFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Returns true if the item is a shape and its ShapeType matches the target ShapeType.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramItemPermissionsFilter">
            <summary>
            Filters diagram items by their permissions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemPermissionsFilter.#ctor(Nevron.Nov.Diagram.ENDiagramItemOperationMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemPermissionsFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to return true if the diagram item has the required permissions
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemPermissionsFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Overriden to return true if the diagram item has the required permissions
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemPermissionsFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Overriden to return true if the page item has the required permissions
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItemPermissionsFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Overriden to return true if the page item has the required permissions
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortFlowModeFilter">
            <summary>
            Filters ports by their flow mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortFlowModeFilter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="input">whether to filter input ports</param>
            <param name="output">whether to filter output ports</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortFlowModeFilter.Filter(Nevron.Nov.Diagram.NPort)">
            <summary>
            Overriden to return true if the Port Type matches the filter criteria
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortFlowModeFilter.Input">
            <summary>
            Whether to pass input ports
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortFlowModeFilter.Output">
            <summary>
            Whether to pass output ports
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortGlueModeFilter">
            <summary>
            Filters ports by their glue mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueModeFilter.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="inward">whether to filter inward ports</param>
            <param name="outward">whether to filter outward ports</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueModeFilter.Filter(Nevron.Nov.Diagram.NPort)">
            <summary>
            Overriden to return true if the Port Type matches the filter criteria
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueModeFilter.Inward">
            <summary>
            Whether to pass inward ports
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueModeFilter.Outward">
            <summary>
            Whether to pass outward ports
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeGraphPartTypeFilter">
            <summary>
            Filters NShape instances that be considered as valid graph vertices or edges.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeGraphPartTypeFilter.#ctor(Nevron.Nov.DataStructures.ENGraphPartType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="graphPartType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeGraphPartTypeFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Return true if the shape GraphPart property is true, and is respectively a vertex or edge.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeNameFilter">
            <summary>
            A filter that filters shapes by name.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeNameFilter.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeNameFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Returns true if the <see cref="P:Nevron.Nov.Diagram.NDiagramItem.Name"/> of the shape is equal to the name passed to the constructor of this class.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeNameFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the node is a shape and its <see cref="P:Nevron.Nov.Diagram.NDiagramItem.Name"/> is equal to the name passed to the constructor of this class.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeNameFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Returns true if the item is a shape and its <see cref="P:Nevron.Nov.Diagram.NDiagramItem.Name"/> is equal to the name passed to the constructor of this class.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeNameFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Returns true if the item is a shape and its <see cref="P:Nevron.Nov.Diagram.NDiagramItem.Name"/> is equal to the name passed to the constructor of this class.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeTextFilter">
            <summary>
            A filter that filters shapes by text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTextFilter.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTextFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Returns true if the <see cref="P:Nevron.Nov.Diagram.NShape.Text"/> of the shape is equal to the text passed to the constructor of this class.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTextFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the node is a shape and its <see cref="P:Nevron.Nov.Diagram.NShape.Text"/> is equal to the text passed to the constructor of this class.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTextFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Returns true if the item is a shape and its <see cref="P:Nevron.Nov.Diagram.NShape.Text"/> is equal to the text passed to the constructor of this class.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTextFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Returns true if the item is a shape and its <see cref="P:Nevron.Nov.Diagram.NShape.Text"/> is equal to the text passed to the constructor of this class.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeTypeFilter">
            <summary>
            Filters shapes nodes with the specified type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTypeFilter.#ctor(Nevron.Nov.Diagram.ENShapeType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shapeType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTypeFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Returns true if the shape.ShapeType matches the target ShapeType.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTypeFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the node is a shape and its ShapeType matches the target ShapeType.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTypeFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Returns true if the item is a shape and its ShapeType matches the target ShapeType.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeTypeFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Returns true if the item is a shape and its ShapeType matches the target ShapeType.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSkipConnected1DShapesFilter">
            <summary>
            Skips the connected 1D shapes filter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSkipConnected1DShapesFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Filters out the 1D shapes whose begin-point and/or end-point is connected
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableBlockPermissionsFilter">
            <summary>
            Filters diagram items by their permissions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockPermissionsFilter.#ctor(Nevron.Nov.Diagram.ENDiagramItemOperationMask)">
            <summary>
            Initializer constructor
            </summary>
            <param name="permissions"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockPermissionsFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to return true if the diagram item has the required permissions
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockPermissionsFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Overriden to return true if the diagram item has the required permissions
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockPermissionsFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Overriden to return true if the page item has the required permissions
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockPermissionsFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Overriden to return true if the page item has the required permissions
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUserClassFilter">
            <summary>
            User class filter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserClassFilter.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="userClass"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserClassFilter.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Returns true if the UserClass of the shape is equal to the UserClass
            passed to the constructor of this class.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserClassFilter.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the node is a shape and its UserClass is equal to the UserClass
            passed to the constructor of this class.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserClassFilter.Filter(Nevron.Nov.Diagram.NPageItem)">
            <summary>
            Returns true if the item is a shape and its UserClass is equal to the UserClass
            passed to the constructor of this class.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserClassFilter.Filter(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Returns true if the item is a shape and its UserClass is equal to the UserClass
            passed to the constructor of this class.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramHelpers">
            <summary>
            Contains functions that are commonly used in different diagram places.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramHelpers.ShowPropertiesEditor(Nevron.Nov.UI.NWindow,Nevron.Nov.Dom.NDocumentNode,System.Boolean,System.String)">
            <summary>
            Shows the instance editor of the specified diagram node
            </summary>
            <param name="ownerWindow"></param>
            <param name="node"></param>
            <param name="stateEditor"></param>
            <param name="transactionDesc"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramHelpers.ShowPropertiesEditor(Nevron.Nov.UI.NWindow,Nevron.Nov.Dom.NDocumentNode,Nevron.Nov.Editors.NDesigner,System.Boolean,System.String)">
            <summary>
            Shows the instance editor of the specified diagram node.
            </summary>
            <param name="ownerWindow"></param>
            <param name="node"></param>
            <param name="designer"></param>
            <param name="stateEditor"></param>
            <param name="transactionDesc"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMoveItemsImpl">
            <summary>
            A drawing drag tool that moves the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.#ctor(Nevron.Nov.Function,Nevron.Nov.Function)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveItemsImpl.MoveStarted">
            <summary>
            Gets whether the move has started
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveItemsImpl.CanMoveX">
            <summary>
            Determines whether the move preview can be moved in the X direction.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveItemsImpl.CanMoveY">
            <summary>
            Determines whether the move preview can be moved in the Y direction.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.StartMove(Nevron.Nov.Diagram.NDrawingView,System.Double,System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Starts the moving operation
            </summary>
            <param name="drawingView"></param>
            <param name="startMoveDistance"></param>
            <param name="keep1DShapesConnected"></param>
            <param name="startScreenPos"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.Move(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Performs a move of the selected items to the specified position (in drawing view coordinates)
            </summary>
            <param name="curPos"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.EndMove">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.AbortMove">
            <summary>
            Called when the tool was aborted. Raises the Aborted event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.MoveSelectedItems(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Boolean)">
            <summary>
            Moves the preview of the selected items to the position specified by dragPos.
            If preview is not created, it is created if the mustCreatePreview is true, or the mouse has moved a certain amount from the tool activation position.
            Finally if the preview is created, it is started with the location specified by startPos parameter.
            </summary>
            <param name="dragPos">position to move preview to (in page coordinates)</param>
            <param name="startPos">position to start preview from (in page coordinates)</param>
            <param name="mustCreatePreview"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.StartDragAndDrop">
            <summary>
            Starts drag and drop.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.OnDragEnded(Nevron.Nov.UI.NDragEndedEventArgs)">
            <summary>
            
            </summary>
            <param name="dragEndedArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.OnQueryDragAction(Nevron.Nov.UI.NQueryDragActionEventArgs)">
            <summary>
            
            </summary>
            <param name="queryDragActionArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveItemsImpl.HasHitSelectedItem(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Checks to see whether there is a hit selected item.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveItemsImpl.NMoveToolSchema">
            <summary>
            Schema associated with NMoveTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveItemsImpl.StartMoveDistanceProperty">
            <summary>
            Reference to the StartMoveDistance property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveItemsImpl.Keep1DShapesConnectedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphEdgeBody">
            <summary>
            The NGraphEdgeBody class is a 1D body, 
            which serves as base class for all bodies assigned to graph edges
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphEdgeBody.FromBody">
            <summary>
            Gets the 2D body from which the 1D body starts
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphEdgeBody.ToBody">
            <summary>
            Gets the end point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBody.Edge">
            <summary>
            A reference to the edge to which the body belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase">
            <summary>
            Base class for graph edge bodies.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.StartPoint">
            <summary>
            Gets the start point (position of the FromPlug)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.EndPoint">
            <summary>
            Gets the end point (position of the ToPlug)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.StartPointAnchor">
            <summary>
            Gets the start point anchoring point at the respective FromPlugAnchor side of the FromBody.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.EndPointAnchor">
            <summary>
            Gets the end point anchoring point at the respective EndPlugAnchor side of the ToBody.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.CompareTo(Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase)">
            <summary>
            Returns -1 if this edge must be on an upper bus than the given one or 1 if
            it must be on a lower bus. Value of 0 means that the edges do not intersect.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.Translate(System.Double,System.Double)">
            <summary>
            Translates the body
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.FlipX">
            <summary>
            Flips the X coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.FlipY">
            <summary>
            Flips the Y coordinates of body
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.Rotate(Nevron.Nov.Layout.ENLayoutRotation)">
            <summary>
            Rotates the body
            </summary>
            <param name="rotation"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.GetBounds">
            <summary>
            Gets the bounds of the body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.ToString">
            <summary>
            Retusrns a string that represents the current body
            </summary>
            <returns>A string that represents the current body</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.GetLines">
            <summary>
            Returns the line segments building the current 1D body.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.FromPlugAnchor">
            <summary>
            Preffered From plug anchor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.ToPlugAnchor">
            <summary>
            Preffered To plug anchor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.StartPlugOffset">
            <summary>
            Offset of the start plug location from the anchor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.EndPlugOffset">
            <summary>
            Offset of the end plug location from anchor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.RoutingStyle">
            <summary>
            Preffered routing style 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase.MidPoints">
            <summary>
            Optional mid points in case routing style is set to Orthogonal or Polyline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphVertexBody">
            <summary>
            The NGraphVertexBody class is a 2D body, 
            which serves as base class for all bodies assigned to graph vertices.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphVertexBody.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphVertexBody.ToString">
            <summary>
            Returns a string that represents the current body.
            </summary>
            <returns>A string that represents the current body.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphVertexBody.GetEdgeBodies(Nevron.Nov.Diagram.Layout.ENPlugAnchor)">
            <summary>
            Gets the edges that are pluged at the specified plug anchor.
            </summary>
            <param name="plugAnchor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphVertexBody.Vertex">
            <summary>
            A reference to the vertex to which the body belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphVertexBodyBase">
            <summary>
            Base class for graph vertex bodies.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphVertexBodyBase.ToString">
            <summary>
            Returns a string that represents the current body.
            </summary>
            <returns>A string that represents the current body.</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NTreeEdgeBody">
            <summary>
            The NTreeEdgeBody class is a 1D body, 
            which serves as base class for all bodies assigned to tree edges
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeEdgeBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTreeEdgeBody.FromBody">
            <summary>
            Gets the 2D body from which the 1D body starts
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTreeEdgeBody.ToBody">
            <summary>
            Gets the 2D body at which the 1D body end
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTreeEdgeBody.Edge">
            <summary>
            A reference to the edge to which the body belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NTreeVertexBody">
            <summary>
            The NTreeVertexBody class is a 2D body, 
            which serves as base class for all bodies assigned to tree vertices
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeVertexBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeVertexBody.TranslateSubTree(System.Double,System.Double)">
            <summary>
            Translates the vertex subtree
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeVertexBody.GetSubTreeBounds(System.Boolean)">
            <summary>
            Obtains the vertex subtree bounds
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeVertexBody.GetChildrenBounds">
            <summary>
            Obtains the bounds vertex children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeVertexBody.GetChildrenTop">
            <summary>
            Gets the topmost coordinate of the childrens bounds
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTreeVertexBody.Vertex">
            <summary>
            A reference to the vertex to which the body belongs
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NBodyContainerAdapter">
            <summary>
            The NBodyContainerAdapter abstract class is used to abstract layouts 
            from the actual container, in which the bodies are layed out
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBodyContainerAdapter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBodyContainerAdapter.GetLayoutArea">
            <summary>
            Gets the container layout area
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBodyContainerAdapter.StartObjectsUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the start of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBodyContainerAdapter.EndObjectsUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the end of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NDrawingLayoutContext">
            <summary>
            A layout context that is used in the context of NOV diagram.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates a layout context that is configured to arrange the shapes in the specified area.
            </summary>
            <param name="document"></param>
            <param name="layoutArea"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Nov.Diagram.NPage)">
            <summary>
            Creates a layout context that is configured to arrange the shapes of the specified page.
            The layout area is initialized to be the page content edge.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Diagram.NPage)">
            <summary>
            Creates a layout context that is configured to arrange the shapes of the specified page.
            The layout area is initialized to be the page content edge.
            </summary>
            <param name="document"></param>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Diagram.NGroup)">
            <summary>
            Creates a layout context that is configured to arrange the shapes of the specified group.
            The layout area is initialized to be the page group bounds.
            </summary>
            <param name="document"></param>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDrawingLayoutContext.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NShape})">
            <summary>
            Creates a layout context that is configured to arrange the given list of shapes.
            The layout area is initialized to be the bounds of the given shapes.
            </summary>
            <param name="document"></param>
            <param name="shapes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter">
            <summary>
            The NShapeBodyAdapter represents an object body adapter,
            which provides layouts with the ability to adapt shapes to bodies and vise-versa.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.#ctor(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="drawingDocument">drawing document, to which the shapes belong</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.#ctor(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Diagram.NGroup)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="drawingDocument">drawing document, to which the shapes belong</param>
            <param name="group"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.DrawingDocument">
            <summary>
            Gets the drawing document in the layout of which the operation takes place
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.StartBodiesUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the start of a bodies update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.UpdateBody2DFromObject(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Reads the shape of a 2D body.
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.UpdateBody1DFromObject(System.Object,Nevron.Nov.Layout.NBody1D)">
            <summary>
            Reads the shape of a 1D body.
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.StartObjectsUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the start of an objects update session
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.UpdateObjectFromBody2D(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Reads the shape of a 2D body.
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.UpdateObjectFromBody1D(System.Object,Nevron.Nov.Layout.NBody1D)">
            <summary>
            Reads the shape of a 1D body.
            </summary>
            <param name="obj"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.EndObjectsUpdate(Nevron.Nov.Layout.NLayout)">
            <summary>
            Called by layouts to mark the end of a bodies update session.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.TryGetBody1DProperty(System.Object,System.Int32,System.Object@)">
            <summary>
            Tries to get a body 1D property for the specified object.
            </summary>
            <param name="obj"></param>
            <param name="propertyKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeBodyAdapter.TryGetBody2DProperty(System.Object,System.Int32,System.Object@)">
            <summary>
            Tries to get a body 2D property for the specified object.
            </summary>
            <param name="obj"></param>
            <param name="propertyKey"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter">
            <summary>
            The NShapeGraphAdapter is used to adapt shapes and shapes connections as graph relations
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.#ctor">
            <summary>
            Creates a shape graph adapter that is not isolated for a specific set of shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.#ctor(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Creates a shape graph adapter, which creates graphs for the shapes of the specified group.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.#ctor(Nevron.Nov.Diagram.NPage)">
            <summary>
            Creates a shape graph adapter, which creates graphs for the shapes of the specified page.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.#ctor(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NShape})">
            <summary>
            Creates a shape graph adapter which creates graphs for the shapes in the specified node list.
            </summary>
            <param name="shapes"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.EdgeOrder">
            <summary>
            Specifies the sorting order of the edges. By default set to Id.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.CustomEdgeComparer">
            <summary>
            Gets or sets the custom edge comparer. Applicable when EdgeOrder is set to Custom.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.ShapeSet">
            <summary>
            Specifies the set of shapes, which are explictly specified for graph adaption.
            All shapes that are not contained in this set are ignored. 
            If this property is set to null (the default), all shapes can potentially generate graph vertices and edges.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.VisibleOnly">
            <summary>
            Specifies whether only visible shapes should be adapted as graph parts.
            If set to true invisible shapes are ignored.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.GetType(System.Object)">
            <summary>
            Gets the graph part type the given object represents (in case it is a graph part).
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.GetEdgeSource(System.Object)">
            <summary>
            For an edge object, returns its source.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.GetEdgeDestination(System.Object)">
            <summary>
            For an edge object, returns its destination.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.GetIncomingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its incomming edges.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.GetOutgoingEdges(System.Object)">
            <summary>
            For a vertex object, returns a list of its outgoing edges.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NShapeGraphAdapter.SortEdges(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NShape})">
            <summary>
            Sorts the specified list of edges.
            </summary>
            <param name="edges"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENEdgeOrder">
            <summary>
            Enumerates the edge sort order which is used to sort 
            the edges of a shape graph adapter.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENEdgeOrder.Id">
            <summary>
            Edges are ordered by increasing Ids
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENEdgeOrder.None">
            <summary>
            Edges are not ordered - the default order is used
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENEdgeOrder.Custom">
            <summary>
            Edges are sorted with a custom comparer
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection">
            <summary>
            Defines the possible types of magnetic field directions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.PolarOutward">
            <summary>
            The magnetic field radiates from the origin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.PolarInward">
            <summary>
            The magnetic field radiates towards the origin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.ConcentricClockwise">
            <summary>
            The magnetic field circulates around the origin in 
            a clockwise direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.ConcentricCounterClockwise">
            <summary>
            The magnetic field circulates around the origin in 
            a counter clockwise direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.ParallelRightward">
            <summary>
            The magnetic field is parallel and flows from left to right
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.ParallelLeftward">
            <summary>
            The magnetic field is parallel and flows from right to left
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.ParallelDownward">
            <summary>
            The magnetic field is parallel and flows from top to bottom
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.ParallelUpward">
            <summary>
            The magnetic field is parallel and flows from bottom to top
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.OrthogonalLeftwardDownward">
            <summary>
            The magnetic field is orthogonal with leftward - downward direction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.OrthogonalLeftwardUpward">
            <summary>
            The magnetic field is orthogonal with leftward - upward direction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.OrthogonalRightwardDownward">
            <summary>
            The magnetic field is orthogonal with rightward - downward direction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagneticFieldDirection.OrthogonalRightwardUpward">
            <summary>
            The magnetic field is orthogonal with rightward - upward direction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENMagnetizationType">
            <summary>
            Defines the ways in which a force directed edge body can be magnetized
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagnetizationType.None">
            <summary>
            The body is not magnetized
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagnetizationType.Unidirectional">
            <summary>
            The body is magnetized and tends to align with the magnetic field 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENMagnetizationType.Bidirectional">
            <summary>
            The body is magnetized and tends to align with the magnetic field in either direction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENSpringForceLaw">
            <summary>
            Defines the way, in which the spring force is affected by its natural and current length
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENSpringForceLaw.Logarithmic">
            <summary>
            Spring force is proportional to Log(curLength / naturalLength)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENSpringForceLaw.HookeLaw">
            <summary>
            Spring force is proportional to (curLength - naturalLength)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENFreeVertexPlacementMode">
            <summary>
            Defines the ways, in which the free vertices can be initially placed by a force directed layout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFreeVertexPlacementMode.Original">
            <summary>
            The layouts starts with the original free vertex positions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFreeVertexPlacementMode.Random">
            <summary>
            The layouts starts with randomly chosen positions for the free vertices
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFreeVertexPlacementMode.Zero">
            <summary>
            The layouts starts with all free vertices placed at (0,0) coordinates
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFreeVertexPlacementMode.FixedBarycenter">
            <summary>
            The layouts starts with all free vertices placed at the barycenter of the fixed vertices
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENFixedVertexPlacementMode">
            <summary>
            Defines the ways, in which the fixed vertices can be initially placed by a force directed layout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFixedVertexPlacementMode.Original">
            <summary>
            The layouts starts with the original fixed vertex positions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFixedVertexPlacementMode.PredefinedEllipseRim">
            <summary>
            The layouts places the vertices at the rim of a predefined ellipse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENFixedVertexPlacementMode.AutomaticEllipseRim">
            <summary>
            The layouts places the vertices at the rim of an automatically calculated ellipse
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement">
            <summary>
            Defines the possible ways for placing the children in a tip over tree layout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement.Inherit">
            <summary>
            The children placement is inherited from a more global property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement.Row">
            <summary>
            The children are placed in a row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement.ColLeft">
            <summary>
            The children are placed in a row which is on the left of the edge bus.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement.ColRight">
            <summary>
            The children are placed in a col which is on the right of the edge bus.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement.ColBoth">
            <summary>
            The children are placed in 2 columns separated by the edge bus.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENPlugAnchor">
            <summary>
            Defines the anchors at which plugs can be glued
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugAnchor.NotSpecified">
            <summary>
            The anchor is not specified
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugAnchor.Center">
            <summary>
            Center of body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugAnchor.Left">
            <summary>
            X side of body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugAnchor.Right">
            <summary>
            Right side of body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugAnchor.Top">
            <summary>
            Y side of body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugAnchor.Bottom">
            <summary>
            Bottom side of body
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENRoutingStyle">
            <summary>
            Defines the way in which the layout routes 1D bodies.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENRoutingStyle.None">
            <summary>
            The body type is not specified
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENRoutingStyle.Straight">
            <summary>
            The body should be drawn as a straight line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENRoutingStyle.Orthogonal">
            <summary>
            The body should be drawn with an orthogonal line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENRoutingStyle.Polyline">
            <summary>
            The body should be drawn with a polyline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENPortStyle">
            <summary>
            Defines the predefined configurations of ports for vertices in tree layouts
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPortStyle.Center">
            <summary>
            The edges end points are glued to the verices centers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPortStyle.Sides">
            <summary>
            The edges end points are glued to the verices sides
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENParentAnchor">
            <summary>
            Defines the predefined places at which a parent tree vertex can be anchored in respect to its subtree or children
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.ChildrenNear">
            <summary>
            The parent is anchored at the near side of the first child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.ChildrenCenter">
            <summary>
            The parent is anchored at the children center
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.ChildrenFar">
            <summary>
            The parent is anchored at the far side of the last child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.SubtreeNear">
            <summary>
            The parent is anchored at the near side of the subtree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.SubtreeCenter">
            <summary>
            The parent is anchored at the center of the subtree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.SubtreeFar">
            <summary>
            The parent is anchored at the far side the subtree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.FirstChildCenter">
            <summary>
            The parent is anchored at the center of the first child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENParentAnchor.LastChildCenter">
            <summary>
            The parent is anchored at the center of the last child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENDummyVertexSizeMode">
            <summary>
            Enumerates the dummy vertex size modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENDummyVertexSizeMode.Min">
            <summary>
            The dummy vertices have the same size as the minimal vertex size in the graph
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENDummyVertexSizeMode.Max">
            <summary>
            The dummy vertices have the same size as the maximal vertex size in the graph
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENDummyVertexSizeMode.MinInLayer">
            <summary>
            The dummy vertices have the same size as the minimal vertex size in the layer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENDummyVertexSizeMode.MaxInLayer">
            <summary>
            The dummy vertices have the same size as the maximal vertex size in the layer
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENSidePositionMode">
            <summary>
            Enumerates the possible types of side positioning
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENSidePositionMode.Proportional">
            <summary>
            The side position is specified in proportion to the container size
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENSidePositionMode.OffsetFromNearSide">
            <summary>
            The side position is specified as offset from the near container side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENSidePositionMode.OffsetFromFarSide">
            <summary>
            The side position is specified as offset from the far container side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENSidePositionMode.OffsetFromCenter">
            <summary>
            The side position is specified as offset from the container center
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENBodyArea">
            <summary>
            Enumerates the types of body areas
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENBodyArea.BoundingBox">
            <summary>
            Bounding box
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENBodyArea.BoundingCircle">
            <summary>
            Bounding circle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENBodyArea.InscribedCircle">
            <summary>
            Inscribed circle
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENPlugSpacingMode">
            <summary>
            Enumerates the ways in which plugs can be spaced
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugSpacingMode.None">
            <summary>
            Plugs are not spaced
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugSpacingMode.Proportional">
            <summary>
            Plugs are spaced proportionally at the anchor side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENPlugSpacingMode.Fixed">
            <summary>
            Plugs are spaced with a fixed offset at the anchor side
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENLayeredLayoutNodeRank">
            <summary>
            Enumerates the ranking policies for layered layouts.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENLayeredLayoutNodeRank.TopMost">
            <summary>
            All nodes without incomming edges are assigned to the topmost layer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENLayeredLayoutNodeRank.Optimal">
            <summary>
            Layer distribution is done in such a way that the total length of all edges
            is minimized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENLayeredLayoutNodeRank.Gravity">
            <summary>
            Similar to TopMost, but after the initial assignment all nodes fall downwards
            as much as possible.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENLayeredLayoutEdgeRouting">
            <summary>
            Enumerates the edge routing styles for layered layouts
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENLayeredLayoutEdgeRouting.Polyline">
            <summary>
            The edges are drawn using a polyline with few bends
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENLayeredLayoutEdgeRouting.Orthogonal">
            <summary>
            The edges are drawn using only horizontal and vertical line segments
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.ENGridCellSizeMode">
            <summary>
            Defines the possible cell sizing modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENGridCellSizeMode.GridBased">
            <summary>
            All cells have the size of the biggest cell in the grid.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.ENGridCellSizeMode.CellBased">
            <summary>
            The maximal width and height of each row and column is determined
            according to the cells it contains.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphLayoutEventArgs">
            <summary>
            The NGraphLayoutEventArgs class provides information about graph layouts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Layout.NLayoutContext,Nevron.Nov.DataStructures.NGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="graph"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphLayoutEventArgs.Graph">
            <summary>
            Gets the graph subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NTreeLayoutEventArgs">
            <summary>
            The NTreeLayoutEventArguments class provides information about tree layouts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayoutEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Layout.NLayoutContext,Nevron.Nov.DataStructures.NTreeGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="context"></param>
            <param name="tree"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTreeLayoutEventArgs.Tree">
            <summary>
            Gets the tree subject to layout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NPlugSpacing">
            <summary>
            The NPlugSpacing attribute is used to space plugs connected to a single side port.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NPlugSpacing.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NPlugSpacing.Mode">
            <summary>
            Gets or sets the mode in which the plugs are spaced. By default set to None
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NPlugSpacing.Offset">
            <summary>
            Gets or sets the constant spacing offset. Valid only when Mode is set to Fixed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NPlugSpacing.NPlugSpacingSchema">
            <summary>
            Schema associated with NPlugSpacing
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NPlugSpacing.ModeProperty">
            <summary>
            Reference to the Mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NPlugSpacing.OffsetProperty">
            <summary>
            Reference to the Offset property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NCircularGraphLayout">
            <summary>
            The base class for all circular layouts
            </summary>
            <remarks>
            This class provides the basic functionality for all circular graph layouts.
            It holds the properties that control if the layout is autosizing its rings, and
            with what factor compared to its ring radius, if yes.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.RingRadius">
            <summary>
            Gets or sets the ring radius for the layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.AutoSizeRings">
            <summary>
            Deterimnes if the layout will auto set the ring radius in order to eliminate node overlapping
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.AspectRatio">
            <summary>
            Determines the aspect (width/height) ratio of the layout. By default set to 1
            which layouts the nodes in a circle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.RingInflateFactor">
            <summary>
            Deterimnes the ring inflate factor in terms of RingRadius (0 - 1)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to layout the given graph.
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.Overlap(Nevron.Nov.DataStructures.NGraphVertexList)">
            <summary>
            Test if there's overlapping between the given vertices.
            </summary>
            <param name="vertices">The vertices to check.</param>
            <returns>True if there's overlapping.</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.NCircularGraphLayoutSchema">
            <summary>
            Schema associated with NCircularGraphLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.RingRadiusProperty">
            <summary>
            Reference to the RingRadius property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.AutoSizeRingsProperty">
            <summary>
            Reference to the AutoSizeRings property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.RingInflateFactorProperty">
            <summary>
            Reference to the RingInflateFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCircularGraphLayout.AspectRatioProperty">
            <summary>
            Reference to the AspectRatio property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NRadialGraphLayout">
            <summary>
            In Radial Graph Layout the focus node is placed at the center of 
            the display and all other nodes are laid out around it
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NRadialGraphLayout.CreateVertexBody">
            <summary>
            Creates a new vertex body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NRadialGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the radial graph layout algorithm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NRadialGraphLayout.NRadialGraphLayoutSchema">
            <summary>
            Schema associated with NCompactTreeLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NSingleCycleGraphLayout">
            <summary>
            The single cycle layout arranges shapes on a single circle
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSingleCycleGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSingleCycleGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the radial graph layout algorithm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSingleCycleGraphLayout.NSingleCycleGraphLayoutSchema">
            <summary>
            Schema associated with NCompactTreeLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NFamilyGraphLayout">
            <summary>
            A graph layout that arranges a family tree diagram to layers, each of which represents
            a single generation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFamilyGraphLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFamilyGraphLayout.ReduceEdgeCrossings(Nevron.Nov.DataStructures.NGraphVertexList[])">
            <summary>
            Overriden to reposition the vertices so that husbands and wifes are adjacent, which
            leads to reduced number of edge crossings for family tree diagrams.
            </summary>
            <param name="layers"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFamilyGraphLayout.NFamilyGraphLayoutSchema">
            <summary>
            Schema associated with NFamilyGraphLayout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFamilyGraphLayout.CreateAndInit">
            <summary>
            Creates a family graph layout and initializes it, for example
            by setting horizontal and vertical spacing to its region layout.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NLayeredEdgeBody">
            <summary>
            The NLayeredEdgeBody class represents a graph edge body, 
            which serves as base class for all edge bodies in layered layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredEdgeBody.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredEdgeBody.IsDummyEdge">
            <summary>
            Determines if the body represents a dummy edge (i.e. edge pointing to a Dummy Vertex).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredEdgeBody.IsReversed">
            <summary>
            Determines whether the edge was reversed during the convertion of the graph to acyclic.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredEdgeBody.ToString">
            <summary>
            Retusrns a string that represents the current body
            </summary>
            <returns>A string that represents the current body</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredEdgeBody.RealEdgeSource">
            <summary>
            Reference to the real edge, in case this is a dummy edge created for a dummy vertex.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NLayeredVertexBody">
            <summary>
            The NLayeredVertexBody class represents a 2D body, which represents a vertex in a layered layout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredVertexBody.IsDummyVertex">
            <summary>
            Detertmines if the body represents a dummy vertex.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredVertexBody.IndexInLayer">
            <summary>
            The custom index in layer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredVertexBody.LayerIndex">
            <summary>
            The index of the layer on which the vertex resides.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphBarycenterCrossingReductor">
            <summary>
            Implememnts the barycenter method for the layer-by-layer crossing reduction problem.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphBarycenterCrossingReductor.#ctor(Nevron.Nov.DataStructures.NGraphVertexList,Nevron.Nov.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphBarycenterCrossingReductor.#ctor(Nevron.Nov.DataStructures.NGraphVertexList,Nevron.Nov.DataStructures.NGraphVertexList,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
            <param name="randomnessOptimization">Determines whether to apply randomness or not. Randomly positioning
            vertices with the same barycenter weight on the second layer almost always results in better positioning
            of the vertices and less edge crossings.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphBarycenterCrossingReductor.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor">
            <summary>
            The base class for all crossing reductors for bipartite graphs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.#ctor(Nevron.Nov.DataStructures.NGraphVertexList,Nevron.Nov.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.DefaultOrder">
            <summary>
            Gets the default vertex order for the second layer (i.e. 1, 2, 3, ..., N).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.GetNumberOfCrossings">
            <summary>
            Gets the number of crossings for the initial ordering of layer 2, i.e. 0, 1, 2, ..., n.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.IsFixed(System.Int32)">
            <summary>
            Returns true if the specified position in Layer2 contains a vertex with
            a fixed IndexInLayer defined by the user.
            </summary>
            <param name="vertexIndex">The index of the position to check.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.SetFixedVertices(System.Int32[])">
            <summary>
            Sets the vertices with fixed positions and returns the total number of
            fixed vertices.
            </summary>
            <param name="order">The vertex order.</param>
            <returns>The total number of fixed vertices.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.GetNumberOfCrossings(System.Int32[])">
            <summary>
            Calculates the number of crossings between 2 layers using the 
            edge-crossing matrix.
            </summary>
            <param name="order">The order of the vertices in the second layer.</param>
            <remarks>The matrix is iterated through from bottom to top. We find
            the index of the first cell containig true on the current row and then 
            we increase the number of edge crossings by the number of the cells that 
            contain true and which index is greater than the index of the first cell 
            containing true on the current row. After that we move to the upper row 
            and repeat the whole procedure. And so on until we reach row 1.</remarks>
            <returns>The number of edge crossings between 2 adjacent layers.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.ApplyOrderToLayer(Nevron.Nov.DataStructures.NGraphVertexList,System.Int32[])">
            <summary>
            Applies a new order of the vertices for a given layer.
            </summary>
            <param name="layer">The layer to be reordered.</param>
            <param name="order">The new order. The meaning of the array is as follows:
            in order[0] is stored the index in Layer2 of the vertex that should be first,
            in order[2] is the index of the vertex that should be second in the final
            ordering and so no.</param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.m_Layer1">
            <summary>
            The first layer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphCrossingReductor.m_Layer2">
            <summary>
            The second layer.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphPermutationCrossingReductor">
            <summary>
            Anlalyzes all possible permutations and provides an optimal solution
            to the one-sided crossing reduction problem.
            </summary>
            <remarks>
            Note that finding an optimal solution is an NP-hard problem and requires
            N! time where N is the number of vertices in the non-fixed layer. Use this
            method for no more than 8 vertices.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphPermutationCrossingReductor.#ctor(Nevron.Nov.DataStructures.NGraphVertexList,Nevron.Nov.DataStructures.NGraphVertexList)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphPermutationCrossingReductor.#ctor(Nevron.Nov.DataStructures.NGraphVertexList,Nevron.Nov.DataStructures.NGraphVertexList,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="layer1">The first layer of vertices.</param>
            <param name="layer2">The second layer of vertices.</param>
            <param name="randomnessOptimization">Determines whether to apply randomness or not. Randomly repositioning
            of the vertices of the second layer almost always results in better positioning of the vertices and less edge crossings.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphPermutationCrossingReductor.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphPermutationCrossingReductor.IsOrderValid(System.Int32[],System.Int32)">
            <summary>
            Checks whether the given vertex order is valid. The default implementation always returns true,
            but can be overriden in a dervided class to ignore some of the vertex permutations.
            </summary>
            <param name="order">The order to evaluate.</param>
            <param name="count">The number of vertices from the given order array to evaluate.</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphPermutationCrossingReductor.MaxVertexCount">
            <summary>
            The maximum number of vertices to apply permutation crossing reduction for.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout">
            <summary>
            The NLayeredGraphLayout class is a graph layout, which layouts the graph vertices
            and edges bodies of an acyclic graph on layers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.EdgeRouting">
            <summary>
            Gets or sets what edge routing is applied. By default set to Orthogonal.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.LayerAlignment">
            <summary>
            Determines the vertical alignment of the vertices in the layers.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.LayerSpacing">
            <summary>
            Gets or sets the layer spacing. By default set to 40.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.VertexSpacing">
            <summary>
            Gets or sets the vertex spacing. By default set to 40.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.BusMargin">
            <summary>
            Gets or sets the top and bottom margin (left and right margin for LeftToRight and RightToLeft layouts)
            to apply to the connector busses lane defined by <see cref="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.LayerSpacing"/> in order to determine the
            size of the area for inter-layer connectors. Should be less than or equal to half of the <see cref="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.LayerSpacing"/>.
            If set to a larger value, LayerSpacing / 2 is used. By default set to 0, which means that connector busses
            will occupy the whole space between layers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.NodeRank">
            <summary>
            Gets or sets the layered graph layout node ranking policy. By default set to Optimal,
            which tries to minimize edge lengths.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.NodeAlignment">
            <summary>
            Determines the horizontal alignment of the vertices in the layers.
            By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.PlugSpacing">
            <summary>
            Determines the plug spacing of the edges.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.SelfLoopSpacingFactor">
            <summary>
            Gets or sets the self loop spacing factor. It spaces the self loops as a ratio of the body height.
            By default set to 0.25.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.CrossingReductionForgivnessNumber">
            <summary>
            Defines the number of times without a reduction to the number of edge crossings
            after which the crossing reduction algorithm should stop traversing the graph.
            Lower values lead to better performance but the number of edge crossings might increase.
            By default set to 20.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.RandomnessOptimization">
            <summary>
            Gets or sets whether to apply randomness optimization to the layout, which makes the layout
            nondeterministic (i.e. different runs of the layout result in different output graphs),
            but almost always results in better positioning of the vertices and less edge crossings.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.StraightenLines">
            <summary>
            Tries to straighten the lines as much as possible in the case of orthogonal edge routing.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.UseSingleBus">
            <summary>
            If true and the EdgeRouting is orthogonal, all edges will be placed on a single bus between each pair of layers.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.Compact">
            <summary>
            Determines whether the layout should try to minimize the width (for TopToBotttom and BottomToTop layouts) or
            height (for LeftToRight and RightToLeft layouts) of the drawing. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.DistributeToLayers(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Distributes the given items to layers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.CreateEdgeBody">
            <summary>
            Creates a new edge body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.CreateVertexBody">
            <summary>
            Creates a new vertex body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.OnArrangingGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified graph
            </summary>
            <remarks>
            Overriden to read the X and Y moveable constrains of the vertices and to call the 
            OnLayingOutGraph method of all enabled forces.
            </remarks>
            <param name="graph"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Layouts a graph to layers.
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.CreateCrossingReductor(Nevron.Nov.DataStructures.NGraphVertexList,Nevron.Nov.DataStructures.NGraphVertexList)">
            <summary>
            Creates a crossing reductor that repositions the vertices in the given layers in order
            to minimize edge crossings. The default implementation fixes the positions of the vertices
            in the given first layer and repositions the vertices in the given second layer.
            </summary>
            <param name="layer1"></param>
            <param name="layer2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.ReduceEdgeCrossings(Nevron.Nov.DataStructures.NGraphVertexList[])">
            <summary>
            For each pair of adjacent layers fixes the positions of the vertices 
            in the first layer and repositions the vertices in the second one in a way 
            that minimizes the number of edge crossings between the two layers.
            </summary>
            <param name="layers">The layers calculated at steps 1 and 2.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.SetPlugSpacingToInEdges(Nevron.Nov.DataStructures.NMap{Nevron.Nov.Layout.NBody2D,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase}})">
            <summary>
            Sets plug spacing to the given incoming edges.
            </summary>
            <param name="inEdges"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.SetPlugSpacingToOutEdges(Nevron.Nov.DataStructures.NMap{Nevron.Nov.Layout.NBody2D,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.Layout.NGraphEdgeBodyBase}})">
            <summary>
            Sets plug spacing to the given outgoing edges.
            </summary>
            <param name="outEdges"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.NLayeredGraphLayoutSchema">
            <summary>
            Schema associated with the layout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.EdgeRoutingProperty">
            <summary>
            Reference to the EdgeRouting property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.LayerAlignmentProperty">
            <summary>
            Reference to the VertexSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.LayerSpacingProperty">
            <summary>
            Reference to the LayerSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.VertexSpacingProperty">
            <summary>
            Reference to the VertexSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.BusMarginProperty">
            <summary>
            Reference to the BusMargin property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.NodeRankProperty">
            <summary>
            Reference to the NodeRank property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.NodeAlignmentProperty">
            <summary>
            Reference to the NodeAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.PlugSpacingProperty">
            <summary>
            Referense to the PlugSpacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.SelfLoopSpacingFactorProperty">
            <summary>
            Reference to the SelfLoopSpacingFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.CrossingReductionForgivnessNumberProperty">
            <summary>
            Reference to the CrossingReductionForgivnessNumber property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.RandomnessOptimizationProperty">
            <summary>
            Reference to the RandomnessOptimization property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.StraightenLinesProperty">
            <summary>
            Reference to the StraightenLinesProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.UseSingleBusProperty">
            <summary>
            Reference to the UseSingleBus property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredGraphLayout.CompactProperty">
            <summary>
            Reference to the Compact property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NDirectedGraphLayout">
            <summary>
            The NDirectedGraphLayout class represents a graph layout, 
            which serves as base class for all graph layouts, whose direction can be controlled.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDirectedGraphLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NDirectedGraphLayout.Direction">
            <summary>
            Gets or sets the direction of the graph layout. By default set to TopToBottom
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDirectedGraphLayout.NDirectedGraphLayoutSchema">
            <summary>
            Schema associated with NDirectedGraphLayout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDirectedGraphLayout.DirectionProperty">
            <summary>
            Reference to the Direction property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement">
            <summary>
            The NFixedVertexPlacement class is used to encapsulate the initial placement of 
            the fixed vertices in a force directed layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.PlaceFixedVertices(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called by the force directed layout to initially place the fixed vertices
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.Mode">
            <summary>
            Gets/set the fixed vertex placement mode. By default set to Original
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.PredefinedEllipse">
            <summary>
            Gets or sets the bounds of the predefined ellipse, at the rim of which fixed vertices must be placed. Applicable only if the Mode property is set to PredefinedEllipseRim
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.NFixedVertexPlacementSchema">
            <summary>
            Schema associated with NForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.ModeProperty">
            <summary>
            Reference to the Mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement.PredefinedEllipseProperty">
            <summary>
            Reference to the PredefinedEllipse property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceEnvironment">
            <summary>
            Represents a force environment.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceEnvironment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.Layout">
            <summary>
            Gets the force directed layout to which this environment belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.XMagnitudeFactor">
            <summary>
            Gets or sets the X magnitude factor. Controls the X force fraction to apply at each iteration. By default set to 1.0f
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.YMagnitudeFactor">
            <summary>
            Gets or sets the Y magnitude factor. Controls the Y force fraction to apply at each iteration. By default set to 1.0f
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.UseGlobalTemperature">
            <summary>
            Gets or sets whether to use global temperature. If this setting is set to true the movement of the vertices will be gradually constrained until they are finally freezed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.MaxForce">
            <summary>
            Gets or sets the max force. In order to ensure the layout stability, the max force is used to define the largest possible force applied at each iteration.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.UseLocalTemperature">
            <summary>
            Gets or sets whether to use local temperature. Setting this property to true, speeds up the movement of vertices traveling in the same direction and slows down the oscillating and rotating vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.MaxLocalTemperature">
            <summary>
            Gets or sets the max local temperature. It controls the maximum to which a vertex can be warmed. By default set to 1.0f
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.LocalDirectionDeviation">
            <summary>
            Gets or sets the direction deviation. It controls the allowed deviation from the previous vertex force direction, below which the vertex is considered to have the same direction. By default set to 45 degrees
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.LocalCoolingStep">
            <summary>
            Gets or sets the local cooling step. It controls the amount with which the vertex local temperature is decreased if it deviates from its direction. By default set to 0.1f
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceEnvironment.LocalWarmingStep">
            <summary>
            Gets or sets the local warming step. It controls the amount with which the vertex local temperature is increased if it follows its direction. By default set to 0.1f
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceEnvironment.Reset(Nevron.Nov.DataStructures.NGraphVertexList)">
            <summary>
            Resets the enviroment. This method is called before the first iteration of each pass
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceEnvironment.ApplyForce(Nevron.Nov.DataStructures.NGraphVertex)">
            <summary>
            Called to apply the force, which was accumulated in the specified vertex
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceEnvironment.Update(System.Int32)">
            <summary>
            Updates the enviroment. This method is called on each layout iteration.
            </summary>
            <param name="iteration"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.NForceEnvironmentSchema">
            <summary>
            Schema associated with NForceEnvironment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.XMagnitudeFactorProperty">
            <summary>
            Reference to the XMagnitudeFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.YMagnitudeFactorProperty">
            <summary>
            Reference to the YMagnitudeFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.MaxForceProperty">
            <summary>
            Reference to the MaxForce property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.UseLocalTemperatureProperty">
            <summary>
            Reference to the UseLocalTemperature property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.UseGlobalTemperatureProperty">
            <summary>
            Reference to the UseGlobalTemperature property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.MaxLocalTemperatureProperty">
            <summary>
            Reference to the MaxLocalTemperature property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.LocalDirectionDeviationProperty">
            <summary>
            Reference to the LocalDirectionDeviation property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.LocalCoolingStepProperty">
            <summary>
            Reference to the LocalCoolingStep property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceEnvironment.LocalWarmingStepProperty">
            <summary>
            Reference to the LocalWarmingStep property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement">
            <summary>
            The NFreeVertexPlacement class is used to encapsulate the initial placement of 
            the free vertices in a force directed layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.PlaceFreeVertices(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called by the force directed layout to initially place the free vertices
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.Mode">
            <summary>
            Gets/set the free vertex placement mode. By default set to Original
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.RandomizationArea">
            <summary>
            Gets or sets the area in which the random positions must be contained. Applicable only if the Mode property is set to Random.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.NFreeVertexPlacementSchema">
            <summary>
            Schema associated with NForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.ModeProperty">
            <summary>
            Reference to the Mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement.RandomizationAreaProperty">
            <summary>
            Reference to the RandomizationArea property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody">
            <summary>
            The NForceDirectedEdgeBody class represents a graph edge body, 
            which serves as body for all edges in force directed layouts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody.MagnetizationType">
            <summary>
            Specifies the body magnetization type. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody.SpringStiffness">
            <summary>
            Specifies the spring stiffness. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody.SpringLength">
            <summary>
            Specifies the spring length. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody">
            <summary>
            The NForceDirectedEdgeBody class represents a graph vertex body, 
            which serves as body for all vertices in force directed layouts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.AccumulateForce(System.Double,System.Double)">
            <summary>
            Accumulates the force components acting on this body
            </summary>
            <param name="fx"></param>
            <param name="fy"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.IsFixed">
            <summary>
            Determines whether the vertex is fixed 
            (e.g. cannot be moved in both X and Y directions)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.CurForce">
            <summary>
            Holds the current force, which this body exerts
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.PrevForce">
            <summary>
            Holds the previous force, exerted by the body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.Temperature">
            <summary>
            Holds the current temperature of this vertex
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.XMoveable">
            <summary>
            Specifies whether the body can be moved in the X direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.YMoveable">
            <summary>
            Specifies whether the body can be moved in the Y direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.ElectricalCharge">
            <summary>
            Specifies the electrical charge of the body
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody.Mass">
            <summary>
            Specifies the mass of the body 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NBarycenterForce">
            <summary>
            The NBarycenterForce class represents an edge force, 
            which tries to place connected vertices at their barycenter (center of gravity)
            </summary>
            <remarks>
            The barycenter force is attractive by definition. It tries to collapse the 
            vertices to the center of their mass. The force magnitude experienced by the 
            vertices is specified by the following formulas:
            <para>
            vertex1Force = AttractionCoefficient * vertex1.Mass / (vertex1.Mass + vertex2.Mass)
            </para>
            <para>
            vertex2Force = AttractionCoefficient * vertex2.Mass / (vertex1.Mass + vertex2.Mass)
            </para>
            <para>
            The Mass parameter can be specified on a per vertex basis. If a vertex does not 
            provide a concrete value for this parameter it is by default considered to be 1.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody)">
            <summary>
            Computes the barycenter force acting on vertex1 and vertex2 and updates the bodies current forces
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="edge"></param> 
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterForce.OnLayingOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBarycenterForce.AttractionCoefficient">
            <summary>
            Gets or sets the attraction coefficient, which affects the power with which connected vertices attract each other.
            Should be a value in the [0;1] range
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterForce.OnPropertyLocalValueChanging(Nevron.Nov.Dom.NLocalValueChangeData)">
            <summary>
            Called when the value of a schema property is changing
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBarycenterForce.NBarycenterForceSchema">
            <summary>
            Schema associated with NBarycenterForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBarycenterForce.AttractionCoefficientProperty">
            <summary>
            Reference to the AttractionCoefficient property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NBounceBackForce">
            <summary>
            The NBounceBackForce class represents a vertices force, 
            which simulates a repulsion between overrlapping vertices
            </summary>
            <remarks>
            The bounce back force magnitute is computed by the following formula:
            RepulsionCoefficient * Math.Sqrt(IntersectionArea)
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBounceBackForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBounceBackForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody)">
            <summary>
            Accumulates the force acting on the specified pair of vertices
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBounceBackForce.BodyPadding">
            <summary>
            Gets or sets the padding applied to the bodies. By default set to 10
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBounceBackForce.RepulsionCoefficient">
            <summary>
            Gets or sets the repulsion coefficient. By default set to 1.0f
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBounceBackForce.BodyArea">
            <summary>
            Gets or sets the body area, which is considered when measuring the overlap between two bodies. 
            By default set to BoundingBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBounceBackForce.NBounceBackForceSchema">
            <summary>
            Schema associated with NBounceBackForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBounceBackForce.BodyPaddingProperty">
            <summary>
            Reference to the BodyPadding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBounceBackForce.RepulsionCoefficientProperty">
            <summary>
            Reference to the RepulsionCoefficientProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBounceBackForce.BodyAreaProperty">
            <summary>
            Reference to the BodyArea property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce">
            <summary>
            The NDesiredDistanceForce is a force, 
            which couples an attraction force (edge force), and a repulsion force (vertex force).
            The two forces balance each other when the distance between connected vertices 
            is equal to the specified desired distance.
            </summary>
            <remarks>
            The attraction force magnitute is computed by the following formula:
            <para>
            AttractionCoefficient * Math.Pow(distance, 2) / Math.Pow(DesiredDistance, 2)
            </para>
            <para>
            The repulsion force magnitute is computed by the following formula:
            <para>
            RepulsionCoefficient * Math.Pow(DesiredDistance, 2) / Math.Pow(distance, 2)
            </para>
            </para>
            <para>
            Provided that the RepulsionCoefficient and AttractionCoefficient are 
            equal, the two forces balance each other at DesiredDistance. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody)">
            <summary>
            Accumulates the force acting on the specified pair of vertices
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody)">
            <summary>
            Accumulates the force acting on the specified pair of connected vertices
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="edge"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.RepulsionCoefficient">
            <summary>
            Gets or sets the repulsion coefficient, which affects the power with which vertices repel each other.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.AttractionCoefficient">
            <summary>
            Gets or sets the attraction coefficient, which affects the power with which connected vertices attract each other.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.DesiredDistance">
            <summary>
            Gets or sets the desired distance between between a pair of connected vertices
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.OnLayingOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph layout
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.NDesiredDistanceForceSchema">
            <summary>
            Schema associated with NDesiredDistanceForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.DesiredDistanceProperty">
            <summary>
            Reference to the DesiredDistance property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.RepulsionCoefficientProperty">
            <summary>
            Reference to the RepulsionCoefficient property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce.AttractionCoefficientProperty">
            <summary>
            Reference to the AttractionCoefficient property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NElectricalForce">
            <summary>
            The NElectricalForce class represents a vertices force, 
            which simulates the electrical repulsion between two ellectrically charged particles.
            </summary>
            <remarks>
            The ellectrical force magnitute is computed by the following formula:
            <para>
            RepulsionCoefficient * vertex1.ElectricalCharge * vertex2.ElectricalCharge / Math.Pow(distance, 2)
            </para>
            <para>
            Provided that the electrical charges are equal in sign (which is the most common case), 
            the ellectrical force is repulsive and decreases in an inverse square law as the distance between 
            the vertices is increased.
            </para>
            <para>
            The ElectricalCharge parameter can be specified on a per vertex basis. If a vertex does not 
            provide a concrete value for this parameter it is by default considered to be 1.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NElectricalForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NElectricalForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody)">
            <summary>
            Computes the electical force acting on vertex1 and vertex2 and updates the bodies current forces
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NElectricalForce.RepulsionCoefficient">
            <summary>
            Gets or sets the repulsion coefficient, which affects the power with which vertices repel each other.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NElectricalForce.NominalDistance">
            <summary>
            Gets or sets the nominal distance, which affects the power with which vertices repel each other in a square low
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NElectricalForce.OnLayingOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NElectricalForce.NElectricalForceSchema">
            <summary>
            Schema associated with NElectricalForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NElectricalForce.RepulsionCoefficientProperty">
            <summary>
            Reference to the RepulsionCoefficient property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NElectricalForce.NominalDistanceProperty">
            <summary>
            Reference to the NominalDistance property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForce">
            <summary>
            The NForce class serves as base class for all types of forces,
            which can be used in force directed layouts
            </summary>
            <remarks>
            Each force can be enabled or disabled, which is controlled by the Enabled property. 
            When disabled the force will not be taken into account by the force directed layout. 
            This lets you easily turn on/off different force configurations.
            <para>
            Provided that the force is enabled, it activates at the pass, specified by the ActivationPass property.
            The force directed layout will perform as many passes as the maximum ActivationPass setting of 
            all currently enabled forces.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForce.OnLayingOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForce.OnLayedOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called after the force is used in the specified graph layout
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForce.ActivationPass">
            <summary>
            Gets or sets the pass, at which the force becomes active
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForce.Enabled">
            <summary>
            Determines whether the force is enabled or not
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForce.Layout">
            <summary>
            Gets the force directed layout to which this force belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForce.NForceSchema">
            <summary>
            Schema associated with NForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForce.EnabledProperty">
            <summary>
            Reference to the Enabled property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForce.ActivationPassProperty">
            <summary>
            Reference to the ActivationPass property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForce.NForceDesigner">
            <summary>
            Designer for force directed layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForce.NForceDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceCollection">
            <summary>
            Represents a collection of NForce instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceCollection.NForceCollectionSchema">
            <summary>
            Schema associated with NForceCollection
            </summary>  
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceCollection.NForceCollectionDesigner">
            <summary>
            Designer for force directed layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceCollection.NForceCollectionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGravityForce">
            <summary>
            The NGravityForce class represents a global force, 
            which simulates a gravity attraction to the current barycenter of the graph
            </summary>
            <remarks>
            The gravity force simulates an attraction to the current barycenter of the graph, 
            which is experienced by all vertices in the graph. The force magnitude is computed by 
            the following formula:
            <para>
            AttractionCoefficient * (1 + vertex.Degree * DegreeFactor) * (Barycenter - vertex.Center)
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGravityForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGravityForce.AccumulateForce(Nevron.Nov.DataStructures.NGraph)">
            <summary>
            Computes the gravity force acting on the graph vertices
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGravityForce.AttractionCoefficient">
            <summary>
            Gets or sets the attraction coefficient, which affects the power with which vertices are attracted to the barycenter
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGravityForce.DegreeFactor">
            <summary>
            Gets or sets the degree factor, which affects the tendency vertices with higher degree to be more attracted to the barycenter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGravityForce.NGravityForceSchema">
            <summary>
            Schema associated with NGravityForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGravityForce.AttractionCoefficientProperty">
            <summary>
            Reference to the AttractionCoefficient property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGravityForce.DegreeFactorProperty">
            <summary>
            Reference to the DegreeFactor property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NMagneticFieldForce">
            <summary>
            The NMagneticFieldForce is an edge force, 
            which is used to impose an edge orientation constrain
            </summary>
            <remarks>
            The magnetic force magnitute is computed by the following formula:
            <para>
            TorsionCoefficient *  Math.Pow(distance, DistancePower) * Math.Pow(angle, AnglePower)
            </para>
            where angle is the angle, which the edge forms with the magnetic field.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody)">
            <summary>
            Accumulates the forces acting on vertex1 and vertex2, due to the torsion,
            which the edge exterts in the magnetic field
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="edge"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.OnLayingOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.FieldDirection">
            <summary>
            Gets or sets the direction of the magnetic field
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.FieldOrigin">
            <summary>
            Gets or sets the magnetic field origin. Only used when the magnetic field direction is set to Polar or Concentric.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.MagnetizationType">
            <summary>
            Gets or sets the default magnetization type of force directed edges. By default set to Bidirectional.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.TorsionCoefficient">
            <summary>
            Gets or sets the torsion coefficient, which affects the power with which the field rotates the edges.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.DistancePower">
            <summary>
            Gets or sets the distance power, which affects the tendency longer edges to exert larger torsion
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.AnglePower">
            <summary>
            Gets or sets the angle power, which affects the tendency edges to be more strongly aligned with the field
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.NMagneticFieldForceSchema">
            <summary>
            Schema associated with NMagneticFieldForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.FieldOriginProperty">
            <summary>
            Reference to the FieldOrigin property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.FieldDirectionProperty">
            <summary>
            Reference to the FieldDirection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.MagnetizationTypeProperty">
            <summary>
            Reference to the MagnetizationType property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.TorsionCoefficientProperty">
            <summary>
            Reference to the TorsionCoefficient property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.DistancePowerProperty">
            <summary>
            Reference to the DistancePower property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NMagneticFieldForce.AnglePowerProperty">
            <summary>
            Reference to the AnglePower property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NSpringForce">
            <summary>
            The NSpringForce class represents an edge force, 
            which simulates a spring connecting adjacent vertices.
            </summary>
            <remarks>
            The spring force magnitude formula can take two forms based on the SpringForceLaw property value:
            <list type="bullet">
            	<item>
            		<term>Logarithmic</term>
            		<description>
            		edge.SpringStiffness * Math.Log(distance / edge.SpringLength)
            		</description>
            	</item>
            	<item>
            		<term>HookeLaw</term>
            		<description>
            		edge.SpringStiffness * (d - edge.SpringLength)
            		</description>
            	</item>
            </list>
            <para>
            In both forms the spring force becomes repulsive, if the distance is smaller than the spring length, 
            and becomes attractive, when the distance is larger than the spring length. That is, the spring force 
            aims to make the distance between connected vertices equal to the natural (zero energy) of the spring.
            </para>
            The SpringStiffness and SpringLength parameters can be specified on a per edge basis. If an edge does not 
            provide a concrete value for either of these parameters, the default values are obtained from the 
            SpringStiffness and SpringLength properties respectively.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSpringForce.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSpringForce.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody)">
            <summary>
            Accumulates the force acting on the specified pair of connected vertices
            </summary>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="edge"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSpringForce.OnLayingOutGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the force is used in the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NSpringForce.SpringLength">
            <summary>
            Gets or sets the default spring length.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NSpringForce.SpringStiffness">
            <summary>
            Gets or sets the default string stiffness.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NSpringForce.SpringForceLaw">
            <summary>
            Gets or sets the type of spring force to use. By default set to HookeLaw.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSpringForce.NSpringForceSchema">
            <summary>
            Schema associated with NSpringForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSpringForce.SpringLengthProperty">
            <summary>
            Reference to the SpringLength property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSpringForce.SpringStiffnessProperty">
            <summary>
            Reference to the SpringStiffness property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSpringForce.SpringForceLawProperty">
            <summary>
            Reference to the SpringForceLaw property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout">
            <summary>
            The NBarycenterGraphLayout class represents a force directed layout, 
            which implements the barycenter layout method.
            </summary>
            <remarks>
            The barycenter layout method splits the input graph into a set of fixed and free vertices.
            Fixed vertices are nailed to the corners of a strictly convex polygon, while free vertices 
            are placed in the barycenter of their neighbours.
            <para>
            In case there are no fixed vertices this will place all vertices at a single point, 
            which is obviously not a good graph drawing. That is why the barycenter layout needs 
            at least three fixed vertices. 
            </para>
            <para>
            The minimal amount of fixed vertices is specified by the MinFixedVerticesCount property. 
            If the input graph does not have that many fixed vertices, the layout will automatically 
            forefill this requirement. This is done by fixing the vertices with the smallest degree.
            </para>
            <para>
            The attractive force pulling the vertices towards their barycenter is represented by an instance of the 
            <see cref="T:Nevron.Nov.Diagram.Layout.NBarycenterForce">NBarycenterForce</see> class, 
            accessible from the BarycenterForce property. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.MinFixedVerticesCount">
            <summary>
            Gets or sets the minimal count of fixed vertices. If the graph does not have that many fixed vertices they will be automaticall chosen. By default set to 3
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.BarycenterForce">
            <summary>
            Gets the barycenter force, which tries to collapse the vertices their center of gravity
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.DetermineFixedVertices(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Determines the fixed vertices of the input graph. Fixes the needed amount of vertices 
            if the input graph does not have that many.
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the barycenter layout on the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.NBarycenterGraphLayoutSchema">
            <summary>
            Schema associated with NBarycenterGraphLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBarycenterGraphLayout.MinFixedVerticesCountProperty">
            <summary>
            Reference to the MinFixedVerticesCount property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout">
            <summary>
            The NForceDirectedGraphLayout class is a graph layout, which layouts the graph vertices and edges, 
            according to the forces acting on them. It serves as base class for all types of force directed layouts.
            </summary>
            <remarks>
            The force directed layout basically implements an iterative algorithm, which tries to minimize the physical energy (reach equilibrium), 
            enduced by the forces in the provided graph. Different force directed layouts use different 
            sets of forces, however all forces are derived from the base <see cref="T:Nevron.Nov.Diagram.Layout.NForce">NForce</see> class.
            <para>
            In general the algorithm performs the following steps:
            </para>
            <list type="bullet">
            	<item>
            		<term>Fixed vertex placement</term>
            		<description>
            		fixed vertices are such vertices, which cannot be moved in both X and Y directions. 
            		Their initial placement is controlled by an instance of the <see cref="T:Nevron.Nov.Diagram.Layout.NFixedVertexPlacement">NFixedVertexPlacement</see> class,
            		accessible from the FixedVertexPlacement property.
            		</description>
            	</item>
            	<item>
            		<term>Free vertex placement</term>
            		<description>
            		free vertices are such vertices, which can be moved in X or Y directions. 
            		Their initial placement is controlled by an instance of the <see cref="T:Nevron.Nov.Diagram.Layout.NFreeVertexPlacement">NFreeVertexPlacement</see> class,
            		accessible from the FreeVertexPlacement property.
            		</description>
            	</item>
            	<item>
            		<term>Iteration phase</term>
            		<description>
            		the iteration phase is repeated until all enabled forces are activated. At each iteration phase the 
            		algorithm tries to reach equilibrium in the number of iterations specified by the MaxIterations property.
            		At each iteration the algorithm first accumulates the forces acting on all vertices and then ask 
            		the enviroment to apply them (actually move the vertices). The enviroment is represented by an 
            		instance of the <see cref="T:Nevron.Nov.Diagram.Layout.NForceEnvironment">NForceEnvironment</see> class, accessible 
            		from the ForceEnvironment property.
            		</description>
            	</item>
            </list>
            The force directed layout provides the following optional force model:
            <list type="bullet">
            	<item>
            		<term>Magnetic Field Force</term>
            		<description>
            		The magnetic field force tries to impose an orientation of the edges in the graph.
            		It is represented by an instance of the <see cref="T:Nevron.Nov.Diagram.Layout.NMagneticFieldForce">NMagneticFieldForce</see> class,
            		accessible from the MagneticFieldForce property respectively.
            		</description>
            	</item>
            	<item>
            		<term>Repulse Overlapped Force</term>
            		<description>
            		The repulse overllaped force forces tries to additionally repel overlapping vertices.
            		It is represented by an instance of the <see cref="T:Nevron.Nov.Diagram.Layout.NBounceBackForce">NBounceBackForce</see> class,
            		accessible from the BounceBackForce property.
            		</description>
            	</item>
            	<item>
            		<term>Gravity Force</term>
            		<description>
            		The gravity force forces tries to attact the vertices to the current barycenter of the graph.
            		It is represented by an instance of the <see cref="T:Nevron.Nov.Diagram.Layout.NGravityForce">NGravityForce</see> class,
            		accessible from the GravityForce property.
            		</description>
            	</item>
            </list>
            All of the above mentioned forces are by default disabled and their activation pass is set to 1. 
            In this way, if any of those forces is enabled, the graph will be given a chance to relax during 
            the first pass, in which only the primary force model will act.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.IterationCompleted">
            <summary>
            Occurs on the completion of each iteration of a force directed layout.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.PassCompleted">
            <summary>
            Occurs on the completion of each pass of a force directed layout.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.StopForce">
            <summary>
            Gets or sets the stop force. If all current forces are smaller than this force, then the layout is automatically stopped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MaxIterations">
            <summary>
            Gets or sets the maximum iterations in which the layout must try to reach equilibrium. By default set to 500
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MaxTime">
            <summary>
            Gets or sets the maximum time in milliseconds in which the layout must try to reach equilibrium.
            By default set to 5000.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MinDelta">
            <summary>
            Gets or sets the minial delta measure for distances, which can become zero 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.FreeVertexPlacement">
            <summary>
            Controls the initial placement of the free vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.FixedVertexPlacement">
            <summary>
            Controls the initial placement of the fixed vertices
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.Environment">
            <summary>
            Gets or sets the force enviroment, which is used to control global settings about the environment in which forces operate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.PlugSpacing">
            <summary>
            Gets or sets the plug spacing to apply when routing duplicate edges
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.Forces">
            <summary>
            Gets the collection of forces in this layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.BounceBackForce">
            <summary>
            Gets the bounce back force, which can be used to repulse the vertices, whose bodies overlap.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MagneticFieldForce">
            <summary>
            Gets the first magnetic field force, which can be used to impose an edge orientation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.GravityForce">
            <summary>
            Gets the gravity force, which attracts vertices to the current barycenter of the graph
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.GetForceBySchema(Nevron.Nov.Dom.NSchema)">
            <summary>
            Gets the first force with the specified schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.OnArrangingGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified graph
            </summary>
            <remarks>
            Overriden to read the X and Y moveable constrains of the vertices and to call the 
            OnLayingOutGraph method of all enabled forces.
            </remarks>
            <param name="graph"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the force directed layout on the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.OnArrangedGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified graph
            </summary>
            <remarks>
            Overriden to call the OnLayedOutGraph method of all enabled forces.
            </remarks>
            <param name="graph"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.CreateVertexBody">
            <summary>
            Called in the graph building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.CreateEdgeBody">
            <summary>
            Called in the graph building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.OnIterationCompleted(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called on each layout iteration. Raises the IterationCompleted event
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
            <returns>true if the layout must continue, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.OnPassCompleted(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called on each layout pass. Raises the PassCompleted event
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
            <returns>true if the layout must continue, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.NForceDirectedGraphLayoutSchema">
            <summary>
            Schema associated with NForce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.IterationCompletedEvent">
            <summary>
            Reference to the IterationCompleted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.PassCompletedEvent">
            <summary>
            Reference to the PassCompleted event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.StopForceProperty">
            <summary>
            Reference to the StopForce property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MaxIterationsProperty">
            <summary>
            Reference to the MaxIterations property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MinDeltaProperty">
            <summary>
            Reference to the MinDelta property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.FreeVertexPlacementProperty">
            <summary>
            Reference to the FreeVertexPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.FixedVertexPlacementProperty">
            <summary>
            Reference to the FixedVertexPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.EnvironmentProperty">
            <summary>
            Reference to the Environment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.PlugSpacingProperty">
            <summary>
            Reference to the PlugSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MaxTimeProperty">
            <summary>
            Reference to the MaxTime property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.ForcesProperty">
            <summary>
            Reference to the Forces property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MagnetizationTypePropertyEx">
            <summary>
            Reference to the MagnetizationType extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SpringStiffnessPropertyEx">
            <summary>
            Reference to the SpringStiffness extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SpringLengthPropertyEx">
            <summary>
            Reference to the SpringLength extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.XMoveablePropertyEx">
            <summary>
            Reference to the XMoveable extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.YMoveablePropertyEx">
            <summary>
            Reference to the YMoveable extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.ElectricalChargePropertyEx">
            <summary>
            Reference to the ElectricalCharge extended property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.MassPropertyEx">
            <summary>
            Reference to the Mass extended property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetMagnetizationType(Nevron.Nov.Dom.NNode,Nevron.Nov.Diagram.Layout.ENMagnetizationType@)">
            <summary>
            Gets the value of the MagnetizationTypePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetMagnetizationType(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the value of the MagnetizationTypePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetSpringStiffness(Nevron.Nov.Dom.NNode,System.Double@)">
            <summary>
            Gets the value of the SpringStiffnessPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetSpringStiffness(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the value of the SpringStiffnessPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetSpringLength(Nevron.Nov.Dom.NNode,System.Double@)">
            <summary>
            Gets the value of the SpringLengthPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetSpringLength(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the value of the SpringLengthPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetXMoveable(Nevron.Nov.Dom.NNode,System.Boolean@)">
            <summary>
            Gets the value of the XMoveablePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetXMoveable(Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Sets the value of the XMoveablePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetYMoveable(Nevron.Nov.Dom.NNode,System.Boolean@)">
            <summary>
            Gets the value of the YMoveablePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetYMoveable(Nevron.Nov.Dom.NNode,System.Boolean)">
            <summary>
            Sets the value of the YMoveablePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetElectricalCharge(Nevron.Nov.Dom.NNode,System.Double@)">
            <summary>
            Gets the value of the ElectricalChargePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetElectricalCharge(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the value of the ElectricalChargePropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.TryGetMass(Nevron.Nov.Dom.NNode,System.Double@)">
            <summary>
            Gets the value of the MassPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.SetMass(Nevron.Nov.Dom.NNode,System.Double)">
            <summary>
            Sets the value of the MassPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.InitialPlacementCategory">
            <summary>
            The "Initial Placement" category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.EnvironmentCategory">
            <summary>
            The "Environment" category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.ForcesCategory">
            <summary>
            The "Forces" category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.InitialPlacementFreeVertexPlacementCategory">
            <summary>
            The "Initial Placement -> Free Vertex Placement" category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.InitialPlacementFixedVertexPlacementCategory">
            <summary>
            The "Initil Placement -> Fixed Vertex Placement" category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.NForceDirectedGraphLayoutDesigner">
            <summary>
            Designer for force directed layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.NForceDirectedGraphLayoutDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NForceDirectedGraphLayout.NForceDirectedGraphLayoutDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a list of the children types for this designer schema 
            (e.g. the types of the nodes which can be children of the node associated with this designer schema).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NSpringGraphLayout">
            <summary>
            The NSpringGraphLayout class represents a force directed layout, 
            which simulates a physical system with spring and electical forces.
            </summary>
            <remarks>
            The spring layout represents a classical implementation of a force directed layout, 
            with spring and electicral forces. It allows for many per vertex and per edge settings, 
            which can seamlessly reflect the nature of the graph.
            <para>
            Graph vertices are threated as ellectically charged particles, which repel each other.
            The electical force aims to ensure that vertices should not be close together.
            The parameters of the electrical force are controlled by an instance of the 
            <see cref="T:Nevron.Nov.Diagram.Layout.NElectricalForce">NElectricalForce</see> class, 
            accessible from the ElectricalForce property.
            </para>
            <para>
            Graph edges are threated as springs. Springs aim to ensure that the distance between adjacent 
            vertices is approximately equal to the spring length.
            The parameters of the spring force are controlled by an instance of the 
            <see cref="T:Nevron.Nov.Diagram.Layout.NSpringForce">NSpringForce</see> class, 
            accessible from the SpringForce property.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSpringGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NSpringGraphLayout.ElectricalForce">
            <summary>
            Gets the electical force, which tries to repel the vertices so that they do not stay too close together
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NSpringGraphLayout.SpringForce">
            <summary>
            Gets the spring force, which tries to make the distance between connected vertices equal to the natural length of the spring
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSpringGraphLayout.NSpringGraphLayoutSchema">
            <summary>
            Schema associated with NSpringGraphLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NSpringGraphLayout.NSpringGraphLayoutDesigner">
            <summary>
            The designer for spring layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSpringGraphLayout.NSpringGraphLayoutDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NSymmetricalGraphLayout">
            <summary>
            The NSymmetricalGraphLayout class is a force directed layout, 
            which simulates a physical system with repulsive and attractive forces, 
            which strives to produce a symmetrical drawing of a graph.
            </summary>
            <remarks>
            The symmetrical layout represents an implementation of the Fruchertman and Reingold force directed layout (with some modifications). 
            It uses attractive and repulsive forces, which aim to produce a drawing with uniform distance between 
            each set of connected vertices. Because of that the drawing tends to be symmetrical.
            <para>
            The attractive and repulsive forces are coupled in an instance of the 
            <see cref="T:Nevron.Nov.Diagram.Layout.NDesiredDistanceForce">NDesiredDistanceForce</see> class, 
            accessible from the DesiredDistanceForce property. 
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NSymmetricalGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NSymmetricalGraphLayout.DesiredDistanceForce">
            <summary>
            Gets the desired distance force, which tries to enforce a certain distance between 
            connected vertices and repulse disconnected vertices.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NSymmetricalGraphLayout.NSymmetricalGraphLayoutSchema">
            <summary>
            Schema associated with NSymmetricalGraphLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGenericGraphRegion">
            <summary>
            The NGraphRegion class represents a region, whose content is a graph
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGenericGraphRegion.#ctor(Nevron.Nov.DataStructures.NGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="graph">graph, which represents this region content</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGenericGraphRegion.Graph">
            <summary>
            Obtains a reference to the graph for which the graph layout item was constructed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGenericGraphRegion.Translate(System.Double,System.Double)">
            <summary>
            Translates the item
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGenericGraphRegion.GetPartsIterator">
            <summary>
            Must override to provide a graph parts iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGenericGraphRegion.GetBounds">
            <summary>
            Overriden to return the acumulated bounds of the graph vertices bodies
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphLayout">
            <summary>
            The NGraphLayout class represents a regioned layout, whose regions are graphs. 
            It serves as a base class for all graph layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.Layout.NGraphLayout.ArrangingGraph">
            <summary>
            Occurs when a graph is about to layed out by this layout.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.Layout.NGraphLayout.ArrangedGraph">
            <summary>
            Occurs when a a graph has been layed out by this layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.CreateRegions(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to split the object regions into graphs, 
            and create a graph region for each resulting graph.
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.ArrangeRegionContent(Nevron.Nov.Diagram.Layout.NGenericGraphRegion,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of the specified region. 
            </summary>
            <param name="region"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.CreateVertexBody">
            <summary>
            Called in the graph building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.CreateEdgeBody">
            <summary>
            Called in the graph building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.OnArrangingGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified graph. Raises the ArrangingGraph event.
            </summary>
            <param name="graph"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified graph
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayout.OnArrangedGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified graph. Raises the ArrangedGraph event.
            </summary>
            <param name="graph"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphLayout.NGraphLayoutSchema">
            <summary>
            Schema associated with NGraphLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphLayout.ArrangingGraphEvent">
            <summary>
            Reference to the ArrangingGraph event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphLayout.ArrangedGraphEvent">
            <summary>
            Reference to the ArrangedGraph event
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout">
            <summary>
            Implements the Orthogonal Graph Layout.
            </summary>
            <remarks>
            Input : simple graph
            Output: orthogonal (and planar if the graph is planar) grid drawing of the graph
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.Compact">
            <summary>
            Determines whether to use a compaction algorithm on the layout.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.GridCellSizeMode">
            <summary>
            Determines the sizing mode of the grid cells.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.CellSpacing">
            <summary>
            Determines the inter cell spacing of the grid cells.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.PlugSpacing">
            <summary>
            Determines the plug spacing of the nodes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.CreateEdgeBody">
            <summary>
            Creates a new edge body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.CreateVertexBody">
            <summary>
            Creates a new vertex body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.ArrangeGraph(Nevron.Nov.DataStructures.NGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the orthogonal graph layout algorithm.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.NOrthogonalGraphLayoutSchema">
            <summary>
            Schema associated with the layout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.CellSpacingProperty">
            <summary>
            Reference to the CellSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.PlugSpacingProperty">
            <summary>
            Reference to the PlugSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.GridCellSizeModeProperty">
            <summary>
            Reference to the GridCellSizeMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NOrthogonalGraphLayout.CompactProperty">
            <summary>
            Reference to the Compact property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1">
            <summary>
            A layout, which serves as base class for graph and tree layouts. 
            <para>
            Common for graph and tree layouts is that they split the input graphinto connected graphs regions (e.g. graph and tree forests), 
            which are subject to arrangement by the primary layout algorithm.
            </para>
            <para>
            When the content of all regions is arranged, the regions are optionally arranged with the layout specified by the RegionLayout property. 
            By default this property holds an instance of the NFlowLayout class.
            </para>
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.RegionLayout">
            <summary>
            Gets or sets the region layout used for the optional final arrangement of the regions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.CreateRegions(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to create the regions from the specified list of objects
            </summary>
            <param name="objects">objects, which to split into regions</param>
            <param name="context">layout context</param>
            <returns>list of the regions</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.CreateGraphBuilder(Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Creates a graph builder which is used to build the arranged graphs or trees 
            from the input set of objects
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.ArrangeRegionsContent(Nevron.Nov.DataStructures.NList{`0},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of all regions
            </summary>
            <param name="regions"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.ArrangeRegionContent(`0,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of the specified region. 
            </summary>
            <param name="region"></param>
            <param name="context"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.ArrangeRegions(Nevron.Nov.DataStructures.NList{`0},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the regions
            </summary>
            <param name="regions"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.CreateVertexBody">
            <summary>
            Called in the graph building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.CreateEdgeBody">
            <summary>
            Called in the graph building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.CreateBodiesFromObjects(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to create the bodies from the objects
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.ArrangeBodies(System.Object,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Performs the core arrangement of the layout, operating upon the bodies created in the CreateBodiesFromObjects method.
            </summary>
            <param name="bodies"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.UpdateObjectsFromBodies(System.Object,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to update the objects from the bodies
            </summary>
            <param name="bodies"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.NGraphPartsLayoutSchema">
            <summary>
            Schema associated with NGraphPartsLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.RegionLayoutProperty">
            <summary>
            Reference to the RegionLayout property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.RegionLayoutCategory">
            <summary>
            The "Region Layout" category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.NGraphPartsLayoutDesigner">
            <summary>
            Designer for graph part layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphLayoutBase`1.NGraphPartsLayoutDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphRegion">
            <summary>
            The NGraphRegion abstract class represents an atomic unit, with which the region layout can operate
            </summary>
            <remarks>
            NGraphRegion is used to store some content, which can be a subject to additional layout. 
            The content can represent a single node or a collection of nodes. Each item has two types of bounds:
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphRegion.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphRegion.Translate(System.Double,System.Double)">
            <summary>
            Translates the entire region
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphRegion.GetPartsIterator">
            <summary>
            Must override to provide a graph parts iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphRegion.GetBounds">
            <summary>
            Must override to return the bounds of the region
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NGraphRegionList">
            <summary>
            The NGraphRegionList class represents a typed list of NGraphRegion instances
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphRegionList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NGraphRegionList.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout">
            <summary>
            The NBalloonTreeLayout class is a tree layout, which tries to compact the drawing area
            of the tree and places the vertices in balloons around the root.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.ParentChildSpacing">
            <summary>
            Gets/Sets the preferred spacing between a parent and a child vertex in the layout direction.
            The real spacing may be different for some nodes, because the layout does not allow overlapping.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.VertexSpacing">
            <summary>
            Gets/Sets the minimal spacing between two vertices in the layout.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.RootWedge">
            <summary>
            Gets/Sets the sector angle (measured in degrees) for the children of the root vertex.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.ChildrenWedge">
            <summary>
            Gets/Sets the sector angle (measured in degrees) for the children of each vertex.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.StartAngle">
            <summary>
            Gets/Sets the start angle for the children of the root vertex, measured in degrees
            anticlockwise from the x-axis.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.ArrangeTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the balloon tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.NBalloonTreeLayoutSchema">
            <summary>
            Schema associated with NCompactTreeLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.ParentChildSpacingProperty">
            <summary>
            Reference to the ParentChildSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.VertexSpacingProperty">
            <summary>
            Reference to the MinimalVertexSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.RootWedgeProperty">
            <summary>
            Reference to the RootWedge property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.ChildrenWedgeProperty">
            <summary>
            Reference to the ChildWedge property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NBalloonTreeLayout.StartAngleProperty">
            <summary>
            Reference to the StartAngle property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout">
            <summary>
            Represents a directed tree layout, which serves as base class 
            for all classical tree layouts. 
            </summary>
            <remarks>
            In a classical tree layout, the vertex children are always arranged in a row below their parent, 
            in the respective layout direction.
            <para>
            Although in different types of classical tree layouts the depth arrangement of the tree vertices  
            can be different, they all share a VertexSpacing property, which controls the minimal distance 
            between vertices in the breadth layout dimension.
            </para>
            <para>
            You can specify whether the drawing must be compact in the breadth dimension via 
            the CompactBreadth property. When this property is set to true the layout will analyze each 
            subtree outline and place siblings subtrees with minimal breadth spacing. When this property is set to false 
            the layout will only analyze the subtree bounding box, which increases the layout speed, 
            but also increases the tree drawing area.
            </para>
            <para>
            Classical tree layouts admit both orthogonal and straight line tree drawings. 
            If the OrthogonalEdgeRouting property is set to true, the edges will be routed in a bus-like fashion.
            The bus itself can be aligned relatively to the gap, in which it resides with the help of the BusAlignment property.
            </para>
            <para>
            Classical tree layouts use an uniform parent placement, which is applicable for all parent vertices. 
            The parameters of the parent placement strategy are controlled by an instance of the 
            <see cref="T:Nevron.Nov.Diagram.Layout.NParentPlacement">NParentPlacement</see> class, 
            accessible from the ParentPlacement property.
            </para>
            <para>
            The PortStyle property specifies the predefined configuration of ports, to which the layout must attempt to glue the 
            edges end-points.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.VertexSpacing">
            <summary>
            Gets or sets the minimal spacing between the vertices in the breadth dimension
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.OrthogonalEdgeRouting">
            <summary>
            Gets or sets whether to perform orthogonal edge routing. 
            If set to true all edges will be routed orthogonally in a bus-like fashion. 
            If set to false, all edges will be routed as straight lines.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.UseSingleBus">
            <summary>
            If true all edges will be placed on a single bus between each pair of layers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.BusAlignment">
            <summary>
            Gets or sets the bus alignment relative to the aesthetically available space between parent and child nodes. Only applicable if OrthogonalEdgeRouting is set to true. Accepts values in the [0-1] range. By default set to 0.5f (middle).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.PortStyle">
            <summary>
            Gets or sets the way in which the layout must glue the edges end-points to the vertices they connect. By default set to Sides.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.CompactBreadth">
            <summary>
            Gets or sets whether the breadth of the tree drawing should be compacted. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.ParentPlacement">
            <summary>
            Gets or sets the parent placement attribute, which controls the placement of the parent in respect to its children or subtree.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.PlugSpacing">
            <summary>
            Determines the plug spacing of the incomming edges.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.ArrangeTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Arranges the tree.
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.ArrangeEdges(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Arranges the edges.
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.NClassicalTreeLayoutSchema">
            <summary>
            Schema associated with NClassicalTreeLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.VertexSpacingProperty">
            <summary>
            Reference to the VertexSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.OrthogonalEdgeRoutingProperty">
            <summary>
            Reference to the OrthogonalEdgeRouting property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.BusAlignmentProperty">
            <summary>
            Reference to the BusAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.PortStyleProperty">
            <summary>
            Reference to the PortStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.CompactBreadthProperty">
            <summary>
            Reference to the CompactBreadth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.ParentPlacementProperty">
            <summary>
            Reference to the ParentPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.PlugSpacingProperty">
            <summary>
            Reference to the ParentPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NClassicalTreeLayout.UseSingleBusProperty">
            <summary>
            Reference to the UseSingleBus property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NCompactDepthTreeLayout">
            <summary>
            The NCompactDepthTreeLayout class represents a classical tree layout, 
            which compacts the depth of the tree drawing area.
            </summary>
            <remarks>
            In the compact depth tree layout, the depth spacing between a parent and a child vertex is always equal 
            to the value specified by the ParentChildSpacing property. This ensures that the 
            tree drawings produced by this layout are compact in depth.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NCompactDepthTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NCompactDepthTreeLayout.ParentChildSpacing">
            <summary>
            Gets or sets the spacing between a parent and a child vertex in the layout direction
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NCompactDepthTreeLayout.ArrangeTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the compact tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCompactDepthTreeLayout.NCompactDepthTreeLayoutSchema">
            <summary>
            Schema associated with NCompactDepthTreeLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NCompactDepthTreeLayout.ParentChildSpacingProperty">
            <summary>
            Reference to the ParentChildSpacing property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NDirectedTreeLayout">
            <summary>
            The NDirectedTreeLayout class represents a tree layout, 
            which serves as base class for tree layouts, whose direction can be controlled.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NDirectedTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NDirectedTreeLayout.Direction">
            <summary>
            Gets or sets the direction of the tree layout. By default set to TopToBottom
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDirectedTreeLayout.NDirectedTreeLayoutSchema">
            <summary>
            Schema associated with NDirectedTreeLayout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NDirectedTreeLayout.DirectionProperty">
            <summary>
            Reference to the Direction property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout">
            <summary>
            The NLayeredTreeLayout class represents a classical tree layout, 
            which arranges the tree levels in layers.
            </summary>
            <remarks>
            The layered tree layout places vertices from one level of the tree in a single layer.
            The depth spacing between adjacent layers is controlled by the LayerSpacing property.
            The depth alignment of the vertices inside the layer is controlled by the LayerAlignment property.
            <para>
            Additionally, when the OrthogonalEdgeRouting is set to true, you can instruct 
            the layout to consider the bus gap between the layers, 
            instead of the gap between the parent and its top-most child.
            This is controlled by the BusBetweenLayers property.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.LayerSpacing">
            <summary>
            Gets or sets the spacing between adjacent layers in the layout direction
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.LayerAlignment">
            <summary>
            Gets or sets the depth alignment of the vertices inside the layer. By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.BusBetweenLayers">
            <summary>
            Gets or sets whether the bus should be positioned between the layers or between the parent and its children. Only applicable if OrthogonalEdgeRouting is set to true. By default set to false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.ArrangeTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the layered tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.NLayeredTreeLayoutSchema">
            <summary>
            Schema associated with NLayeredTreeLayout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.LayerSpacingProperty">
            <summary>
            Reference to the LayerSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.LayerAlignmentProperty">
            <summary>
            Reference to the LayerAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NLayeredTreeLayout.BusBetweenLayersProperty">
            <summary>
            Reference to the BusBetweenLayers property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NParentPlacement">
            <summary>
            The NParentPlacement class represents an attribute, 
            which is used to encapsulate the horizontal or vertical 
            placement of a parent tree vertex in respect to its children or subtree.
            </summary>
            <remarks>
            When the subtree of a parent vertex is layed out, the value of the Anchor property is used to determine 
            a base position (anchor) for the parent vertex to be placed at. This position is generally relative to 
            a metric of the already arranged children or subtree. Then the anchor is additionally offset with the value 
            specified by the Offset property. Finally the parent is aligned to the anchor in accordance to the 
            Alignment property setting.
            <para>
            Note that the above metioned parent placement can be performed either horizontally or vertically, 
            as the containing layout decides.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NParentPlacement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NParentPlacement.Anchor">
            <summary>
            Gets or sets the place at which the parent tree vertices are anchored in respect to their subtree or children. By default set to ChildrenCenter.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NParentPlacement.Alignment">
            <summary>
            Gets or sets the alignment of the parent, relative to the anchor position defined by the Anchor and Offset properties. By default set to Center.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NParentPlacement.Offset">
            <summary>
            Gets or sets the constant offset applied to the parent anchor position, determined by the Anchor property. By default set to 0.0f.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NParentPlacement.PlaceParentHorizontally(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Places the specified parent horizontally in respect to its subtree or children
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NParentPlacement.PlaceParentVertically(Nevron.Nov.DataStructures.NTreeGraphVertex)">
            <summary>
            Places the specified parent vertically in respect to its subtree or children
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NParentPlacement.NParentPlacementSchema">
            <summary>
            Schema associated with NParentPlacement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NParentPlacement.AnchorProperty">
            <summary>
            Reference to the Anchor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NParentPlacement.AlignmentProperty">
            <summary>
            Reference to the Alignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NParentPlacement.OffsetProperty">
            <summary>
            Reference to the Offset property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout">
            <summary>
            The NTipOverTreeLayout class is a directed tree layout, which places the children 
            of a vertex in a single row or column.
            </summary>
            <remarks>
            The tip-over tree layout implements an orthogontal tree drawing algorithm, which recursively arranges 
            the children subtrees of a tree vertex in either a single row or a single column.
            <para>
            The children placement can be specified on a per vertex basis. If a vertex does not 
            provide a concrete value for this parameter it is by default obtained from the ChildrenPlacement property.
            </para>
            <para>
            Unlike classical tree layouts, this type of layout does not use an uniform parent placement. 
            Based on whether the parent children must be arranged in a row or col, the layout uses the instance of the 
            <see cref="T:Nevron.Nov.Diagram.Layout.NParentPlacement">NParentPlacement</see> class, accessible from 
            the RowParentPlacement or the ColParentPlacement properties respectively.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.Compact">
            <summary>
            Gets or sets whether the layout should attempt to compact the tree drawing area. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.BreadthSpacing">
            <summary>
            Gets or sets the minimal spacing between vertices in the breadth dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.DepthSpacing">
            <summary>
            Gets or sets the minimal spacing between vertices in the depth dimension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.RowBusFactor">
            <summary>
            Gets/Sets the bus alignment relative to the aesthetically available space between parent and child nodes.
            Only applicable for edges, which connect children arranged in Row. Accepts values in the [0-1] range.
            By default set to 0.5 (middle).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ColumnBusFactor">
            <summary>
            Gets/Sets the bus alignment relative to the spacing between nodes at the same level. Only applicable
            for edges, which connect children arranged in Column. Accepts values in the [0-1] range.
            By default set to 0.5 (middle).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ChildrenPlacement">
            <summary>
            Gets/Sets the default children placement. If a vertex does not provide a local value for this parameter,
            it will use this property value. By default set to Row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.LeafsPlacement">
            <summary>
            Gets/Sets the default leafs placement. If a leaf does not provide a local value for this parameter, it will
            use this property value. By default set to Inherit.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.RowParentPlacement">
            <summary>
            Gets or sets the placement of the parent vertices whose children are arranged in a row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ColLeftParentPlacement">
            <summary>
            Gets/sets the placement of the parent vertices whose children are arranged in a left column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ColRightParentPlacement">
            <summary>
            Gets/sets the placement of the parent vertices whose children are arranged in a right column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.OnArrangingTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified tree
            </summary>
            <param name="tree"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ArrangeTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to perform the tip-over tree layout algorithm
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.CreateVertexBody">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.NTipOverTreeLayoutSchema">
            <summary>
            Schema associated with NTipOverTreeLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.CompactProperty">
            <summary>
            Reference to the Compact property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.BreadthSpacingProperty">
            <summary>
            Reference to the BreadthSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.DepthSpacingProperty">
            <summary>
            Reference to the DepthSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.RowBusFactorProperty">
            <summary>
            Reference to the RowBusFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ColumnBusFactorProperty">
            <summary>
            Reference to the ColumnBusFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ChildrenPlacementProperty">
            <summary>
            Reference to the ChildrenPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.LeafsPlacementProperty">
            <summary>
            Reference to the LeafsPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.RowParentPlacementProperty">
            <summary>
            Reference to the RowParentPlacement property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ColLeftParentPlacementProperty">
            <summary>
            Reference to the ColLeftParentPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ColRightParentPlacementProperty">
            <summary>
            Reference to the ColRightParentPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.ChildrenPlacementPropertyEx">
            <summary>
            Reference to the ChildrenPlacement extended property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.TryGetChildrenPlacement(Nevron.Nov.Dom.NNode,Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement@)">
            <summary>
            Gets the value of the ChildrenPlacementPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTipOverTreeLayout.SetChildrenPlacement(Nevron.Nov.Dom.NNode,Nevron.Nov.Diagram.Layout.ENTipOverChildrenPlacement)">
            <summary>
            Sets the value of the ChildrenPlacementPropertyEx for the specified node.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NTreeGraphRegion">
            <summary>
            The NTreeGraphRegion class represents a layout item, whose content is a tree
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeGraphRegion.#ctor(Nevron.Nov.DataStructures.NTreeGraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="tree">tree, which represents the item content</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Layout.NTreeGraphRegion.Tree">
            <summary>
            Obtains a reference to the tree for which the tree layout item was constructed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeGraphRegion.Translate(System.Double,System.Double)">
            <summary>
            Translates the item
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeGraphRegion.GetPartsIterator">
            <summary>
            Must override to provide a graph parts iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeGraphRegion.GetBounds">
            <summary>
            Overriden to return the TreeBounds
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.NTreeLayout">
            <summary>
            A graph parts layout, whose regions are trees. 
            It serves as a base class for all tree layouts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.Layout.NTreeLayout.ArrangingTree">
            <summary>
            Occurs when a tree is about to layed out by this layout.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.Layout.NTreeLayout.ArrangedTree">
            <summary>
            Occurs when a tree has been layed out by this layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.CreateRegions(Nevron.Nov.DataStructures.NList{System.Object},Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Overriden to split the object regions into trees, 
            and create a tree region for each resulting tree.
            </summary>
            <param name="objects"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.ArrangeRegionContent(Nevron.Nov.Diagram.Layout.NTreeGraphRegion,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the content of the specified region.
            </summary>
            <param name="region"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.CreateVertexBody">
            <summary>
            Called in the tree building process to create a body for each vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.CreateEdgeBody">
            <summary>
            Called in the tree building process to create a body for each edge
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.OnArrangingTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called before the layout of the specified tree
            </summary>
            <remarks>
            This implementation raises the ArrangingTree event
            </remarks>
            <param name="tree"></param>
            <param name="context"></param> 
            <returns>true if the layout can be performed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.ArrangeTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called to layout the specified tree
            </summary>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.NTreeLayout.OnArrangedTree(Nevron.Nov.DataStructures.NTreeGraph,Nevron.Nov.Layout.NLayoutContext)">
            <summary>
            Called after the layout of the specified tree
            </summary>
            <remarks>
            This implementation raises the ArrangedTree event
            </remarks>
            <param name="tree"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTreeLayout.NTreeLayoutSchema">
            <summary>
            Schema associated with NTreeLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTreeLayout.ArrangingTreeEvent">
            <summary>
            Reference to the ArrangingTree event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Layout.NTreeLayout.ArrangedTreeEvent">
            <summary>
            Reference to the ArrangedTree event
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Layout.INGlobalForce">
            <summary>
            Implemented by forces, which act globally on a graph
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Layout.INGlobalForce.AccumulateForce(Nevron.Nov.DataStructures.NGraph)">
            <summary>
            Accumulates the force acting on all vertices
            </summary>
            <param name="graph"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLineJumps">
            <summary>
            The NLineJumps attribute is used to encapsulate the line jumps feature of the connectors inside a drawing page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.Enabled">
            <summary>
            Gets/sets whether the bridge manager is enabled. 
            Setting this property to false will globally disable line jumps
            </summary>
            <remarks>
            By default set to true
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.MaxConnectors">
            <summary>
            Gets/sets the maximum number of connectors to create line jumps for.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.OwnerPage">
            <summary>
            Gets the page that owns this manager.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.LineJumpsTarget">
            <summary>
            Gets or sets the targets for bridge generations
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.LineJumpsShape">
            <summary>
            Gets or sets the shape of the bridges that the connector displays.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.LineJumpsLength">
            <summary>
            Gets or sets the length of the bridges that the connector displays.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineJumps.LineJumpsBow">
            <summary>
            Gets or sets the bow of the bridges that the connector displays.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.OnShapeBoundsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape bounds have changed
            </summary>
            <param name="shape">shape whose bounds have changed</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.OnShapeRemoved(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape has been removed from the container subtree
            </summary>
            <param name="shape">shape which has been removed</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.OnShapeInserted(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called by the container when the specified shape has been inserted to the container subtree
            </summary>
            <param name="shape">shape which has been inserted</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.OnShapeIndexChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called by the container when the index of a shape inside its container has changed
            </summary>
            <param name="shape">shape whose index has changed</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.CreatePathWithLineJumps(Nevron.Nov.Diagram.NRoutableConnector,Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Creates a bridged path for the specified connector points.
            </summary>
            <param name="connector"></param>
            <param name="points"></param>
            <param name="cornerRounding"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.GetRoutableConnectorsBelow(Nevron.Nov.Diagram.NRoutableConnector)">
            <summary>
            Given a connector, gets the connectors, that are below the connector in the shape Z-Order
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.GetRoutableConnectorsAbove(Nevron.Nov.Diagram.NRoutableConnector)">
            <summary>
            Given a connector, gets the connectors, that are above the connector in the shape Z-Order
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.InvalidateLineJumpsAbove(Nevron.Nov.Diagram.NRoutableConnector)">
            <summary>
            Invalidates the line jumps of all NRoutableConnector instances that are above the specified connector.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.InvalidateAllLineJumps">
            <summary>
            Invalidates the arrange of routable connectors that are inside the owner page, and thus requests a recreation of the line jumps of all connectors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.NLineJumpsSchema">
            <summary>
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.EnabledProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.MaxConnectorsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.LineJumpsTargetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.LineJumpsShapeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.LineJumpsLengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineJumps.LineJumpsBowProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLineJumps.NLineJumpsDesigner">
            <summary>
            Designer for NLineJumps.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineJumps.NLineJumpsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator">
            <summary>
            The NRoutableConnectorSegmentIterator class is used to iterate through the segments of a routable connector
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="basePoints">base points of the connector (in page coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator.Clone">
            <summary>
            Creates an exact copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator.Reset(System.Int32,System.Int32)">
            <summary>
            Resets the iterator to start iteration from the specified start segment until the specified end segment
            </summary>
            <param name="startSegment">start segment index</param>
            <param name="endSegment">end segment index</param>
            <returns>true if successfully reset, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator.MoveNext">
            <summary>
            Moves the iterator to the next segment
            </summary>
            <returns>true if this successfully moved to the next segment, false if the end segment was reached</returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator.CurSegment">
            <summary>
            Obtains the geometry line representing the current segment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorSegmentIterator.SegmentsCount">
            <summary>
            Obtains the total count of segments
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NDataGrouping">
            <summary>
            Base class for all data grouping algorithms.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NDataGrouping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NDataGrouping.RoundedRanges">
            <summary>
            Determines whether to round the ranges calculated in the Classify method or not.
            By default set top false. Note that the rounding of the data ranges will produce
            "nicer" numbers for the map legend but may alter the way the algorithm clssifies
            the data points. So it is recommended not to use rounding for a small number of
            data points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NDataGrouping.Classify(Nevron.Nov.DataStructures.INList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NDataGroupingEqualDistribution">
            <summary>
            Also known as quantiles, this method allows for unequally sized data intervals and
            involves adjustment of the interval limits until an equal number of data points can
            be slotted into each interval.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NDataGroupingEqualDistribution.Classify(Nevron.Nov.DataStructures.INList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NDataGroupingEqualInterval">
            <summary>
            Also known as equal ranges (or steps), this method involves division of the entire data
            range into equally sized intervals.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NDataGroupingEqualInterval.Classify(Nevron.Nov.DataStructures.INList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NDataGroupingOptimal">
            <summary>
            Uses the Jenks-Caspall optimal data grouping algorithm.
            </summary>
            <remarks>
            The algorithm is based on iterative re-cycling: the values on the edge of each class,
            with the mean of their own class and the average of the next class. If a value closer
            to the mean of the neighboring class, it will be moved into this. The process is repeated
            iteratively until no further optimization is possible.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NDataGroupingOptimal.Classify(Nevron.Nov.DataStructures.INList{System.Double},System.Int32)">
            <summary>
            Creates the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType">
            <summary>
            Indicates the type of shapes described by a single ESRI shapefile record.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.Automatic">
            <summary>
            The record type is automatically determined by analyzing the contents of the
            record.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.MultiPatch">
            <summary>
            Unused. The record represents a solid surface connected by several points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.MultiPoint">
            <summary>
            The record represents a collection of unconnected geographic points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.MultiPointM">
            <summary>
            Unused. The record represents a collection of measured, unconnected
            points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.MultiPointZ">
            <summary>
            Unused. The record represents a collection of unconnected three-dimensional
            geographic points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.NullShape">
            <summary>
            The record represents an empty value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.Point">
            <summary>
            The record represents a single geographic point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PointM">
            <summary>
            Unused. The record represents a single measured point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PointZ">
            <summary>
            Unused. The record represents a three-dimensional coordinate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.Polygon">
            <summary>
            The record represents a closed shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PolygonM">
            <summary>
            Unused. The record represents a measured shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PolygonZ">
            <summary>
            Unused. The record represents a closed, three-dimensional shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PolyLine">
            <summary>
            The record represents a line connected by two or more points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PolyLineM">
            <summary>
            Unused. The record represents a single measured line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENShapefileRecordType.PolyLineZ">
            <summary>
            Unused. The record represents a three-dimensional line connected by two or more points.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.ENArcRenderMode">
            <summary>
            Enumerates the arc render modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcRenderMode.Hidden">
            <summary>
            The arcs are not shown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcRenderMode.BelowObjects">
            <summary>
            The arcs are drawn below other map objects.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcRenderMode.AboveObjects">
            <summary>
            The arcs are drawn above other map objects.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.ENArcLabelPlacement">
            <summary>
            Enumerates the possible arc label placements.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcLabelPlacement.None">
            <summary>
            The arcs will not be labeled.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcLabelPlacement.FirstArc">
            <summary>
            The labels will be placed above the first arc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcLabelPlacement.MiddleArc">
            <summary>
            The labels will be placed above the middle arc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENArcLabelPlacement.LastArc">
            <summary>
            The labels will be placed below the last arc.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.ENMapDataBindingSourceType">
            <summary>
            Enumerates the map data binding source types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENMapDataBindingSourceType.OleDb">
            <summary>
            OleDb
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENMapDataBindingSourceType.Sql">
            <summary>
            Sql
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType">
            <summary>
            Defines the avilable Cylindrical Equal-Area projections.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType.Lambert">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 0 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType.Behrmann">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 30 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType.TristanEdwards">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 37.383 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType.Peters">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 44.138 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType.Gall">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 45 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType.Balthasart">
            <summary>
            Cylindrical Equal-Area projection with standard parallel of 50 degrees.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.ENMapCoordinateSystemType">
            <summary>
            Enumerates the coordinate system types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENMapCoordinateSystemType.Geographic">
            <summary>
            Geographics (i.e. longitude-latitude base) map coordinate system.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.ENMapCoordinateSystemType.Projected">
            <summary>
            Projected map coordinate system.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter">
            <summary>
            Imports one or more ESRI shapefiles in a drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.FileCount">
            <summary>
            Gets the number of shapefiles loaded into the map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.Import(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Imports an ESRI map to the given document.
            </summary>
            <param name="document"></param>
            <param name="importArea"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.AddShapefile(Nevron.Nov.Diagram.Import.Map.NEsriShapefile)">
            <summary>
            Adds a new shapefile to the map.
            </summary>
            <param name="shapefile">The ESRI shapefile to add.</param>
            <returns>The ESRI shapefile that was added to the map.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.Clear">
            <summary>
            Clears all items from the list.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.Read">
            <summary>
            Reads all ESRI shape files of the map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.GetAllFeatures">
            <summary>
            Gets the shapes in all ESRI files in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriMapImporter.GetShapefileAt(System.Int32)">
            <summary>
            Gets the ESRI shapefile at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NEsriShapefile">
            <summary>
            Represents an ESRI shapefile containing geographical data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.#ctor(Nevron.Nov.NEmbeddedResource)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="shapefileResource"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.#ctor(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="shapefileStream"></param>
            <param name="dbfStream"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.Features">
            <summary>
            Gets the shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.MapBounds">
            <summary>
            Gets the bounds of the map.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.DataTable">
            <summary>
            Gets the data table filled from the DBF file.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.Name">
            <summary>
            Gets the name of the shapefile without the extension.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.MinZoomPercent">
            <summary>
            Gets/Sets the minimum zoom percent at which the shapes of this shapefile should become
            visible. By default set to 0, which means that the shapes are always visible.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.MaxZoomPercent">
            <summary>
            Gets/Sets the maximum zoom percent above which the shapes of this shapefile should become
            hidden. By default set to Double.MaxValue.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.MinTextZoomPercent">
            <summary>
            Gets/Sets the minimum zoom percent for texts.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.MaxTextZoomPercent">
            <summary>
            Gets/Sets the maximum zoom percent for texts.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.NameColumn">
            <summary>
            Specifies the data column from the DBF file to use for naming of the diagram shapes
            created from the shapefile.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.TextColumn">
            <summary>
            Specifies the data column from the DBF file to use for labeling the diagram shapes
            created from the shapefile.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.RecordType">
            <summary>
            Gets the record type contained in this ESRI shapefile.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.ColumnNames">
            <summary>
            Gets only the names of the columns in the DBF file without reading the other data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.FillRule">
            <summary>
            Gets/Sets the fill rule associated with this ESRI shapefile.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.DbfEncoding">
            <summary>
            The encoding to use when reading string data from the accompanying DBF data file. By default set to UTF-8.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.ToString">
            <summary>
            Returns a string description of the current NEsriShapefile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.Read">
            <summary>
            Reads the ESRI shapefile (.shp) and its attributes (.dbf).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.DataBind(Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext)">
            <summary>
            Imports data from a database.
            </summary>
            <param name="dataBindingContext">A data binding context.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.DataBind(Nevron.Nov.Data.NDataTable,Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext)">
            <summary>
            Imports data from a data table.
            </summary>
            <param name="dataTable">The data table to import from.</param>
            <param name="dataBindingContext">A map data binding context.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEsriShapefile.LoadFromFile(Nevron.Nov.IO.NFile)">
            <summary>
            Loads an ESRI shapefile from the given file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NGisFeature">
            <summary>
            Base class for all ESRI supported GIS features.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NGisFeature.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this feature.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NGisFeature.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NGisFeature.RecordNumber">
            <summary>
            Record number.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NGisFeature.ShapeType">
            <summary>
            Shape type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NGisFeature.ContentLength">
            <summary>
            Content length.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NGisFeature.Attributes">
            <summary>
            Attributes of this feature.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener">
            <summary>
            Interface, which contains methods called by the shape importer
            when a new shape has been created.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener.OnPolygonCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a polygon shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener.OnMultiPolygonCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a shape, which consists of multiple polygons has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener.OnPolylineCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a polyline shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener.OnMultiPolylineCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a shape, which consists of multiple polylines has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener.OnPointCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a point shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.INShapeCreatedListener.OnMultiPointCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a shape, which consists of multiple points has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener">
            <summary>
            Empty implementation of the INShapeCreatedListener interface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener.OnPolygonCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a polygon shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener.OnMultiPolygonCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a shape, which consists of multiple polygons has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener.OnPolylineCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a polyline shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener.OnMultiPolylineCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a shape, which consists of multiple polylines has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener.OnPointCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a point shape has been created. Return false to cancel
            the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NShapeCreatedListener.OnMultiPointCreated(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Import.Map.NGisFeature)">
            <summary>
            Called when a shape, which consists of multiple points has been created.
            Return false to cancel the adding of the shape to the document.
            </summary>
            <param name="shape"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapFillRule">
            <summary>
            Base class for map fill rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRule.#ctor(System.String,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRule.#ctor(System.String,Nevron.Nov.Graphics.NColor[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="colors">The colors to use for filling.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapFillRule.ColumnIndex">
            <summary>
            Gets the index of the data column whose values to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapFillRule.ClassCount">
            <summary>
            Gets the number of classes of this map fill rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRule.Initialize(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Inspects the shapefile data and initializes the map fill rule.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRule.GetClassNameForValue(System.Object)">
            <summary>
            Gets the name of the style class that should be associated with the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRule.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRule.CreateStyles(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Creates the fill rule's styles.
            </summary>
            <param name="document"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapFillRule.m_DataTable">
            <summary>
            The data table of this fill rule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapFillRule.m_Colors">
            <summary>
            The colors of this fill rule.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange">
            <summary>
            A map fill rule that fills the map shapes based on a value associated with each of them.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.#ctor(System.String,Nevron.Nov.Graphics.NColor[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="colors">The colors to use for filling.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.#ctor(System.String,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.ClassCount">
            <summary>
            Gets the number of classes of this map fill rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.DataGrouping">
            <summary>
            Gets/Sets the data grouping algorithm to use for determining the data ranges.
            By default set to optimal data grouping.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.Initialize(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Inspects the shapefile data and initializes the map fill rule.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.GetClassNameForValue(System.Object)">
            <summary>
            Gets the name of the stylesheet that should be associated with the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.GetValueAt(System.Int32)">
            <summary>
            Gets the start of the range at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.GetDataGroups(Nevron.Nov.DataStructures.NList{System.Double},System.Int32)">
            <summary>
            Gets the specified number of data ranges (classes) for the given
            set of data points (distinct values).
            </summary>
            <param name="data">The data points to classify sorted in ascending order.</param>
            <param name="classCount">The number of classes desired.</param>
            <returns>An array of doubles representing the data ranges. For example an array {0, 12, 32.1} means
            that there are 3 data ranges: [0, 12), [12, 32.1) and [32.1, Infinity).</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.GetLowerBoundIndex(System.Double)">
            <summary>
            Gets the index of the data group the given value should belong to.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.m_Ranges">
            <summary>
            The fill rule's ranges.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapFillRuleRange.m_DataGrouping">
            <summary>
            The data grouping.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue">
            <summary>
            A map fill rule that fills the map shapes based on a value associated with each of them.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.#ctor(System.String,Nevron.Nov.Graphics.NColor[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="colors">The colors to use for filling.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.#ctor(System.String,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnName">The name of the column to get values from.</param>
            <param name="color1">The start color for gradient generation.</param>
            <param name="color2">The end color for gradient generation.</param>
            <param name="colorCount">The number of gradient colors to generate.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.ClassCount">
            <summary>
            Gets the number of classes of this map fill rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.Initialize(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Inspects the shapefile data and initializes the map fill rule.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.GetClassNameForValue(System.Object)">
            <summary>
            Gets the name of the stylesheet that should be associated with the given value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapFillRuleValue.m_Values">
            <summary>
            The values of this fill rule.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapArcsSettings">
            <summary>
            Controls the way parallels and meridians are rendered.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapArcsSettings.PointsPerArc">
            <summary>
            Determines the number of points per arc. By default set to 100.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapArcsSettings.Step">
            <summary>
            Determines the distance in degrees between two adjacent arcs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapArcsSettings.RenderMode">
            <summary>
            Determines the way the arcs are rendered. By default set to Hidden.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapArcsSettings.ShowLabels">
            <summary>
            Determines whether to show labels for the arcs or not. By default set to false.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapBounds">
            <summary>
            Contains information about the bounds of a map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="minLongitude"></param>
            <param name="maxLongitude"></param>
            <param name="minLatitude"></param>
            <param name="maxLatitude"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.MinLongitude">
            <summary>
            Gets/Sets the minimum longitude in degrees. Should be in the range [-180, 180].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.MaxLongitude">
            <summary>
            Gets/Sets the maximum longitude in degrees. Should be in the range [-180, 180].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.MinLatitude">
            <summary>
            Gets/Sets the minimum latitude in degrees. Should be in the range [-90, 90].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.MaxLatitude">
            <summary>
            Gets/Sets the maximum latitude in degrees. Should be in the range [-90, 90].
            By default set to Double.NaN, which means that the value will be automatically determined
            from the imported map data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.Width">
            <summary>
            Gets the width of this map bounds, i.e. the difference between the maximum and the minimum longitude.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.Height">
            <summary>
            Gets the height of this map bounds, i.e. the difference between the maximum and the minimum latitude.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.IsAuto">
            <summary>
            Gets whether this map bounds object is set to Auto, which is true if at least one of
            the min or max longitudes or latitudes is set to Double.NaN.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.IsEmpty">
            <summary>
            Gets whether this map bounds has zero width or height.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapBounds.CoordinateSystemType">
            <summary>
            Gets the coordinate system type of this map bounds.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.ToString">
            <summary>
            Gets the string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.Union(Nevron.Nov.Diagram.Import.Map.NMapBounds)">
            <summary>
            Creates the smallest possible map bounds, which contains both this and the given map bounds.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.Intersection(Nevron.Nov.Diagram.Import.Map.NMapBounds)">
            <summary>
            Returns a third map bounds that represents the intersection of two map bounds.
            If there is no intersection, the Auto map bounds is returned.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.ClampToWorldBounds">
            <summary>
            Clamps this map bounds to the World bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.Contains(Nevron.Nov.Diagram.Import.Map.NMapBounds)">
            <summary>
            Determines whether the map bounds contains the specified map bounds.
            </summary>
            <param name="mapBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.ToNRectangleF">
            <summary>
            Converts this map bounds to an NRectangle instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.Union(Nevron.Nov.Diagram.Import.Map.NMapBounds,Nevron.Nov.Diagram.Import.Map.NMapBounds)">
            <summary>
            Creates the smallest possible map bounds, which contains both given map bounds.
            </summary>
            <param name="mapBounds1"></param>
            <param name="mapBounds2"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.Intersection(Nevron.Nov.Diagram.Import.Map.NMapBounds,Nevron.Nov.Diagram.Import.Map.NMapBounds)">
            <summary>
            Returns a third map bounds that represents the intersection of two map bounds.
            If there is no intersection, the Auto map bounds is returned.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapBounds.FromNRectangle(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates a map bounds from the given NRectangle instance.
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapBounds.Auto">
            <summary>
            Denotes that the map bounds should be automatically calculated based on the imported map data.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapBounds.World">
            <summary>
            Represents the world map bounds.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapImporter">
            <summary>
            Base class for maps.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapImporter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapImporter.MapBounds">
            <summary>
            Gets/sets the bounds of the map where x represents longitude and is between
            -180 and 180 degrees and y represents lattitude and is between -90 and 90
            degrees.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapImporter.ShapeCreatedListener">
            <summary>
            Contains methods called when diagram shapes are created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapImporter.Projection">
            <summary>
            Gets/sets the projection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapImporter.ParallelSettings">
            <summary>
            Gets the settings for the paralles.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapImporter.MeridianSettings">
            <summary>
            Gets the settings for the meridians.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapImporter.Import(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Creates and imports the shapes defined in the map into the drawing document.
            </summary>
            <param name="document">The document to import the map in.</param>
            <param name="importArea">The bounds of the area the map is rendered on.</param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext">
            <summary>
            Provides information about map importer data binding.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.TableName">
            <summary>
            Gets or sets the name of the table to import from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.PrimaryKey">
            <summary>
            Gets or sets the name of the column in the attribute data of this shapefile.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.ForeignKey">
            <summary>
            Gets or sets the name of the column from the source data table bind with the primary key column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.BindingColumns">
            <summary>
            The columns from the source data table to import data from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.TrimStrings">
            <summary>
            If true the strings will be trimmed before they are compared for matches.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapDataBindingContext.DataBindingSourceType">
            <summary>
            Gets or sets the map data binding source type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NProjectedFeature">
            <summary>
            Represents a projected feature.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NProjectedFeature.#ctor(Nevron.Nov.Graphics.NPoint[],System.Int32[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="points"></param>
            <param name="figureStarts"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NProjectedFeature.Points">
            <summary>
            The points of the projected feature.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NProjectedFeature.FigureStarts">
            <summary>
            The indexes in the point array at which a figure starts.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NAitoffProjection">
            <summary>
            The Aitoff projection is a modified azimuthal map projection.
            </summary>
            <remarks>
            Proposed by David A. Aitoff in 1889, it is the equatorial form of the azimuthal
            equidistant projection, but stretched into a 2:1 ellipse while halving the longitude
            from the central meridian.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NAitoffProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NAitoffProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NAitoffProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NAitoffProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NBonneProjection">
            <summary>
            A Bonne projection is a pseudoconical equal-area map projection.
            </summary>
            <remarks>
            <para>
            All parallels are standard, with the same scale as the central meridian;
            parallels are concentric circles. No distortion along the reference parallel
            or the central meridian.
            </para>
            <para>
            Special Cases: Werner results when the reference parallel
            is at a pole. Sinusoidal results when the reference parallel is at the equator.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NBonneProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NBonneProjection.#ctor(System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="standardParallel">The standard parallel of the projection. Must be
            between -90 and 90 degrees.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NBonneProjection.StandardParallel">
            <summary>
            The standard parallel of the projection. Must be between -90 and 90 degrees.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NBonneProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NBonneProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NBonneProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NBonneProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection">
            <summary>
            Represents the general Cylindrical Equal-Area projection.
            </summary>
            <remarks>
            The following is a summary of cylindrical equal-area projection's special cases: 
            - Lambert         : standard parallel of  0     degrees 
            - Behrmann        : standard parallel of 30     degrees 
            - Tristan Edwards : standard parallel of 37.383 degrees 
            - Peters          : standard parallel of 44.138 degrees 
            - Gall            : standard parallel of 45     degrees 
            - Balthasart      : standard parallel of 50     degrees
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection.#ctor(Nevron.Nov.Diagram.Import.Map.ENCylindricalEqualAreaProjectionType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="type">The type of the Cylindrical Equal-Area projection.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection.Type">
            <summary>
            Gets/sets the type of the Cylindrical Equal-Area projection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NCylindricalEqualAreaProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NEckertIVProjection">
            <summary>
            The Eckert IV projection, used for world maps, is a pseudocylindrical and equal-area.
            </summary>
            <remarks>
            The central meridian is straight, the 180th meridians are semi-circles, other meridians
            are elliptical. Scale is true along the parallel at 40:30 North and South.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEckertIVProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEckertIVProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEckertIVProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NEckertVIProjection">
            <summary>
            The Eckert VI projection, used for maps of the world, is pseudocylindrical and equal area.
            </summary>
            <remarks>
            The central meridian and all parallels are at right angles, all other meridians are sinusoidal
            curves. Shape distortion increases at the poles. Scale is correct at standard parallels of
            49:16 North and South.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEckertVIProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEckertVIProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEckertVIProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NEquirectangularProjection">
            <summary>
            Basic GIS projection that maps meridians to equally spaced vertical straight lines,
            and parallels to equally spaced horizontal straight lines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NEquirectangularProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NHammerProjection">
            <summary>
            The Hammer projection is an equal-area map projection, described by Ernst Hammer in 1892.
            </summary>
            <remarks>
            Directly inspired by the Aitoff projection, Hammer suggested the use of the equatorial form
            of the Lambert azimuthal equal-area projection instead of Aitoff's use of the azimuthal
            equidistant projection. Visually, the Aitoff and Hammer projections are very similar but the
            Hammer has seen more use because of its equal-area property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NHammerProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NHammerProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NHammerProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NHammerProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NKavrayskiyVIIProjection">
            <summary>
            The Kavrayskiy VII is a map projection invented by V. V. Kavrayskiy in 1939 for use
            as a general purpose pseudocylindrical projection. 
            </summary>
            <remarks>
            Like the Robinson projection, it is a compromise intended to produce good quality maps
            with low distortion overall. It scores well in that respect compared to other popular
            projections, such as the Winkel Tripel, despite straight, evenly-spaced parallels
            and a simple formulation. It has been used in the former Soviet Union but is almost
            unknown in the Western world.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NKavrayskiyVIIProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NKavrayskiyVIIProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NKavrayskiyVIIProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMapProjection">
            <summary>
            Base class for all map projections. Call the Initialize method to set
            the size of the map and the canvas to render it in.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapProjection.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapProjection.MapBounds">
            <summary>
            Gets the bounds of the map.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapProjection.CanvasBounds">
            <summary>
            Gets the bounds of the canvas where the map is rendered.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapProjection.MeridianArcLabelPlacement">
            <summary>
            Determines the arc label placement.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapProjection.MeridianLabelAlignment">
            <summary>
            Get/Sets the arc labels relative alignment around the parallel - meridian intersection point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapProjection.ParallelArcLabelPlacement">
            <summary>
            Determines the arc label placement.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NMapProjection.ParallelLabelAlignment">
            <summary>
            Get/Sets the arc labels relative alignment around the parallel - meridian intersection point.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapProjection.ProjectPoints(Nevron.Nov.Graphics.NPoint[],System.Int32[])">
            <summary>
            Projects the specified points and returns a projected feature or null if the
            given points are not visible in this projection and should not be imported.
            </summary>
            <param name="points"></param>
            <param name="figureStarts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point and returns the result.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapProjection.Initialize(Nevron.Nov.Diagram.Import.Map.NMapBounds,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializes the projection.
            </summary>
            <param name="mapBounds">The bounds of the map.</param>
            <param name="canvasBounds">The bounds of the canvas where the map is rendered.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMapProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapProjection.m_MeridianArcLabelPlacement">
            <summary>
            Meridian arc label placement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapProjection.m_MeridianLabelAlignment">
            <summary>
            Meridian label alignment.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapProjection.m_ParallelArcLabelPlacement">
            <summary>
            Parallel arc label placement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Import.Map.NMapProjection.m_ParallelLabelAlignment">
            <summary>
            Parallel label alignment.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMercatorProjection">
            <summary>
            Implements the Mercator projection.
            </summary>
            <remarks>
            This map projection introduced in 1569 by Gerardus Mercator. 
            It is often described as a cylindrical projection, but it must be derived
            mathematically. The meridians are equally spaced, parallel vertical lines, 
            and the parallels of latitude are parallel, horizontal straight lines, 
            spaced farther and farther apart as their distance from the Equator 
            increases. This projection is widely used for navigation charts, because 
            any straight line on a Mercator-projection map is a line of constant true 
            bearing that enables a navigator to plot a straight-line course. 
            It is less practical for world maps because the scale is distorted; 
            areas farther away from the equator appear disproportionately large. 
            On a Mercator projection, for example, the landmass of Greenland appears 
            to be greater than that of the continent of South America; in actual area, 
            Greenland is smaller than the Arabian Peninsula.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMercatorProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMercatorProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMercatorProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMillerCylindricalProjection">
            <summary>
            The Miller cylindrical projection is a modified Mercator projection, proposed by Osborn
            Maitland Miller (1897-1979) in 1942.
            </summary>
            <remarks>
            The parallels of latitude are scaled by a factor of 0.8, projected according to Mercator,
            and then the result is divided by 0.8 to retain scale along the equator.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMillerCylindricalProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMillerCylindricalProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMillerCylindricalProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NMollweideProjection">
            <summary>
            The Mollweide projection is a pseudocylindrical map projection generally used for global 
            maps of the world (or sky). Also known as the Babinet projection, homolographic projection,
            or elliptical projection.
            </summary>
            <remarks>
            As its more explicit name Mollweide equal area projection indicates, it sacrifices fidelity
            to angle and shape in favor of accurate depiction of area. It is used primarily where accurate
            representation of area takes precedence over shape, for instance small maps depicting global
            distributions.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMollweideProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMollweideProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMollweideProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NMollweideProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection">
            <summary>
            Orthographic projection is a perspective (or azimuthal) projection, in which the sphere
            is projected onto a tangent plane. It depicts a hemisphere of the globe as it appears from
            outer space. The shapes and areas are distorted, particularly near the edges, but distances
            are preserved along parallels.
            </summary>
            <remarks>
            You can control the center point of the projection using the <see cref="P:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.CenterPoint"/> property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.#ctor(System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="centralMeridian">The central meridian of the projection.
            Must be between -90 and 90 degrees.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.CenterPoint">
            <summary>
            Gets/sets the projection center measured in degrees.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.ProjectPoints(Nevron.Nov.Graphics.NPoint[],System.Int32[])">
            <summary>
            Projects the given points.
            </summary>
            <param name="points"></param>
            <param name="figureStarts"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NOrthographicProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NRobinsonProjection">
            <summary>
            The Robinson projection is a map projection made in 1988 to show the entire world at once.
            It was specifically created in an attempt to find the good compromise to the problem of
            readily showing the whole globe as a flat image.
            </summary>
            <remarks>
            The projection is neither equal-area nor conformal, abandoning both for a compromise.
            The creator felt this produced a better overall view than could be achieved by adhering
            to either. The meridians curve gently, avoiding extremes, but thereby stretch the poles
            into long lines instead of leaving them as points. Hence distortion close to the poles
            is severe but quickly declines to moderate levels moving away from them. The straight
            parallels imply severe angular distortion at the high latitudes toward the outer edges
            of the map, a fault inherent in any pseudocylindrical projection.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NRobinsonProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NRobinsonProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NRobinsonProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NStereographicProjection">
            <summary>
            The stereographic projection is a particular mapping (function) that projects a sphere
            onto a plane.
            </summary>
            <remarks>
            The fact that no map from the sphere to the plane can accurately represent both angles
            (and thus shapes) and areas is the fundamental problem of cartography. In general,
            area-preserving map projections are preferred for statistical applications, because
            they behave well with respect to integration, while angle-preserving (conformal) map
            projections are preferred for navigation. The stereographic projection falls into the
            second category.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NStereographicProjection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NStereographicProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NStereographicProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NStereographicProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NStereographicProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NVanDerGrintenProjection">
            <summary>
            The van der Grinten projection is neither equal-area nor conformal. It projects 
            the entire Earth into a circle, though the polar regions are subject to extreme distortion.
            </summary>
            <remarks>
            <para>
            The projection was the first of four proposed by Alphons J. van der Grinten in 1904,
            and, unlike most projections, is an arbitrary geometric construction on the plane.
            It was made famous when the National Geographic Society adopted it as their reference 
            map of the world from 1922 until 1988.
            </para>
            <para>
            The projection offers pleasant balance of shape and scale distortion. Boundary is a circle;
            all parallels and meridians are circular arcs (spacing of parallels is arbitrary). No 
            distortion along the standard parallel at the equator. Usually clipped near 80� N/S.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NVanDerGrintenProjection.InitializeArcsInfo">
            <summary>
            Sets the arcs info for this projection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NVanDerGrintenProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NVanDerGrintenProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NVanDerGrintenProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NWagnerVIProjection">
            <summary>
            Wagner VI is a pseudocylindrical whole Earth map projection. Like the Robinson projection,
            it is a compromise projection, not having any special attributes other than a pleasing,
            low distortion appearance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NWagnerVIProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NWagnerVIProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NWagnerVIProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Import.Map.NWinkelTripelProjection">
            <summary>
            The Winkel Tripel projection (Winkel III) is a modified azimuthal map projection proposed
            by Oswald Winkel in 1921. The projection is the arithmetic mean of the equirectangular
            projection and the Aitoff projection.
            </summary>
            <remarks>
            Goldberg and Gott show that the Winkel Tripel is arguably the best overall whole-earth map
            projection known, producing very small distance errors, small combinations of ellipticity
            and area errors, and the smallest skewness of any map. In 1998, the Winkel Tripel projection
            replaced the Robinson projection as the standard projection for world maps made by the 
            National Geographic Society.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NWinkelTripelProjection.ProjectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Projects the specified point.
            </summary>
            <param name="point"></param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NWinkelTripelProjection.DeprojectPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Deprojects the specified point to recover its longitude and lattitude.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Import.Map.NWinkelTripelProjection.ToString">
            <summary>
            Returns a System.String that represents the current System.Object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NAutoConnectAction">
            <summary>
            Represents an action from the AutoConnect
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NAutoConnectAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectAction.TransactionName">
            <summary>
            Gets or sets the name of the transaction for this operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectAction.DoActionDelegate">
            <summary>
            Gets or sets the delegate that performs the auto connect action.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NAutoConnectActionContext">
            <summary>
            Represents the context in which an auto connect operation is executed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectActionContext.DestroyAidAfterAction">
            <summary>
            Determines whether the aid is destroyed the after the action is executed. 
            Has effect only when the action is not in preview mode.
            By default true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectActionContext.Preview">
            <summary>
            Gets whether the operation is performed for preview purposes.
            Use it to determine whether preview of the result should be generated.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectActionContext.Shape">
            <summary>
            Gets the shape for which the action is performed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectActionContext.ContextMenuWindow">
            <summary>
            Gets the context menu window.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NAutoConnectButtonInfo">
            <summary>
            Represents the information that is required for each auto connect button.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NAutoConnectButtonInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectButtonInfo.ClickAction">
            <summary>
            Gets or sets the action associated with clicking the button
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectButtonInfo.MenuActions">
            <summary>
            Gets or sets the menu actions associated with this button
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NAutoConnectButtonInfo.CanShowButton">
            <summary>
            Determines whether the button can be shown.
            </summary>
            <remarks>
            The imlementation checks whether the menu can be shown or whether there is a click action (executed when the button is clicked).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NAutoConnectButtonInfo.CanShowMenu">
            <summary>
            Determines whether the menu can be shown.
            </summary>
            <remarks>
            The imlementation checks for the presence of menu actions. If there are no menu actions, the menu should not be shown.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NAutoConnectMenuAction">
            <summary>
            Represents an AutoConnect action from the context menu
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NAutoConnectMenuAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NAutoConnectMenuAction.CreateWidgetDelegate">
            <summary>
            Gets or sets the delegate which creates the widget that represents the shape in the context menu
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDataObjectAdaptor">
            <summary>
            The NDataObjectAdaptor class serves as base class for all data object adapters 
            that "adapt" Data Objects content to Diagram Clippings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDataObjectAdaptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDataObjectAdaptor.CanAdapt(Nevron.Nov.UI.NDataObject)">
            <summary>
            Determines whether the adapter can adapt the specified data object
            </summary>
            <param name="dataObject">data object to adapt</param>
            <returns>true if the data object can be adapted</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDataObjectAdaptor.Adapt(Nevron.Nov.UI.NDataObject)">
            <summary>
            Adapts the specified data object 
            </summary>
            <param name="dataObject">data object to adapt</param>
            <returns>adapted data object</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDataObjectAdaptor.NDataObjectAdaptorSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDataObjectAdaptorCollection">
            <summary>
            The NDataObjectAdaptorCollection class is a strongly typed collection, containging NDataObjectAdaptor instances
            </summary>
            <remarks>
            A reference to this class can be obtained from the NDocument DataObjectAdaptors property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDataObjectAdaptorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDataObjectAdaptorCollection.GetAdaptorForDataObject(Nevron.Nov.UI.NDataObject)">
            <summary>
            Gets the first adapter which can adapt the specified data object
            </summary>
            <param name="dataObject">data object which must be adapted</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDataObjectAdaptorCollection.NDataObjectAdaptorCollectionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor">
            <summary>
            The NDrawingDataObjectAdaptor is used to adapt data objects for diagram drawing.
            </summary>
            <remarks>
            The NDrawingDataObjectAdaptor can adapt text, NLibraryDataObject and NDrawingDataObject data objects as a NDrawingDataObject instance
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.OwnerDrawing">
            <summary>
            Obtains a reference to the drawing hosting the adapter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.CanAdapt(Nevron.Nov.UI.NDataObject)">
            <summary>
            Determines whether the adapter can adapt the specified data object
            </summary>
            <remarks>
            Overriden to return true if the data object contains data in the following formats:
            DataFormats.Text, NLibraryDataObject.FormatName and NDrawingDataObject.FormatName
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>true if the data object can be adapted</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.Adapt(Nevron.Nov.UI.NDataObject)">
            <summary>
            Adapts the specified data object 
            </summary>
            <remarks>
            Overriden to adapt the data object as an INDiagramElement[] instance
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>adapted data object</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.AdaptText(System.String)">
            <summary>
            Adapts the specified text as a drawing data object, ready to be inserted in a drawing document
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.AdaptRaster(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Adapts the specified raster.
            </summary>
            <param name="raster"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.AdaptLibraryDataObject(Nevron.Nov.Diagram.NLibraryClipping)">
            <summary>
            Adapts the specified library data object as a drawing data object, ready to be inserted in a drawing document
            </summary>
            <param name="libraryClipping"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.AdaptDrawingDataObject(Nevron.Nov.Diagram.NDrawingClipping)">
            <summary>
            Adapts the specified drawing data object as a drawing data object, ready to be inserted in a drawing document
            </summary>
            <param name="ddo"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingDataObjectAdaptor.NDrawingDataObjectAdaptorSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor">
            <summary>
            The NLibraryDataObjectAdaptor is used to adapt data objects for library documents
            </summary>
            <remarks>
            The NLibraryDataObjectAdaptor can adapt text, NDrawingDataObject and NLibraryDataObject data objects as a NLibraryDataObject instance
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.OwnerLibrary">
            <summary>
            Obtains a reference to the library document hosting the adapter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.CanAdapt(Nevron.Nov.UI.NDataObject)">
            <summary>
            Determines whether the adapter can adapt the specified data object
            </summary>
            <remarks>
            Overriden to return true if the data object contains data in the following formats:
            DataFormats.Text, NLibraryDataObject.FormatName and NDrawingDataObject.FormatName
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>true if the data object can be adapted</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.Adapt(Nevron.Nov.UI.NDataObject)">
            <summary>
            Adapts the specified data object 
            </summary>
            <remarks>
            Overriden to adapt the data object as an NMaster[] instance
            </remarks>
            <param name="dataObject">data object to adapt</param>
            <returns>adapted data object</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.AdaptText(System.String)">
            <summary>
            Adapts the specified text as a library data object, ready to be inserted in a library document
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.AdaptRaster(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Adapts the specified raster.
            </summary>
            <param name="raster"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.AdaptLibraryDataObject(Nevron.Nov.Diagram.NLibraryClipping)">
            <summary>
            Adapts the specified library data object as a library data object, ready to be inserted in a library document
            </summary>
            <param name="ldo"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.AdaptDrawingDataObject(Nevron.Nov.Diagram.NDrawingClipping)">
            <summary>
            Adapts the specified drawing data object as a library data object, ready to be inserted in a library document
            </summary>
            <param name="ddo"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryDataObjectAdaptor.NLibraryDataObjectAdaptorSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramClipping">
            <summary>
            The NDiagramClipping serves as base class for drawing and library clippings.
            A diagram clipping facilities the Data Exchange operations related to drawing and library items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.#ctor(Nevron.Nov.Diagram.NDiagramClipping)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.Diagram.NDiagramItem[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.DeepClone">
            <summary>
            Must override to deep clone the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramClipping.Items">
            <summary>
            Gets the items contained in this clipping (valid after initialization)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramClipping.DocumentUniqueId">
            <summary>
            Gets the UniqueId of the document to which the items originally belonged (valid after initialization)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.GetDataFormat">
            <summary>
            Must override to return the data exchange format associated with this diagram clipping.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.Initialize(Nevron.Nov.Dom.NDocument,Nevron.Nov.Diagram.NDiagramItem[])">
            <summary>
            Initializes the clipping with the given document and diagram items.
            </summary>
            <param name="document"></param>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.AddInCollection(Nevron.Nov.Dom.NDocument,Nevron.Nov.Dom.NElement)">
            <summary>
            Adds the content of this drawing data object in the specified diagram composite element
            </summary>
            <param name="document"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.InsertInCollection(Nevron.Nov.Dom.NDocument,Nevron.Nov.Dom.NElement,System.Int32)">
            <summary>
            Inserts the content of this drawing data object in the specified diagram composite element
            </summary>
            <param name="document"></param>
            <param name="collection"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.SetOnClipboard">
            <summary>
            Sets the this data object on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.CreateDataObject">
            <summary>
            Creates a data object that contains this clipping content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.OnInitialized">
            <summary>
            Called when the clipping has been initialized.
            Override this method to store additional information about the clipping content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.Serialize">
            <summary>
            Serializes the contnet of this clipping to a byte array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramClipping.Deserialize(System.Byte[])">
            <summary>
            Deserialized the content of this clippnig from a byte array.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingClipping">
            <summary>
            The NDrawingClipping represents a set of drawing items, 
            that can be transfered across documents via Clipboard and Drag and Drop operations
            </summary>
            <remarks>
            The NDrawingClipping is used to host an array of drawing item clonings. 
            The NDrawingClipping class can also be used for duplicating drawings content.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingClipping.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingClipping.#ctor(Nevron.Nov.Diagram.NDrawingClipping)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingClipping.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.Diagram.NDiagramItem[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="document"></param>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingClipping.DeepClone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingClipping.GetDataFormat">
            <summary>
            Overriden to return the NDrawingDataObject.Format singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingClipping.Format">
            <summary>
            Name for the Library Data Object format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryClipping">
            <summary>
            The NLibraryClipping represents a set of library items, 
            that can be transfered across documents via Clipboard and Drag and Drop operations
            </summary>
            <remarks>
            The NLibraryClipping is used to host an array of library item clonings. 
            The NLibraryClipping class can also be used for duplicating library content.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryClipping.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryClipping.#ctor(Nevron.Nov.Diagram.NLibraryClipping)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryClipping.#ctor(Nevron.Nov.Dom.NDocument,Nevron.Nov.Diagram.NDiagramItem[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="document"></param>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryClipping.DeepClone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryClipping.GetDataFormat">
            <summary>
            Overriden to return the NLibraryDataObject.Format singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryClipping.Format">
            <summary>
            Name for the Library Data Object format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NArrowhead">
            <summary>
            Represents an attribute, which controls the shape, size and appearance of arrowheads.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.#ctor(Nevron.Nov.Diagram.ENArrowheadShape)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.#ctor(Nevron.Nov.Diagram.ENArrowheadShape,System.Double,System.Double)">
            <summary>
            Creates an arrowhead with the specified custom size
            </summary>
            <param name="shape">arrow head shape</param>
            <param name="width">width</param>
            <param name="height">width</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.#ctor(Nevron.Nov.Diagram.ENArrowheadShape,System.Double,System.Double,Nevron.Nov.Graphics.NFill,Nevron.Nov.Graphics.NStroke)">
            <summary>
            Creates an arrowhead with the specified custom size, fill and stroke
            </summary>
            <param name="shape">arrow head shape</param>
            <param name="width">width</param>
            <param name="height">width</param>
            <param name="fill">fill style</param>
            <param name="stroke">stroke style</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.Shape">
            <summary>
            Gets or sets the shape of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.FlipAngle">
            <summary>
            Gets or set whether the angle (direction) of the arrowhead is flipped (reversed) or not.
            By default set to false.
            </summary>
            <remarks>
            The angle (direction) of the arrowhead is by default defined by the geometry. 
            By setting this property to true you can reverse the direction of the arrowhead.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.FillMode">
            <summary>
            Gets or sets the fill mode of the arrowhead. 
            By default set to UseGeometryStrokeColor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.StrokeMode">
            <summary>
            Gets or sets the fill mode of the arrowhead. 
            By default set to UseGeometryStrokeColor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.Fill">
            <summary>
            Gets or sets the fill style of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.Stroke">
            <summary>
            Gets or sets the stroke style of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.Size">
            <summary>
            Gets or sets whether the size of the arrowhead needs to be autotically inflated with the geometry stroke width.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.Width">
            <summary>
            Gets or sets the width of the arrowhead
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArrowhead.Height">
            <summary>
            Gets or sets the height of the arrowhead
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.ToString">
            <summary>
            Overriden to return a string containing the shape and the size of the arrowhead
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the node has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.NArrowheadSchema">
            <summary>
            Schema associated with NArrowhead
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.ShapeProperty">
            <summary>
            Reference to the Shape property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.SizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.FlipAngleProperty">
            <summary>
            Reference to the FlipAngle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.FillModeProperty">
            <summary>
            Reference to the FillMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.StrokeModeProperty">
            <summary>
            Reference to the StrokeMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowhead.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NArrowhead.NArrowheadDesigner">
            <summary>
            Designer for NArrowhead.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.NArrowheadDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowhead.NArrowheadDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingSettings">
            <summary>
            An element, which contains various drawing settings related to the the appearance and behavior of the item editors, tools etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
            
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ClosedFiguresHitTestWiden">
            <summary>
            Gets or sets the widen that is applied to geometry paths closed figures, when their outline is hit tested.
            By default set to 5.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.OpenFiguresHitTestWiden">
            <summary>
            Gets or sets the widen that is applied to geometry paths closed figures, when their outline is hit tested.
            By default set to 10.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.GuidelinesHitTestWiden">
            <summary>
            Gets or sets the widen that is applied to guidelines when they are hit tested.
            By default set to 10.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.MaxPreviewedItems">
            <summary>
            Gets or sets the maximum number of page items for which a WYSIWYG move preview is created.
            If the previewed parts exceeds this number, Nevron Diagram will display a only a rubber band around the previewed nodes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.CenterSelectionOnZoom">
            <summary>
            Gets/Sets to center selection on zoom. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.PastePositionMode">
            <summary>
            Gets or sets the way in which pasted content is positioned in the document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.PasteOffsetX">
            <summary>
            Gets or sets the X offset of pasted content. Used only if the PastePositionMode is set to OffsetInSameDocument.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.PasteOffsetY">
            <summary>
            Gets or sets the Y offset of pasted content. Used only if the PastePositionMode is set to OffsetInSameDocument.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.SmallNudgeStep">
            <summary>
            Gets/Sets the small nudge step. It is used when moving shapes with the arrow keys
            while holding the Shift key. By default set to 1 DIP.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.LargeNudgeStep">
            <summary>
            Gets/Sets the large nudge step. It is used when moving shapes with the arrow keys.
            By default set to 10 DIPs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.RotationStep">
            <summary>
            Gets or sets the rotation step (for commands like RotateLeft and RotateRight) - in degrees. 
            By default set to 90.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.HorizontalSpacingStep">
            <summary>
            Gets or sets the horizontal spacing step
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.VerticalSpacingStep">
            <summary>
            Gets or sets the vertical spacing step
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.MergePointDistance">
            <summary>
            Gets or sets the oriented distance from the line formed by the point neighbours, below which the point is considered colinear and must be merged (removed).
            By default set to 10.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowBoxTrackers">
            <summary>
            Gets or sets whether shape box trackers must be shown. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowPinRotationTrackers">
            <summary>
            Gets or sets whether pin/rotation trackers must be shown
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowEndPointsTrackers">
            <summary>
            Gets or sets whether end-points trackers must be shown
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowControlsTrackers">
            <summary>
            Gets or sets whether controls trackers must be shown
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowGeometryTrackers">
            <summary>
            Gets or sets whether geometry trackers must be shown
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowSelectionBoxTrackers">
            <summary>
            Gets or sets whether selection box trackers must be shown. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ShowSelectionPinRotationTrackers">
            <summary>
            Gets or sets whether selection pin/rotation trackers must be shown. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.HideDisabledHandles">
            <summary>
            Gets or sets whether disabled handles should be hidden
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.BoxHandleStyle">
            <summary>
            Get/sets the box handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.RotatorHandleStyle">
            <summary>
            Get/sets the rotator handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.PinHandleStyle">
            <summary>
            Get/sets the pin handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.BeginPointHandleStyle">
            <summary>
            Get/sets the begin point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.EndPointHandleStyle">
            <summary>
            Get/sets the end point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.PortHandleStyle">
            <summary>
            Get/sets the port point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.ControlHandleStyle">
            <summary>
            Get/sets the control point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.GeometryBasePointHandleStyle">
            <summary>
            Get/sets the geometry base point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.GeometryBendPointHandleStyle">
            <summary>
            Get/sets the geometry bend point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.GeometryMidPointHandleStyle">
            <summary>
            Get/sets the geometry mid point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.GeometryControlHandleStyle">
            <summary>
            Get/sets the geometry control point handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.MoveHandleStyle">
            <summary>
            Gets or sets the move handle style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.DisabledHandleColor">
            <summary>
            Gets or sets the color of the disabled handles.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.GluedHandleColor">
            <summary>
            Gets or sets the color of the glued handles.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.RotatorHandleDistance">
            <summary>
            Gets or sets the distance of the rotator handle
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.RubberBandStroke">
            <summary>
            Gets or sets the stroke style of the rubber band displayed by bounds trackers
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.SelectedGuidelinesStroke">
            <summary>
            Gets or sets the stroke used to highlight the selected guidelines
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.SelectedOutlineStroke">
            <summary>
            Gets or sets the stroke used for outline of multiple selected shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.FormatAnchorOutlineStroke">
            <summary>
            Gets or sets the stroke used to outline the format anchor shape, in case multiple shapes are selected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingSettings.AlignmentAnchorOutlineStroke">
            <summary>
            Gets or sets the stroke used to outline the alignment anchor shape, in case multiple shapes are selected.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingSettings.GetHandleStyle(Nevron.Nov.Diagram.ENHandleType)">
            <summary>
            Gets the handle style for the specified handle type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.NDrawingSettingsSchema">
            <summary>
            Schema associated with NDrawingSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowBoxTrackersProperty">
            <summary>
            Reference to the ShowBoxTrackers property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowPinRotationTrackersProperty">
            <summary>
            Reference to the ShowPinRotationTrackers property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowEndPointsTrackersProperty">
            <summary>
            Reference to the ShowEndPointsTrackers property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowControlsTrackersProperty">
            <summary>
            Reference to the ShowControlsTrackers property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowGeometryTrackersProperty">
            <summary>
            Reference to the ShowGeometryTrackers property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowSelectionBoxTrackersProperty">
            <summary>
            Reference to the ShowSelectionBoxTrackers property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ShowSelectionPinRotationTrackersProperty">
            <summary>
            Reference to the ShowSelectionPinRotationTrackers property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.HideDisabledHandlesProperty">
            <summary>
            Reference to the HideDisabledHandles property 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.CenterSelectionOnZoomProperty">
            <summary>
            Reference to the CenterSelectionOnZoom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SelectedGuidelinesStrokeProperty">
            <summary>
            Reference to the SelectedGuidelinesStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.BoxHandleStyleProperty">
            <summary>
            Reference to the BoxHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.RotatorHandleStyleProperty">
            <summary>
            Reference to the RotatorHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.PinHandleStyleProperty">
            <summary>
            Reference to the PinHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.BeginPointHandleStyleProperty">
            <summary>
            Reference to the BeginPointHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.EndPointHandleStyleProperty">
            <summary>
            Reference to the EndPointHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeometryBasePointHandleStyleProperty">
            <summary>
            Reference to the GeometryBasePointHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeometryBendPointHandleStyleProperty">
            <summary>
            Reference to the GeometryBendPointHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeometryMidPointHandleStyleProperty">
            <summary>
            Reference to the GeometryMidPointHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeometryControlHandleStyleProperty">
            <summary>
            Reference to the GeometryControlHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.PortHandleStyleProperty">
            <summary>
            Reference to the PortHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ControlHandleStyleProperty">
            <summary>
            Reference to the ControlHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.MoveHandleStyleProperty">
            <summary>
            Reference to the MoveHandleStyle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.DisabledHandleColorProperty">
            <summary>
            Reference to the DisabledHandleColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GluedHandleColorProperty">
            <summary>
            Reference to the GluedHandleColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.RotatorHandleDistanceProperty">
            <summary>
            Reference to the RotatorHandleDistance property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.RubberBandStrokeProperty">
            <summary>
            Reference to the RubberBandStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SelectedOutlineStrokeProperty">
            <summary>
            Reference to the SelectedOutlineStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.FormatAnchorOutlineStrokeProperty">
            <summary>
            Reference to the FormatAnchorOutlineStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.AlignmentAnchorOutlineStrokeProperty">
            <summary>
            Reference to the AlignmentAnchorOutlineStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.ClosedFiguresHitTestWidenProperty">
            <summary>
            Reference to the ClosedFiguresHitTestWiden property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.OpenFiguresHitTestWidenProperty">
            <summary>
            Reference to the OpenFiguresHitTestWiden property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GuidelinesHitTestWidenProperty">
            <summary>
            Reference to the GuidelinesHitTestWiden property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.MaxPreviewedItemsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.PastePositionModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.PasteOffsetXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.PasteOffsetYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.MergePointDistanceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SmallNudgeStepProperty">
            <summary>
            Reference to the SmallNudgeStep property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.LargeNudgeStepProperty">
            <summary>
            Reference to the LargeNudgeStep property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.RotationStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.HorizontalSpacingStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.VerticalSpacingStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SmartTagsHandleXOffset">
            <summary>
            Defines the X Offset of the smart tags from the shape rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SmartTagsHandleYOffset">
            <summary>
            Defines hte Y Offset of the smart tags from the shape rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SmartTagsPopupXOffset">
            <summary>
            Defines hte X Offset of the popup from the smart tag handle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.SmartTagsPopupYOffset">
            <summary>
            Defines hte Y Offset of the popup from the smart tag handle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeneralHitTestCategory">
            <summary>
            General hit test category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeneralCopyPasteCategory">
            <summary>
            General copy paste category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeneralPreviewsCategory">
            <summary>
            General previews category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.GeneralEditAndLayoutCategory">
            <summary>
            General edit and layout category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.Trackers_Category">
            <summary>
            Trackers category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.Trackers_Visibility_Category">
            <summary>
            Trackers -> Visibility category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.Trackers_HandleStyles_Category">
            <summary>
            Trackers -> Handle Styles category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.Trackers_HandleBehavior_Category">
            <summary>
            Trackers -> Handle Behavior category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.Trackers_Appearance_Category">
            <summary>
            Trackers -> Appearance category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingSettings.Selection_Category">
            <summary>
            Selection category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingSettings.NDrawingSettingsDesigner">
            <summary>
            Designer for NDrawingSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingSettings.NDrawingSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NHandleStyle">
            <summary>
            Represents an attribute, which controls the appearance of a specific set of handles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHandleStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHandleStyle.#ctor(Nevron.Nov.Diagram.ENHandleShape,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="shape"></param>
            <param name="size"></param>
            <param name="fillColor"></param>
            <param name="borderColor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NHandleStyle.FillColor">
            <summary>
            Gets or sets the handle fill color
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NHandleStyle.BorderColor">
            <summary>
            Gets or sets the handle border color
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NHandleStyle.Shape">
            <summary>
            Gets or sets the handle shape
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NHandleStyle.Size">
            <summary>
            Gets or sets the handle size
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHandleStyle.NHandleStyleSchema">
            <summary>
            Schema associated with NHandleStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHandleStyle.FillColorProperty">
            <summary>
            Reference to the FillColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHandleStyle.BorderColorProperty">
            <summary>
            Reference to the BorderColor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHandleStyle.ShapeProperty">
            <summary>
            Reference to the Shape property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHandleStyle.SizeProperty">
            <summary>
            Reference to the Size property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMediaVisibility">
            <summary>
            Represents an attribute, which controls the visibility of different 
            drawing elements and decorations in the context of a specific media type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMediaVisibility.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMediaVisibility.ShowPorts">
            <summary>
            Controls the global visibility of ports
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMediaVisibility.ShowGuidelines">
            <summary>
            Controls the global visibility of guidelines
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMediaVisibility.ShowGrid">
            <summary>
            Controls the global visibility of the grid
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMediaVisibility.OwnerDrawing">
            <summary>
            Gets the drawing that owns this media visibility object
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMediaVisibility.NMediaVisibilitySchema">
            <summary>
            Schema associated with NRenderVisibility
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMediaVisibility.ShowPortsProperty">
            <summary>
            Reference to the ShowPorts property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMediaVisibility.ShowGuidelinesProperty">
            <summary>
            Reference to the ShowGuidelines property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMediaVisibility.ShowGridProperty">
            <summary>
            Reference to the ShowGrid property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageRouting">
            <summary>
            The NPageRouting element encapsulates the page routing abilities. 
            The NRoutableConnector instances that reside in the page use this manager to find a route in the obstacles map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageRouting.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageRouting.Enabled">
            <summary>
            Gets or sets whether the routing manager is enabled. 
            Setting this property to false will globally disable automatic routing. 
            </summary>
            <remarks>
            By default set to true.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageRouting.AvoidInvisibleObstacles">
            <summary>
            Indicates whether invisible obstacles should be avoided by routes
            </summary>
            <remarks>
            By default set to false
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageRouting.ChangeDirectionCost">
            <summary>
            Gets or sets the cost for making a turn (change direction). Applicable for grid routing only
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageRouting.ObstacleInteriorDeflate">
            <summary>
            Gets or sets the deflate of the non intersectable obstacles (2D shapes) interior
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageRouting.ObstaclePadding">
            <summary>
            Gets or sets the padding applied to the obstacles (2D shapes) bounds
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageRouting.MaxAvoidedObstacles">
            <summary>
            Controls the maximum count of obstacles (2D shapes) for which grid routing must be performed
            </summary>
            <remarks>
            By default set to 100
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageRouting.FindRoute(Nevron.Nov.Diagram.Routing.NRouteRequirements)">
            <summary>
            Finds the points of the best route, which satisfies the specified route requirements
            </summary>
            <param name="routeRequirements">route requirements</param>
            <returns>route points if such route exists, otherwise null</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.NPageRoutingSchema">
            <summary>
            Schema associated with NPageRouting.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.EnabledProperty">
            <summary>
            Reference to the Enabled property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.RoutingGridTypeProperty">
            <summary>
            Reference to the RoutingGridType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.RoutingMeshTypeProperty">
            <summary>
            Reference to the RoutingMeshType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.AvoidInvisibleObstaclesProperty">
            <summary>
            Reference to the ChangeDirectionCost property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.ChangeDirectionCostProperty">
            <summary>
            Reference to the ChangeDirectionCost property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.ObstacleInteriorDeflateProperty">
            <summary>
            Reference to the ObstacleInteriorDeflate property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.ObstaclePaddingProperty">
            <summary>
            Reference to the ObstaclePadding property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.MaxAvoidedObstaclesProperty">
            <summary>
            Reference to the MaxAvoidedObstacles property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageRouting.MaxAvoidedMeshObstaclesProperty">
            <summary>
            Reference to the MaxAvoidedMeshObstacles property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageRouting.NPageRoutingDesigner">
            <summary>
            Designer for NPageRouting.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageRouting.NPageRoutingDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPrintVisibility">
            <summary>
            Controls the visibility of different drawing elements and decorations 
            in the context of a print media type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPrintVisibility.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPrintVisibility.NPrintVisibilitySchema">
            <summary>
            Schema associated with NPrintVisibility
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NScreenVisibility">
            <summary>
            Controls the visibility of different drawing elements and decorations in the context of a screen media type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScreenVisibility.ShowRulers">
            <summary>
            Gets or sets whether the rulers are shown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScreenVisibility.ShowPageBreaks">
            <summary>
            Controls the global visibility of the page breaks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScreenVisibility.ShowAutoConnect">
            <summary>
            Gets or sets whether auto connect visual aids are displayed or not. By default false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.OnShowRulersPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowRulers property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.OnShowPortsPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowPorts property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.OnShowGuidelinesPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowGuidelines property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.OnShowGridPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowGrid property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.OnShowPageBreaksPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowPageBreaks property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScreenVisibility.OnShowShowAutoConnectPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowAutoConnect property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScreenVisibility.NScreenVisibilitySchema">
            <summary>
            Schema associated with NScreenVisibility
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScreenVisibility.ShowRulersProperty">
            <summary>
            Reference to the ShowRulers property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScreenVisibility.ShowPageBreaksProperty">
            <summary>
            Reference to the ShowPageBreaks property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScreenVisibility.ShowAutoConnectProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NBookmark">
            <summary>
            Represents a page bookmark.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmark.ToString">
            <summary>
            Gets the string representation of this bookmark.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmark.OwnerBookmarkManager">
            <summary>
            Gets the bookmark manager to which this bookmark belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmark.Name">
            <summary>
            Gets or sets the name of the bookmark
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmark.ViewportOriginX">
            <summary>
            Gets or sets the page ViewportOriginX value, which the bookmark restores
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmark.ViewportOriginY">
            <summary>
            Gets or sets the page ViewportOriginY value, which the bookmark restores
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmark.ZoomFactor">
            <summary>
            Gets or sets the page ViewportOriginY value, which the bookmark restores
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmark.GoTo">
            <summary>
            Goes to this bookmark.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmark.NBookmarkSchema">
            <summary>
            Schema associated with NBookmark
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmark.NameProperty">
            <summary>
            Reference to the Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmark.ViewportOriginXProperty">
            <summary>
            Reference to the ViewportOriginX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmark.ViewportOriginYProperty">
            <summary>
            Reference to the ViewportOriginY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmark.ZoomFactorProperty">
            <summary>
            Reference to the ZoomFactor property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NBookmarkCollection">
            <summary>
            A collection of NBookmark elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkCollection.NBookmarkCollectionSchema">
            <summary>
            Schema associated with NBookmarkCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NBookmarkCollection.NBookmarkCollectionDesigner">
            <summary>
            Designer associated with NBookmarkCollection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkCollection.NBookmarkCollectionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkCollection.NBookmarkCollectionDesigner.CreateDefaultInstanceEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the default instance editor.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NBookmarkManager">
            <summary>
            Represents a page bookmark manager.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NBookmarkManager.CurrentBookmarkIndexChanged">
            <summary>
            Occurs when the ActivePageIndex property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmarkManager.OwnerPage">
            <summary>
            Gets the page to which this bookmark manager belongs to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmarkManager.Bookmarks">
            <summary>
            Gets or sets the page bookmarks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmarkManager.TransitionDuration">
            <summary>
            Gets or sets the duration of the bookmark transitions.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmarkManager.TimingFunction">
            <summary>
            Gets or sets the first control point of the timing function that controls the bookmark transitions.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmarkManager.CurrentBookmarkIndex">
            <summary>
            Gets or sets the current bookmark index.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBookmarkManager.CurrentBookmark">
            <summary>
            Gets or sets the current bookmark.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkManager.GetPrevBookmark">
            <summary>
            Gets the previous bookmark.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkManager.GetNextBookmark">
            <summary>
            Gets the next bookmark.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBookmarkManager.OnCurrentBookmarkIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the current bookmark index property has changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkManager.NBookmarkManagerSchema">
            <summary>
            Schema associated with NBookmarkManager
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkManager.BookmarksChild">
            <summary>
            Reference to the Bookmarks child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkManager.TransitionDurationProperty">
            <summary>
            Reference to the TransitionDuration property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkManager.TimingFunctionProperty">
            <summary>
            Reference to the TimingFunction property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkManager.CurrentBookmarkIndexProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBookmarkManager.BookmarkTransitionEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction">
            <summary>
            Brings the selected page items to front Z-Order
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NBringForwardCommandAction.NBringForwardCommandActionSchema">
            <summary>
            Schema associated with NBringForwardCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction">
            <summary>
            Brings the selected page items to front Z-Order
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NBringToFrontCommandAction.NBringToFrontCommandActionSchema">
            <summary>
            Schema associated with NBringToFrontCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.#ctor(Nevron.Nov.DataStructures.ENSetOperator)">
            <summary>
            Creates a new compose command action that performs the specified set operation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.Operation">
            <summary>
            Gets or sets the type of operation to perform.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.NCompositeOperationCommandActionSchema">
            <summary>
            Schema associated with NChangeSelectionFillCommand
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NComposeCommandAction.OperationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction">
            <summary>
            Flips the currently selected page items horizontally.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFlipHorizontalCommandAction.NFlipHorizontalCommandActionSchema">
            <summary>
            Schema associated with NFlipHorizontalCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction">
            <summary>
            Flips the currently selected page items vertically.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFlipVerticalCommandAction.NFlipVerticalCommandActionSchema">
            <summary>
            Schema associated with NFlipVerticalCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction">
            <summary>
            Groups the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGroupCommandAction.NGroupCommandActionSchema">
            <summary>
            Schema associated with NGroupCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction">
            <summary>
            Moves the selected page items in the specified direction.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.#ctor(Nevron.Nov.Diagram.ENNudgeStepType,Nevron.Nov.ENBoxDirection)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="stepType"></param>
            <param name="direction"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.Direction">
            <summary>
            Gets/Sets the direction in which to nudge.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.StepType">
            <summary>
            Gets/Sets the nudge step to take into account.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.NNudgeCommandActionSchema">
            <summary>
            Schema associated with NNudgeCommandActionSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.DirectionProperty">
            <summary>
            Reference to the Direction property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NNudgeCommandAction.StepTypeProperty">
            <summary>
            Reference to the StepType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction">
            <summary>
            Rotates the selected shapes to the left or to the right.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.RotateLeft">
            <summary>
            Gets or sets whether the command rotates the selected objects to the left or the right.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.NRotateCommandActionSchema">
            <summary>
            Schema associated with NRotateCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NRotateCommandAction.RotateLeftProperty">
            <summary>
            Reference to the RotateLeft property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction">
            <summary>
            Sends the selected page items to back Z-Order
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSendBackwardCommandAction.NSendBackwardCommandActionSchema">
            <summary>
            Schema associated with NSendBackwardCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction">
            <summary>
            Sends the selected page items to back Z-Order
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSendToBackCommandAction.NSendToBackCommandActionSchema">
            <summary>
            Schema associated with NSendToBackCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction">
            <summary>
            Ungroups the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NUngroupCommandAction.NUngroupCommandActionSchema">
            <summary>
            Schema associated with NUngroupCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction">
            <summary>
            Ungroups the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NUpdateBoundsCommandAction.NUpdateBoundsCommandActionSchema">
            <summary>
            Schema associated with NUpdateBoundsCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction">
            <summary>
            Shows the properties dialog of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAddBookmarkCommandAction.NAddBookmarkCommandActionSchema">
            <summary>
            Schema associated with NAddBookmarkCommandAction  
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction">
            <summary>
            Shows the properties dialog of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEditBookmarksCommandAction.NEditBookmarksCommandActionSchema">
            <summary>
            Schema associated with NEditBookmarksCommandAction  
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction">
            <summary>
            Shows the properties dialog of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="goToPrevBookmark"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.GoToPrevBookmark">
            <summary>
            Gets or sets whether the command goes to the prev or the next bookmark
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.NGoToBookmarkCommandActionSchema">
            <summary>
            Schema associated with NGoToBookmarkCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGoToBookmarkCommandAction.GoToPrevBookmarkProperty">
            <summary>
            Reference to the GoToPrevBookmark property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction">
            <summary>
            Applies font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action can be executed.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectBookmarkCommandAction.NSelectBookmarkCommandActionSchema">
            <summary>
            Schema associated with NSelectBookmarkCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction">
            <summary>
            A command action that applies a shape style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command.
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShapeStyleCommandAction.NShapeStyleCommandActionSchema">
            <summary>
            Schema associated with NShapeStyleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction">
            <summary>
            A command action that applies a drawing theme to the current page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command.
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NThemeCommandAction.NThemeCommandActionSchema">
            <summary>
            Schema associated with NThemeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NThemeVariantCommandAction">
            <summary>
            A command action that applies a theme variant to the current page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeVariantCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeVariantCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NThemeVariantCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NThemeVariantCommandAction.NThemeVariantCommandActionSchema">
            <summary>
            Schema associated with NThemeVariantCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDrawingExtensionsCommandAction">
            <summary>
            The drawing extensions command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingExtensionsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingExtensionsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingExtensionsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingExtensionsCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDrawingExtensionsCommandAction.NDrawingExtensionsCommandActionSchema">
            <summary>
            Schema associated with NDrawingExtensionsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShowDrawingPropertiesDialogCommandAction">
            <summary>
            Shows the drawing settings editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowDrawingPropertiesDialogCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowDrawingPropertiesDialogCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowDrawingPropertiesDialogCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command action can be executed.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowDrawingPropertiesDialogCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShowDrawingPropertiesDialogCommandAction.NShowDrawingPropertiesDialogCommandActionSchema">
            <summary>
            Schema associated with NShowDrawingPropertiesDialogCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGridAndRulersDialogCommandAction">
            <summary>
            Shows the active page grid and rulers settings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGridAndRulersDialogCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGridAndRulersDialogCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGridAndRulersDialogCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether this command action can be executed.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGridAndRulersDialogCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGridAndRulersDialogCommandAction.NGridAndRulersDialogCommandActionSchema">
            <summary>.
            Schema associated with NGridAndRulersDialogCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction">
            <summary>
            Shows the layout shapes dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter">The schema of the layout that should be initially selected or null
            for automatically selecting the best layout for the active page.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction.CreateLayoutShapesDialog(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates the layout shapes dialog.
            </summary>
            <param name="parentWindow"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShowLayoutDialogCommandAction.NShowLayoutDialogCommandActionSchema">
            <summary>
            Schema associated with NShowLayoutDialogCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction">
            <summary>
            Shows the properties dialog of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShowPagePropertiesCommandAction.NShowPagePropertiesCommandActionSchema">
            <summary>
            Schema associated with NShowPagePropertiesCommandAction  
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShowSnapAndGlueDialogCommandAction">
            <summary>
            Shows the drawing snap and glue dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowSnapAndGlueDialogCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowSnapAndGlueDialogCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowSnapAndGlueDialogCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowSnapAndGlueDialogCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShowSnapAndGlueDialogCommandAction.NShowSnapAndGlueDialogCommandActionSchema">
            <summary>
            Schema associated with NShowSnapAndGlueDialogCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction">
            <summary>
            Copies the currently selected text in the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCopyCommandAction.NCopyCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCutCommandAction">
            <summary>
            Cuts the selected text to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCutCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCutCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCutCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCutCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCutCommandAction.NCutCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction">
            <summary>
            Command action, that deletes the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.#ctor(Nevron.Nov.Diagram.ENDeleteCommandKey)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.Key">
            <summary>
            Gets/Sets the value of the Key property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.NDeleteCommandActionSchema">
            <summary>
            Schema associated with NDeleteCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDeleteCommandAction.KeyProperty">
            <summary>
            Reference to the Key property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDeselectAllCommandAction">
            <summary>
            Deselects all page items in the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeselectAllCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeselectAllCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeselectAllCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeselectAllCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDeselectAllCommandAction.NDeselectAllCommandActionSchema">
            <summary>
            Schema associated with NDeselectAllCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NPasteCommandAction">
            <summary>
            Pastes the diagram items in the clipboard to the current position.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPasteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPasteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPasteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPasteCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NPasteCommandAction.NPasteCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction">
            <summary>
            Selects all page items in the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.#ctor(Nevron.Nov.Diagram.ENSelectAllFilter)">
            <summary>
            Initializer constructor
            </summary>
            <param name="filter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.Filter">
            <summary>
            Gets or sets the type of predefined filter to apply to the select all command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.NSelectAllCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectAllCommandAction.FilterProperty">
            <summary>
            Reference to the Filter property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction">
            <summary>
            Shows a File Save dialog and saves a drawing document to the selected file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction.GetAvailableFormats">
            <summary>
            Must override to return the format which are exposed to the user for save
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction.GetDefaultFormat">
            <summary>
            Gets the default format which is selected. This implementation returns the first available format.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportCommandAction.NExportCommandActionSchema">
            <summary>
            Schema associated with NExportCommandAction. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToFamilyTreeCommandAction">
            <summary>
            Exports a drawing document to a family tree document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToFamilyTreeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToFamilyTreeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToFamilyTreeCommandAction.GetAvailableFormats">
            <summary>
            Overriden to return NGedcomDrawingFormat
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToFamilyTreeCommandAction.NExportToFamilyTreeCommandActionSchema">
            <summary>
            Schema associated with NExportToFamilyTreeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToPdfCommandAction">
            <summary>
            Exports the current drawing page to PDF.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToPdfCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToPdfCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToPdfCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToPdfCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToPdfCommandAction.NExportToPdfCommandActionSchema">
            <summary>
            Schema associated with NExportToPdfCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToVisioDrawingCommandAction">
            <summary>
            Exports a drawing document to a Visio drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToVisioDrawingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToVisioDrawingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToVisioDrawingCommandAction.GetAvailableFormats">
            <summary>
            Gets all formats supported by this open command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToVisioDrawingCommandAction.NExportToVisioDrawingCommandActionSchema">
            <summary>
            Schema associated with NExportToVisioDrawingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToWebPageCommandAction">
            <summary>
            Exports a drawing document to a web page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToWebPageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToWebPageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToWebPageCommandAction.GetAvailableFormats">
            <summary>
            Gets all formats supported by this open command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToWebPageCommandAction.NExportToWebPageCommandActionSchema">
            <summary>
            Schema associated with NExportToWebPageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToRasterImageCommandAction">
            <summary>
            Exports a drawing document to a raster image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToRasterImageCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToRasterImageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToRasterImageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToRasterImageCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToRasterImageCommandAction.NExportToRasterImageCommandActionSchema">
            <summary>
            Schema associated with NExportToRasterImageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToAutoCadCommandAction">
            <summary>
            Exports a drawing document to an AutoCAD drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToAutoCadCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToAutoCadCommandAction.DrawingFormat">
            <summary>
            Gets the drawing format this command action exports to.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToAutoCadCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToAutoCadCommandAction.NExportToAutoCadCommandActionSchema">
            <summary>
            Schema associated with NExportToAutoCadCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToEmfCommandAction">
            <summary>
            Exports a drawing document to an Enhaced Metafile (EMF) image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToEmfCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToEmfCommandAction.DrawingFormat">
            <summary>
            Gets the drawing format this command action exports to.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToEmfCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToEmfCommandAction.NExportToEmfCommandActionSchema">
            <summary>
            Schema associated with NExportToEmfCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToSvgCommandAction">
            <summary>
            Exports a drawing document to an SVG image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToSvgCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToSvgCommandAction.DrawingFormat">
            <summary>
            Gets the drawing format this command action exports to.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToSvgCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToSvgCommandAction.NExportToSvgCommandActionSchema">
            <summary>
            Schema associated with NExportToSvgCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NExportToVectorImageCommandAction">
            <summary>
            Base class for all command actions that export drawings to vector images like EMF, SVG, AutoCAD DXF, etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToVectorImageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NExportToVectorImageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToVectorImageCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NExportToVectorImageCommandAction.DrawingFormat">
            <summary>
            Gets the drawing format this command action exports to.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NExportToVectorImageCommandAction.NExportToVectorImageCommandActionSchema">
            <summary>
            Schema associated with NExportToVectorImageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportAutoCadCommandAction">
            <summary>
            Imports an AutoCAD drawing from file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportAutoCadCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportAutoCadCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportAutoCadCommandAction.GetAvailableFormats">
            <summary>
            Gets all formats supported by this open command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportAutoCadCommandAction.GetAllFormatsFilterName">
            <summary>
            Gets the name to use in the file dialog for all formats, for example "All Diagram Drawing Files".
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportAutoCadCommandAction.NImportAutoCadCommandActionSchema">
            <summary>
            Schema associated with NImportAutoCadCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction">
            <summary>
            Shows a File Save dialog and saves a drawing document to the selected file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.GetAvailableFormats">
            <summary>
            Must override to return the format which are exposed to the user for save
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.GetDefaultFormat">
            <summary>
            Gets the default format which is selected. This implementation returns the first available format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.GetAllFormatsFilterName">
            <summary>
            Returns the name of the All Formats filter.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportCommandAction.NImportCommandActionSchema">
            <summary>
            Schema associated with NImportCommandAction. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportDatabaseSchemaCommandAction">
            <summary>
            Imports a database schema and creates a diagram based on it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportDatabaseSchemaCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportDatabaseSchemaCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportDatabaseSchemaCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportDatabaseSchemaCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportDatabaseSchemaCommandAction.NImportDatabaseSchemaCommandActionSchema">
            <summary>
            Schema associated with NImportDatabaseSchemaCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportFamilyTreeCommandAction">
            <summary>
            Imports a family tree.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportFamilyTreeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportFamilyTreeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportFamilyTreeCommandAction.GetAvailableFormats">
            <summary>
            Gets all formats supported by this open command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportFamilyTreeCommandAction.GetAllFormatsFilterName">
            <summary>
            Gets the name to use in the file dialog for all formats, for example "All Diagram Drawing Files".
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportFamilyTreeCommandAction.NImportFamilyTreeCommandActionSchema">
            <summary>
            Schema associated with NImportFamilyTreeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportMapCommandAction">
            <summary>
            Imports a map.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportMapCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportMapCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportMapCommandAction.GetAvailableFormats">
            <summary>
            Gets all formats supported by this open command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportMapCommandAction.GetAllFormatsFilterName">
            <summary>
            Gets the name to use in the file dialog for all formats, for example "All Diagram Drawing Files".
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportMapCommandAction.NImportMapCommandActionSchema">
            <summary>
            Schema associated with NImportMapCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportOtherFormatsCommandAction">
            <summary>
            Shows a dialog with all supported for import drawing formats and imports a drawing
            from the selected file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportOtherFormatsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportOtherFormatsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportOtherFormatsCommandAction.NImportOtherFormatsCommandActionSchema">
            <summary>
            Schema associated with NImportOtherFormatsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NImportVisioDrawingCommandAction">
            <summary>
            Imports a Visio drawing from file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportVisioDrawingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportVisioDrawingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportVisioDrawingCommandAction.GetAvailableFormats">
            <summary>
            Gets all formats supported by this open command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NImportVisioDrawingCommandAction.GetAllFormatsFilterName">
            <summary>
            Gets the name to use in the file dialog for all formats, for example "All Diagram Drawing Files".
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NImportVisioDrawingCommandAction.NImportVisioDrawingCommandActionSchema">
            <summary>
            Schema associated with NImportVisioDrawingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction">
            <summary>
            Edits the document information of a drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog of this command action has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDocumentInfoCommandAction.NDocumentInfoCommandActionSchema">
            <summary>
            Schema associated with NDocumentInfoCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFlowchartVisualizerCommandAction">
            <summary>
            Flowchart visualizer command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlowchartVisualizerCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlowchartVisualizerCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFlowchartVisualizerCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFlowchartVisualizerCommandAction.NFlowchartVisualizerCommandActionSchema">
            <summary>
            Schema associated with NDataVisualizerCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NNewCommandAction">
            <summary>
            Creates a new drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNewCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNewCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNewCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NNewCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NNewCommandAction.NNewCommandActionSchema">
            <summary>
            Schema associated with NNewCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NOpenCommandAction">
            <summary>
            Opens a document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOpenCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOpenCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOpenCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOpenCommandAction.GetFormats">
            <summary>
            Gets the formats to show in the file dialog. The default implementation returns null,
            which means that all supported formats will be shown.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NOpenCommandAction.NOpenCommandActionSchema">
            <summary>
            Schema associated with NOpenCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NOrganizationChartVisualizerCommandAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOrganizationChartVisualizerCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOrganizationChartVisualizerCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NOrganizationChartVisualizerCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Execute this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NOrganizationChartVisualizerCommandAction.NOrganizationChartVisualizerCommandActionSchema">
            <summary>
            Schema associated with NOrganizationChartVisualizerCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NPrintCommandAction">
            <summary>
            Prints a drawing document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPrintCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPrintCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPrintCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NPrintCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NPrintCommandAction.NPrintCommandActionSchema">
            <summary>
            Schema associated with NPrintCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction">
            <summary>
            Shows a File Save dialog and saves a drawing document to the selected file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction.GetFormats">
            <summary>
            Gets the formats to show in the file dialog. The default implementation returns null,
            which means that all supported formats will be shown.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSaveAsCommandAction.NSaveAsCommandActionSchema">
            <summary>
            Schema associated with NSaveAsCommandAction. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSaveCommandAction">
            <summary>
            Saves a document to a file. 
            If the document has never been saved a File Save dialog for
            choosing a file is shown.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSaveCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSaveCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSaveCommandAction.NSaveCommandActionSchema">
            <summary>
            Schema associated with NSaveCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFindTextCommandAction">
            <summary>
            Finds a text in the drawing docoument
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFindTextCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFindTextCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFindTextCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFindTextCommandAction.NFindTextCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NReplaceTextCommandAction">
            <summary>
            Replaces text in the drawing docoument
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NReplaceTextCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NReplaceTextCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NReplaceTextCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NReplaceTextCommandAction.NReplaceTextCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryApplyFormattingCommandAction">
            <summary>
            Applies the formatting defined by each geometry formatting command source to
            the geometry of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryApplyFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryApplyFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryApplyFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryApplyFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryApplyFormattingCommandAction.NGeometryApplyFormattingCommandActionSchema">
            <summary>
            Schema associated with NGeometryApplyFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction">
            <summary>
            Command action, that changes the begin or end arrowhead of the currently selected shapes geometries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="beginArrowhead"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.BeginArrowhead">
            <summary>
            Gets whether the begin or end arrowhead of the geometry is edited.  
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.NGeometryArrowheadCommandActionSchema">
            <summary>
            Schema associated with NChangeSelectionFillCommand
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryArrowheadCommandAction.BeginArrowheadProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction">
            <summary>
            Updates the geometry formatting command sources with the geometry formatting
            of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction.IsEditAction">
            <summary>
            Gets whether this is an edit action.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryCopyFormattingCommandAction.NGeometryCopyFormattingCommandActionSchema">
            <summary>
            Schema associated with NGeometryCopyFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction">
            <summary>
            Command action, that changes the stroke of the active page selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryCornerRoundingCommandAction.NGeometryCornerRoundingCommandActionSchema">
            <summary>
            Schema associated with NGeometryCornerRoundingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction">
            <summary>
            Command action, which changes the fill of the active page selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryFillCommandAction.NGeometryFillCommandActionSchema">
            <summary>
            Schema associated with NChangeSelectionFillCommand
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction">
            <summary>
            Command action, that changes the shadow of the active page selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryShadowCommandAction.NGeometryShadowCommandActionSchema">
            <summary>
            Schema associated with NGeometryShadowCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction">
            <summary>
            Command action, that changes the stroke of the active page selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGeometryStrokeCommandAction.NGeometryStrokeCommandActionSchema">
            <summary>
            Schema associated with NGeometryStrokeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction">
            <summary>
            Applies bullet formatting to the currently selected range
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.#ctor(Nevron.Nov.Text.ENBulletListTemplateType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="bulletType"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.BulletType">
            <summary>
            Gets or sets the bullet type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.NBulletFormattingCommandActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NBulletFormattingCommandAction.BulletTypeProperty">
            <summary>
            Schema associated with Name property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NClearBulletFormattingCommandAction">
            <summary>
            Clears the current bullet formatting
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearBulletFormattingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearBulletFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearBulletFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearBulletFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NClearBulletFormattingCommandAction.NClearBulletFormattingCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction">
            <summary>
            Changes the font size of the currently selected text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="increaseFontSize"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.IncreaseFontSize">
            <summary>
            Gets or sets whether to increase the font size
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.NChangeFontSizeCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NChangeFontSizeCommandAction.IncreaseFontSizeProperty">
            <summary>
            Reference to the increase font size property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NClearFormattingCommandAction">
            <summary>
            Clears the text formatting
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NClearFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NClearFormattingCommandAction.NClearFormattingCommandActionSchema">
            <summary>
            Schema associated with NClearFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction">
            <summary>
            Applies font family to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFontFamilyCommandAction.NFontFamilyCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction">
            <summary>
            Applies font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFontSizeCommandAction.NFontSizeCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction">
            <summary>
            Modifies the text indent
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializing constructor. constructor.
            </summary>
            <param name="increaseIndent"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.IncreaseIndent">
            <summary>
            Gets or sets whether to increase the indent
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.NModifyTextIndentCommandActionSchema">
            <summary>
            Schema associated with NModifyTextIndentCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NModifyTextIndentCommandAction.IncreaseIndentProperty">
            <summary>
            Reference to the IncreaseIndent property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextApplyFormattingCommandAction">
            <summary>
            Applies the formatting defined by each text formatting command source to
            the text of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextApplyFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextApplyFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextApplyFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextApplyFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextApplyFormattingCommandAction.NTextApplyFormattingCommandActionSchema">
            <summary>
            Schema associated with NTextApplyFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction">
            <summary>
            Applies a text style to the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.#ctor(Nevron.Nov.Graphics.ENBaseline)">
            <summary>
            Initializer constructor
            </summary>
            <param name="baseline"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.Baseline">
            <summary>
            Gets or sets the baseline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the selection anchor text horizontal alignment is equal to the command action one.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.NTextBaselineCommandActionSchema">
            <summary>
            Schema associated with NTextBaselineCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextBaselineCommandAction.BaselineProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction">
            <summary>
            Updates the text formatting command sources with the text formatting
            of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction.IsEditAction">
            <summary>
            Gets whether this is an edit action.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextCopyFormattingCommandAction.NTextCopyFormattingCommandActionSchema">
            <summary>
            Schema associated with NTextCopyFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction">
            <summary>
            Applies fill (background or foreground) to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="backgroundFill"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.BackgroundFill">
            <summary>
            Gets whether the foreground or the background fill of the text block is edited.  
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Queries whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.NTextFillCommandActionSchema">
            <summary>
            Schema associated with NTextFillCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextFillCommandAction.BackgroundFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction">
            <summary>
            Applies a text style to the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.#ctor(Nevron.Nov.Text.ENAlign)">
            <summary>
            Initializer constructor
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.Alignment">
            <summary>
            Alignment.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the selection anchor text horizontal alignment is equal to the command action one.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.NTextHorizontalAlignmentCommandActionSchema">
            <summary>
            Schema associated with NTextHorizontalAlignmentCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextHorizontalAlignmentCommandAction.AlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction">
            <summary>
            Applies line gap factor to the currently selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextLineHeightFactorCommandAction.NLineSpacingCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction">
            <summary>
            Applies Shadow to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextShadowCommandAction.NTextShadowCommandActionSchema">
            <summary>
            Schema associated with NShadowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction">
            <summary>
            Applies Stroke to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Queries whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextStrokeCommandAction.NTextStrokeCommandActionSchema">
            <summary>
            Schema associated with NStrokeCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction">
            <summary>
            Applies a text style to the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.#ctor(Nevron.Nov.ENVerticalAlignment)">
            <summary>
            Initializer constructor
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.Alignment">
            <summary>
            Vertical alignment.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the selection anchor text horizontal alignment is equal to the command action one.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.NTextVerticalAlignmentCommandActionSchema">
            <summary>
            Schema associated with NTextVerticalAlignmentCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextVerticalAlignmentCommandAction.AlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction">
            <summary>
            Toggles the font style (bold, italic, underline etc) of the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.#ctor(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fontStyle"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.FontStyle">
            <summary>
            Gets or sets the paragraph text alignment 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.NToggleFontStyleCommandActionSchema">
            <summary>
            Schema associated with NFontStyleCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleFontStyleCommandAction.FontStyleProperty">
            <summary>
            Reference to the FontStyle property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction">
            <summary>
            Toggles block float mode (normal, left and right)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleMarksVisibilityAction.NToggleMarksVisibilityActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDiagramRedoCommandAction">
            <summary>
            A command action that redos a single or multiple history commands
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramRedoCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramRedoCommandAction.GetUndoRedoHistoryService(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the history service from the target node owner document.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramRedoCommandAction.GetActivePage(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the active page of the drawing hosted in the view.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramRedoCommandAction.GetDrawingView(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing view for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramRedoCommandAction.NDiagramRedoCommandActionSchema">
            <summary>
            Schema associated with NDiagramRedoCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction">
            <summary>
            Insert barcode command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.#ctor(Nevron.Nov.Diagram.ENBarcodeType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="barcodeType"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.BarcodeType">
            <summary>
            Gets/Sets the barcode type this command action inserts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.OnBarcodeDialogOkClicked(Nevron.Nov.Barcode.NBarcode)">
            <summary>
            Called when the user has clicked the OK button in the barcode dialog.
            </summary>
            <param name="barcode"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.NInsertBarcodeCommandActionSchema">
            <summary>
            Schema associated with NInsertBarcodeCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertBarcodeCommandAction.BarcodeTypeProperty">
            <summary>
            Reference to the BarcodeType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertDateCommandAction">
            <summary>
            Inserts the current date.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertDateCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertDateCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertDateCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertDateCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called  when the insert table dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertDateCommandAction.NInsertDateCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertFieldCommandAction">
            <summary>
            Inserts a new field inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertFieldCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertFieldCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertFieldCommandAction.NInsertFieldCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertHyperlinkCommandAction">
            <summary>
            Inserts a hyperlink inline at the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertHyperlinkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertHyperlinkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertHyperlinkCommandAction.NInsertHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NInsertHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction">
            <summary>
            Inserts an image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction.NInsertImageCommandActionSchema">
            <summary>
            Schema associated with NInsertImageCommandAction.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction.InsertImage(Nevron.Nov.Diagram.NDrawingView,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NImage)">
            <summary>
            Inserts the given image into the active page of the given drawing view at the specified
            location as the center of the image.
            </summary>
            <param name="drawingView"></param>
            <param name="imageCenter"></param>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertImageCommandAction.InsertImageFromFile(Nevron.Nov.Diagram.NDrawingView,Nevron.Nov.Graphics.NPoint,Nevron.Nov.IO.NFile)">
            <summary>
            Loads an image from the given file and inserts an image (embeds the image file) in the active page of
            the given drawing view at the specified location as the center of the image.
            </summary>
            <param name="drawingView">The drawing view to insert an image to.</param>
            <param name="imageCenter">The location of the image center in active page coordinates.</param>
            <param name="imageFile">The file to load the image from.</param>
            <returns>The inserted image.</returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertSymbolCharacterCommandAction">
            <summary>
            Inserts a symbol character.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertSymbolCharacterCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertSymbolCharacterCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertSymbolCharacterCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertSymbolCharacterCommandAction.NInsertSymbolCharacterCommandActionSchema">
            <summary>
            Schema associated with NInsertSymbolCharacterCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction">
            <summary>
            Base class for command actions that insert text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NWindow)">
            <summary>
            Creates a dialog window that hosts the editor of the specified node and
            subscribes to the close event of the window.
            </summary>
            <param name="node"></param>
            <param name="ownerWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTextCommandAction.NInsertTextCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTimeCommandAction">
            <summary>
            Inserts the current time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTimeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTimeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTimeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTimeCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the insert time dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTimeCommandAction.NInsertTimeCommandActionSchema">
            <summary>
            Schema associated with NInsertTimeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NUpdateFieldCommandAction">
            <summary>
            Updtes all currently selected fields
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateFieldCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateFieldCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUpdateFieldCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NUpdateFieldCommandAction.NUpdateFieldCommandActionSchema">
            <summary>
            Schema associated with NFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignBottomsCommandAction">
            <summary>
            The NAlignBottomsCommand class represents the Align Bottoms command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignBottomsCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignBottomsCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignBottomsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignBottomsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignBottomsCommandAction.NAlignBottomsCommandActionSchema">
            <summary>
            Schema associated with NAlignBottomsCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignCentersCommandAction">
            <summary>
            The NAlignCentersCommand class represents the Align Centers command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignCentersCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignCentersCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignCentersCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignCentersCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignCentersCommandAction.NAlignCentersCommandActionSchema">
            <summary>
            Schema associated with NAlignCentersCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignLeftsCommandAction">
            <summary>
            The NAlignLeftsCommand class represents the Align Lefts command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignLeftsCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignLeftsCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignLeftsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignLeftsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignLeftsCommandAction.NAlignLeftsCommandActionSchema">
            <summary>
            Schema associated with NAlignLeftsCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignMiddlesCommandAction">
            <summary>
            The NAlignMiddlesCommand class represents the Align Middles command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignMiddlesCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignMiddlesCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignMiddlesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignMiddlesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignMiddlesCommandAction.NAlignMiddlesCommandActionSchema">
            <summary>
            Schema associated with NAlignMiddlesCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignRightsCommandAction">
            <summary>
            The NAlignRightsCommand class represents the Align Rights command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignRightsCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignRightsCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignRightsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignRightsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignRightsCommandAction.NAlignRightsCommandActionSchema">
            <summary>
            Schema associated with NAlignRightsCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignToGridCommandAction">
            <summary>
            The NAlignToGridCommand class represents the Align To Grid command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignToGridCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignToGridCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignToGridCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the locations of the selected nodes to the grid
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignToGridCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignToGridCommandAction.NAlignToGridCommandActionSchema">
            <summary>
            Schema associated with NAlignToGridCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NAlignTopsCommandAction">
            <summary>
            The NAlignTopsCommand class represents the Align Tops command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignTopsCommandAction.#ctor">
            <summary>
            Default constuctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignTopsCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignTopsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Aligns the bottoms of the selected nodes to the selection anchor bottom side
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NAlignTopsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NAlignTopsCommandAction.NAlignTopsCommandActionSchema">
            <summary>
            Schema associated with NAlignTopsCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageHorizontallyCommandAction">
            <summary>
            The NCenterInDocumentHorizontallyCommand class represents the Center In Document Horizontally command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageHorizontallyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageHorizontallyCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageHorizontallyCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Horizontally aligns the center of the selected node to the center of the document 
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageHorizontallyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageHorizontallyCommandAction.NCenterInPageHorizontallyCommandActionSchema">
            <summary>
            Schema associated with NCenterInPageHorizontallyCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageVerticallyCommandAction">
            <summary>
            The NCenterInDocumentVerticallyCommand class represents the Center In Document Vertically command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageVerticallyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageVerticallyCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageVerticallyCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Vertically aligns the center of the selected node to the center of the document 
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageVerticallyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCenterInPageVerticallyCommandAction.NCenterInPageVerticallyCommandActionSchema">
            <summary>
            Schema associated with NCenterInPageVerticallyCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDecreaseHorizontalSpacingCommandAction">
            <summary>
            The NDecreaseHorizontalSpacingCommand class represents the Decrease Horizontal Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseHorizontalSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseHorizontalSpacingCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseHorizontalSpacingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Decreases the horizontal spacing between the selected nodes
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseHorizontalSpacingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDecreaseHorizontalSpacingCommandAction.NDecreaseHorizontalSpacingCommandActionSchema">
            <summary>
            Schema associated with NDecreaseHorizontalSpacingCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDecreaseVerticalSpacingCommandAction">
            <summary>
            The NDecreaseVerticalSpacingCommand class represents the Decrease Vertical Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseVerticalSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseVerticalSpacingCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseVerticalSpacingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Decreases the horizontal spacing between the selected nodes
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseVerticalSpacingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDecreaseVerticalSpacingCommandAction.NDecreaseVerticalSpacingCommandActionSchema">
            <summary>
            Schema associated with NDecreaseVerticalSpacingCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIncreaseHorizontalSpacingCommandAction">
            <summary>
            The NIncreaseHorizontalSpacingCommand class represents the Increase Horizontal Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseHorizontalSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseHorizontalSpacingCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseHorizontalSpacingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Increases the horizontal spacing between the selected nodes
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseHorizontalSpacingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <returns>true if the command can be executed, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIncreaseHorizontalSpacingCommandAction.NIncreaseHorizontalSpacingCommandActionSchema">
            <summary>
            Schema associated with NIncreaseHorizontalSpacingCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIncreaseVerticalSpacingCommandAction">
            <summary>
            The NIncreaseVerticalSpacingCommand class represents the Increase Vertical Spacing command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseVerticalSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseVerticalSpacingCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseVerticalSpacingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Increases the horizontal spacing between the selected nodes
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseVerticalSpacingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIncreaseVerticalSpacingCommandAction.NIncreaseVerticalSpacingCommandActionSchema">
            <summary>
            Schema associated with NIncreaseVerticalSpacingCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMakeHorizontalSpacingEqualCommandAction">
            <summary>
            The NMakeHorizontalSpacingEqualCommand class represents the Make Horizontal Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeHorizontalSpacingEqualCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeHorizontalSpacingEqualCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeHorizontalSpacingEqualCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeHorizontalSpacingEqualCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMakeHorizontalSpacingEqualCommandAction.NMakeHorizontalSpacingEqualCommandActionSchema">
            <summary>
            Schema associated with NMakeHorizontalSpacingEqualCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMakeSameHeightCommandAction">
            <summary>
            The NMakeSameHeightCommand class represents the Make Horizontal Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameHeightCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameHeightCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameHeightCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameHeightCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMakeSameHeightCommandAction.NMakeSameHeightCommandActionSchema">
            <summary>
            Schema associated with NMakeSameHeightCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMakeSameSizeCommandAction">
            <summary>
            The NMakeSameSizeCommand class represents the Make Horizontal Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameSizeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameSizeCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameSizeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameSizeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMakeSameSizeCommandAction.NMakeSameSizeCommandActionSchema">
            <summary>
            Schema associated with NMakeSameSizeCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMakeSameWidthCommandAction">
            <summary>
            The NMakeSameWidthCommand class represents the Make Horizontal Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameWidthCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameWidthCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameWidthCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeSameWidthCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMakeSameWidthCommandAction.NMakeSameWidthCommandActionSchema">
            <summary>
            Schema associated with NMakeSameWidthCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMakeVerticalSpacingEqualCommandAction">
            <summary>
            The NMakeVerticalSpacingEqualCommand class represents the Make Vertical Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeVerticalSpacingEqualCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeVerticalSpacingEqualCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeVerticalSpacingEqualCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMakeVerticalSpacingEqualCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMakeVerticalSpacingEqualCommandAction.NMakeVerticalSpacingEqualCommandActionSchema">
            <summary>
            Schema associated with NMakeVerticalSpacingEqualCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NRemoveHorizontalSpacingCommandAction">
            <summary>
            The NRemoveHorizontalSpacingCommand class represents the Make Horizontal Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveHorizontalSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveHorizontalSpacingCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveHorizontalSpacingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveHorizontalSpacingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NRemoveHorizontalSpacingCommandAction.NRemoveHorizontalSpacingCommandActionSchema">
            <summary>
            Schema associated with NRemoveHorizontalSpacingCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NRemoveVerticalSpacingCommandAction">
            <summary>
            The NRemoveVerticalSpacingCommand class represents the Make Vertical Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveVerticalSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveVerticalSpacingCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveVerticalSpacingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveVerticalSpacingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NRemoveVerticalSpacingCommandAction.NRemoveVerticalSpacingCommandActionSchema">
            <summary>
            Schema associated with NRemoveVerticalSpacingCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSizeToGridCommandAction">
            <summary>
            The NSizeToGridCommand class represents the Make Vertical Spacing Equal command
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSizeToGridCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSizeToGridCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSizeToGridCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Makes the horizontal spacing between the selected nodes equal
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSizeToGridCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command can be executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSizeToGridCommandAction.NSizeToGridCommandActionSchema">
            <summary>
            Schema associated with NSizeToGridCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMoveToFirstRecordCommandAction">
            <summary>
            Moves the current mail merge record to the first record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToFirstRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToFirstRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToFirstRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToFirstRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMoveToFirstRecordCommandAction.NMoveToFirstRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToFirstRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMoveToLastRecordCommandAction">
            <summary>
            Moves the current mail merge record to the last record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToLastRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToLastRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToLastRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToLastRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMoveToLastRecordCommandAction.NMoveToLastRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToLastRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMoveToNextRecordCommandAction">
            <summary>
            Moves the current mail merge record to the record after the current one
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToNextRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToNextRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToNextRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToNextRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMoveToNextRecordCommandAction.NMoveToNextRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToNextRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMoveToPreviousRecordCommandAction">
            <summary>
            Moves the current mail merge record to the record preceding the current one.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToPreviousRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToPreviousRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToPreviousRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToPreviousRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMoveToPreviousRecordCommandAction.NMoveToPreviousRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToPreviousRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction">
            <summary>
            Moves the current mail merge record to the first record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMoveToRecordCommandAction.NMoveToRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NNavigateToRecordCommandAction">
            <summary>
            Base class for all actions that navigate to a mail merge data source record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNavigateToRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NNavigateToRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NNavigateToRecordCommandAction.NNavigateToRecordCommandActionSchema">
            <summary>
            Schema associated with NNavigateToRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction">
            <summary>
            Highlights all mail merge fields in a rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NHighlightMergeFieldsCommandAction.NHighlightMergeFieldsCommandActionSchema">
            <summary>
            Schema associated with NHighlightMergeFieldsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertGreetingLineCommandAction">
            <summary>
            Inserts a greeting line mail merge field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertGreetingLineCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertGreetingLineCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertGreetingLineCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertGreetingLineCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertGreetingLineCommandAction.NInsertGreetingLineCommandActionSchema">
            <summary>
            Schema associated with NInsertGreetingLineCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction">
            <summary>
            Inserts a mail merge field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertMergeFieldCommandAction.NInsertMergeFieldCommandActionSchema">
            <summary>
            Schema associated with NInsertMergeFieldCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMatchFieldsCommandAction">
            <summary>
            Lets the user select the data field column mapping.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMatchFieldsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMatchFieldsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMatchFieldsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMatchFieldsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMatchFieldsCommandAction.NMatchFieldsCommandActionSchema">
            <summary>
            Schema associated with NMatchFieldsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction">
            <summary>
            Creates a document for each record in the mail merge data source, shows a "Save As"
            dialog for selecting a file name template and saves each of the created documents
            to a file following the selected template name.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSaveCommandAction.NSaveMergedDocumentCommandActionSchema">
            <summary>
            Schema associated with NSaveMergedDocumentCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction">
            <summary>
            Creates a document for each record in the mail merge data source, shows a dialog
            for configuring email settings and send each of the created documents to an email
            address associated with the corresponding record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.MergeDocument(Nevron.Nov.Diagram.NDrawingDocument,System.Int32)">
            <summary>
            Merges the given drawing document with the mail merge record at the given index.
            </summary>
            <param name="drawingDocument"></param>
            <param name="recordIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.CreateMailMessage(Nevron.Nov.Diagram.NDrawingDocument,System.String,System.String)">
            <summary>
            Creates the e-mail message for the given merged document.
            </summary>
            <param name="drawingDocument"></param>
            <param name="fromEmail"></param>
            <param name="toEmail"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.SendMailMessage(Nevron.Nov.Networking.Mail.NSmtpClient,Nevron.Nov.Networking.Mail.NMailMessage)">
            <summary>
            Sends the given e-mail message and returns true on success.
            </summary>
            <param name="smtpClient"></param>
            <param name="mailMessage"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMergeAndSendCommandAction.NMergeAndSendCommandActionSchema">
            <summary>
            Schema associated with NMergeAndSendCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectRecipientsCommandAction">
            <summary>
            Shows a dilog for selecting a mail merge data source (e.g. an Access database).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectRecipientsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectRecipientsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectRecipientsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectRecipientsCommandAction.NSelectRecipientsCommandActionSchema">
            <summary>
            Schema associated with NSelectRecipientsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction">
            <summary>
            Generates a preview of the currently selected mail merge data record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTogglePreviewMailMergeCommandAction.NTogglePreviewMailMergeCommandActionSchema">
            <summary>
            Schema associated with NTogglePreviewMailMergeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction">
            <summary>
            Serves as base for all drawing command actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetDrawingView(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing view for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetDrawingDocument(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing document for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetDrawing(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetActivePage(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the active page of the drawing hosted in the view.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetRichTextView(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the rich text view.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetCurrentRichTextView(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the current text block editor
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetPageAlignmentAnchor(Nevron.Nov.Diagram.NPage)">
            <summary>
            Safely gets the alignment anchor selected shape of the given page. Returns null
            if there aren't any selected shapes.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetPageFormatAnchor(Nevron.Nov.Diagram.NPage)">
            <summary>
            Safely gets the format anchor selected shape of the given page. Returns null
            if there aren't any selected shapes.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetFormatAnchorShapeTextBlock(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the text block of the format anchor shape of the given drawing page.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetFormatAnchorShapeTextBlock(Nevron.Nov.Diagram.NPage)">
            <summary>
            Safely gets the text block of the format anchor shape of the given drawing page.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetFormatAnchorShapeGeometry(Nevron.Nov.Diagram.NPage)">
            <summary>
            Safely gets the geometry of the format anchor shape of the given drawing page.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.GetTextTarget(Nevron.Nov.Dom.NNode,Nevron.Nov.Text.INRichTextView@,Nevron.Nov.Diagram.NTextBlockBase@)">
            <summary>
            Gets the target for the text operation. 
            If the returned richTextView is not null, the operation should be applied to it.
            If the returned textBlock should be checked.
            </summary>
            <param name="target"></param>
            <param name="richTextView"></param>
            <param name="textBlock"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDrawingCommandAction.NDrawingCommandActionSchema">
            <summary>
            Schema associated with NDrawingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextCommandAction">
            <summary>
            Serves as base class for all toggle command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextCommandAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextCommandAction.GetFocusTarget(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the focus target of the action target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextCommandAction.NDrawingTextCommandActionSchema">
            <summary>
            Schema associated with NDrawingTextCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextToggleCommandAction">
            <summary>
            Serves as base class for all toggle command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextToggleCommandAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextToggleCommandAction.GetFocusTarget(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the focus target of the action target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDrawingTextToggleCommandAction.NDrawingTextToggleCommandActionSchema">
            <summary>
            Schema associated with NDrawingTextToggleCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDrawingToggleCommandAction">
            <summary>
            Serves as base for all drawing toggle command actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingToggleCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDrawingToggleCommandAction.IsToggleAction">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDrawingToggleCommandAction.NDrawingToggleCommandActionSchema">
            <summary>
            Schema associated with NDrawingToggleCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShowHideRibbonTabGroupsCommandAction">
            <summary>
            A command action that shows/hides the diagram ribbon's tab page groups.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowHideRibbonTabGroupsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowHideRibbonTabGroupsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowHideRibbonTabGroupsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action. Overriden to do nothing.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowHideRibbonTabGroupsCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the active parameter which is then used by the command source to update tab page group visibility.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShowHideRibbonTabGroupsCommandAction.NShowHideRibbonTabGroupsCommandActionSchema">
            <summary>
            Schema associated with NShowHideRibbonTabGroupsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction">
            <summary>
            Shows the properties dialog of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="goToPrevPage"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.GoToPrevPage">
            <summary>
            Gets or sets whether the command goes to the prev or the next bookmark
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.NGoToPageCommandActionSchema">
            <summary>
            Schema associated with NGoToPageCommandAction .
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGoToPageCommandAction.GoToPrevPageProperty">
            <summary>
            Reference to the GoToPrevPage property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction">
            <summary>
            Applies font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action can be executed.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectPageCommandAction.NSelectPageCommandActionSchema">
            <summary>
            Schema associated with NSelectPageCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction">
            <summary>
            Brings the selected page items to front Z-Order
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NPageOrientationCommandAction.NPageOrientationCommandActionSchema">
            <summary>
            Schema associated with NPageOrientationCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction">
            <summary>
            Modifies the page size of the active page
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NPageSizeCommandAction.NPageSizeCommandActionSchema">
            <summary>
            Schema associated with NPageSizeCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NProofingLanguageCommandAction">
            <summary>
            The proofing language command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NProofingLanguageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NProofingLanguageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NProofingLanguageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NProofingLanguageCommandAction.NProofingLanguageCommandActionSchema">
            <summary>
            Schema associated with NProofingLanguageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction">
            <summary>
            Toggles spell checking enabled state
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleSpellCheckAction.NToggleMarksVisibilityActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeLineCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeLineCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeLineCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeLineCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeLineCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeLineCommandAction.NConnectorMakeLineCommandActionSchema">
            <summary>
            Schema associated with NConnectorMakeLineCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeOrthogonalCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeOrthogonalCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeOrthogonalCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeOrthogonalCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeOrthogonalCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakeOrthogonalCommandAction.NConnectorMakeOrthogonalCommandActionSchema">
            <summary>
            Schema associated with NConnectorMakeOrthogonalCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakePolylineCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakePolylineCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakePolylineCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakePolylineCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakePolylineCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorMakePolylineCommandAction.NConnectorMakePolylineCommandActionSchema">
            <summary>
            Schema associated with NConnectorMakePolylineCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteAlwaysCommandAction.NConnectorRerouteAlwaysCommandActionSchema">
            <summary>
            Schema associated with NConnectorRerouteAlwaysCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether the command is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteCommandAction.NConnectorRerouteCommandActionSchema">
            <summary>
            Schema associated with NConnectorRerouteCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteNeverCommandAction.NConnectorRerouteNeverCommandActionSchema">
            <summary>
            Schema associated with NConnectorRerouteNeverCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NConnectorRerouteWhenNeededCommandAction.NConnectorRerouteWhenNeededCommandActionSchema">
            <summary>
            Schema associated with NConnectorRerouteWhenNeededCommand
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction">
            <summary>
            Edits a shape hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction.IsEnabled(Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Checks whether this action should be enabled for the given shape hyperlink.
            </summary>
            <param name="shapeHyperlink"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction.OnHyperlinkDialogOkClicked(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Called when the user has clicked the OK button in the shape hyperlink dialog.
            </summary>
            <param name="shape"></param>
            <param name="shapeHyperlink"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEditShapeHyperlinkCommandAction.NEditShapeHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NEditShapeHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction">
            <summary>
            Edits or inserts a shape hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction.IsEnabled(Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Checks whether this action should be enabled for the given shape hyperlink.
            </summary>
            <param name="shapeHyperlink"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction.OnHyperlinkDialogOkClicked(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Called when the user has clicked the OK button in the shape hyperlink dialog.
            </summary>
            <param name="shape"></param>
            <param name="shapeHyperlink"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertShapeHyperlinkCommandAction.NInsertShapeHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NInsertShapeHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NRemoveShapeHyperlinkCommandAction">
            <summary>
            Removes a shape hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveShapeHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveShapeHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveShapeHyperlinkCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NRemoveShapeHyperlinkCommandAction.IsEnabled(Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Checks whether this action should be enabled for the given shape hyperlink.
            </summary>
            <param name="shapeHyperlink"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NRemoveShapeHyperlinkCommandAction.NRemoveShapeHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NRemoveShapeHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction">
            <summary>
            Base class for shape hyperlink command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction.IsEnabled(Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Checks whether this action should be enabled for the given shape hyperlink.
            </summary>
            <param name="shapeHyperlink"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction.GetSingleSelectedShape(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the single selected shape in the active page of the drawing document
            or null if no shapes or more than 1 shapes are selected.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction.ShowEditDialog(Nevron.Nov.Diagram.NShape)">
            <summary>
            Shows an edit dialog for the hyperlink of the given shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShapeHyperlinkCommandAction.NShapeHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NShapeHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NActivePageUpdateCommandAction.NActivePageUpdateCommandActionSchema">
            <summary>
            Schema associated with NActivePageUpdateCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction">
            <summary>
            Command action, that performs a compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="measure"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action
            command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.GetFocusTarget(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the focus target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.Measure">
            <summary>
            Gets or sets the measure observed by this command action.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.NDiagramItemMetricCommandActionSchema">
            <summary>
            Schema associated with NDiagramItemMetricCommandAction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.MeasureProperty">
            <summary>
            Reference to the Measure property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure">
            <summary>
            Enumerates the measures controlled by this command action.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape2DPinX">
            <summary>
            PinX of 2D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape2DPinY">
            <summary>
            PinY of 2D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape2DWidth">
            <summary>
            Width of 2D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape2DHeight">
            <summary>
            Height of 2D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape2DAngle">
            <summary>
            Angle of 2D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape1DBeginX">
            <summary>
            BeginX of 1D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape1DBeginY">
            <summary>
            BeginY of 1D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape1DEndX">
            <summary>
            EndX of 1D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.Shape1DEndY">
            <summary>
            EndY of 1D shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.GuidelineCoordinate">
            <summary>
            Guideline coordinate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.SelectionPinX">
            <summary>
            PinX of selection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.SelectionPinY">
            <summary>
            PinY of selection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.SelectionWidth">
            <summary>
            Width of selection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.SelectionHeight">
            <summary>
            Height of selection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDiagramItemMeasureCommandAction.ENDiagramItemMeasure.SelectionAngle">
            <summary>
            Angle of selection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction">
            <summary>
            The toggle snap to grid command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGridCommandAction.NToggleSnapToGridCommandActionSchema">
            <summary>
            Schema associated with NToggleSnapToGridCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction">
            <summary>
            The toggle snap to guidelines command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToGuidelinesCommandAction.NToggleSnapToGuidelinesCommandActionSchema">
            <summary>
            Schema associated with NToggleSnapToGuidelinesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction">
            <summary>
            The toggle snap to rules command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleSnapToRulersCommandAction.NToggleSnapToRulersCommandActionSchema">
            <summary>
            Schema associated with NToggleSnapToRulersCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMultiLineArrowCommandAction">
            <summary>
            Multi-line arrow command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMultiLineArrowCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMultiLineArrowCommandAction.#ctor(Nevron.Nov.Diagram.ENMultiLineCommand)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMultiLineArrowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMultiLineArrowCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMultiLineArrowCommandAction.NMultiLineArrowCommandActionSchema">
            <summary>
            Schema associated with NMultiLineArrowCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENBPMNFlowType">
            <summary>
            Enumerates the BPMN flow types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENBPMNFlowType.Association">
            <summary>
            Association
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENBPMNFlowType.MessageFlow">
            <summary>
            Message Flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENBPMNFlowType.SequenceFlow">
            <summary>
            Sequence Flow
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction">
            <summary>
            A BPMN flow type command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENBPMNFlowType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="flowType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NBPMNFlowTypeCommandAction.NBPMNFlowTypeCommandActionSchema">
            <summary>
            Schema associated with NBPMNFlowTypeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction">
            <summary>
            Crows foot connector begin command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction.#ctor(Nevron.Nov.Diagram.ENCrowsFootConnectorCommand,System.Boolean)">
            <summary>
            Initalizer constructor.
            </summary>
            <param name="command"></param>
            <param name="begin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootConnectorBeginCommandAction.NCrowsFootConnectorCommandActionSchema">
            <summary>
            Schema associated with NCrowsFootConnectorCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityEditAttributesCommandAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityEditAttributesCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityEditAttributesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityEditAttributesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityEditAttributesCommandAction.NCrowsFootEntityEditAttributesCommandActionSchema">
            <summary>
            Schema associated with NCrowsFootEntityEditAttributesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityShowAttributeTypesCommandAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityShowAttributeTypesCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityShowAttributeTypesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityShowAttributeTypesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityShowAttributeTypesCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether the command is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCrowsFootEntityShowAttributeTypesCommandAction.NCrowsFootEntityShowAttributesCommandActionSchema">
            <summary>
            Schema associated with NCrowsFootEntityShowAttributesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction">
            <summary>
            IDEF attribute command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction.#ctor(Nevron.Nov.Diagram.ENAttributeType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="attributeType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIDEFAttributeCommandAction.NIDEFAttributeCommandActionSchema">
            <summary>
            Schema associated with NIDEFAttributeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction">
            <summary>
            IDEF connector cardinality command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction.#ctor(Nevron.Nov.Diagram.ENIDEFCardinalityType)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCardinalityCommandAction.NIDEFConnectorCardinalityCommandActionSchema">
            <summary>
            Schema associated with NIDEFConnectorCardinalityCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCommandAction">
            <summary>
            IDEF connector command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIDEFConnectorCommandAction.NIDEFConnectorCommandActionSchema">
            <summary>
            Schema associated with NIDEFConnectorCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityAddAttributeCommandAction">
            <summary>
            IDEF entity add atribute command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityAddAttributeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityAddAttributeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityAddAttributeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityAddAttributeCommandAction.NIDEFEntityAddAttributeCommandActionSchema">
            <summary>
            Schema associated with NIDEFEntityAddAttributeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction">
            <summary>
            IDEF entity command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction.#ctor(Nevron.Nov.Diagram.ENIDEF1XEntityType)">
            <summary>
            Initalizer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIDEFEntityCommandAction.NIDEFEntityCommandActionSchema">
            <summary>
            Schema associated with NIDEFEntityCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddChildCommandAction">
            <summary>
            Adds a child to a family tree family.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddChildCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddChildCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddChildCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddChildCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddChildCommandAction.NFamilyTreeAddChildCommandActionSchema">
            <summary>
            Schema associated with NFamilyTreeAddChildCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddParentsCommandAction">
            <summary>
            Adds parents to the selected person shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddParentsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddParentsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddParentsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddParentsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddParentsCommandAction.NFamilyTreeAddParentsCommandActionSchema">
            <summary>
            Schema associated with NFamilyTreeAddParentsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddSpouseCommandAction">
            <summary>
            Adds a spouse to a person in a family tree diagram.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddSpouseCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddSpouseCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddSpouseCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddSpouseCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeAddSpouseCommandAction.NFamilyTreeAddSpouseCommandActionSchema">
            <summary>
            Schema associated with NFamilyTreeAddSpouseCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeSettingsCommandAction">
            <summary>
            Shows and editor that edits the information for a family tree shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeSettingsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeSettingsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeSettingsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeSettingsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeSettingsCommandAction.NFamilyTreeSettingsCommandActionSchema">
            <summary>
            Schema associated with NFamilyTreeSettingsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeShapeInformationCommandAction">
            <summary>
            Shows and editor that edits the information for a family tree shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeShapeInformationCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeShapeInformationCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeShapeInformationCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeShapeInformationCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFamilyTreeShapeInformationCommandAction.NFamilyTreeShapeInformationCommandActionSchema">
            <summary>
            Schema associated with NFamilyTreeShapeInformationCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction">
            <summary>
            A fishbone command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be checked for the given node.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given node.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NFishboneCommandAction.NFishboneCommandActionSchema">
            <summary>
            Schema associated with NFishboneCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType">
            <summary>
            Enumerates the types of Gateway shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.ExclusiveData">
            <summary>
            Exlusive Data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.ExclusiveDataWithMarker">
            <summary>
            Exclusive Data With Marker
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.ExclusiveEvent">
            <summary>
            Exclusive Event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.ExclusiveEventInstantiate">
            <summary>
            Exclusive Event Instantiate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.ParallelEventInstantiate">
            <summary>
            Parallel Event Instantiate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.Inclusive">
            <summary>
            Inclusive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.Parallel">
            <summary>
            Parallel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGatewayType.Complex">
            <summary>
            Complex
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction">
            <summary>
            Gateway command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENGatewayType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="gatewayType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGatewayCommandAction.NGatewayCommandActionSchema">
            <summary>
            Schema associated with NGatewayCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState">
            <summary>
            Represents different medical states
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Carrier">
            <summary>
            Carrier.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Affected">
            <summary>
            Affected.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.AffectedByHearsay">
            <summary>
            Affected by hearsay.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.PossiblyAffected">
            <summary>
            Possibly affected.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.HeartDisease">
            <summary>
            Heart disease.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Cancer">
            <summary>
            Cancer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Diabetes">
            <summary>
            Diabetes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Alzheimer">
            <summary>
            Alzheimer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.DownSyndrome">
            <summary>
            Down syndrome.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Depression">
            <summary>
            Depression.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.Smoking">
            <summary>
            Smoking.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENMedicalState.SubstanceAbuse">
            <summary>
            Substance abuse.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType">
            <summary>
            Genogram shape types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.UnknownGender">
            <summary>
            Unknown gender.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.FosterMale">
            <summary>
            Foster male.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.FosterFemale">
            <summary>
            Foster female.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.FosterUnknownGender">
            <summary>
            Foster unknown gender.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.AdoptedMale">
            <summary>
            Adopted male.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.AdoptedFemale">
            <summary>
            Adopted female.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.AdoptedUnknownGender">
            <summary>
            Adopted unknown gender.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.Pet">
            <summary>
            Pet.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.Pregnancy">
            <summary>
            Pregnancy.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.MaleTwins">
            <summary>
            Male twins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.FemaleTwins">
            <summary>
            Female twins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.MixedTwins">
            <summary>
            Mixed twins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.IdenticalMaleTwins">
            <summary>
            Identical male twins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.IdenticalFemaleTwins">
            <summary>
            Identical female twins.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType.IdenticalMixedTwins">
            <summary>
            Identical mixed twins.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship">
            <summary>
            Enumerates the genogram family relationships.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.Marriage">
            <summary>
            Marriage.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.Engagement">
            <summary>
            Engagement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.EngagementAndSeparation">
            <summary>
            Engagement and separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.EngagementAndCohabitaion">
            <summary>
            Engagement and cohabitaion.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.Commited">
            <summary>
            Commited.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.CasualRelationship">
            <summary>
            Casual relationship.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.CasualRelationshipAndSeparation">
            <summary>
            Casual relationship and separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.TemporaryRelationship">
            <summary>
            Temporary relationship.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.LoveAffair">
            <summary>
            Love affair.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.SeparationInFact">
            <summary>
            Separation in fact.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.LegalSeparation">
            <summary>
            Legal separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.LegalCohabitaion">
            <summary>
            Legal cohabitation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.LegalCohabitaionAndSeparation">
            <summary>
            Legal cohabitaion and separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.Cohabitaion">
            <summary>
            Cohabitaion.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.NonSentimentalCohabitaion">
            <summary>
            Non-sentimental cohabitaion.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.NonSentimentalCohabitaionAndSeparation">
            <summary>
            Non-sentimental cohabitaion and separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.CohabitaionAndSeparation">
            <summary>
            Cohabitaion and separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.CohabitaionAndLegalSeparation">
            <summary>
            Cohabitaion and legal separation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.Divorce">
            <summary>
            Divorce.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship.Nullity">
            <summary>
            Nullity.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGenogramAbortionCommandAction">
            <summary>
            Genogram abortion command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAbortionCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAbortionCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAbortionCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAbortionCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGenogramAbortionCommandAction.NGenogramAbortionCommandActionSchema">
            <summary>
            Schema associated with NGenogramAbortionCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGenogramAddChildCommandAction">
            <summary>
            Genogram add child command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAddChildCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAddChildCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENGenogramShapeType)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAddChildCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramAddChildCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGenogramAddChildCommandAction.NGenogramAddChildCommandActionSchema">
            <summary>
            Schema associated with NGenogramAddChildCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGenogramDeathShapeCommandAction">
            <summary>
            Genogram death shape command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramDeathShapeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramDeathShapeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramDeathShapeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramDeathShapeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGenogramDeathShapeCommandAction.NGenogramDeathShapeCommandActionSchema">
            <summary>
            Schema associated with NGenogramDeathShapeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGenogramMiscarriageCommandAction">
            <summary>
            Genogram miscarriage command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramMiscarriageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramMiscarriageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramMiscarriageCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramMiscarriageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGenogramMiscarriageCommandAction.NGenogramMiscarriageCommandActionSchema">
            <summary>
            Schema associated with NGenogramMiscarriageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction">
            <summary>
            Genogram shape command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENMedicalState)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="medicalState"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NGenogramShapeCommandAction.NGenogramShapeCommandActionSchema">
            <summary>
            Schema associated with NGenogramShapeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NLoadImageCommandAction">
            <summary>
            Loads an image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NLoadImageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NLoadImageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NLoadImageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NLoadImageCommandAction.NLoadImageCommandActionSchema">
            <summary>
            Schema associated with NLoadImageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction">
            <summary>
            Position command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.#ctor(Nevron.Nov.Diagram.DataVisualizer.ENPosition)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="position"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.Position">
            <summary>
            Gets/Sets the value of the Position property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.NPositionCommandActionSchema">
            <summary>
            Schema associated with NPositionCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NPositionCommandAction.PositionProperty">
            <summary>
            Reference to the Position property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NShowPictureCommandAction">
            <summary>
            Shows a picture.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPictureCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPictureCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPictureCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NShowPictureCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NShowPictureCommandAction.NShowPictureCommandActionSchema">
            <summary>
            Schema associated with NShowPictureCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NUnloadImageCommandAction">
            <summary>
            A command action that unloads an image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUnloadImageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUnloadImageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUnloadImageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NUnloadImageCommandAction.NUnloadImageCommandActionSchema">
            <summary>
            Schema associated with NUnloadImageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENTaskType">
            <summary>
            Enumerates types of BPMN Task Shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.Service">
            <summary>
            Service.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.Receive">
            <summary>
            Receive.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.Send">
            <summary>
            Send.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.InstantiatingReceive">
            <summary>
            Instantiating receive.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.Manual">
            <summary>
            Manual.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.BusinessRule">
            <summary>
            Business rule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.User">
            <summary>
            User.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENTaskType.Script">
            <summary>
            Script.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.ENLoop">
            <summary>
            Enumerates loop types of Task Shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENLoop.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENLoop.Standard">
            <summary>
            Standard.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENLoop.ParallelMultiInstance">
            <summary>
            Parallel multi instance.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.ENLoop.SequentialMultiInstance">
            <summary>
            Sequential multi instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction">
            <summary>
            Task compensation command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTaskCompensationCommandAction.NTaskTypeCompensationCommandActionSchema">
            <summary>
            Schema associated with NTaskShapeNoneCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction">
            <summary>
            Task loop command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENLoop)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="loop"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTaskLoopCommandAction.NTaskLoopCommandActionSchema">
            <summary>
            Schema associated with NTaskLoopCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction">
            <summary>
            Task type command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENTaskType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="taskType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTaskTypeCommandAction.NTaskTypeCommandActionSchema">
            <summary>
            Schema associated with NTaskShapeNoneCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NUMLClassDiagramEditMembersCommandAction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUMLClassDiagramEditMembersCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUMLClassDiagramEditMembersCommandAction.GetCommand">
            <summary>
            Command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUMLClassDiagramEditMembersCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NUMLClassDiagramEditMembersCommandAction.NUMLClassDiagramEditAttributesCommandActionSchema">
            <summary>
            Schema associated with NUMLClassDiagramEditAttributesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NUMLEnumDiagramEditElementsCommandAction">
            <summary>
            UML enum diagram edit command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUMLEnumDiagramEditElementsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUMLEnumDiagramEditElementsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NUMLEnumDiagramEditElementsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NUMLEnumDiagramEditElementsCommandAction.NUMLEnumDiagramEditMembersCommandActionSchema">
            <summary>
            Schema associated with NUMLEnumDiagramEditMembersCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction">
            <summary>
            A command action that updates a status pane
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.#ctor(Nevron.Nov.Diagram.ENStatusPane)">
            <summary>
            Initializer constructor
            </summary>
            <param name="statusPane"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.StatusPane">
            <summary>
            Gets or sets the status pane to update
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.NStatusPaneCommandActionSchema">
            <summary>
            Schema associated with NStatusPaneCommandActionSchema 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NStatusPaneCommandAction.StatusPaneProperty">
            <summary>
            Reference to the StatusPane property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCellBackgroundFillCommandAction">
            <summary>
            Applies background fill to currently selected table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCellBackgroundFillCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCellBackgroundFillCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCellBackgroundFillCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCellBackgroundFillCommandAction.NCellBackgroundFillCommandActionSchema">
            <summary>
            Schema associated with NCellBackgroundFillCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NCellBorderAndThicknessCommandAction">
            <summary>
            Edits cell border and thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCellBorderAndThicknessCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCellBorderAndThicknessCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NCellBorderAndThicknessCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NCellBorderAndThicknessCommandAction.NCellBorderAndThicknessCommandActionSchema">
            <summary>
            Schema associated with NCellBorderAndThicknessCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellColSpanCommandAction">
            <summary>
            Decreases the current cell column span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellColSpanCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellColSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellColSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellColSpanCommandAction.NDecreaseCellColSpanCommandActionSchema">
            <summary>
            Schema associated with NDecreaseCellColSpanCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellRowSpanCommandAction">
            <summary>
            Decreases the current cell row span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellRowSpanCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellRowSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellRowSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDecreaseCellRowSpanCommandAction.NDecreaseCellRowSpanCommandActionSchema">
            <summary>
            Schema associated with NDecreaseCellRowSpanCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellColSpanCommandAction">
            <summary>
            Increases the current cell column span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellColSpanCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellColSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellColSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellColSpanCommandAction.NIncreaseCellColSpanCommandActionSchema">
            <summary>
            Schema associated with NIncreaseCellColSpanCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction">
            <summary>
            Increases the current cell row span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction.#ctor">
            <summary>
            Default NBatchTextCommandAction
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction.NIncreaseCellRowSpanCommandActionSchema">
            <summary>
            Schema associated with NIncreaseCellRowSpanCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction.RowSpanProperty">
            <summary>
            Schema associated with RowSpan property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NIncreaseCellRowSpanCommandAction.DecreaseProperty">
            <summary>
            Schema associated with RowSpan property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NMergeCellsCommandAction">
            <summary>
            Merges the cells in the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeCellsCommandAction.#ctor">
            <summary>
            Default NBatchTextCommandAction
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeCellsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NMergeCellsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NMergeCellsCommandAction.NMergeCellsCommandActionSchema">
            <summary>
            Schema associated with NMergeCellsCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NModifyTableCellCommandAction">
            <summary>
            Modifies a table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTableCellCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTableCellCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTableCellCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NModifyTableCellCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NModifyTableCellCommandAction.NModifyTableCellCommandActionSchema">
            <summary>
            Schema associated with NModifyTableCellCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectCellCommandAction">
            <summary>
            An action that selects a table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectCellCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectCellCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectCellCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSelectCellCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectCellCommandAction.NSelectCellCommandActionSchema">
            <summary>
            Schema associated with NSelectCellCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSplitCellHorizontallyCommandAction">
            <summary>
            Splits the cell in the current selection horizontally
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSplitCellHorizontallyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSplitCellHorizontallyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSplitCellHorizontallyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSplitCellHorizontallyCommandAction.NSplitCellHorizontallyCommandActionSchema">
            <summary>
            Schema associated with NSplitCellHorizontallyCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSplitCellVerticallyCommandAction">
            <summary>
            Splits the cell in the current selection vertically
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSplitCellVerticallyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSplitCellVerticallyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSplitCellVerticallyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSplitCellVerticallyCommandAction.NSplitCellVerticallyCommandActionSchema">
            <summary>
            Schema associated with NSplitCellVerticallyCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction">
            <summary>
            Aligns the content of a cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.#ctor(Nevron.Nov.ENContentAlignment)">
            <summary>
            Creates a cell alignment command action that applies the given alignment
            to the content of table cells.
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.ContentAlignment">
            <summary>
            Gets or sets the value of the ContentAlignment property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.NToggleCellAlignmentCommandActionSchema">
            <summary>
            Schema associated with NToggleCellAlignmentCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleCellAlignmentCommandAction.ContentAlignmentProperty">
            <summary>
            Reference to the ContentAlignment property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleCellTextDirectionCommandAction">
            <summary>
            Aligns the content of a cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellTextDirectionCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellTextDirectionCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellTextDirectionCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleCellTextDirectionCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleCellTextDirectionCommandAction.NToggleCellTextDirectionCommandActionSchema">
            <summary>
            Schema associated with NToggleCellTextDirectionCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableColumnCommandAction">
            <summary>
            Deletes the currently selected table column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableColumnCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableColumnCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableColumnCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableColumnCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableColumnCommandAction.NDeleteTableColumnCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableColumnCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEditTableColumnCommandAction">
            <summary>
            Edits a table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableColumnCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableColumnCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableColumnCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableColumnCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEditTableColumnCommandAction.NEditTableColumnCommandActionSchema">
            <summary>
            Schema associated with NEditTableColumnCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnLeftCommandAction">
            <summary>
            Inserts a new table column on the left side of the current table column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnLeftCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnLeftCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnLeftCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnLeftCommandAction.NInsertTableColumnLeftCommandActionSchema">
            <summary>
            Schema associated with NInsertColumnCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnRightCommandAction">
            <summary>
            Inserts a new table column on the right side of the current table column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnRightCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnRightCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnRightCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTableColumnRightCommandAction.NInsertTableColumnRightCommandActionSchema">
            <summary>
            Schema associated with NInsertColumnCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectTableColumnCommandAction">
            <summary>
            An action that selects a table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableColumnCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableColumnCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableColumnCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSelectTableColumnCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectTableColumnCommandAction.NSelectTableColumnCommandActionSchema">
            <summary>
            Schema associated with NSelectTableColumnCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableCommandAction">
            <summary>
            Deletes the currently selected table
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableCommandAction.NDeleteTableCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEditTableCommandAction">
            <summary>
            Edits the currently selected table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEditTableCommandAction.NEditTableCommandActionSchema">
            <summary>
            Schema associated with NEditTableCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTableCommandAction">
            <summary>
            Inserts a new table at the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTableCommandAction.NInsertTableCommandActionSchema">
            <summary>
            Schema associated with NInsertTableCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectTableCommandAction">
            <summary>
            An action that selects a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableCommandAction.GetCommand">
            <summary>
            Returns the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NSelectTableCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectTableCommandAction.NSelectTableCommandActionSchema">
            <summary>
            Schema associated with NSelectTableCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction">
            <summary>
            Sets table column width mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.#ctor(Nevron.Nov.Text.ENColumnWidthMode)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnWidthMode"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.ColumnWidthMode">
            <summary>
            Gets or sets the value of the ColumnWidthMode property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether the given node is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.NTableColumnWidthModeCommandActionSchema">
            <summary>
            Schema associated with NTableColumnWidthModeCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTableColumnWidthModeCommandAction.ColumnWidthModeProperty">
            <summary>
            Reference to the ColumnWidthMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction">
            <summary>
            Sets table block resize mode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.#ctor(Nevron.Nov.Diagram.ENPortsDistributionMode)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="portsDistributionMode"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.PortsDistributionMode">
            <summary>
            Gets or sets the value of the PortsDistribtionMode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the item is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.NTablePortsDistributionModeCommandActionSchema">
            <summary>
            Schema associated with NTablePortsDistributionModeCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTablePortsDistributionModeCommandAction.PortsDistributionModeProperty">
            <summary>
            Reference to the ColumnWidthMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction">
            <summary>
            Sets table block resize mode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.#ctor(Nevron.Nov.Diagram.ENTableBlockResizeMode)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="tableResizeMode"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.TableBlockResizeMode">
            <summary>
            Gets or sets the value of the ColumnWidthMode property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the item is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.NTableBlockResizeModeCommandActionSchema">
            <summary>
            Schema associated with NTableBlockResizeModeCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTableBlockResizeModeCommandAction.TableBlockResizeModeProperty">
            <summary>
            Reference to the ColumnWidthMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTableStyleCommandAction">
            <summary>
            Applies a table style to the currently selected table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTableStyleCommandAction.NTableStyleCommandActionSchema">
            <summary>
            Schema associated with NTableStyleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTableStyleOptionsCommandAction">
            <summary>
            Edits table style options.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleOptionsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleOptionsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleOptionsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTableStyleOptionsCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTableStyleOptionsCommandAction.NTableStyleOptionsCommandActionSchema">
            <summary>
            Schema associated with NTableStyleOptionsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextBlockCommandAction">
            <summary>
            Base for all command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockCommandAction.SelectionMode(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the current edit root selection mode
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextBlockCommandAction.NTextBlockCommandActionSchema">
            <summary>
            Schema associated with NTextBlockCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextBlockStyleCommandAction">
            <summary>
            Base class for all rich text style command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextBlockStyleCommandAction.NTextBlockStyleCommandActionSchema">
            <summary>
            Schema associated with NTextBlockStyleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTextBlockToggleCommandAction">
            <summary>
            Base for all command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockToggleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockToggleCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockToggleCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTextBlockToggleCommandAction.SelectionMode(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the current edit root selection mode
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTextBlockToggleCommandAction.NTextBlockToggleCommandActionSchema">
            <summary>
            Schema associated with NTextBlockToggleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableRowsCommandAction">
            <summary>
            Deletes the currently selected table rows
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableRowsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableRowsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableRowsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableRowsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NDeleteTableRowsCommandAction.NDeleteTableRowCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableRowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEditTableRowCommandAction">
            <summary>
            Edits a table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableRowCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableRowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableRowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEditTableRowCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEditTableRowCommandAction.NEditTableRowCommandActionSchema">
            <summary>
            Schema associated with NEditTableRowCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowAboveCommandAction">
            <summary>
            Inserts a table row above the currently selected table row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowAboveCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowAboveCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowAboveCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowAboveCommandAction.NInsertTableRowAboveCommandActionSchema">
            <summary>
            Schema associated with NInsertRowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowBelowCommandAction">
            <summary>
            Inserts a table row below the currently selected table row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowBelowCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowBelowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowBelowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NInsertTableRowBelowCommandAction.NInsertTableRowBelowCommandActionSchema">
            <summary>
            Schema associated with NInsertRowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NSelectTableRowCommandAction">
            <summary>
            An action that selects a table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableRowCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableRowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NSelectTableRowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NSelectTableRowCommandAction.NSelectTableRowCommandActionSchema">
            <summary>
            Schema associated with NSelectTableRowCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableArcToolCommandAction">
            <summary>
            Command action, that enables the create arc tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableArcToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableArcToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableArcToolCommandAction.GetToolSchema">
            <summary>
            Gets the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableArcToolCommandAction.NEnableArcToolCommandActionSchema">
            <summary>
            Schema associated with NEnableArcToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableConnectorToolCommandAction">
            <summary>
            Command action, that enables the create rectangle tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableConnectorToolCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableConnectorToolCommandAction.GetCommand">
            <summary>
            Overriden to return the NDrawingView.EnableConnectorToolCommand
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableConnectorToolCommandAction.GetToolSchema">
            <summary>
            Overriden to return the NCreateConnectorTool.NCreateConnectorToolSchema
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableConnectorToolCommandAction.NEnableConnectorToolCommandActionSchema">
            <summary>
            Schema associated with NEnableConnectorToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableCubicBezierToolCommandAction">
            <summary>
            Command action, that enables the create elliptical arc tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableCubicBezierToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableCubicBezierToolCommandAction.GetCommand">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableCubicBezierToolCommandAction.GetToolSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableCubicBezierToolCommandAction.NEnableCubicBezierToolCommandActionSchema">
            <summary>
            Schema associated with NEnableCubicBezierToolCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipseToolCommandAction">
            <summary>
            Command action, that enables the create ellipse tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipseToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipseToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipseToolCommandAction.GetToolSchema">
            <summary>
            Gets the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipseToolCommandAction.NEnableEllipseToolCommandActionSchema">
            <summary>
            Schema associated with NEnableEllipseToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipticalArcToolCommandAction">
            <summary>
            Command action, that enables the create elliptical arc tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipticalArcToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipticalArcToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipticalArcToolCommandAction.GetToolSchema">
            <summary>
            Gets the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableEllipticalArcToolCommandAction.NEnableEllipticalArcToolCommandActionSchema">
            <summary>
            Schema associated with NEnableEllipticalArcToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableLineToolCommandAction">
            <summary>
            Command action, that enables the create line tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableLineToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableLineToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableLineToolCommandAction.GetToolSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableLineToolCommandAction.NEnableLineToolCommandActionSchema">
            <summary>
            Schema associated with NEnableLineToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableNurbsToolCommandAction">
            <summary>
            Command action, that enables the create nurbs tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableNurbsToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableNurbsToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableNurbsToolCommandAction.GetToolSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableNurbsToolCommandAction.NEnableNurbsToolCommandActionSchema">
            <summary>
            Schema associated with NEnableNurbsToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnablePanToolCommandAction">
            <summary>
            Command action, that enables the pan tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnablePanToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnablePanToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnablePanToolCommandAction.GetToolSchema">
            <summary>
            Gets the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnablePanToolCommandAction.NEnablePanToolCommandActionSchema">
            <summary>
            Schema associated with NEnablePanToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnablePointerToolCommandAction">
            <summary>
            Command action, that enables the pointer tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnablePointerToolCommandAction.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnablePointerToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnablePointerToolCommandAction.GetToolSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnablePointerToolCommandAction.NEnablePointerToolCommandActionSchema">
            <summary>
            Schema associated with NEnablePointerToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableRectangleToolCommandAction">
            <summary>
            Command action, that enables the create rectangle tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableRectangleToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableRectangleToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableRectangleToolCommandAction.GetToolSchema">
            <summary>
            Gets the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableRectangleToolCommandAction.NEnableRectangleToolCommandActionSchema">
            <summary>
            Schema associated with NEnableRectangleToolCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableTextToolCommandAction">
            <summary>
            Command action, that enables the create rectangle tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableTextToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableTextToolCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableTextToolCommandAction.GetToolSchema">
            <summary>
            Gets the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableTextToolCommandAction.NEnableTextToolCommandActionSchema">
            <summary>
            Schema associated with NEnableTextToolCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction">
            <summary>
            Command action that serves as base class for all enable tool commands.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the target is a drawing.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the tool is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Enables the tool.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction.GetToolSchema">
            <summary>
            Must override to return the tool schema.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NEnableToolCommandAction.NEnableToolCommandActionSchema">
            <summary>
            Schema associated with NEnableToolCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction">
            <summary>
            The toggle edit geometry command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleEditGeometryCommandAction.NToggleEditGeometryCommandActionSchema">
            <summary>
            Schema associated with NToggleEditGeometryCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction">
            <summary>
            The toggle rulers command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleAutoConnectCommandAction.NToggleAutoConnectCommandActionSchema">
            <summary>
            Schema associated with NToggleAutoConnectCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction">
            <summary>
            The toggle grid command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleGridCommandAction.NToggleGridCommandActionSchema">
            <summary>
            Schema associated with NToggleGridCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction">
            <summary>
            The toggle guidelines command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleGuidelinesCommandAction.NToggleGuidelinesCommandActionSchema">
            <summary>
            Schema associated with NToggleGuidelinesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction">
            <summary>
            The toggle grid command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTogglePageBreaksCommandAction.NTogglePageBreaksCommandActionSchema">
            <summary>
            Schema associated with NTogglePageBreaksCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction">
            <summary>
            The toggle ports command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NTogglePortsCommandAction.NTogglePortsCommandActionSchema">
            <summary>
            Schema associated with NTogglePortsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction">
            <summary>
            The toggle rulers command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleRulersCommandAction.NToggleRulersCommandActionSchema">
            <summary>
            Schema associated with NToggleRulersCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction">
            <summary>
            Toggles the Zoom Mode of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.#ctor(Nevron.Nov.UI.ENZoomMode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="ZoomMode"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.ZoomMode">
            <summary>
            Gets or sets the zoom mode of this command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Override to return true
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.NToggleZoomModeCommandActionSchema">
            <summary>
            Schema associated with NZoomModeCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NToggleZoomModeCommandAction.ZoomModeProperty">
            <summary>
            Reference to the ZoomMode property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction">
            <summary>
            The toggle grid command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction.CreatePresentationWindow(Nevron.Nov.UI.NWindow)">
            <summary>
            Creates a presentation window.
            </summary>
            <param name="ownerWindow"></param>
            <returns>The presentation window.</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NViewPresentationCommandAction.NViewPresentationCommandActionSchema">
            <summary>
            Schema associated with NViewPresentationCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction">
            <summary>
            The zoom in command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction.IsEditAction">
            <summary>
            Overriden to return false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NZoomInCommandAction.NZoomInCommandActionSchema">
            <summary>
            Schema associated with NZoomInCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction">
            <summary>
            Toggles the Zoom Mode of the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Override to return true
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the command source
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NZoomModeCommandAction.NZoomModeCommandActionSchema">
            <summary>
            Schema associated with NZoomModeCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction">
            <summary>
            The zoom out command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction.IsEditAction">
            <summary>
            Overriden to return false
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NZoomOutCommandAction.NZoomOutCommandActionSchema">
            <summary>
            Schema associated with NZoomOutCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction">
            <summary>
            The zoom to factor command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction.IsEditAction">
            <summary>
            Overriden to return false.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingCommands.NZoomToPercentCommandAction.NZoomToPercentCommandActionSchema">
            <summary>
            Schema associated with NZoomToPercentCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramUndoCommandAction">
            <summary>
            A command action that undos a single or multiple history commands
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUndoCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUndoCommandAction.GetUndoRedoHistoryService(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the history service from the target node owner document.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUndoCommandAction.GetActivePage(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the active page of the drawing hosted in the view.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUndoCommandAction.GetDrawingView(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing view for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramUndoCommandAction.NDiagramUndoCommandActionSchema">
            <summary>
            Schema associated with NDiagramUndoCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENDatabaseShape">
            <summary>
            Enumerates the database shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDatabaseShape.ChenEntity">
            <summary>
            Chen entity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDatabaseShape.ChenRelationship">
            <summary>
            Chen relationship.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDatabaseShape.ChenAttribute">
            <summary>
            Chen attribute.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDatabaseShape.ChenRelationshipConnector">
            <summary>
            Chen relationship connector.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDatabaseShape.CrowsFootEntity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENChenEntityType">
            <summary>
            Enumerates chen entity types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenEntityType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenEntityType.Weak">
            <summary>
            Weak.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenEntityType.Composite">
            <summary>
            Composite.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENIDEF1XEntityType">
            <summary>
            Enumerates IDEF1X entity types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEF1XEntityType.Independent">
            <summary>
            Independent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEF1XEntityType.Dependent">
            <summary>
            Dependent.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENIDEFCardinalityType">
            <summary>
            Enumerates the IDEF cardinality types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEFCardinalityType.ZeroOneOrMore">
            <summary>
            Zero, one or more.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEFCardinalityType.OneOrMore">
            <summary>
            One or more.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEFCardinalityType.ZeroOrMore">
            <summary>
            Zero or more.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEFCardinalityType.ExactlyN">
            <summary>
            Exactly N.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEFCardinalityType.FromNToM">
            <summary>
            From N to M.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENIDEFCardinalityType.Specified">
            <summary>
            Specified.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENAttributeType">
            <summary>
            Enumerates the attribute types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENAttributeType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENAttributeType.PrimaryKey">
            <summary>
            Primary key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENAttributeType.ForeignKey">
            <summary>
            Foreign key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENAttributeType.Required">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENAttributeType.Optional">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENChenAttributeType">
            <summary>
            Enumerates the Chen attribute types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenAttributeType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenAttributeType.PrimaryKey">
            <summary>
            Primary key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenAttributeType.MultivaluedAttribute">
            <summary>
            Multivalued attribute.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenAttributeType.DerivedAttribute">
            <summary>
            Derived attribute.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENChenAttributeType.Required">
            <summary>
            Required.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENConnectorActions">
            <summary>
            Enumerates the connector actions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorActions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorActions.ShowMultiplicity">
            <summary>
            Show multiplicity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorActions.SetBegin">
            <summary>
            Set begin.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorActions.SetEnd">
            <summary>
            Set end.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorActions.Optional">
            <summary>
            Optional.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENConnectorParticipation">
            <summary>
            Enumerates the connector participation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorParticipation.Partial">
            <summary>
            Partial.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENConnectorParticipation.Total">
            <summary>
            Total.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENCrowsFootConnectorCommand">
            <summary>
            Enumerates the crows foot connector commands.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCrowsFootConnectorCommand.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCrowsFootConnectorCommand.ZeroOrMore">
            <summary>
            Zero or more.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCrowsFootConnectorCommand.OneOrMore">
            <summary>
            One or more.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCrowsFootConnectorCommand.OneAndOnlyOne">
            <summary>
            One and only one.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCrowsFootConnectorCommand.ZeroOrOne">
            <summary>
            Zero or one.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPortsDistributionMode">
            <summary>
            Enumerates the table ports distribution modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortsDistributionMode.None">
            <summary>
            A port is placed on each side of the shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortsDistributionMode.GridBased">
            <summary>
            A port is placed on both ends of each row and column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortsDistributionMode.CellBased">
            <summary>
            A port is placed on each cell border which lies on the shape border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortsDistributionMode.RowsOnly">
            <summary>
            A port is placed on the left and right side of each row
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortsDistributionMode.ColumnsOnly">
            <summary>
             A ports is placed on the top and bottom side of each column
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENTableCellPortDirection">
            <summary>
            Enumerates the table cell port direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableCellPortDirection.Left">
            <summary>
            The port is on the left side of the cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableCellPortDirection.Top">
            <summary>
            The port is on the top side of the cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableCellPortDirection.Right">
            <summary>
            The port is on the right side of the cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableCellPortDirection.Bottom">
            <summary>
            The port is on the bottom side of the cell
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPortDirectionMode">
            <summary>
            Enumerates the modes in which a port can determine its direction angle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortDirectionMode.Custom">
            <summary>
            Use the DirX and DirY properties to define an angle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortDirectionMode.AutoCenter">
            <summary>
            Automatically determines an angle, which is formed by the line connecting the port location with the model center.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortDirectionMode.AutoCenterInverted">
            <summary>
            Same as AutoCenter but angle is inverted to 180 degrees.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortDirectionMode.AutoSide">
            <summary>
            Automatically determines the bounds side, and returns a normal vector angle to this side (e.g. 0, 90, 180, 270 degrees).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortDirectionMode.AutoSideInverted">
            <summary>
            Same as AutoSide but angle is inverted to 180 degrees.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENTextSearchShapes">
            <summary>
            Enumerates the search targets
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextSearchShapes.Selection">
            <summary>
            Search in the current selection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextSearchShapes.CurrentPage">
            <summary>
            Search in the current page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextSearchShapes.AllPages">
            <summary>
            Search in all pages
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGeometryEndDirection">
            <summary>
            Enumerates the direction modes for the geometry begin and end.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryEndDirection.None">
            <summary>
            The geometry cannot provide a direction for its start or end.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryEndDirection.Horizontal">
            <summary>
            The geometry direction for the start or end is horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryEndDirection.Vertical">
            <summary>
            The geometry direction for the start or end is vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryEndDirection.Automatic">
            <summary>
            The geometry direction for the start or end is automatically determined.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENDefaultShapeGlue">
            <summary>
            Enumerates the default ways in which a shape 1D begin or end point is by default glued the shape via shape-to-shape connections.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDefaultShapeGlue.None">
            <summary>
            By default the shape does not allow shape to shape connections.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDefaultShapeGlue.Automatic">
            <summary>
            The Begin or End point of the connectors are glued automatically depending on the shape type, geometry and ports.
            <para>
            If case the shape is a 2D shape:
                <para>
                If the shape has ports, glues to the nearest port. 
                Otherwise glues to the shape box intersection.
                </para>
            </para>
            <para>
            If case the shape is a 1D shape:
                <para>
                If the shape has ports, glues to the nearest port. 
                If the shape geometry has closed figures -> glues to the shape line center.
                Otherwise -> glues to the shape contour middle.
                </para>
            </para>
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDefaultShapeGlue.GlueToGeometryIntersection">
            <summary>
            The Begin or End point of the connectors are glued to the contour (outline) of the shape geometry.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDefaultShapeGlue.GlueToBoxIntersection">
            <summary>
            The Begin or End point of the connectors are glued to the contour (outline) of the shape box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDefaultShapeGlue.GlueToNearestPort">
            <summary>
            The Begin or End point of the connectors are glued to the nearest port of the shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDefaultShapeGlue.GlueToBoxCenter">
            <summary>
            The Begin or End point of the connectors are glued to the nearest port of the shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENRoutableConnectorRerouteMode">
            <summary>
            Enumerates the modes in which a route can be automatically rerouted
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENRoutableConnectorRerouteMode.Never">
            <summary>
            The route is never automatically rerouted - it is up to the user to manage its points or call the Reroute method
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENRoutableConnectorRerouteMode.Always">
            <summary>
            The route is automatically rerouted whenever any of the obstacles have changed (e.g. there is a chance for the route to be rerouted more efficiently)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENRoutableConnectorRerouteMode.WhenNeeded">
            <summary>
            The route is rerouted whenever an obstacle is placed on it or the shapes to which it is connected are moved or have changed
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPastePositionMode">
            <summary>
            Defines the way in which pasted content is positioned inside drawing documents
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPastePositionMode.OffsetInSameDocument">
            <summary>
            Pasted content is offset only when pasting in the same drawing, 
            if the data came from another document it is centred
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPastePositionMode.CenterInDocument">
            <summary>
            Pasted content is always positioned in the center of the drawing 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPastePositionMode.OffsetFromViewportOrigin">
            <summary>
            Pasted content is ofset from the current viewport origin.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENSelectionEditMode">
            <summary>
            Enumerates the possible ways in which a page selection can be edited
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSelectionEditMode.Normal">
            <summary>
            The page displays normal editors for the selected items (the default)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSelectionEditMode.Geometry">
            <summary>
            The page displays geometry editors for the selected items.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPreviewMode">
            <summary>
            Defines the mode in which a page item pteview is started
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPreviewMode.Reposition">
            <summary>
            The preview is started for reposition purposes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPreviewMode.Redefine">
            <summary>
            The preview is started for redefine purposes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENArrowheadFillMode">
            <summary>
            Enumerates the modes in which the geometry arrowheads are filled.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadFillMode.None">
            <summary>
            The arrowhead is not filled
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadFillMode.Auto">
            <summary>
            The arrowhead is filled with the color of the owner geometry stroke
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadFillMode.Custom">
            <summary>
            The arrowhead uses a custom fill
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENArrowheadStrokeMode">
            <summary>
            Enumerates the modes in which the geometry arrowheads are stroked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadStrokeMode.None">
            <summary>
            The arrowhead is not stroked
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadStrokeMode.Auto">
            <summary>
            The arrowhead is stroked with a stroke which has the geometry stroke width and color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadStrokeMode.Custom">
            <summary>
            The arrowhead uses a custom stroke
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENStatusPane">
            <summary>
            Enumerates the status panes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENStatusPane.Page">
            <summary>
            Page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENStatusPane.SelectedObject">
            <summary>
            Selected object.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENStatusPane.MousePosition">
            <summary>
            Mouse position.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENArrowheadType">
            <summary>
            Enumerates the arrowhead types (i.e. a begin or an end arrowhead).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadType.Begin">
            <summary>
            Represents a begin arrowhead.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadType.End">
            <summary>
            Represents an end arrowhead.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENArrowheadShape">
            <summary>
            Enumerates the currently available arrow head shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.LineArrow">
            <summary>
            Line arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.Triangle">
            <summary>
            Triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleWithInwardCurve">
            <summary>
            Triangle with inward curve at base.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleWithOutwardCurve">
            <summary>
            Triangle with outward curve at base.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CurvedLineArrow">
            <summary>
            Curved line arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleWithInwardCurves">
            <summary>
            Triangle with inward curves on all sides.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.UpwardAngledLine">
            <summary>
            Upward angled line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.Square">
            <summary>
            Square.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleNoFill">
            <summary>
            Not filled triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleWithInwardCurveNoFill">
            <summary>
            Not filled triangle with inward curve at base.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleWithOutwardCurveNoFill">
            <summary>
            Not filled triangle with outward curve at base.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TriangleWithInwardCurvesNoFill">
            <summary>
            Not filled triangle with curves on all sides.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleNoFill">
            <summary>
            Not filled circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.SquareNoFill">
            <summary>
            Not filled square.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.DiamondNoFill">
            <summary>
            Not filled diamond.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.DownwardAngledLine">
            <summary>
            Downward angled line intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.VerticalLine">
            <summary>
            Vertical line intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.TwoVerticalLines">
            <summary>
            Two vertical lines intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.ThreeVerticalLines">
            <summary>
            Three vertical lines intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.InvertedLineArrow">
            <summary>
            Inverted line arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.InvertedLineArrowWithVerticalLine">
            <summary>
            Inverted line arrow with vertical line intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.InvertedLineArrowWithCircleNoFill">
            <summary>
            Inverted line arrow with not filled circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.VerticalLineWithCircleNoFill">
            <summary>
            Vertical line intersecting shaft with not filled circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleNoFillVerticalLine">
            <summary>
            Not filled circle with vertical line intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleNoFillTwoVerticalLines">
            <summary>
            Not filled circle with two vertical lines intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleNoFillThreeVerticalLines">
            <summary>
            Not filled circle with three vertical lines intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleNoFillDiamondNoFill">
            <summary>
            Not filled circle with not filled diamond.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleVerticalLine">
            <summary>
            Circle with vertical line intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleTwoVerticalLines">
            <summary>
            Circle with two vertical lines intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleThreeVerticalLines">
            <summary>
            Circle with three vertical lines intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.CircleDiamondNoFill">
            <summary>
            Circle with not filled diamond.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.DoubleTriangle">
            <summary>
            Double triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.DoubleTriangleNoFill">
            <summary>
            Not filled double triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.DoubleLineArrow">
            <summary>
            Double line arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.LineArrowWithVerticalLine">
            <summary>
            Line arrow with vertical line intersecting shaft.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadShape.DoubleLineArrowWithVerticalLine">
            <summary>
            Double line arrow with vertical line intersecting shaft.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENArrowheadSize">
            <summary>
            Defines the available arrowhead sizes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.VerySmall">
            <summary>
            Very small
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.Small">
            <summary>
            Small
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.Large">
            <summary>
            Large
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.ExtraLarge">
            <summary>
            Extra Large
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.Jumbo">
            <summary>
            Jumbo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.Colossal">
            <summary>
            Colossal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENArrowheadSize.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENDiagramItemOperationMask">
            <summary>
            Enumerates the flags that define the types of operations that can be performed with diagram items.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.Select">
            <summary>
            Select item
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.TrackersEdit">
            <summary>
            Trackers edit - applicable only to shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ContextMenuEdit">
            <summary>
            Context menu edit - applicable to context menu editable elements
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.InplaceEdit">
            <summary>
            Inplace edit - applicable to inplace editable elements
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.GeometryEdit">
            <summary>
            Can edit geometry
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.Format">
            <summary>
            Can change style - applicable to styleable elements
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.MoveX">
            <summary>
            Move horizontally
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.MoveY">
            <summary>
            Move vertically
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ResizeX">
            <summary>
            Resize X - applicable to models
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ResizeY">
            <summary>
            Resize Y - applicable to models
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ChangeAspectRatio">
            <summary>
            Change aspect ratio
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.Rotate">
            <summary>
            Rotate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.UpdateBounds">
            <summary>
            Update Bounds operation (only applicable to 2D Shapes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.Delete">
            <summary>
            Can delete - applicable to all elements, which reside in composites
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.Ungroup">
            <summary>
            Ungroup - applicable only to groups
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ChangeBeginPoint">
            <summary>
            Change begin point - applicable only to 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ChangeEndPoint">
            <summary>
            Change end point - applicable only to 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.ChangePinPoint">
            <summary>
            Change pin point - applicable only to 2D shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.Print">
            <summary>
            Print - applicable to all elements paintable elements
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramItemOperationMask.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENInteractionStyleMask">
            <summary>
            The interaction style mask
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.Box">
            <summary>
            Bounds
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.Rotation">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.PinPoint">
            <summary>
            Pin position
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.GeometryPoints">
            <summary>
            Geometry base and control points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.GeometryMidPoints">
            <summary>
            Geometry Mid points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.BeginPoint">
            <summary>
            Shape begin point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.EndPoint">
            <summary>
            Shape end point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.Controls">
            <summary>
            Shape Control Points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENInteractionStyleMask.All">
            <summary>
            All 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENCoordinateBehavior">
            <summary>
            Defines the possible ways in which points X and Y coordinates can behave
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCoordinateBehavior.Proportional">
            <summary>
            The coordinate is defined proportionally to the respective dimension (Width or Height).
            For example Height*0.6.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCoordinateBehavior.Locked">
            <summary>
            The coordinate is locked to its original value. Nevron does not update this coordinate.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCoordinateBehavior.OffsetFromMin">
            <summary>
            The coordinate is defined with a constant distance from the near side (Left or Top)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCoordinateBehavior.OffsetFromMid">
            <summary>
            The coordinate is defined with a constant distance from the center (CenterX or CenterY).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENCoordinateBehavior.OffsetFromMax">
            <summary>
            The coordinate is defined with a constant distance from the far side (Right or Bottom)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENResizeInGroup">
            <summary>
            Enumerates the ways in which Nevron will update the shape transformation and dimensions,
            when a shape, which resides in a group is resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENResizeInGroup.UseGroupSetting">
            <summary>
            Uses the settings of the group in which the shape resides. 
            In this mode the shape will use the NGroup.ResizeShapes setting.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENResizeInGroup.RepositionOnly">
            <summary>
            The Pin will be expressed relatively to the group Width and Height.
            The Shape Width and Height are set to constant values.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENResizeInGroup.ScaleAndReposition">
            <summary>
            The Pin will be expressed relatively to the group Width and Height.
            The Shape Width will be expressed relatively to the group Width and Height.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGroupResizeShapes">
            <summary>
            Enumerates the default way in which shapes in groups are resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupResizeShapes.RepositionOnly">
            <summary>
            Repositions the shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupResizeShapes.ScaleAndReposition">
            <summary>
            Scales and repositions the shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGroupSelectionMode">
            <summary>
            Enumerates the default way in which shapes in groups are resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupSelectionMode.GroupOnly">
            <summary>
            Specifies that when you click a group, only the group is selected. You cannot select the individual shapes within a group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupSelectionMode.GroupFirst">
            <summary>
            Specifies that when you click a group, the group is selected first. If you click again, you can select an individual shape. Group first is the default behavior for most groups.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupSelectionMode.ShapesFirst">
            <summary>
            Specifies that when you click a group, you select the individual shape that you're pointing to. You must click the bounding box around the group to select the group itself.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGroupElementsZOrder">
            <summary>
            Enumerates the ZOrder in which the group Geometry, TextBlock and Widget element are displayed in relation to the group shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupElementsZOrder.BehindShapes">
            <summary>
            The elements are displayed behind the member shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGroupElementsZOrder.AboveShapes">
            <summary>
            The elements are displayed above the member shapes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENHandleShape">
            <summary>
            Defines the currently available handle shapes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.RectanglePlus">
            <summary>
            Rectangle with a plus inside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.RectangleX">
            <summary>
            Rectangle with a X inside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.EllipsePlus">
            <summary>
            Ellipse with a plus inside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleShape.EllipseX">
            <summary>
            Ellipse with a X inside
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENHandleType">
            <summary>
            Defines the possible handle types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.Box">
            <summary>
            Handle for alignment box
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.Rotator">
            <summary>
            Handle for rotator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.Pin">
            <summary>
            Handle for pin point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.BeginPoint">
            <summary>
            Handle for shape begin point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.EndPoint">
            <summary>
            Handle for shape end point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.Port">
            <summary>
            Handle for shape port
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.Control">
            <summary>
            Handle for shape control point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.GeometryBasePoint">
            <summary>
            Handle for geometry base points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.GeometryBendPoint">
            <summary>
            Handle for geometry bend points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.GeometryMidPoint">
            <summary>
            Handle for geometry mid points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHandleType.MoveSelection">
            <summary>
            The move selection handle
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPointType">
            <summary>
            Defines the possible point types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.GeometryBasePoint">
            <summary>
            Geometry base point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.GeometryControlPoint">
            <summary>
            Geometry control point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.GeometryMidPoint">
            <summary>
            Geometry segment middle point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.ShapeStartPlug">
            <summary>
            Shape start plug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.ShapeEndPlug">
            <summary>
            Shape end plug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.ShapePort">
            <summary>
            Shape port
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPointType.ShapeControlPoint">
            <summary>
            Shape control point
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENShapeType">
            <summary>
            Defines the possible shape types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeType.Shape1D">
            <summary>
            1D shape - a shape that behaves as a line connecting 2D shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeType.Shape2D">
            <summary>
            2D shape - a shape that behaves as a box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.EN1DShapeXForm">
            <summary>
            Enumerates the predefined ways in which a 1D shape transform can be initialized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.EN1DShapeXForm.Vector">
            <summary>
            The 1D shape transform is initialized as a vector connecting the begin and end points, such that:
            Binds the Width to the distance between the Begin and End points.
            Binds the Angle to the angle formed by the line connecting the Begin and End points and the X axis.
            Binds the PinX and PinY to the middle point of the line connecting the Begin and End points.
            Binds the LocPinX and LocPinY to the center of the shape local alignment box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.EN1DShapeXForm.Box">
            <summary>
            The 1D shape transform is initialized as a box formed by the begin and end points, such that:
            Binds the Width to the X distance between the Begin and End points.
            Binds the Height to the Y distance between the Begin and End points.
            Binds the PinX and PinY to the middle point of the line connecting the Begin and End points.
            Binds the LocPinX and LocPinY to the center of the shape.
            Sets the angle to zero.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.EN1DShapeXForm.BoxAbsolute">
            <summary>
            The 1D shape transform is initialized as a box formed by the begin and end points, such that:
            Binds the Width to the absolute X distance between the Begin and End points.
            Binds the Height to the absolute Y distance between the Begin and End points.
            Binds the PinX and PinY to the middle point of the line connecting the Begin and End points.
            Binds the LocPinX and LocPinY to the center of the shape.
            Sets the angle to zero.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENTextBlockXForm">
            <summary>
            Enumerates the predefined ways in which a shape text block transform can be initialized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockXForm.ShapeBox">
            <summary>
            The text block is sized and positioned inside the shape Width/Height box. This has the following effect:
            Binds the Width and Height properties to the Width and Height of the shape.
            Binds the LocPinX and LocPinY of the text block to the center of the text block.
            Binds the PinX and PinX of the text block to the center of the shape.
            Sets the angle to zero.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockXForm.ShapeLineMiddle">
            <summary>
            The text block is sized to the shape desired size.
            Binds the LocPinX and LocPinY of the text block to the center of the text block.
            Binds the PinX and PinX of the shape line middle (the line connecting the Begin and End points).
            Binds the angle to the shape line angle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockXForm.GeometryContourMiddle">
            <summary>
            The text block is sized to the shape desired size.
            Binds the LocPinX and LocPinY of the text block to the center of the text block.
            Binds the PinX and PinX of the shape geometry contour middle.
            Binds the angle to the shape geometry contour angle in the middle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockXForm.CustomPin">
            <summary>
            The text block is sized to the shape desired size.
            Binds the LocPinX and LocPinY of the text block to the center of the text block.
            Leaves the PinX and PinX to be specified by the user.
            Sets the angle to zero.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENImageBlockXForm">
            <summary>
            Enumerates the predefined ways in which a shape image block transform can be initialized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockXForm.ShapeBox">
            <summary>
            The image block is sized and positioned inside the shape Width/Height box. This has the following effect:
            Binds the Width and Height properties to the Width and Height of the shape.
            Binds the LocPinX and LocPinY of the image block to the center of the image block.
            Binds the PinX and PinX of the image block to the center of the shape.
            Sets the angle to zero.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockXForm.ShapeLineMiddle">
            <summary>
            The image block is sized to the shape desired size.
            Binds the LocPinX and LocPinY of the image block to the center of the image block.
            Binds the PinX and PinX of the shape line middle (the line connecting the Begin and End points).
            Binds the angle to the shape line angle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockXForm.GeometryContourMiddle">
            <summary>
            The image block is sized to the shape desired size.
            Binds the LocPinX and LocPinY of the image block to the center of the image block.
            Binds the PinX and PinX of the shape geometry contour middle.
            Binds the angle to the shape geometry contour angle in the middle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockXForm.CustomPin">
            <summary>
            The image block is sized to the shape desired size.
            Binds the LocPinX and LocPinY of the image block to the center of the image block.
            Leaves the PinX and PinX to be specified by the user.
            Sets the angle to zero.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENTextBlockResizeMode">
            <summary>
            Enumerates the possible ways in which a image block can be resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockResizeMode.None">
            <summary>
            The text block is not automatically resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockResizeMode.ShapeSize">
            <summary>
            The text block is automatically resized to the size of the owner shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockResizeMode.TextSize">
            <summary>
            The text block is resized to its desired size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockResizeMode.ShapeWidthTextHeight">
            <summary>
            The text block width is resized to size of the owner shape, while the text block height is resized to the desired text block size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENImageBlockResizeMode">
            <summary>
            Enumerates the possible ways in which an image block can be resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockResizeMode.None">
            <summary>
            The image block is not automatically resized.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockResizeMode.ShapeSize">
            <summary>
            The image block is automatically resized to the size of the owner shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENImageBlockResizeMode.ImageSize">
            <summary>
            The image block is resized to its desired size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENTableBlockResizeMode">
            <summary>
            Enumerates the possible table block resize modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableBlockResizeMode.AutoSize">
            <summary>
            The table desired size determines the size of the table containing shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableBlockResizeMode.AutoHeight">
            <summary>
            The table containing shape defines the table witdth, while the table contents defines the table containing shape height
            /// </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTableBlockResizeMode.FitToShape">
            <summary>
            The table is stretched to fit the bounds specified by its containing shape. If the table cannot fit it will resize the table containing shape automatically
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPortGlueMode">
            <summary>
            Defines the possible port types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortGlueMode.Inward">
            <summary>
            Inward ports can be connected to end-points and outward ports of other shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortGlueMode.Outward">
            <summary>
            Outward ports can be connected only with inward ports of other shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortGlueMode.InwardAndOutward">
            <summary>
            Inward and Outward ports behave as a mixture of the other two types
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPortFlowMode">
            <summary>
            Defines the port flow type -
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortFlowMode.Input">
            <summary>
            An input port can be connected only to other Output ports and other shapes End points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortFlowMode.Output">
            <summary>
            An output port can be connected only to other Input ports and other shapes Begin points.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPortFlowMode.InputOutput">
            <summary>
            The port is of input-output type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGridStyle">
            <summary>
            Defines the possible styles in which the page grid can be displayed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGridStyle.MajorLines">
            <summary>
            Draws a grid of major lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGridStyle.MajorMinorLines">
            <summary>
            Draws a grid of major-minor lines.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGridStyle.Interlaced">
            <summary>
            Horizontal and Vertical stripes are displayed on each odd row and col
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGridStyle.InterlacedHorizontally">
            <summary>
            Horizontal stripes are displayed on each odd row
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGridStyle.InterlacedVertically">
            <summary>
            Vertical stripes are displayed on each odd col
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENShapeMoveSlaves">
            <summary>
            A masked enumerations which defines the shapes that must be moved together with a certain shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.ReflexiveShapes">
            <summary>
            Translate with shapes which reflex it (e.g. 1D shapes whose both plugs are connected to the shape)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.IncomingShapes">
            <summary>
            Translate with the incoming shapes (e.g. 1D shapes whose end plug is connected to the shape)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.OutgoingShapes">
            <summary>
            Translate with the outgoing shapes (e.g. 1D shapes whose start plug is connected to the shape)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.FromShape">
            <summary>
            Translate with the FROM shape (e.g. the shape to which the start plug is connected). Applicable for 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.ToShape">
            <summary>
            Translate with the TO shape (e.g. the shape to which the end plug is connected)). Applicable for 1D shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.DestinationShapes">
            <summary>
            Translate with destination shapes (e.g. the shapes which are connected to the end plug of outgoing shapes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.SourceShapes">
            <summary>
            Translate with source shapes (e.g. the shapes which are connected to the start plug of incoming shapes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.SuccessorShapes">
            <summary>
            Translate with successor shapes (e.g. DestinationShapes + the successor shapes of the destination shapes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.PredecessorShapes">
            <summary>
            Translate with predecessor shapes (e.g. SourceShapes + the predecessor shapes of the source shapes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.AccessibleShapes">
            <summary>
            Translate with all accessible shapes (e.g. NeighbourShapes + the accessible shapes of the neighbour shapes)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.ConnectedShapes">
            <summary>
            Translate with all possible connected shapes (e.g. IncomingShapes + OutgoingShapes + FromShape + ToShape)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeMoveSlaves.NeighbourShapes">
            <summary>
            Translate with neighbour shapes (e.g. DestinationShapes + SourceShapes)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENShapeBoundsMask">
            <summary>
            Bounds mask
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeBoundsMask.WHBox">
            <summary>
            Width-Height Bounding box.
            The shape's geometry need not and often do not lie entirely within the shape's width-height box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeBoundsMask.Geometry">
            <summary>
            The Geometry Bounding Box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeBoundsMask.ChildShapesAlignBox">
            <summary>
            The inner shapes Bounding Box
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENHVSegmentType">
            <summary>
            Enumerates the possbile HV segments type
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHVSegmentType.Horizontal">
            <summary>
            Horizontal segment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENHVSegmentType.Vertical">
            <summary>
            Vertical segment
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENLibraryViewType">
            <summary>
            Enumerates the possbile library view types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryViewType.List">
            <summary>
            Small icons, text on the right
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryViewType.Icons">
            <summary>
            Normal icons, text on the right
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryViewType.Thumbnails">
            <summary>
            Large icons, text on the bottom
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENLibraryDisplayOrder">
            <summary>
            Enumerates the display order in which the library displays items.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryDisplayOrder.Default">
            <summary>
            Library items are displayed in their declaration order.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryDisplayOrder.NameAscending">
            <summary>
            Library items are displayed in name ascending order.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryDisplayOrder.NameDescending">
            <summary>
            Library items are displayed in name descending order.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENLibraryBrowserMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryBrowserMode.ViewLibraries">
            <summary>
            View libraries.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLibraryBrowserMode.SearchLibraries">
            <summary>
            Search libraries.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENSelectAllFilter">
            <summary>
            Enumerates the predefined select all filters.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSelectAllFilter.All">
            <summary>
            Selects all page items.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSelectAllFilter.Shapes1D">
            <summary>
            Selects only 1D shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSelectAllFilter.Shapes2D">
            <summary>
            Selects only 2D shapes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENBarcodeType">
            <summary>
            Enumerates the supported barcode types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENBarcodeType.Linear">
            <summary>
            Linear (1D) barcode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENBarcodeType.Matrix">
            <summary>
            Matrix (2D) barcode.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENLineJumpsShape">
            <summary>
            Enumerates the currently available line jumps shapes (displayed at lines intersections)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.None">
            <summary>
            The bridge is not displayed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Arc">
            <summary>
            Arc
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Gap">
            <summary>
            Gap
            </summary>		
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Sides2">
            <summary>
            2 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Sides3">
            <summary>
            3 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Sides4">
            <summary>
            4 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Sides5">
            <summary>
            5 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Sides6">
            <summary>
            6 sided bridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsShape.Sides7">
            <summary>
            7 sided bridge
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENLineJumpsTarget">
            <summary>
            Defines the possible line jump targets
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsTarget.None">
            <summary>
            The bridgeable has no bridge targets 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsTarget.SelfAndOther">
            <summary>
            Bridges are displayed on self intersections and intersections with other nodes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsTarget.Self">
            <summary>
            Bridges are only displayed on self intersections
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENLineJumpsTarget.Other">
            <summary>
            Bridges are only displayed on intersections with other nodes
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGender">
            <summary>
            Enumerates the genders.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGender.Male">
            <summary>
            Male gender.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGender.Female">
            <summary>
            Female gender.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENEndPointGlueMode">
            <summary>
            Enumerates the way in which a 1D shape begin or end point can connect to a shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENEndPointGlueMode.GlueToShape">
            <summary>
            Glues to begin/end point to the shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENEndPointGlueMode.GlueToPort">
            <summary>
            Glues the begin/end point to the nearest port (static)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENEndPointGlueMode.GlueToGeometryIntersection">
            <summary>
            The Begin or End point of the connectors are glued to the contour (outline) of the shape geometry.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENEndPointGlueMode.GlueToBoxIntersection">
            <summary>
            The Begin or End point of the connectors are glued to the contour (outline) of the shape box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENEndPointGlueMode.GlueToNearestPort">
            <summary>
            The Begin or End point of the connectors are glued to the nearest port of the shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENEndPointGlueMode.GlueToBoxCenter">
            <summary>
            The Begin or End point of the connectors are glued to the nearest port of the shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENShapeHyperlinkType">
            <summary>
            Enumerates the shape hyperlink types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkType.Url">
            <summary>
            Link to an URL.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkType.File">
            <summary>
            Link to a file.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkType.Page">
            <summary>
            Link to a page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkType.Shape">
            <summary>
            Link to a shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkType.Bookmark">
            <summary>
            Link to a bookmark.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGeometryClipWithShapeBlock">
            <summary>
            Enumerates the clipping modes of the geometry with the shape block.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryClipWithShapeBlock.Auto">
            <summary>
            The geometry is clipped with the block, if it contains only open figures.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryClipWithShapeBlock.NoClip">
            <summary>
            The geometry is not clipped.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryClipWithShapeBlock.Clip">
            <summary>
            The geometry is clipped.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENPersonShapePart">
            <summary>
            Enumerates the parts of a person shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPersonShapePart.Name">
            <summary>
            The name part of a person shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPersonShapePart.Dates">
            <summary>
            The dates part of a person shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENPersonShapePart.Photo">
            <summary>
            The photo part of a person shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGeometryCommandType">
            <summary>
            Enumerates the geometry command types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.ArcTo">
            <summary>
            Arc to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.CircularArcTo">
            <summary>
            Circualar arc to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.CubicBezierTo">
            <summary>
            Cubic bezier to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.EllipticalArcTo">
            <summary>
            Elliptical arc to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.LineTo">
            <summary>
            Line to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.MoveTo">
            <summary>
            Move to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.NurbsTo">
            <summary>
            Nurbs to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.PolylineTo">
            <summary>
            Polyline to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.DrawEllipse">
            <summary>
            Draw ellipse command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.DrawPath">
            <summary>
            Draw path command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.DrawPolygon">
            <summary>
            Draw polygon command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.DrawPolyline">
            <summary>
            Draw polyline command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.DrawPolypoint">
            <summary>
            Draw polypoint command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGeometryCommandType.DrawRectangle">
            <summary>
            Draw rectangle command.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENMultiLineCommand">
            <summary>
            Enumerates the multi line commands.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENMultiLineCommand.AddPoint">
            <summary>
            Add point.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENMultiLineCommand.RemovePoint">
            <summary>
            Remove point.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENDeleteCommandKey">
            <summary>
            Enumerates the "Delete" command keys.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDeleteCommandKey.Delete">
            <summary>
            The "Delete" key.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDeleteCommandKey.Backspace">
            <summary>
            The "Backspace" key.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENNudgeStepType">
            <summary>
            Enumerates the nudge steps.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENNudgeStepType.Small">
            <summary>
            Small nudget step.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENNudgeStepType.Large">
            <summary>
            Large nudge step.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENTextBlockViewMode">
            <summary>
            Enumerates the possible text block view modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockViewMode.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockViewMode.Stretch">
            <summary>
            Stretch.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENTextBlockViewMode.Fit">
            <summary>
            Fit.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENSearchItemType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSearchItemType.Shape">
            <summary>
            Shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSearchItemType.Library">
            <summary>
            Library.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSearchItemType.Folder">
            <summary>
            Folder.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENSearchItemType.Section">
            <summary>
            Section
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENShapeHyperlinkAction">
            <summary>
            Enumerates the shape hyperlink actions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkAction.Insert">
            <summary>
            Insert action.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapeHyperlinkAction.Edit">
            <summary>
            Edit action.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENDiagramExtensionType">
            <summary>
            Enumerates the diagram extension types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramExtensionType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramExtensionType.FamilyTree">
            <summary>
            Family tree extension.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramExtensionType.FloorPlan">
            <summary>
            Floor plan extension.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramExtensionType.Flowchart">
            <summary>
            Flowchart extention.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENShapePropertyType">
            <summary>
            Enumerates the supported shape property types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapePropertyType.String">
            <summary>
            String property type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapePropertyType.Boolean">
            <summary>
            Boolean property type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapePropertyType.Number">
            <summary>
            Number property type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapePropertyType.Currency">
            <summary>
            Currency property type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapePropertyType.DateTime">
            <summary>
            Date/Time property type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENShapePropertyType.TimeSpan">
            <summary>
            Time span property type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramExtension">
            <summary>
            Base class for all diagram extensions. Diagram extensions are used to determine the type
            of the diagram in a drawing page in order to adapt the commanding user interface to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramExtension.Type">
            <summary>
            Gets the diagram extension type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramExtension.NDiagramExtensionSchema">
            <summary>
            Schema associated with NDiagramExtension.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtension.Create(Nevron.Nov.Diagram.ENDiagramExtensionType)">
            <summary>
            Creates a diagram extension for the given type.
            </summary>
            <param name="extensionType"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramExtensionCollection">
            <summary>
            A collection of diagram extensions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtensionCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtensionCollection.FindBySchema(Nevron.Nov.Dom.NSchema)">
            <summary>
            Returns the first diagram extension in this collection with the given schema or null
            if such diagram extension is not found.
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtensionCollection.FindByType``1">
            <summary>
            Returns the first diagram extension in this collection of the given type or null
            if such diagram extension is not found.
            </summary>
            <typeparam name="TDiagramExtension">The diagram extension type to search for.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtensionCollection.FindByType(Nevron.Nov.Diagram.ENDiagramExtensionType)">
            <summary>
            Returns the first diagram extension in this collection of the given type or null
            if such diagram extension is not found.
            </summary>
            <param name="extensionType"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramExtensionCollection.NDiagramExtensionCollectionSchema">
            <summary>
            Schema associated with NDiagramExtensionCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramExtensionCollection.NDiagramExtensionCollectionDesigner">
            <summary>
            Designer for diagram extension collections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtensionCollection.NDiagramExtensionCollectionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramExtensionCollection.NDiagramExtensionCollectionDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a list of the children types for this designer schema  
            (e.g. the types of the nodes which can be children of the node associated with this designer schema).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFamilyTreeExtension">
            <summary>
            Diagram extension for family tree diagrams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyTreeExtension.Type">
            <summary>
            Gets the diagram extension type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyTreeExtension.DateFormat">
            <summary>
            Gets/Sets the date format for family tree shapes. By default set to <see cref="F:Nevron.Nov.ENDateTimeValueFormat.Year4Digit"/>.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyTreeExtension.ShowPhotos">
            <summary>
            Gets/Sets whether to show photos in person shapes. By default set to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeExtension.NFamilyTreeExtensionSchema">
            <summary>
            Schema associated with NFamilyTreeExtension.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeExtension.DateFormatProperty">
            <summary>
            Reference to the DateFormat property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeExtension.ShowPhotosProperty">
            <summary>
            Reference to the ShowPhotos property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeExtension.DefaultDateFormat">
            <summary>
            The default date format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFamilyTreeExtension.NFamilyTreeExtensionDesigner">
            <summary>
            Designer for NFamilyTreeExtension objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeExtension.NFamilyTreeExtensionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFloorPlanExtension">
            <summary>
            Diagram extension for floor plan diagrams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFloorPlanExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFloorPlanExtension.Type">
            <summary>
            Gets the diagram extension type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFloorPlanExtension.NFloorPlanExtensionSchema">
            <summary>
            Schema associated with NFloorPlanExtension.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFlowchartExtension">
            <summary>
            Diagram extension for flowchart diagrams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFlowchartExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFlowchartExtension.Type">
            <summary>
            Gets the diagram extension type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFlowchartExtension.NFlowchartExtensionSchema">
            <summary>
            Schema associated with NFlowchartExtension.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENDiagramTextSearchDirection">
            <summary>
            Enumerates the diagram text search directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramTextSearchDirection.ForwardReading">
            <summary>
            Searches shapes' text evaluating shapes from left to right and from top to bottom
            (i.e. in reading order).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramTextSearchDirection.BackwardReading">
            <summary>
            Searches shapes' text evaluating shapes from right to left and from bottom to top
            (i.e. in inverse reading order).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramTextSearchDirection.Forward">
            <summary>
            Searches shapes' text in the order the shapes are placed in the page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENDiagramTextSearchDirection.Backward">
            <summary>
            Searches shapes' text in the reverse order the shapes are placed in the page.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFindTextSettings">
            <summary>
            Contains settings for text find operations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFindTextSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFindTextSettings.#ctor(Nevron.Nov.Diagram.NFindTextSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFindTextSettings.FindWhat">
            <Summary>
            Gets or sets the text to search for
            </Summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFindTextSettings.SearchIn">
            <summary>
            Gets or sets the set of shapes to search in
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFindTextSettings.SearchDirection">
            <Summary>
            Gets or sets the search direction
            </Summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFindTextSettings.Normalization">
            <summary>
            Gets or sets the type of normalization to apply to text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFindTextSettings.MatchCase">
            <Summary>
            Gets or sets whether search is case sensitive
            </Summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFindTextSettings.WholeWordsOnly">
            <Summary>
            Gets or sets whether whole words only will be matched
            </Summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.NFindTextSettingsSchema">
            <summary>
            Schema associated with NFindTextSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.FindWhatProperty">
            <summary>
            Reference to the FindWhat property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.SearchInProperty">
            <summary>
            Reference to the SearchIn property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.SearchDirectionProperty">
            <summary>
            Reference to the SearchDirection property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.NormalizationProperty">
            <summary>
            Reference to the Normalization property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.MatchCaseProperty">
            <summary>
            Reference to the MatchCase property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFindTextSettings.WholeWordsOnlyProperty">
            <summary>
            Reference to the WholeWordsOnly property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFindTextSettings.NFindTextSettingsDesigner">
            <summary>
            Designer for NFindTextSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFindTextSettings.NFindTextSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFindTextSettings.NFindTextSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NReplaceTextSettings">
            <summary>
            Contains settings for text replace operations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NReplaceTextSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NReplaceTextSettings.#ctor(Nevron.Nov.Diagram.NReplaceTextSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NReplaceTextSettings.ReplaceWith">
            <summary>
            Gets or sets the value of the ReplaceWith property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NReplaceTextSettings.NReplaceTextSettingsSchema">
            <summary>
            Schema associated with NReplaceTextSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NReplaceTextSettings.ReplaceWithProperty">
            <summary>
            Reference to the ReplaceWith property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NReplaceTextSettings.NReplaceTextSettingsDesigner">
            <summary>
            Designer for NReplaceTextSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NReplaceTextSettings.NReplaceTextSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NReplaceTextSettings.NReplaceTextSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates an editor, which must edit the specified node
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeTextSearchState">
            <summary>
            Shape text search state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeTextSearchState.Shape">
            <summary>
            Gets the searched shape
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextSearcher">
            <summary>
            Implements search functionality
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextSearcher.#ctor(Nevron.Nov.Diagram.NDrawingView)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawingView"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextSearcher.#ctor(Nevron.Nov.Diagram.NDrawingView,Nevron.Nov.Diagram.NFindTextSettings)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawingView"></param>
            <param name="findTextSettings"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextSearcher.Occurrences">
            <summary>
            Gets the number of occurrences found in the document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextSearcher.ActivateEditor">
            <summary>
            Gets or sets whether to activate the editor when searching in a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextSearcher.Reset(System.Boolean)">
            <summary>
            Resets the text searcher.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextSearcher.FindNext(Nevron.Nov.Diagram.NShapeTextSearchState@)">
            <summary>
            Finds the next occurrence of the searched text.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextSearcher.EndSearch">
            <summary>
            Executed when the user has closed the search dialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGuideline">
            <summary>
            Serves as base class for horizontal and vertical guidelines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NGuideline.CoordinateChanged">
            <summary>
            Occurs when the guideline coordinate has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGuideline.Coordinate">
            <summary>
            Gets or sets the coordinate of the guideline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGuideline.Stroke">
            <summary>
            Gets or sets the coordinate of the guideline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Appends custom context menu items.
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.CanClip">
            <summary>
            Returns true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.ShowPropertiesDialog">
            <summary>
            Shows the guideline properties dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the context needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGuideline.NGuidelineSchema">
            <summary>
            Schema associated with NGuideline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGuideline.CoordinateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGuideline.StrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGuideline.GuidelineAbilities">
            <summary>
            Defines the abilities that apply to all NGuideline instances.
            Guidelines inherit the NPageItem abilities.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGuideline.NGuidelineDesiger">
            <summary>
            Designer for NShape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGuideline.NGuidelineDesiger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NHorizontalGuideline">
            <summary>
            Represents a horizontal guideline. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHorizontalGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NHorizontalGuideline.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHorizontalGuideline.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Must override to hit test the guideline by point
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHorizontalGuideline.GetAbilitiesMask">
            <summary>
            Overriden to return the abilities of a horizontal guideline
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHorizontalGuideline.Translate(System.Double,System.Double)">
            <summary>
            Overriden to add the dy value to the coordinate value.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHorizontalGuideline.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHorizontalGuideline.NHorizontalGuidelineSchema">
            <summary>
            Schema associated with NHorizontalGuideline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHorizontalGuideline.HorizontalGuidelineAbilities">
            <summary>
            Abilities that apply to all NHorizontalGuideline instances.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NVerticalGuideline">
            <summary>
            Represents a vertical guideline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVerticalGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NVerticalGuideline.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVerticalGuideline.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Must override to hit test the guideline by point
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVerticalGuideline.GetAbilitiesMask">
            <summary>
            Overriden to return the VGuideline abiltieis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVerticalGuideline.Translate(System.Double,System.Double)">
            <summary>
            Overriden to add the dx value to the coordinate value.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVerticalGuideline.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVerticalGuideline.NVerticalGuidelineSchema">
            <summary>
            Schema associated with NVerticalGuideline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVerticalGuideline.VerticalGuidelineAbilities">
            <summary>
            Abilities that apply to all NVerticalGuideline instances.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NInplaceEditor">
            <summary>
            A content holder that holds the widget for a shape inplace editing.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NInplaceEditor.CommitEditing">
            <summary>
            Occurs when the inplace editor is destroyed and the edited information needs to be applied to the edited shape.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NInplaceEditor.AbortEditing">
            <summary>
            Occurs when the inplace editor is destroyed and the edited information does not need to be applied to the edited shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element layout
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.ValidateArrange">
            <summary>
            Called to layout the element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.Width">
            <summary>
            Gets or sets the inplace editor width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.Height">
            <summary>
            Gets or sets the inplace editor height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.PinX">
            <summary>
            Gets or sets the inplace editor pin X
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.PinY">
            <summary>
            Gets or sets the inplace editor pin Y
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.DesiredWidth">
            <summary>
            Gets or sets the desired width of the inplace editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.DesiredHeight">
            <summary>
            Gets or sets the desired height of the inplace editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.Content">
            <summary>
            Gets or sets the content of the editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NInplaceEditor.EditedShape">
            <summary>
            Gets the edited shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.GetTransform">
            <summary>
            Gets transform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.CanTransform">
            <summary>
            Determines whether this element currently returns a transformation different than NMatrix.Identity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.MeasureContent">
            <summary>
            Measures the content and updates the desired width and height properties.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.Destroy(System.Boolean)">
            <summary>
            Destroys the inplace editor and optionally commits the changes.
            </summary>
            <param name="commit"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Called when the user presses a keyboard key.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NInplaceEditor.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.NInplaceEditorSchema">
            <summary>
            Schema associated with NInplaceEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.ContentChild">
            <summary>
            Reference to the Content child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.WidthProperty">
            <summary>
            Reference to the Width property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.HeightProperty">
            <summary>
            Reference to the Height property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.PinXProperty">
            <summary>
            Reference to the PinX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.PinYProperty">
            <summary>
            Reference to the PinY property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.DesiredWidthProperty">
            <summary>
            Reference to the DesiredWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.DesiredHeightProperty">
            <summary>
            Reference to the DesiredHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.CommitEditingEvent">
            <summary>
            Fired when the editing has to be comitted.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NInplaceEditor.AbortEditingEvent">
            <summary>
            Fired when the editing is aborted.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageEditors">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapePortsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the ports count or ports properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeGeometryChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeTextBlockChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the textblock root properties or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeControlsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeBehaviorChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the shape behavior has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeSizeChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeProtectionChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the protection of the shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeEndPointsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapeTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to parent coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.OnShapePageTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to page coordinates of this shape has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageEditors.OwnerPage">
            <summary>
            Gets the page to which these editors belong
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.CanTransform">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageEditors.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Overriden to skip the branch traversal in preview paint mode
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageEditors.NPageEditorsSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageEditors.PageItemEditorChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageEditors.SelectionEditorChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeHyperlink">
            <summary>
            Represents a shape link to an URL, file, page, shape or bookmark.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.#ctor(System.String)">
            <summary>
            Creates a shape hyperlink to an URL or a file.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.#ctor(Nevron.Nov.Diagram.NPage)">
            <summary>
            Creates a shape hyperlink to a drawing page.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.#ctor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates a shape hyperlink to a shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.#ctor(Nevron.Nov.Diagram.NBookmark)">
            <summary>
            Creates a shape hyperlink to a bookmark.
            </summary>
            <param name="bookmark"></param>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShapeHyperlink.TypeChanged">
            <summary>
            Occurs when the Type property has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShapeHyperlink.PageChanged">
            <summary>
            Occurs when the Page property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.Type">
            <summary>
            Gets/Sets the type of this shape hyperlink.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.Url">
            <summary>
            Gets/Sets the URL of this hyperlink. It can be an HTTP/HTTPS URL or a File URI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.Page">
            <summary>
            Gets/Sets the page this hyperlink points to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.Shape">
            <summary>
            Gets/Sets the shape this hyperlink points to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.Bookmark">
            <summary>
            Gets/Sets the bookmark this hyperlink points to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.ZoomPercent">
            <summary>
            Gets/Sets the ZoomPercent to apply when navigating to a new page. Valid for Page and Shape hyperlink types.
            By default set to 100.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.Description">
            <summary>
            Gets/Sets the description of this hyperlink. If set, this description will be shown as hyperlink tooltip.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.OpenInNewWindow">
            <summary>
            Gets/Sets whether to open the hyperlink in a new window. Valid for URL and file hyperlinks
            for some exports like HTML and SVG. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.PageRef">
            <summary>
            Gets/Sets the reference to the page this link leads to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeHyperlink.ShapeRef">
            <summary>
            Gets/Sets the value of the ShapeRef property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.ToString">
            <summary>
            Gets the string representation of this shape hyperlink.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.NShapeHyperlinkSchema">
            <summary>
            Schema associated with NShapeHyperlink.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.UrlProperty">
            <summary>
            Reference to the Url property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.TypeProperty">
            <summary>
            Reference to the Type property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.PageRefProperty">
            <summary>
            Reference to the PageRef property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.ShapeRefProperty">
            <summary>
            Reference to the ShapeRef property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.BookmarkRefProperty">
            <summary>
            Reference to the BookmarkRef property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.ZoomPercentProperty">
            <summary>
            Reference to the ZoomPercent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.DescriptionProperty">
            <summary>
            Reference to the Description property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeHyperlink.OpenInNewWindowProperty">
            <summary>
            Reference to the OpenInNewWindow property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeHyperlink.NShapeHyperlinkDesigner">
            <summary>
            Designer of shape hyperlinks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeHyperlink.NShapeHyperlinkDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawing">
            <summary>
            Represents an interactive drawing, that consists of pages. A drawing is the root element inside a NDrawingDocument.
            </summary>
            <remarks>
            Each drawing consists of pages that are accessible from the Pages property.
            Of all pages in a drawing only one can be active at time.
            The active page is specified by its index, via the ActivePageIndex property.
            The currently active page is accessible from the ActivePage property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDrawing.ActivePageIndexChanged">
            <summary>
            Occurs when the ActivePageIndex property has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.Information">
            <summary>
            Gets or sets the document information.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDrawing.InformationChanged">
            <summary>
            Occurs when the informaiton property has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPagedElement#IsSheetRangeModeSupported(Nevron.Nov.UI.ENSheetRangeMode)">
            <summary>
            Determines whether the specified sheetRangeMode option is supported by the element.
            </summary>
            <param name="WQMh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPagedElement#BeginPrinting(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Delegates the call to the active page BeginPrinting method.
            </summary>
            <param name="xQMh"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPagedElement#QueryPageSettings(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Delegates the call to the active page QueryPageSettings method.
            </summary>
            <param name="YQMh"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPagedElement#PrintPage(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Delegates the call to the active page PrintPage method.
            </summary>
            <param name="ArMh"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPagedElement#EndPrinting">
            <summary>
            Delegates the call to the active page EndPrinting method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#GetSheetRangeModeText(Nevron.Nov.UI.ENSheetRangeMode)">
            <summary>
            Gets the context specific text representaton of the specified sheetRangeMode.
            </summary>
            <param name="brMh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#GetSheetRangeModeSheetRange(Nevron.Nov.UI.ENSheetRangeMode)">
            <summary>
            Gets the range of sheets, which are going to be printed by the specified sheetRangeMode.
            </summary>
            <param name="CrMh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#CanHaveMultipleSheets">
            <summary>
            Returns true, because drawings can have multiple pages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#GetSheetCount">
            <summary>
            Gets the count of pages in the drawing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#GetSheetTitle(System.Int32)">
            <summary>
            Gets the title of the page with the specified index.
            </summary>
            <param name="drMh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#GetSheetPrintLayout(System.Int32)">
            <summary>
            Gets the print layout of the specified page
            </summary>
            <param name="ErMh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#SetSheetPrintLayout(System.Int32,Nevron.Nov.UI.NPrintLayout)">
            <summary>
            Sets the print layout of the specified page
            </summary>
            <param name="frMh"></param>
            <param name="GrMh"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.Nevron#Nov#UI#INPrintLayoutElement#GetPrintLayoutTilingGridSet(Nevron.Nov.UI.ENSheetRangeMode)">
            <summary>
            Gets the set of tiling grids, for the current context print range mode.
            </summary>
            <param name="hrMh"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.ViewSettings">
            <summary>
            Gets the view settings.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.TextEditSettings">
            <summary>
            Gets the edit settings.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.SpellChecker">
            <summary>
            Gets the spellchecker for this drawing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.Pages">
            <summary>
            Gets/Sets the collection of pages.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.ActivePageIndex">
            <summary>
            Gets/Sets the index of the currently active page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.ActivePage">
            <summary>
            Gets/Sets the active page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.Themes">
            <summary>
            Gets/Sets the themes of this drawing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.ScreenVisibility">
            <summary>
            Gets/Sets the visibility of different drawing elements and decorations,
            in the context of screen media types.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.PrintVisibility">
            <summary>
            Gets/Sets the visibility of different drawing elements and decorations,
            in the context of print media types.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.SnapAndGlue">
            <summary>
            Gets/Sets the snap and glue attribute, which defines the snap and glue behavior of the drawing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.DataObjectAdaptors">
            <summary>
            Gets/Sets the collection of data object adaptors that adapt Data-Exchange content to content appropriate for the drawing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.Extensions">
            <summary>
            Gets/Sets the diagram extensions collection. It is used to determine the type of the diagram
            in a drawing in order to adapt the commanding user interface to it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.OwnerDrawingView">
            <summary>
            Gets the owner drawing view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.TextStyles">
            <summary>
            Gets/Sets the rich text styles of this document block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.MailMerge">
            <summary>
            Gets/Sets the mail merge object of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.TextViewSettings">
            <summary>
            Gets/Sets the text view settings of this drawing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawing.CodeBehindSource">
            <summary>
            Gets/Sets the code assembly that defines the code behind object.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.ActivateFirstPage">
            <summary>
            Activates the first drawing page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.ActivatePrevPage">
            <summary>
            Navigates to the previous page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.ActivateNextPage">
            <summary>
            Navigates to the next page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.ActivateLastPage">
            <summary>
            Navigates to the next page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.GetFirstPage">
            <summary>
            Gets the first page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.GetLastPage">
            <summary>
            Gets the last page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.GetPrevPage">
            <summary>
            Gets the previous page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.GetNextPage">
            <summary>
            Gets the next page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.GetMediaVisibility(Nevron.Nov.Dom.NMedia)">
            <summary>
            Gets the visibility settings that apply for the specified media
            </summary>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.OnCodeBehindSourceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the page CodeBehind property has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawing.OnActivePageIndexChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ActivePageIndex has changed.
            </summary>
            <param name="d"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.NDrawingSchema">
            <summary>
            The drawing schema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.PagesChild">
            <summary>
            Reference to the Pages child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.ThemesChild">
            <summary>
            Reference to the Themes child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.TextStylesChild">
            <summary>
            Reference to the TextStyles child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.ScreenVisibilityChild">
            <summary>
            Reference to the ScreenVisibility child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.PrintVisibilityChild">
            <summary>
            Reference to the PrintVisibility child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.ToolSettingsChild">
            <summary>
            Reference to the ToolSettings child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.SnapAndGlueChild">
            <summary>
            Reference to the SnapAndGlue child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.DataObjectAdaptorsChild">
            <summary>
            Reference to the DataObjectAdaptors child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.ExtensionsChild">
            <summary>
            Reference to the Extensions child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.InformationProperty">
            <summary>
            Reference to the Information property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.MailMergeProperty">
            <summary>
            Reference to the MailMerge property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.ActivePageIndexProperty">
            <summary>
            Reference to the ActivePageIndex property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.TextViewSettingsProperty">
            <summary>
            Reference to TextViewSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.TextEditSettingsProperty">
            <summary>
            Reference to TextEditSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawing.CodeBehindSourceProperty">
            <summary>
            Reference to the CodeBehindSource property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingContextMenu">
            <summary>
            Represents a context menu factory. It is used to construct context menus for
            the context editable drawing elements. An instance of this class can be obtained
            by the NDrawing.ContextMenu property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingContextMenu.OwnerDrawingView">
            <summary>
            Gets the drawing view to which this factory belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingContextMenu.ShowMiniToolBar">
            <summary>
            Gets/Sets the value of the ShowMiniToolBar property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingContextMenu.ShowGuidelineMenu">
            <summary>
            Gets/Sets whether guideline context menu is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingContextMenu.ShowShapeMenu">
            <summary>
            Gets/Sets whether shape context menu is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingContextMenu.ShowPageMenu">
            <summary>
            Gets/Sets whether shape context menu is displayed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.ShowContextMenu(Nevron.Nov.Dom.NElement,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Shows a context menu for the specified element at the specified screen position.
            </summary>
            <param name="element"></param>
            <param name="screenPos"></param>
            <returns>true if context menu is shown, otherwise false.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CanShowContextMenu(Nevron.Nov.Dom.NElement)">
            <summary>
            Determines whether the context menu can be shown for the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateContextWidget(Nevron.Nov.Dom.NElement)">
            <summary>
            Overriden to create the context widget for the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.BuildContextMenu(Nevron.Nov.Dom.NElement,Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Builds the context menu
            </summary>
            <param name="element"></param>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateEditCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates the edit commands - Cut/Copy/Paste/Delete.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateViewCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates the View menu item that contains Show, Zoom and Snap commands.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateSelectCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates the Select menu item.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateElementSpecificCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.Dom.NElement,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates the menu items specific for the given element. The default implementation
            checks whether the element implements the <see cref="T:Nevron.Nov.Internal.CEUC"/> interface
            and if it does, calls its <see cref="M:Nevron.Nov.Internal.CEUC.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)"/> method.
            </summary>
            <param name="menu"></param>
            <param name="element"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateCustomCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            When overriden in a derived class, creates custom context menu commands.
            The default implementation does not create any custom commands.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingContextMenu.CreateMiniToolBar(Nevron.Nov.Dom.NElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingContextMenu.NDrawingContextMenuSchema">
            <summary>
            Schema associated with NDrawingContextMenu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingContextMenu.ShowMiniToolBarProperty">
            <summary>
            Reference to the ShowMiniToolBar property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingContextMenu.ShowGuidelineMenuProperty">
            <summary>
            Reference to the ShowGuidelineMenu property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingContextMenu.ShowShapeMenuProperty">
            <summary>
            Reference to the ShowShapeMenu property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingContextMenu.ShowPageMenuProperty">
            <summary>
            Reference to the ShowPageMenu property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingDocument">
            <summary>
            Represents a document that contains an NDrawing element.
            An NDrawingDocument can be viewed and edited inside a NDrawingView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingDocument.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingDocument.NDrawingDocumentSchema">
            <summary>
            Schema associated with NDrawingDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingView">
            <summary>
            Represents an interactive drawing, which consists of a set of pages.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traveral to the node child
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.Nevron#Nov#Text#INSpellCheckerHost#ClearSpellCheck">
            <summary>
            Stops the spell checking and clears the results
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.Nevron#Nov#Text#INSpellCheckerHost#InvalidateSpellCheck">
            <summary>
            Invalidates the current results of spell checking
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.Drawing">
            <summary>
            A shortcut property that gets or sets the drawing contained inside the drawing document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.ActivePage">
            <summary>
            A shortcut property that gets and set the active page of the drawing, contained in the drawing document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.HRuler">
            <summary>
            Gets or sets the HRuler
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.VRuler">
            <summary>
            Gets or sets the VScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.LogicalUnitBox">
            <summary>
            Gets or sets the LogicalUnitBox
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.NavigationPanel">
            <summary>
            Gets or sets the navigation panel child. The panel is used to host drawing view navigation content, such as NPageNavigator or NPresentationNavigator children.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.PageNavigator">
            <summary>
            Gets the page navigator
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.Settings">
            <summary>
            Gets or sets the drawing view settings.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.ContextMenu">
            <summary>
            Gets or sets the context menu builder which is responsible for creating context menus and popup-us for selected items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.ViewportPadding">
            <summary>
            Gets or sets the padding applied to the viewport in which the drawing active page is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.SpellChecker">
            <summary>
            Gets the spell checker attached to the view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.FindTextSettings">
            <summary>
            Gets the text find settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.ReplaceTextSettings">
            <summary>
            Gets the text replace settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.CurrentInplaceEditor">
            <summary>
            Gets or sets the current inplace editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.CurrentProtectedRichTextView">
            <summary>
            Shortcut property to safely get the current rich text block editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.CurrentRichTextView">
            <summary>
            Shortcut property to safely get the current rich text block editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawingView.CurrentInPlaceTextBlockEditor">
            <summary>
            Shortcut property to safely get the current rich text block editor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDrawingView.QueryAutoConnectButtonContent">
            <summary>
            Occurs when the shape queries for a connect button content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls the active page in the specified direction, with the specified number of steps.
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.CreateNewDocument">
            <summary>
            Creates a new document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.AccumulateInnerAddorners(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the inner adorners.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetLeftTopCornerAdorner">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetLeftSideAdorner">
            <summary>
            Creates the left side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetTopSideAdorner">
            <summary>
            Creates the left side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetRightSideAdorner">
            <summary>
            Creates the right side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetBottomSideAdorner">
            <summary>
            Creates the bottom side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.MeasureAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget)">
            <summary>
            Measures the given adorner.
            </summary>
            <param name="compassDirection"></param>
            <param name="adorner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetInnerAdornersArea(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Given the content area for arrangement, returns the area in which inner addorners must be arranged.
            This implementation simply returns the content area.
            </summary>
            <param name="contentArea"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the mouse move event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.OutEvent
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.OnGotFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.GotFocusEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetViewportOrigin">
            <summary>
            Gets or sets the viewport origin
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetTotalViewport">
            <summary>
            Gets the total viewport rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetHScrollBar">
            <summary>
            Gets the horizontal scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetVScrollBar">
            <summary>
            Gets the vertical scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetZoomMode">
            <summary>
            Get the zoom policy which defines the way in which the viewport is scaled to the window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.GetZoomFactor">
            <summary>
            Gets the viewport zoom factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.SetZoomFactor(System.Double)">
            <summary>
            
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.ComputeWindowSize(Nevron.Nov.Graphics.NRectangle,System.Boolean,System.Boolean)">
            <summary>
            Must return the size of the viewport provided that specified H and V srollbars visibility.
            </summary>
            <param name="ca"></param>
            <param name="showHScrollBar"></param>
            <param name="showVScrollBar"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the drawing commander, by adding the drawing command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.BuildInteractor(Nevron.Nov.UI.NInteractor)">
            <summary>
            Builds the drawing interactor, by adding the drawing tools
            </summary>
            <param name="interactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.OnDocumentChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Document property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.CreateSpellChecker">
            <summary>
            Creates the spell checker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.ProvideRichTextView(System.Boolean)">
            <summary>
            Gets a rich text view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingView.ProvideRichTextView(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Gets a rich text view.
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.NDrawingViewSchema">
            <summary>
            Schema associated with NDrawingView
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.HRulerChild">
            <summary>
            Reference to the HRuler child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.VRulerChild">
            <summary>
            Reference to the VRuler child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.NavigationPanelChild">
            <summary>
            Reference to the PageNavigator child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.LogicalUnitBoxChild">
            <summary>
            Reference to the LogicalUnitBox child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.SettingsChild">
            <summary>
            Reference to the Settings child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.ViewportPaddingProperty">
            <summary>
            Reference to the ViewportPaddingProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.ContextMenuProperty">
            <summary>
            Reference to the ContextMenu property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.FindTextSettingsProperty">
            <summary>
            Reference to FindSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.ReplaceTextSettingsProperty">
            <summary>
            Reference to ReplaceSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingView.SpellCheckerProperty">
            <summary>
            Reference to the SpellChecker property. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingViewRichTextContextMenuBuidler">
            <summary>
            Represents a context menu builder for diagram rich text text context menus
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewRichTextContextMenuBuidler.#ctor(Nevron.Nov.Diagram.NDrawingView)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewRichTextContextMenuBuidler.CreateContextMenu(Nevron.Nov.Text.NTextElement,Nevron.Nov.DataStructures.NList{System.Int32})">
            <summary>
            Creates the context menu given the specified text element.
            </summary>
            <param name="textElement"></param>
            <param name="groupIndexes"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingViewWithCommandBars">
            <summary>
            A drawing view with command bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewWithCommandBars.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewWithCommandBars.CreateUIBuilder">
            <summary>
            Creates the diagram command bars builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewWithCommandBars.CreateView">
            <summary>
            Creates the drawing view.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingViewWithCommandBars.NDrawingViewWithCommandBarsSchema">
            <summary>
            Schema associated with NDrawingViewWithCommandBars.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawingViewWithRibbon">
            <summary>
            A drawing view with a ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewWithRibbon.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewWithRibbon.CreateUIBuilder">
            <summary>
            Creates the diagram ribbon builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawingViewWithRibbon.CreateView">
            <summary>
            Creates the drawing view.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawingViewWithRibbon.NDrawingViewWithRibbonSchema">
            <summary>
            Schema associated with NDrawingViewWithRibbon.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NThemeInfo">
            <summary>
            Contains theming information.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NThemeInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.ThemeId">
            <summary>
            Gets/Sets the value of the ThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.ColorThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose color palette to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.StyleThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose style component to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.FontThemeId">
            <summary>
            Gets/Sets the value of the FontThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.ConnectorThemeId">
            <summary>
            Gets/Sets the value of the ConnectorThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.VariantColorIndex">
            <summary>
            Gets/Sets the value of the VariantColorIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NThemeInfo.VariantStyleIndex">
            <summary>
            Gets/Sets the value of the VariantStyleIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.NThemeInfoSchema">
            <summary>
            Schema associated with NThemeInfo.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.ThemeIdProperty">
            <summary>
            Reference to the ThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.ColorThemeIdProperty">
            <summary>
            Reference to the ColorThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.StyleThemeIdProperty">
            <summary>
            Reference to the StyleThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.FontThemeIdProperty">
            <summary>
            Reference to the FontThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.ConnectorThemeIdProperty">
            <summary>
            Reference to the ConnectorThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.VariantColorIndexProperty">
            <summary>
            Reference to the VariantColorIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeInfo.VariantStyleIndexProperty">
            <summary>
            Reference to the VariantStyleIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NThemeInfo.NThemeInformationDesigner">
            <summary>
            Designer for NThemeInfo.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NThemeInfo.NThemeInformationDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGlueShapesEventArgs">
            <summary>
            Event which is raised by the page interaction when a 1DShape begin or end point needs to be connected to 2DShape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGlueShapesEventArgs.Shape1D">
            <summary>
            Gets the 1D shape whose begin or end needs to be connected
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGlueShapesEventArgs.Shape2D">
            <summary>
            Gets the 2D shape to which the 1D shape begin or end needs to be connected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGlueShapesEventArgs.ConnectBegin">
            <summary>
            Gets whether the 1D shape begin or end needs to be connected.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSplit1DShapeEventArgs">
            <summary>
            Event which is raised when a 1D shape is splitted.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSplit1DShapeEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Diagram.NPageInteraction,Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NShape)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="splittingShape"></param>
            <param name="splitted1DShape"></param>
            <param name="splittedClone1DShape"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSplit1DShapeEventArgs.FromShape">
            <summary>
            Gets the From 2D shape of the Splitted1DShape prior to the splitting. Can be null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSplit1DShapeEventArgs.ToShape">
            <summary>
            Gets the To 2D shape of the Splitted1DShape prior to the splitting. Can be null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSplit1DShapeEventArgs.SplittingShape">
            <summary>
            Gets the 2D shape, which splits the Splitted 1D shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSplit1DShapeEventArgs.Splitted1DShape">
            <summary>
            Gets the splitted 1D shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSplit1DShapeEventArgs.Splitted1DShapeClone">
            <summary>
            Gets the 1D shape, which was produced by cloning the splitted 1D shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGrid">
            <summary>
            Represents the page grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGrid.GridStyle">
            <summary>
            Controls the grid style. By default set to MajorLines.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGrid.MajorLinesStroke">
            <summary>
            Controls the appearance of the major grid lines
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGrid.MinorLinesStroke">
            <summary>
            Controls the appearance of the minor grid lines
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGrid.HorizontalStripesColor">
            <summary>
            Gets or sets the fill color of the horizontal stripes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGrid.VerticalStripesColor">
            <summary>
            Gets or sets the fill color of the vertical stripes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGrid.ClipWithPage">
            <summary>
            Gets or sets whether the grid is painted only inside the page bounds, 
            or inside the entire window area allocated for the page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.NGridSchema">
            <summary>
            Schema associated with NGrid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.GridStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.MajorLinesStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.MinorLinesStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.HorizontalStripesColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.VerticalStripesColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGrid.ClipWithPageProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGrid.NGridDesigner">
            <summary>
            Designer for NGrid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGrid.NGridDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGridRulersBase">
            <summary>
            Serves as base class for the page grid and rulers
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGridRulersBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.OriginX">
            <summary>
            Controls the X position of the origin (in page logical units)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.OriginY">
            <summary>
            Controls the Y position of the origin (in page logical units)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.Origin">
            <summary>
            A shortcut property that gets and sets the OriginX and OriginY values (in page logical units)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.XStepMode">
            <summary>
            Controls the mode in which the X step is determined. By default set to Normal. 
            If set to Fixed the FixedXStep property defines a constant step, 
            which is independent from the page zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.YStepMode">
            <summary>
            Controls the mode in which the Y step is determined. By default set to Normal. 
            If set to Fixed the FixedXStep property defines a constant step, 
            which is independent from the page zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.FixedXStep">
            <summary>
            Specifies the X step when the XStepMode is set to Fixed (in page logical units)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.FixedYStep">
            <summary>
            Specifies the Y step when the YStepMode is set to Fixed (in page logical units)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGridRulersBase.ParentPage">
            <summary>
            Gets the parent page of this element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGridRulersBase.GetXStep">
            <summary>
            Gets the major X step in the page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGridRulersBase.GetYStep">
            <summary>
            Gets the major Y step in the page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGridRulersBase.GetOrigin">
            <summary>
            Gets the origin point in the page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.NGridRulersBaseSchema">
            <summary>
            Schema associated with NGrid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.OriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.OriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.XStepModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.YStepModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.FixedXStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGridRulersBase.FixedYStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGridRulersBase.NGridRulersBaseDesigner">
            <summary>
            Designer for NGridRulersBase.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGridRulersBase.NGridRulersBaseDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRulers">
            <summary>
            Represents the page rulers element, which control the content of the 
            horizontal and vertical drawing rulers, when the rulers page 
            is the currently active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulers.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRulers.ValuesFormatter">
            <summary>
            The formatter used to format the ruler ticks values to texts.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRulers.MinorTicksCount">
            <summary>
            Gets or sets the minor ticks count
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulers.InvalidateParentDisplay">
            <summary>
            Overriden to invalidate the display of the owner drawing rulers
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulers.InvalidateParentArrange(System.Object)">
            <summary>
            Overriden to invalidate the layout of the owner drawing rulers
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulers.InvalidateParentMeasure(System.Object)">
            <summary>
            Overriden to invalidate the measure of the owner drawing rulers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRulers.NRulersSchema">
            <summary>
            Schema associated with NRulers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRulers.MinorTicksCountProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRulers.ValuesFormatterProperty">
            <summary>
            Reference to the ValuesFormatter property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRulers.NRulersDesigner">
            <summary>
            Designer for NRulers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulers.NRulersDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPage">
            <summary>
            Represents a drawing page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Appends custom context menu items.
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent,
            and want to inform it to invalidate it's measure.
            </summary>
            <param name="measureChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="E:Nevron.Nov.Diagram.NPage.DrawingScaleChanged">
            <summary>
            Occurs when the page drawing scale has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NPage.SelectionEditorChanged">
            <summary>
            Occurs when the selection editor bounds or protection has changed. Only raised when multiple objects are selected.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NPage.ThemeChanged">
            <summary>
            Occurs when a theme property has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ToString">
            <summary>
            Gets the string representation of the shape
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Title">
            <summary>
            Gets or sets the page title. The page title appears in the drawing view page navigator.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.LogicalLength">
            <summary>
            Get/sets the logical length of the drawing scale.
            The drawing scale is defined as Logical Length = Display Length (for example 2km = 10cm)
            The grid, rulers and status bar will report logical measurements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.DisplayLength">
            <summary>
            Gets or sets the display length of the drawing scale.
            The drawing scale is defined as Logical Length = Display Length (for example 2km = 10cm)
            The grid, rulers and status bar will report logical measurements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.ZoomMode">
            <summary>
            Gets or sets the page zoom policy.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.ZoomFactor">
            <summary>
            Gets or sets the zoom factor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.ZoomStep">
            <summary>
            Gets or sets the step with which to change the zoom factor when zooming in and out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.MinZoomFactor">
            <summary>
            Gets or sets the minimum zoom factor value when changing the zoom factor from zoom in and out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.MaxZoomFactor">
            <summary>
            Gets or sets the maximum zoom factor value when changing the zoom factor from zoom in and out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.SelectionEditMode">
            <summary>
            Gets or sets the mode in which the selection is edited
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.CodeBehindSource">
            <summary>
            Gets or sets the code assembly that defines the code behind object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Rulers">
            <summary>
            Gets or sets the page rulers
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Grid">
            <summary>
            Gets or sets the page grid
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Editors">
            <summary>
            Gets or sets the collection of page item editors. 
            The content of this collection is automatically updated with editors for the currently selected page items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.VisualAids">
            <summary>
            Gets or sets the collection of visual aids. 
            The content of this collection is automatically updated with visual aids from the drawing tools and others.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Routing">
            <summary>
            Gets or sets the routing manager of the page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.LineJumps">
            <summary>
            Gets or sets the line jumps object, which is responsible for generating bridged paths for the connectors in the page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Layout">
            <summary>
            Gets or sets the page layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.PrintLayout">
            <summary>
            Gets or sets the settings that relate to printing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Interaction">
            <summary>
            Gets or sets the page interaction child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.BookmarkManager">
            <summary>
            Gets or sets the page bookmark manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.Extensions">
            <summary>
            Gets/Sets the diagram extensions collection. It is used to determine the type of the diagram
            in a drawing page in order to adapt the commanding user interface to it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.OwnerDrawing">
            <summary>
            Gets the drawing owning the page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.OwnerDrawingView">
            <summary>
            Gets the owner drawing view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.ThemeId">
            <summary>
            Gets/Sets the ThemeId of the default theme applied to this page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.ColorThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose color palette to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.StyleThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose style component to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.FontThemeId">
            <summary>
            Gets/Sets the value of the FontThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.ConnectorThemeId">
            <summary>
            Gets/Sets the value of the ConnectorThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.VariantColorIndex">
            <summary>
            Gets/Sets the value of the VariantColorIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPage.VariantStyleIndex">
            <summary>
            Gets/Sets the value of the VariantStyleIndex property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point (in local coordinates).
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to ensure that the previews child is the last child in the list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.Cut(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Cuts the specified page items.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.Copy(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Copies the specified items to the clipboard.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.Paste">
            <summary>
            Pastes the clipboard content in this page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.DoDragDrop(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem},Nevron.Nov.Function{Nevron.Nov.UI.NDragEndedEventArgs},Nevron.Nov.Function{Nevron.Nov.UI.NQueryDragActionEventArgs})">
            <summary>
            Requests a drag and drop operation for the specified items. 
            Calls the funcResult delegate when the operation has completed.
            Calls the queryContinueDrag delegate while the operation is performed.
            Returns whether the Drag and Drop was requested.
            </summary>
            <param name="items"></param>
            <param name="dragEnded"></param>
            <param name="queryContinueDrag"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ShowPropertiesDialog(Nevron.Nov.UI.NWindow)">
            <summary>
            Overriden to show the properties of this page.
            </summary>
            <param name="ownerWindow"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.LogicalLengthToDips(Nevron.Nov.NLength)">
            <summary>
            Converts a logical length to DIPs (e.g. page drawing units).
            This method takes into account the drawing scale.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.LogicalToDips(System.Double)">
            <summary>
            Converts a value measured in the logical unit, to DIPs (e.g. page drawing units).
            This method takes into account the drawing scale.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.LogicalToDips(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a logical point to a point in page drawing units (DIPs)
            This method takes into account the drawing scale.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.DipsToLogical(System.Double)">
            <summary>
            Converts a length in page drawing units (DIPs) to a logical length.
            This method takes into account the drawing scale.
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.DipsToLogicalLength(System.Double)">
            <summary>
            Converts a length in page drawing units (DIPs) to a logical length.
            This method takes into account the drawing scale.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.DipsToLogical(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a point in page drawing units (DIPs) to a point in logical length.
            This method takes into account the drawing scale.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ZoomIn">
            <summary>
            Increases the zoom factor with the zoom step.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ZoomOut">
            <summary>
            Decreases the zoom factor with the zoom step
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ZoomToFactor(System.Double)">
            <summary>
            Zooms the page to the specified factor
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ZoomIn(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Increases the zoom factor with the zoom step, by preserving the screen location of the specified viewport point.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ZoomOut(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Decreases the zoom factor with the zoom step, by preserving the screen location of the specified viewport point.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ZoomToFactor(System.Double,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Zooms the page to the specified factor by preserving the screen location of the specified viewport point.
            </summary>
            <param name="factor">zoom factor</param>
            <param name="pin">zoom pivot point, in page coordinates</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.GetShapes(System.Boolean)">
            <summary>
            Gets all shapes contained in this page.
            </summary>
            <param name="includeGrouped">true if shapes belonging to groups must be included, false if only shapes belonging to the page must be included</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.GetShapes(System.Boolean,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Diagram.NShape})">
            <summary>
            Gets all top level shapes contained in this page, that pass the specified filter.
            </summary>
            <param name="includeGrouped">true if shapes belonging to groups must be included, false if only shapes belonging to the page must be included</param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.GetGuidelines">
            <summary>
            Gets all guidelines contained in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.SizeToContent">
            <summary>
            Sizes the page to the bounds of the contained items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.InflateToContent">
            <summary>
            Sizes the page to the bounds of the contained items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.GetTotalViewport">
            <summary>
            Gets the total viewport area of the page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.TryGetCurrentViewport(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Gets the current viewport (visible area) in page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.GetCenterPointForInsert">
            <summary>
            Gets a center point for inserting a new element such as table, barcode etc.
            This is usually the center of the viewport area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.CenterViewportToSelection">
            <summary>
            Centers the viewport to selection center and returns the selection center.
            Returns NPoint.NaN if the page doesn't have any selected items.
            </summary>
            <returns>The selection center or NPoint.NaN if no page items are selected.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.EnsureVisible(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Ensures that the specified rectangle (in page coordinates) is visible within the page.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the visitor of the node ancestors
            </summary>
            <remarks>
            Overriden to cache a reference to the owner drawing
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnTransformChanged">
            <summary>
            Called when the transformation from local to parent coordinates of this page has changed.
            Raises the transform changed event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnCodeBehindSourceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the page CodeBehind property has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnTitleChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Title property value has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnDisplayLengthChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the DisplayLength property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnLogicalLengthChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LogicalLength property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnDrawingScaleChanged">
            <summary>
            Called when the DisplayLength or LogicalLength property has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ArrangeContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the surface, which is performed before the custom painting in OnPrePaint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.PaintPageBorder(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the page border
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.PaintPageShadow(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the page shadow
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.ShowPropertiesMenuItem">
            <summary>
            Overriden to determine whether the properties menu item must be created
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.NPageSchema">
            <summary>
            Schema associated with NPage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.DrawingScaleChangedEvent">
            <summary>
            Reference to the DrawingScaleChanged event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.SelectionEditorChangedEvent">
            <summary>
            Reference to the SelectionBoundsChanged event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ThemeChangedEvent">
            <summary>
            Reference to the ThemeChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.RoutingChild">
            <summary>
            Reference to the routing manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.LineJumpsChild">
            <summary>
            Reference to the bridge manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.EditorsChild">
            <summary>
            Reference to the Editors child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.VisualAidsChild">
            <summary>
            Reference to the Editors child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.GridChild">
            <summary>
            Reference to the Grid child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.RulersChild">
            <summary>
            Reference to the Rulers child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.InteractionChild">
            <summary>
            Reference to the Interaction child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.PrintLayoutChild">
            <summary>
            Reference to the PrintLayout child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.LayoutChild">
            <summary>
            Reference to the Layout child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.BookmarkManagerChild">
            <summary>
            Reference to the BookmarkManager child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ExtensionsChild">
            <summary>
            Reference to the Extensions child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.CodeBehindSourceProperty">
            <summary>
            Reference to the CodeBehindSource property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.DisplayLengthProperty">
            <summary>
            Reference to the DisplayLength property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.LogicalLengthProperty">
            <summary>
            Reference to the LogicalLength property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ZoomModeProperty">
            <summary>
            Reference to the ZoomMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ZoomFactorProperty">
            <summary>
            Reference to the ZoomFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ZoomStepProperty">
            <summary>
            Reference to the ZoomStep property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.MinZoomFactorProperty">
            <summary>
            Reference to the MinZoomFactorProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.MaxZoomFactorProperty">
            <summary>
            Reference to the MaxZoomFactorProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.TitleProperty">
            <summary>
            Reference to the Title property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.SelectionEditModeProperty">
            <summary>
            Reference to the SelectionEditMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.PrintSettingsProperty">
            <summary>
            Reference to the PrintLayout property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ThemeIdProperty">
            <summary>
            Reference to the ThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ColorThemeIdProperty">
            <summary>
            Reference to the ColorThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.StyleThemeIdProperty">
            <summary>
            Reference to the StyleThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.FontThemeIdProperty">
            <summary>
            Reference to the FontThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.ConnectorThemeIdProperty">
            <summary>
            Reference to the ConnectorThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.VariantColorIndexProperty">
            <summary>
            Reference to the VariantColorIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPage.VariantStyleIndexProperty">
            <summary>
            Reference to the VariantStyleIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPage.NPageDesigner">
            <summary>
            Designer for NPage.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPage.NPageDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageCollection">
            <summary>
            A collection of NPage elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageCollection.GetByTitle(System.String)">
            <summary>
            Returns the first page in this collection with the given title or
            null if a page with this title is not found. The strings are compared
            case-sensitively using the current culture.
            </summary>
            <param name="pageTitle"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageCollection.GetByTitle(System.String,System.StringComparison)">
            <summary>
            Returns the first page in this collection with the given title or
            null if a page with this title is not found.
            </summary>
            <param name="pageTitle"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when the children of the of the page collection has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageCollection.NPageCollectionSchema">
            <summary>
            Schema associated with NPageCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageInteraction">
            <summary>
            Contains interation behavior properies
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageInteraction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NPageInteraction.GluingShapes">
            <summary>
            Raised when a 1D shape begin or end point needs to be connected to a 2D shape. This is a routable event.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NPageInteraction.Split1DShape">
            <summary>
            Raised when a 1D shape has been splitted by a 2D shape. This is a routable event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageInteraction.Enable1DShapeSplitting">
            <summary>
            Gets or sets whether moved or dropped 2D shapes are allowed to split 1D shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageInteraction.AutoConnectToBeginPoints">
            <summary>
            Gets or sets whether moved or dropped 2D shapes are allowed to connect to the begin points of 1D shapes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageInteraction.AutoConnectToEndPoints">
            <summary>
            Gets or sets whether moved or dropped 2D shapes are allowed to connect to the end points of 1D shapes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageInteraction.BeginPointGlueMode">
            <summary>
            Gets or sets the mode in which begin-points of splitted or extended 1D shapes are connected to 2D Shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageInteraction.EndPointGlueMode">
            <summary>
            Gets or sets the mode in which end-points of splitted or extended 1D shapes are connected to 2D Shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.NPageInteractionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.Enable1DShapeSplittingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.AutoConnectToBeginPointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.AutoConnectToEndPointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.BeginPointGlueModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.EndPointGlueModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.GluingShapesEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.Split1DShapeEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.defaultBeginPointGlueMode">
            <summary>
            Default begin point glue mode.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageInteraction.defaultEndPointGlueMode">
            <summary>
            Default end point glue mode.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageInteraction.NPageInteractionDesigner">
            <summary>
            Designer for NPageInteraction.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageInteraction.NPageInteractionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageItem">
            <summary>
            Serves as base class for all items that can be placed in the items collection of a page - currently these are NGuideline and NShape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageItem.AllowPrint">
            <summary>
            Gets or sets whether this item can be printed and exported.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageItem.OwnerPage">
            <summary>
            Gets the page to which this item belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageItem.OwnerDrawing">
            <summary>
            Gets the drawing to which this item belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageItem.OwnerDrawingView">
            <summary>
            Gets the drawing to which this item belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.LocalToPage(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to page coordinates
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.PageToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in page coordinates to local coordinates
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.LocalToDrawing(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to drawing coordinates
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.DrawingToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in page coordinates to local coordinates
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.PageToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a point in page coordinates to the shape parent coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.ParentToPage(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a point in shape parent coordinates to page coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.DrawingToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a point in drawing coordinates to the shape parent coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.ParentToDrawing(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a point in shape parent coordinates to page coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.GetPageTransform">
            <summary>
            Gets the transformation from local to page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.GetParentPageTransform">
            <summary>
            Gets the parent transform to page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.GetDrawingTransform">
            <summary>
            Gets the transformation from local to drawing coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.GetAbilitiesMask">
            <summary>
            Gets the item abilities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.Translate(System.Double,System.Double)">
            <summary>
            Must override to translate this item with the specified amounts.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.ShowPropertiesMenuItem">
            <summary>
            Determines whether the properties menu item needs to be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItem.OnOwnerPageChanged(Nevron.Nov.Diagram.NPage)">
            <summary>
            Called when the reference to the owner page has changed.
            </summary>
            <param name="oldOwnerPage"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageItem.NPageItemSchema">
            <summary>
            Schema associated with NPageItem
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageItem.AllowPrintProperty">
            <summary>
            Reference to the AllowPrint property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageItem.PageItemAbilities">
            <summary>
            Defines the abilities that apply to all NPageItem instances.
            Page items inherit the diagram element abilities and can also be formatted
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageItemCollection">
            <summary>
            A collection of NPageItem elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItemCollection.GetPaintCacheMode">
            <summary>
            Determines whether the 2D painting of the object can be cached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItemCollection.AccumulateShapes(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NShape},System.Boolean)">
            <summary>
            Accumulates all shapes that belong to this collection
            </summary>
            <param name="shapes"></param>
            <param name="includeGrouped"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItemCollection.AccumulateGuidelines(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NGuideline})">
            <summary>
            Accumulates all guidelines that belong to this collection
            </summary>
            <param name="guidelines"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageItemCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called whenever the children of a node have changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageItemCollection.NPageItemCollectionSchema">
            <summary>
            Schema associated with NPageItemCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageLayout">
            <summary>
            Represents the settings related to the page printing layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageLayout.NPageLayoutSchema">
            <summary>
            Schema associated with NPageLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPagePart">
            <summary>
            Serves as base class for all subelements of a page, that are not page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPagePart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPagePart.OwnerPage">
            <summary>
            Gets the page to which this part belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPagePart.OwnerDrawing">
            <summary>
            Gets the drawing to which this part belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPagePart.OwnerDrawingView">
            <summary>
            Gets the drawing to which this part belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPagePart.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
            <remarks>
            Overriden to cache a reference to the owner shape
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPagePart.NPagePartSchema">
            <summary>
            Schema associated with NPagePart
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPagePrintLayout">
            <summary>
            Represents the settings related to the page printing layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPagePrintLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPagePrintLayout.OwnerPage">
            <summary>
            Gets the page to which this page print layout belongs to.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPagePrintLayout.GetDocumentBounds">
            <summary>
            Gets the bounds of the page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPagePrintLayout.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Invalidate the owner drawing view arrange when the print layout changes.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPagePrintLayout.NPagePrintLayoutSchema">
            <summary>
            Schema associated with NPrintLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageSelection">
            <summary>
            Represents the currently selected items of a page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.AlignmentAnchor">
            <summary>
            Gets the alignment anchor node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.AlignmentAnchorMode">
            <summary>
            Defines the alignment anchor mode. By default set to Last.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.FormatAnchor">
            <summary>
            Gets the format anchor node.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.FormatAnchorMode">
            <summary>
            Defines the alignment anchor mode. By default set to Last.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchOperation">
            <summary>
            Gets a batch for action operations
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchFormat">
            <summary>
            Gets a batch for formatting operations
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchTransform">
            <summary>
            Gets a batch for transforming the selected page items
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchTranslate">
            <summary>
            Gets a batch for translating the selected page items
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchGroup">
            <summary>
            Gets a batch for grouping the selected page items
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchUngroup">
            <summary>
            Gets a batch for ungrouping the selected page items
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchLayout">
            <summary>
            Gets a batch for arranging the selected page items
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.BatchCompose">
            <summary>
            Gets a batch for performing compositing geometry operations on the selected page items
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.HasShapes">
            <summary>
            Gets whether the page selection contains shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPageSelection.OwnerPage">
            <summary>
            Gets the page to which this selection belongs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.RegionSelect(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Performs a region node selection
            </summary>
            <remarks>
            This method takes into account the current Control and Shift key states and performs the following actions:
            <para>
            1. If the CTRL key is pressed it will toggle the node selection state
            </para>
            <para>
            2. If the SHIFT key is pressed it will multi select the specified node
            </para>
            <para>
            3. If no key modifier is pressed it will clear the selection and multi select the specified node
            </para>
            </remarks>
            <param name="items">items to select</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.InitDrillDown(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Initializes the drill down node
            </summary>
            <remarks>
            This method is called by the ClickSelect method of the Selector tool to store a possible drill down node
            </remarks>
            <param name="node">node for drill down</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.ResetDrillDown">
            <summary>
            Resets the drill down node
            </summary>
            <remarks>
            This method is called by the controller OnMouseMove method to clear the drill node node each time the mouse is moved
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.DrillDown">
            <summary>
            Click selects the drill down node
            </summary>
            <remarks>
            This method is called by the DrillDownSelect method of the Selector tool
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.SelectAll(Nevron.Nov.Diagram.ENSelectAllFilter)">
            <summary>
            Selects all page items that match the specified predefined selection filter.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.SelectAll(Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Dom.NNode})">
            <summary>
            Selects all page items that pass the specified filter.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.OnSelected(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Called when the specified item has been selected. Raises the Selected event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.OnDeselected(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Called when the specified item has been deselected
            </summary>
            <param name="item">item which has been deselected</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.GetAlignmentAnchorFilter">
            <summary>
            Gets the alignment anchor filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSelection.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node ancestors chain has changed. 
            IMPORTANT: There is a serious perfomance penalty associated with overriding this method.
            </summary>
            <param name="reparentedNode"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageSelection.NPageSelectionSchema">
            <summary>
            Schema associated with NSelection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageSelection.AlignmentAnchorModeProperty">
            <summary>
            Reference to the AlignmentAnchorMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageSelection.FormatAnchorModeProperty">
            <summary>
            Reference to the FormatAnchorMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPageSetupDialog">
            <summary>
            A dialog that edit the properties of a drawing page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSetupDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSetupDialog.Initialize(Nevron.Nov.Diagram.NPage)">
            <summary>
            Initializes the dialog for the given drawing page.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPageSetupDialog.OnClosed">
            <summary>
            Called when the window has been closed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPageSetupDialog.NPageSetupDialogSchema">
            <summary>
            Schema associated with NPageSetupDialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NHRuler">
            <summary>
            The Horizontal ruler of the drawing
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRuler.GetPaintCacheMode">
            <summary>
            Overriden to return None
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRuler.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRuler.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content of the ruler
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHRuler.NHRulerSchema">
            <summary>
            Reference to the NHRuler schema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NHRulerMousePosition">
            <summary>
            Represents the horizontal ruler mouse position marker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRulerMousePosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRulerMousePosition.GetBounds">
            <summary>
            Overriden to return the bounds of the ruler mouse position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NHRulerMousePosition.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the ruler mouse position
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NHRulerMousePosition.NHRulerMousePositionSchema">
            <summary>
            Reference to the NHRulerMousePosition schema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLogicalUnitBox">
            <summary>
            A logical unit box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLogicalUnitBox.ShowLogicalUnit">
            <summary>
            Gets or sets whether the drawing scale should be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLogicalUnitBox.ShowTooltip">
            <summary>
            Gets or sets whether the tooltop can be displayed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node ancestors chain has changed.
            </summary>
            <param name="reparentedNode"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.OnShowLogicalUnitPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowLogicalUnit property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.OnShowTooltipPropertyChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowTooltip property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when a mouse button is pressed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLogicalUnitBox.OnChangeDrawingScaleDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the "Change Drawing Scale" dialog has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLogicalUnitBox.NLogicalUnitBoxSchema">
            <summary>
            Schema associated with NLogicalUnitBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLogicalUnitBox.ShowLogicalUnitProperty">
            <summary>
            Reference to the ShowLogicalUnit property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLogicalUnitBox.ShowTooltipProperty">
            <summary>
            Reference to the ShowTooltip property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRuler`1">
            <summary>
            Serves as base class for the horizontal and vertical ruler of the drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuler`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRuler`1.MousePosition">
            <summary>
            Gets or sets the mouse position marker child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRuler`1.MajorTicksStroke">
            <summary>
            Controls the appearance of the major ticks strokes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRuler`1.MinorTicksStroke">
            <summary>
            Controls the appearance of the minor ticks strokes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuler`1.NRulerSchema">
            <summary>
            Reference to the NRuler schema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuler`1.MousePositionChild">
            <summary>
            Reference to the MousePosition child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuler`1.MajorTicksStrokeProperty">
            <summary>
            Reference to the MajorTicksStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuler`1.MinorTicksStrokeProperty">
            <summary>
            Reference to the MinorTicksStroke property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRulerMousePosition">
            <summary>
            Serves as base class for the horizontal and vertical ruler mouse position markers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulerMousePosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulerMousePosition.CanClip">
            <summary>
            Return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulerMousePosition.GetClip">
            <summary>
            Returns a path that represents the bounds of the mouse position in ruler coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRulerMousePosition.Visible">
            <summary>
            Gets or sets whether the mouse position is visible on the ruler
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRulerMousePosition.Coordinate">
            <summary>
            Gets or sets the mouse coordinate to display on the ruler
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRulerMousePosition.GetBounds">
            <summary>
            Must override to provide the bounds for the ruler mouse position in ruler coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRulerMousePosition.NRulerMousePositionSchema">
            <summary>
            Reference to the NRulerMousePosition schema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRulerMousePosition.CoordinateProperty">
            <summary>
            Reference to the Coordinate property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRulerMousePosition.VisibleProperty">
            <summary>
            Reference to the ShowCoordinate property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NVRuler">
            <summary>
            The Vertical ruler of the drawing
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVRuler.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVRuler.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content of the ruler
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVRuler.NVRulerSchema">
            <summary>
            Reference to the NVRuler schema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NVRulerMousePosition">
            <summary>
            Represents the vertical ruler mouse position marker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVRulerMousePosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVRulerMousePosition.GetBounds">
            <summary>
            Calculates the bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVRulerMousePosition.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Called prior to children painting.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVRulerMousePosition.NVRulerMousePositionSchema">
            <summary>
            Reference to the NVRulerMousePosition schema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NScratch">
            <summary>
            Represents a work area for entering expressions,the results of which can be consumed by other elements property expressions.
            By using scratches for common and repeating expressions, you can significantly improve the diagram evaluation performance.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScratch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScratch.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScratch.X">
            <summary>
            Gets or sets the X coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScratch.Y">
            <summary>
            Gets or sets the Y coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScratch.A">
            <summary>
            Gets or sets the A value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScratch.B">
            <summary>
            Gets or sets the B value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScratch.C">
            <summary>
            Gets or sets the C value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NScratch.D">
            <summary>
            Gets or sets the D value
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.NScratchSchema">
            <summary>
            Schema associated with NScratch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.XProperty">
            <summary>
            Reference to the X property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.YProperty">
            <summary>
            Reference to the Y property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.AProperty">
            <summary>
            Reference to the A property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.BProperty">
            <summary>
            Reference to the B property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.CProperty">
            <summary>
            Reference to the C property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratch.DProperty">
            <summary>
            Reference to the D property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NScratch.NScratchDesigner">
            <summary>
            Designer for NScratch.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScratch.NScratchDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScratch.NScratchDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            Appends the expression types that can be applied to the specified property.
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NScratchCollection">
            <summary>
            A collection of NScratch elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NScratchCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NScratchCollection.NScratchCollectionSchema">
            <summary>
            Schema associated with NScratchCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeProperty">
            <summary>
            Represents a custom shape property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeProperty.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeProperty.#ctor(System.String,Nevron.Nov.NVariant)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeProperty.#ctor(System.String,Nevron.Nov.Diagram.ENShapePropertyType,Nevron.Nov.NVariant)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeProperty.Value">
            <summary>
            Gets/Sets the value of the property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeProperty.Prompt">
            <summary>
            Gets/Sets the prompt of the property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeProperty.Label">
            <summary>
            Gets/Sets the label of this property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeProperty.Type">
            <summary>
            Gets/Sets the type of this shape property. By default set to <see cref="F:Nevron.Nov.Diagram.ENShapePropertyType.String"/>.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeProperty.DisplayOrder">
            <summary>
            Gets/Sets the display order of this property. By default set to 0.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.NShapePropertySchema">
            <summary>
            Schema associated with NShapeProperty.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.VisibleProperty">
            <summary>
            Reference to the Visible property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.DisplayOrderProperty">
            <summary>
            Reference to the DisplayOrder property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.ValueProperty">
            <summary>
            Reference to the Value property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.PromptProperty">
            <summary>
            Reference to the Prompt property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.LabelProperty">
            <summary>
            Reference to the Label property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeProperty.TypeProperty">
            <summary>
            Reference to the Type property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapePropertyCollection">
            <summary>
            A collection of NShapeProperty elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePropertyCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePropertyCollection.NShapePropertyCollectionSchema">
            <summary>
            Schema associated with NShapePropertyCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs">
            <summary>
            Event arguments associated with the NShape.QuerySmartTagsContentEvent event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs.#ctor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs.Shape">
            <summary>
            Gets the shape for which the auto connect info is aquired
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs.LeftButtonInfo">
            <summary>
            Gets the information for the left auto connect button
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs.RightButtonInfo">
            <summary>
            Gets the information for the right auto connect button
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs.TopButtonInfo">
            <summary>
            Gets the information for the top auto connect button
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NQueryAutoConnectButtonContentEventArgs.BottomButtonInfo">
            <summary>
            Gets the information for the bottom auto connect button
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRoutableConnectorCreateGeometryPathEventArgs">
            <summary>
            Event arguments associated with the NRoutableConnecgtor.CreateGeometryPath event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorCreateGeometryPathEventArgs.#ctor(Nevron.Nov.Diagram.NRoutableConnector,Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
            <param name="basePoints"></param>
            <param name="cornerRounding"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorCreateGeometryPathEventArgs.BasePoints">
            <summary>
            Gets the base points that define the path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorCreateGeometryPathEventArgs.CornerRounding">
            <summary>
            Gets the desired corner rounding for the path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorCreateGeometryPathEventArgs.Path">
            <summary>
            Gets or set the path that will be recorded in the connector geometry.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawBoxCommand">
            <summary>
            A geometry command that serves as base class for draw box commands such as DrawRectangle, DrawEllipse, DrawPolyline, DrawPolygon and DrawPath.
            </summary>
            <remarks>
            Box commands are used for the more efficient drawing of geometries that have lots of vertices. 
            The figure placement is defined by four sides (left, top, right and bottom). 
            Each specific command outputs an open or closed figure or even an entire path, that aims to fill this box.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.Left">
            <summary>
            Gets or sets the X coordinate of the figure left side.
            If Relative is true, this value is a factor of the shape Width. Otherwise it is an absolute value in shape coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.Top">
            <summary>
            Gets or sets the Top coordinate of the figure left-top corner.
            If Relative is true, this value is a factor of the shape Height. Otherwise it is an absolute value in shape coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.Right">
            <summary>
            Gets or sets the Left coordinate of the base point (in the shape coordinate system).
            If Relative is true, this value is a factor of the shape Width. Otherwise it is an absolute value in shape coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.Bottom">
            <summary>
            Gets or sets the Top coordinate of the base point (in the shape coordinate system).
            If Relative is true, this value is a factor of the shape Height. Otherwise it is an absolute value in shape coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.Visible">
            <summary>
            Gets or sets the visibility of the geometry drawn by this command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.ShowFill">
            <summary>
            Gets or sets whether the geometry drawn by this command should be filled.
            (e.g. whether the interior region of the figure is displayed)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.ShowStroke">
            <summary>
            Gets or sets whether the geometry drawn by this command should be stroked.
            (e.g. whether the outline of the geometry is displayed)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.ShowArrowheads">
            <summary>
            Gets or sets whether arrowheads should be displayed for this geometry end-points.
            (e.g. whether the geometry at all displays arrowheads at its start and end points)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawBoxCommand.SnapTo">
            <summary>
            Gets or sets whether it is allowed to snap to the geometry drawn by this command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.GetDrawBox">
            <summary>
            Gets the box in which to draw (in shape coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.SetDrawBox(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets the box in which to draw (in shape coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.NDrawBoxCommandSchema">
            <summary>
            Schema associated with NDrawBoxCommand
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.LeftProperty">
            <summary>
            Reference to the Left property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.TopProperty">
            <summary>
            Reference to the Top property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.RightProperty">
            <summary>
            Reference to the Right property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.BottomProperty">
            <summary>
            Reference to the Bottom property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.ShowFillProperty">
            <summary>
            Reference to the ShowFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.ShowStrokeProperty">
            <summary>
            Reference to the ShowStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.ShowArrowheadsProperty">
            <summary>
            Reference to the ShowArrowheads property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawBoxCommand.SnapToProperty">
            <summary>
            Reference to the SnapTo property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawBoxCommand.NDrawBoxCommandDesiger">
            <summary>
            Designer for NDrawBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawBoxCommand.NDrawBoxCommandDesiger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawEllipse">
            <summary>
            A geometry command that draws an ellipse inside the box defined by the Left, Top, Right and Bottom sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawEllipse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawEllipse.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawEllipse.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawEllipse.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawEllipse.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawEllipse.NDrawEllipseSchema">
            <summary>
            Schema associated with NDrawEllipse.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawPath">
            <summary>
            A geometry command that draws a path inside the box defined by the Left, Top, Right and Bottom sides.
            The path points are expressed relatively to the box defined by the (Left, Top, Right and Bottom) sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NGraphicsPathPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor(System.Double,System.Double,System.Double,System.Double,Nevron.Nov.Graphics.NGraphicsPathPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor(System.Double,System.Double,System.Double,System.Double,Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="path"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor(System.Object,System.Object,System.Object,System.Object,Nevron.Nov.Graphics.NGraphicsPathPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPath.#ctor(System.Object,System.Object,System.Object,System.Object,Nevron.Nov.Graphics.NGraphicsPath)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="path"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPath.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPath.Points">
            <summary>
            Gets or sets the points of the graphics path.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPath.NDrawPathSchema">
            <summary>
            Schema associated with NDrawPath
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPath.PointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawPolygon">
            <summary>
            A geometry command that draws a polygon inside the box defined by the (Left, Top, Right and Bottom) sides.
            The polygon points are expressed relatively to the box defined by the (Left, Top, Right and Bottom) sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolygon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolygon.#ctor(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolygon.#ctor(System.Double,System.Double,System.Double,System.Double,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolygon.#ctor(System.Object,System.Object,System.Object,System.Object,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPolygon.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolygon.CreatePolypoint(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Appends the graphics path command represented by this command.
            </summary>
            <param name="points"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPolygon.NDrawPolygonSchema">
            <summary>
            Schema associated with NDrawPolygon.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawPolyline">
            <summary>
            A geometry command that draws a polyline inside the box defined by the Left, Top, Right and Bottom sides.
            The polyline points are expressed relatively to the box defined by the (Left, Top, Right and Bottom) sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolyline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolyline.#ctor(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolyline.#ctor(System.Double,System.Double,System.Double,System.Double,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolyline.#ctor(System.Object,System.Object,System.Object,System.Object,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPolyline.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolyline.CreatePolypoint(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Appends the graphics path command represented by this command.
            </summary>
            <param name="points"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPolyline.NDrawPolylineSchema">
            <summary>
            Schema associated with NDrawPolyline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawPolypoints`1">
            <summary>
            A geometry command that serves as base class for NDrawPolygon and NDrawPolyline commands inside the box defined by the Left, Top, Right and Bottom sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.#ctor(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.#ctor(System.Double,System.Double,System.Double,System.Double,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.#ctor(System.Object,System.Object,System.Object,System.Object,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <param name="points"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPolypoints`1.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPolypoints`1.Points">
            <summary>
            Gets or sets the points of the graphics path. 
            The points are expressed relatively to the draw box
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawPolypoints`1.Tension">
            <summary>
            Gets or sets the tension of the curve represented by the polypoint object.
            If tension is 0 it is a polypoint with straigth segments, othwerwise it is a cardinal spline with smooth curves.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.GetPolyPoint">
            <summary>
            Gets the polypoint object defined by this command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.GetPointCount">
            <summary>
            Gets the count of points inside this 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.GetPoint(System.Int32)">
            <summary>
            Gets the point at the specified index. The returned point is in shape coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.SetPoint(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the point at the specified index. The point is in shape coordinates.
            </summary>
            <param name="index"></param>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.CreatePolypoint(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Must override to create the polypoint object represented by this command.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPolypoints`1.NDrawPolypointsSchema">
            <summary>
            Schema associated with NDrawPolypoints.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPolypoints`1.PointsProperty">
            <summary>
            Reference to the Points property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawPolypoints`1.TensionProperty">
            <summary>
            Reference to the Tension property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawPolypoints`1.NDrawPolypointsDesigner">
            <summary>
            Designer for NDrawPolypoints.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawPolypoints`1.NDrawPolypointsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDrawRectangle">
            <summary>
            A geometry command that draws a rectangle inside the box defined by the Left, Top, Right and Bottom sides.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawRectangle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawRectangle.#ctor(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDrawRectangle.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDrawRectangle.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDrawRectangle.NDrawRectangleSchema">
            <summary>
            Schema associated with NDrawRectangle.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGeometry">
            <summary>
            Represents a shape geometry. The geometry defines a dynamically constructed graphics path, which is created by the geometry child commands.
            </summary>
            <remarks>
            There are two ways in which you can define the path of a geometry:
            <list type="bullet">
            	<item>
            		<term>With Plotter Commands</term>
            		<description>
            			Plotter commands such as NMoveTo, NLineTo, NArcTo etc. provide the ability define dynamic geometries, that are driven by expressions,
            			because each aspect of a plotter command is controlled by a property to which you can assign an expression. 
            		</description>
            	</item>
            	<item>
            		<term>With DrawBox Commands</term>
            		<description>
            			DrawBox commands such as NDrawRectangle, NDrawEllipse, NDrawPolygon, NDrawPolyline and NDrawPath provide the ability to draw geometries with many vertices,
            			that stretch to a box inside the shape coordinate system. DrawBox commands are commonly used when you create clip-art shapes.
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.#ctor(Nevron.Nov.Diagram.NGeometryCommand[])">
            <summary>
            Initializer constructor
            </summary>
            <param name="commands"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.Contains(Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.IndexOf(Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.Insert(System.Int32,Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.Add(Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.AddRelative(Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Adds (appends) the item at the end of the collection and raises its Relative flag.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.Remove(Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.CopyTo(Nevron.Nov.Diagram.NGeometryCommand[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.ToArray">
            <summary>
            Converts this set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.GetPaintCacheMode">
            <summary>
            Gets the mode in which this visual attemps to cache its display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the geometry by point
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests the geometry by region
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.FillRule">
            <summary>
            Gets or sets the filling rule of the path
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.Fill">
            <summary>
            Gets or sets the geometry fill style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.Stroke">
            <summary>
            Gets or sets the geometry stroke style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.Shadow">
            <summary>
            Gets or sets the geometry shadow style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.CornerRounding">
            <summary>
            Gets or sets the corner rounding of the geometry.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.ClipWithTextBlock">
            <summary>
            Gets or sets the geometry is clipped with the bounding box of the text block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.ClipWithImageBlock">
            <summary>
            Gets or sets the geometry is clipped with the bounding box of the image block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.BeginArrowhead">
            <summary>
            Gets or sets the begin arrowhead style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.EndArrowhead">
            <summary>
            Gets or sets the end arrowhead style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.BeginDirection">
            <summary>
            Gets or sets the direction towards which the begin of the geometry is headed for.
            By default set to Automatic.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.EndDirection">
            <summary>
            Gets or sets the direction towards which the end of the geometry is headed for.
            By default set to Automatic.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.FilledPath">
            <summary>
            Gets the filled path represented by this geometry. May be null. The returned path is a copy of the actually used path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.StrokedPath">
            <summary>
            Gets the stroked path represented by this geometry. May be null. The returned path is a copy of the actually used path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.FilledPathEqualsStrokedPath">
            <summary>
            Gets whether the filled path is identical to the stroked path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometry.SnapPath">
            <summary>
            Gets the snap path represented by this geometry. May be null.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.MoveTo(System.Object,System.Object)">
            <summary>
            Adds a MoveTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.MoveTo(System.Object,System.Object,System.Object)">
            <summary>
            Adds a MoveTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="closeFigure">an fx, formula string or Boolean value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.LineTo(System.Object,System.Object)">
            <summary>
            Adds a LineTo command expressed
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.CubicBezierTo(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a CubicBezierTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="firstControlX">an fx, formula string or length value</param>
            <param name="firstControlY">an fx, formula string or length value</param>
            <param name="secondControlX">an fx, formula string or length value</param>
            <param name="secondControlY">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.ArcTo(System.Object,System.Object,System.Object)">
            <summary>
            Adds an ArcTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="bow">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.EllipticalArcTo(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds an EllipticalArcTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="controlX">an fx, formula string or length value</param>
            <param name="controlY">an fx, formula string or length value</param>
            <param name="angle">an fx, formula string or NAngle value</param>
            <param name="ratio">an fx, formula string or Double value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.CircularArcTo(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a CircularArcTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="controlX">an fx, formula string or length value</param>
            <param name="controlY">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelMoveTo(System.Object,System.Object)">
            <summary>
            Adds a relative MoveTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelMoveTo(System.Object,System.Object,System.Object)">
            <summary>
            Adds a relative MoveTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="closeFigure">an fx, formula string or Boolean value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelLineTo(System.Object,System.Object)">
            <summary>
            Adds a relative LineTo command expressed
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelCubicBezierTo(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a relative CubicBezierTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="firstControlX">an fx, formula string or length value</param>
            <param name="firstControlY">an fx, formula string or length value</param>
            <param name="secondControlX">an fx, formula string or length value</param>
            <param name="secondControlY">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelArcTo(System.Object,System.Object,System.Object)">
            <summary>
            Adds a relative ArcTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="bow">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelEllipticalArcTo(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a relative EllipticalArcTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="controlX">an fx, formula string or length value</param>
            <param name="controlY">an fx, formula string or length value</param>
            <param name="angle">an fx, formula string or NAngle value</param>
            <param name="ratio">an fx, formula string or Double value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.RelCircularArcTo(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Adds a relative CircularArcTo command
            </summary>
            <param name="x">an fx, formula string or length value</param>
            <param name="y">an fx, formula string or length value</param>
            <param name="controlX">an fx, formula string or length value</param>
            <param name="controlY">an fx, formula string or length value</param>
            <returns>the created command</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.GetEffectiveFill">
            <summary>
            Gets the effective fill of the geometry taking into account the theme and shape style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.GetEffectiveStroke">
            <summary>
            Gets the effective stroke of the geometry taking into account the theme and shape style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.GetEffectiveArrowhead(Nevron.Nov.Diagram.ENArrowheadType)">
            <summary>
            Gets the effective begin or end arrowhead taking into account the theme and shape style.
            </summary>
            <param name="type">Specifies whether to get a begin or an end arrowhead.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.TryGetDisplayBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Gets the display bounds of this geometry (i.e. the bounds of the path, inflated with all display inflates, in shape coordinates).
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the geometry
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Overriden to skip the branch display traversal if the geometry is not visible.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node. Overriden to invalidate any cache associated with geometry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the geometry has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.NGeometrySchema">
            <summary>
            Schema associated with NGeometry
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.ClipWithTextBlockProperty">
            <summary>
            Reference to the ClipWithTextBlock property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.ClipWithImageBlockProperty">
            <summary>
            Reference to the ClipWithImageBlock property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.FillRuleProperty">
            <summary>
            Reference to the FillRule property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.ShadowProperty">
            <summary>
            Reference to the Shadow property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.BeginArrowheadProperty">
            <summary>
            Reference to the BeginArrowhead property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.EndArrowheadProperty">
            <summary>
            Reference to the EndArrowhead property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.BeginDirectionProperty">
            <summary>
            Reference to the BeginDirection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.EndDirectionProperty">
            <summary>
            Reference to the EndDirection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometry.CornerRoundingProperty">
            <summary>
            Reference to the CornerRounding property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGeometry.NGeometryDesigner">
            <summary>
            Designer for NGeometry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.NGeometryDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometry.NGeometryDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGeometryCommand">
            <summary>
            Serves as base class for all plotter and figures geometry commands that define the base path of a geometry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometryCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometryCommand.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometryCommand.Relative">
            <summary>
            Gets or sets whether the command coordinates are expressed in absolute or relative values.
            By default set to false, meaning that command coordinates are in absolute shape coordinates.
            </summary>
            <remarks>
            It is often required to make 2D shapes whose geometry coordinates are expressed relatively to the shape Width and Height.
            In such cases you may set the Relative property to true. 
            <br></br>
            For example: 
            if Relative is set to false, to define a point in the center of the shape you can set the "Width*0.5" and "Height*0.5" expressions to the X and Y coordindates of a command.
            This syntax requires one expressions per point coordinate.
            <br></br>
            if Relative is set to true, to define a point in the center of the shape you can set the X property to 0.5 and the Y property to 0.5.
            This syntax does not require expressions.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGeometryCommand.OwnerGeometry">
            <summary>
            Gets the geometry to which this command belongs to.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometryCommand.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of a property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometryCommand.NGeometryCommandSchema">
            <summary>
            Schema associated with NGeometryCommand
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGeometryCommand.RelativeProperty">
            <summary>
            Reference to the Relative property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGeometryCommand.NGeometryCommandDesigner">
            <summary>
            Designer for NGeometryCommand.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometryCommand.NGeometryCommandDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGeometryCommand.NGeometryCommandDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            Appends the expression types that can be applied to the specified property.
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NArcTo">
            <summary>
            A plotter command that draws a bowed circular arc from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArcTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArcTo.#ctor(Nevron.Nov.Graphics.NPoint,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
            <param name="bow"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArcTo.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="bow"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArcTo.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="bow"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArcTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NArcTo.Bow">
            <summary>
            Gets/set the Bow value, 
            which is distance of the arc from the line formed by previous command location and this command location.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArcTo.NArcToSchema">
            <summary>
            Schema associated with NArcTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArcTo.BowProperty">
            <summary>
            Reference to the Bow property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NArcTo.NArcToDesigner">
            <summary>
            Designer for NArcTo.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArcTo.NArcToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NCircularArcTo">
            <summary>
            A geometry command that plots a circular arc from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
            <param name="control"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="controlX"></param>
            <param name="controlY"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="controlX"></param>
            <param name="controlY"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCircularArcTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCircularArcTo.ControlX">
            <summary>
            Gets or sets the ControlX (A) formula cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCircularArcTo.ControlY">
            <summary>
            Gets or sets the ControlY (B) formula cell
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.GetControl">
            <summary>
            Gets the location (in the shape coordinate system) of the control point
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.SetControl(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the location (X, Y properties) of the control point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCircularArcTo.NCircularArcToSchema">
            <summary>
            Schema associated with NCircularArcTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCircularArcTo.ControlXProperty">
            <summary>
            Reference to the ControlX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCircularArcTo.ControlYProperty">
            <summary>
            Reference to the ControlY property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NCircularArcTo.NCircularArcToDesigner">
            <summary>
            Designer for NCircularArcToDesigner.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCircularArcTo.NCircularArcToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NCubicBezierTo">
            <summary>
            A geometry command that plots a cubic bezier curve from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
            <param name="firstControl"></param>
            <param name="secondControl"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="firstControlX"></param>
            <param name="firstControlY"></param>
            <param name="secondControlX"></param>
            <param name="secondControlY"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="firstControlX"></param>
            <param name="firstControlY"></param>
            <param name="secondControlX"></param>
            <param name="secondControlY"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCubicBezierTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCubicBezierTo.FirstControlX">
            <summary>
            Gets or sets the FirstControlX value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCubicBezierTo.FirstControlY">
            <summary>
            Gets or sets the FirstControlU value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCubicBezierTo.SecondControlX">
            <summary>
            Gets or sets the SecondControlX value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NCubicBezierTo.SecondControlY">
            <summary>
            Gets or sets the SecondControlY value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.GetFirstControl">
            <summary>
            Gets the location (in the shape coordinate system) of the first control point
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.SetFirstControl(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the location (X, Y properties) of the first control point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.GetSecondControl">
            <summary>
            Gets the location (in the shape coordinate system) of the second control point
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.SetSecondControl(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the location (X, Y properties) of the second control point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCubicBezierTo.NCubicBezierToSchema">
            <summary>
            Schema associated with NCubicBezierTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCubicBezierTo.FirstControlXProperty">
            <summary>
            Reference to the FirstControlX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCubicBezierTo.FirstControlYProperty">
            <summary>
            Reference to the FirstControlY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCubicBezierTo.SecondControlXProperty">
            <summary>
            Reference to the SecondControlX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCubicBezierTo.SecondControlYProperty">
            <summary>
            Reference to the SecondControlY property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NCubicBezierTo.NCubicBezierToDesigner">
            <summary>
            Designer for NCubicBezierToDesigner.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCubicBezierTo.NCubicBezierToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEllipticalArcTo">
            <summary>
            A geometry command that plots an elliptical arc from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,Nevron.Nov.NAngle,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
            <param name="control"></param>
            <param name="angle"></param>
            <param name="ratio"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.#ctor(System.Double,System.Double,System.Double,System.Double,Nevron.Nov.NAngle,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="controlX"></param>
            <param name="controlY"></param>
            <param name="angle"></param>
            <param name="ratio"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="controlX"></param>
            <param name="controlY"></param>
            <param name="angle"></param>
            <param name="ratio"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEllipticalArcTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEllipticalArcTo.ControlX">
            <summary>
            Gets or sets the ControlX value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEllipticalArcTo.ControlY">
            <summary>
            Gets or sets the ControlY value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEllipticalArcTo.Angle">
            <summary>
            Gets or sets the Angle value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEllipticalArcTo.Ratio">
            <summary>
            Gets or sets the Ratio value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.GetControl">
            <summary>
            Gets the location (in the shape coordinate system) of the control point
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.SetControl(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the location (X, Y properties) of the control point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEllipticalArcTo.NEllipticalArcToSchema">
            <summary>
            Schema associated with NEllipticalArcTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEllipticalArcTo.ControlXProperty">
            <summary>
            Reference to the ControlX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEllipticalArcTo.ControlYProperty">
            <summary>
            Reference to the ControlY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEllipticalArcTo.AngleProperty">
            <summary>
            Reference to the Angle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEllipticalArcTo.RatioProperty">
            <summary>
            Reference to the Ratio property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEllipticalArcTo.NEllipticalArcToDesigner">
            <summary>
            Designer for NEllipticalArcToDesigner.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEllipticalArcTo.NEllipticalArcToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLineTo">
            <summary>
            A plotter command that plots a line segment from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineTo.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineTo.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLineTo.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLineTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLineTo.NLineToSchema">
            <summary>
            Schema associated with NLineTo.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMoveTo">
            <summary>
            A plotter command that moves the plotter to a new location (starts a new figure) and optionally closes the previous figure.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="closeFigure"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="closeFigure"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.Visible">
            <summary>
            Gets or sets the visibility of the geometry figure started by this MoveTo command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.CloseFigure">
            <summary>
            Gets or sets whether the geometry figure started by this MoveTo command should be closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.ShowFill">
            <summary>
            Gets or sets whether the geometry figure started by this MoveTo command should be filled.
            (e.g. whether the interior region of the figure is displayed)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.ShowStroke">
            <summary>
            Gets or sets whether the geometry figure started by this MoveTo command should be stroked.
            (e.g. whether the outline of the geometry is displayed)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.ShowArrowheads">
            <summary>
            Gets or sets whether arrowheads should be displayed for this geometry figure end-points.
            (e.g. whether the geometry at all displays arrowheads at its start and end points)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMoveTo.SnapTo">
            <summary>
            Gets or sets whether it is allowed to snap to the geometry figure started by this move to command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.NMoveToSchema">
            <summary>
            Schema associated with NMoveTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.CloseFigureProperty">
            <summary>
            Reference to the CloseFigure property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.ShowFillProperty">
            <summary>
            Reference to the ShowFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.ShowStrokeProperty">
            <summary>
            Reference to the ShowStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.ShowArrowheadsProperty">
            <summary>
            Reference to the ShowArrowheads property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMoveTo.SnapToProperty">
            <summary>
            Reference to the SnapTo property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMoveTo.NMoveToDesigner">
            <summary>
            Designer for NMoveTo.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMoveTo.NMoveToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NNurbsTo">
            <summary>
            A plotter command that plots a nurbs curve from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNurbsTo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNurbsTo.#ctor(Nevron.Nov.Graphics.NPoint,System.Int32,System.Double,System.Double,Nevron.Nov.Graphics.NNurbsControlPoint[],System.Double[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="point"></param>
            <param name="degree"></param>
            <param name="firstWeight"></param>
            <param name="lastWeight"></param>
            <param name="controlPoints"></param>
            <param name="knots"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNurbsTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNurbsTo.Degree">
            <summary>
            Gets/Sets the degree of the Nurbs curve.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNurbsTo.FirstWeight">
            <summary>
            Gets/Sets the first weight of the Nurbs curve.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNurbsTo.LastWeight">
            <summary>
            Gets/Sets the last height of the Nurbs currve.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNurbsTo.ControlPoints">
            <summary>
            Gets/Sets the control points of the curve.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNurbsTo.Knots">
            <summary>
            Gets/Sets the control points of the curve.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNurbsTo.GetControlPoint(System.Int32)">
            <summary>
            Gets the control point at the specified index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNurbsTo.SetControlPoint(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the control point at the specified index
            </summary>
            <param name="index"></param>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNurbsTo.NNurbsToSchema">
            <summary>
            Schema associated with NNurbsTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNurbsTo.FirstWeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNurbsTo.LastWeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNurbsTo.DegreeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNurbsTo.ControlPointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNurbsTo.KnotsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NNurbsTo.NNurbsToDesigner">
            <summary>
            Designer for NNurbsTo.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNurbsTo.NNurbsToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPlotterCommand">
            <summary>
            A geometry command that serves as base class for plotter commands such as MoveTo, LineTo etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.#ctor(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPlotterCommand.X">
            <summary>
            Gets or sets the X coordinate of the base point (in the shape coordinate system)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPlotterCommand.Y">
            <summary>
            Gets or sets the Y coordinate of the base point (in the shape coordinate system)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.GetLocation">
            <summary>
            Gets the base point location (in the shape coordinate system)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.SetLocation(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the location (X, Y properties) of the geometry command.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPlotterCommand.NPlotterCommandSchema">
            <summary>
            Schema associated with NGeometryCommand
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPlotterCommand.XProperty">
            <summary>
            Reference to the X property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPlotterCommand.YProperty">
            <summary>
            Reference to the Y property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPlotterCommand.NPlotterCommandDesigner">
            <summary>
            Designer for NPlotterCommand.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPlotterCommand.NPlotterCommandDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPolylineTo">
            <summary>
            A geometry command that plots a cubic bezier curve from the previous command location to this command location.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.#ctor(Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="points"></param>
            <param name="tension"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPolylineTo.Type">
            <summary>
            Gets the type of this geometry command.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPolylineTo.Points">
            <summary>
            Gets or sets the points of the curve path.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPolylineTo.Tension">
            <summary>
            Gets or sets the tension of the curve represented by the PolylineTo command.
            If tension is 0 it is a polypoint with straigth segments, othwerwise it is a cardinal spline with smooth curves.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.GetPointCount">
            <summary>
            Gets the count of points
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.GetPoint(System.Int32)">
            <summary>
            Gets a polyline point at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.SetPoint(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets a polyline point at the specified index.
            </summary>
            <param name="index"></param>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPolylineTo.NPolylineToSchema">
            <summary>
            Schema associated with NPolylineTo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPolylineTo.PointsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPolylineTo.TensionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPolylineTo.NPolylineToDesigner">
            <summary>
            Designer for NPolylineToDesigner.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineTo.NPolylineToDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlue">
            <summary>
            Represents the glue that is used by NControlGlueFx expressions assigned to the shape control points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlue.GetLocationInPage">
            <summary>
            Must override to return the location of the control in page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlue.NControlGlueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToGeometryContour">
            <summary>
            A control point glue, which glues a shape control point to a the factor location specified by the LocationFactor parameter (0 is the start of the geomety contour, 1 is the end).
            Additionally the location can be offset with an absolute value, specified by the LocationOffset parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryContour.#ctor">
            <summary>
            Default constructor. Location factor is set to 0.5 (middle).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryContour.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToGeometryContour.LocationFactor">
            <summary>
            Gets or sets the location factor (in 0-1) range. 0 is the start of the geomety contour, 1 is the end.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToGeometryContour.LocationOffset">
            <summary>
            Gets or sets the location offset, which is absolute value applied to the originally calculated relative position.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryContour.GetLocationInPage">
            <summary>
            Overriden to return a geometry countour location
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToGeometryContour.NControlGlueToGeometryContourSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToGeometryContour.LocationFactorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToGeometryContour.LocationOffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToGeometryContour.NControlGlueToGeometryContourDesigner">
            <summary>
            Designer for NControlGlueToGeometryContour.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryContour.NControlGlueToGeometryContourDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToGeometryVertex">
            <summary>
            A control glue, which glues the shape control to a certain vertex of a certain geometry command of the control Glue shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="commandIndex"></param>
            <param name="vertexIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.GetLocationInPage">
            <summary>
            Overriden to return the glue to geometry command vertex location in page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.CommandIndex">
            <summary>
            Gets or sets the geometry command index in the gluee shape
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.VertexIndex">
            <summary>
            Gets or sets the geometry command vertex index in the gluee shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.NControlGlueToGeometryVertexSchema">
            <summary>
            Schema associated with NControlGlueToGeometryVertex.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.CommandIndexProperty">
            <summary>
            Reference to the CommandIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToGeometryVertex.VertexIndexProperty">
            <summary>
            Reference to the VertexIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToPort">
            <summary>
            A control point glue, which glues the a shape control point to a certain port of the control Glue shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToPort.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="portIndex">the port index of the gluee shape</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToPort.GetLocationInPage">
            <summary>
            Overriden to return the glue to port location in page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToPort.PortIndex">
            <summary>
            Gets or sets the port index in the gluee shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToPort.NControlGlueToPortSchema">
            <summary>
            Schema associated with NControlGlueToPort.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToPort.PortIndexProperty">
            <summary>
            Reference to the PortIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToShapeBox">
            <summary>
            A control point glue, which glues a shape control point to a point defined relatively to a shape box respectively.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeBox.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="widthFactor"></param>
            <param name="heightFactor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToShapeBox.WidthFactor">
            <summary>
            Gets or sets the width factor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToShapeBox.HeightFactor">
            <summary>
            Gets or sets the height factor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeBox.GetLocationInPage">
            <summary>
            Overriden to return the glue to shape box location in page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToShapeBox.NControlGlueToShapeBoxSchema">
            <summary>
            Schema associated with NControlGlueToShapeBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToShapeBox.WidthFactorProperty">
            <summary>
            Reference to the WidthFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToShapeBox.HeightFactorProperty">
            <summary>
            Reference to the HeightFactor property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToShapeBox.NControlGlueToShapeBoxDesigner">
            <summary>
            Designer for NControlGlueToShapeBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeBox.NControlGlueToShapeBoxDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToShapeLine">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to a shape line factor location specified by the LocationFactor parameter. 
            The shape line is the line connecting the Begin and End points. 0 is the start of the shape line, 1 is the end.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeLine.#ctor">
            <summary>
            Default constructor. Location factor is set to 0.5 (middle).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeLine.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="locationFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeLine.GetLocationInPage">
            <summary>
            Overriden to return the gluee shape line location in page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControlGlueToShapeLine.LocationFactor">
            <summary>
            Gets or sets the location factor (in 0-1) range. 0 is the start of the geomety contour, 1 is the end.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToShapeLine.NControlGlueToShapeLineSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlGlueToShapeLine.LocationFactorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlGlueToShapeLine.NControlGlueToShapeLineDesigner">
            <summary>
            Designer for NControlGlueToShapeLine.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlGlueToShapeLine.NControlGlueToShapeLineDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToDynamicPoint">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to a dynamic point, defined by the shape geometry, box, ports or other aspects.
            Serves as base class for NEndPointGlueToBoxContour, NEndPointGlueToGeometryContour and NEndPointGlueToNearestPort.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToDynamicPoint.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToDynamicPoint.NEndPointGlueToDynamicPointSchema">
            <summary>
            Schema associated with NEndPointGlueToDynamicPoint
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToGeometryIntersection">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to the intersection point between 
            the vector formed by the gluee shape center and the end-point direction vector and the gluee shape geometry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToGeometryIntersection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryIntersection.NEndPointGlueToGeometryIntersectionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToNearestPort">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to 
            the nearest port of the From or To shape respectively.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToNearestPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToNearestPort.NEndPointGlueToNearestPortSchema">
            <summary>
            Schema associated with NEndPointGlueToNearestPort.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToShapeBoxIntersection">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to the intersection point between 
            the vector formed by the gluee shape center and the end-point direction vector and the gluee shape Width/Height box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeBoxIntersection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToShapeBoxIntersection.NEndPointGlueToShapeBoxIntersectionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to 
            a the factor location specified by the LocationFactor parameter. 
            0 is the start of the geomety contour, 1 is the end.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.#ctor">
            <summary>
            Default constructor. Location factor is set to 0.5 (middle).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.LocationFactor">
            <summary>
            Gets or sets the location factor (in 0-1) range. 0 is the start of the geomety contour, 1 is the end.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.LocationOffset">
            <summary>
            Gets or sets the location offset, which is absolute value applied to the originally calculated relative position.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.NEndPointGlueToGeometryContourSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.LocationFactorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.LocationOffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.NEndPointGlueToGeometryContourDesigner">
            <summary>
            Designer for NEndPointGlueToGeometryContour.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToGeometryContour.NEndPointGlueToGeometryContourDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to 
            a certain geometry command vertex of the From or To shape respectively.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="commandIndex"></param>
            <param name="vertexIndex"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.GeometryIndex">
            <summary>
            Gets or sets the geometry index in the gluee shape
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.VertexIndex">
            <summary>
            Gets or sets the geometry command index in the gluee shape geometry
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.NEndPointGlueToGeometryVertexSchema">
            <summary>
            Schema associated with NEndPointGlueToGeometryVertex.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.CommandIndexProperty">
            <summary>
            Reference to the CommandIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToGeometryVertex.VertexIndexProperty">
            <summary>
            Reference to the VertexIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToPort">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to 
            a certain port of the From or To shape respectively.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToPort.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="portIndex">the port index of the gluee shape</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToPort.PortIndex">
            <summary>
            Gets or sets the port index in the gluee shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToPort.NEndPointGlueToPortSchema">
            <summary>
            Schema associated with NEndPointGlueToPort.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToPort.PortIndexProperty">
            <summary>
            Reference to the PortIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToShapeBox">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to 
            a point defined relatively to the From or To shape box respectively.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="widthFactor"></param>
            <param name="heightFactor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.WidthFactor">
            <summary>
            Gets or sets the width factor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.HeightFactor">
            <summary>
            Gets or sets the height factor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.NEndPointGlueToShapeBoxSchema">
            <summary>
            Schema associated with NEndPointGlueToShapeBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.WidthFactorProperty">
            <summary>
            Reference to the WidthFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.HeightFactorProperty">
            <summary>
            Reference to the HeightFactor property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.NEndPointGlueToShapeBoxDesigner">
            <summary>
            Designer for NEndPointGlueToShapeBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeBox.NEndPointGlueToShapeBoxDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToShapeLine">
            <summary>
            An end point glue, which glues a shape end point (Begin or End) to a shape line factor location specified by the LocationFactor parameter. 
            The shape line is the line connecting the Begin and End points. 0 is the start of the shape line, 1 is the end.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.#ctor">
            <summary>
            Default constructor. Location factor is set to 0.5 (middle).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.#ctor(System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="locationFactor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.LocationFactor">
            <summary>
            Gets or sets the location factor (in 0-1) range. 0 is the start of the geomety contour, 1 is the end.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.NEndPointGlueToShapeLineSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.LocationFactorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.NEndPointGlueToShapeLineDesigner">
            <summary>
            Designer for NEndPointGlueToShapeLine.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlueToShapeLine.NEndPointGlueToShapeLineDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NEndPointGlue">
            <summary>
            Represents the glue that is used by NEndPointGlueFx expressions assigned to the shape end points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NEndPointGlue.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Overriden to pool for parse and evaluation the expressions which depend on this glue.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NEndPointGlue.NEndPointGlueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMasterGlue">
            <summary>
            Represents the glue that is used by the NMasterGlueFx expressions 
            that can be assigned to the shape PinX, PinY and Angle properties.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMasterGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMasterGlue.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Overriden to pool for parse and evaluation the expressions which depend on this glue.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMasterGlue.NMasterGlueSchema">
            <summary>
            Reference to the NMasterGlue schema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMasterGluePortToPort">
            <summary>
            A master glue, which glues a shape port to a port of its master shape.
            This glue translates the shape so that the ports locations match, 
            and rotates the shape so that the ports directions match.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMasterGluePortToPort.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMasterGluePortToPort.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="slavePortIndex">The slave port index of the target shape.</param>
            <param name="masterPortIndex">The inward port index of the gluee shape.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMasterGluePortToPort.MasterPortIndex">
            <summary>
            Gets or sets the index of the master port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NMasterGluePortToPort.SlavePortIndex">
            <summary>
            Gets or sets the index of the slave port
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMasterGluePortToPort.NMasterGluePortToPortSchema">
            <summary>
            Schema associated with NMasterGluePortToPort.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMasterGluePortToPort.MasterPortIndexProperty">
            <summary>
            Reference to the MasterPortIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMasterGluePortToPort.SlavePortIndexProperty">
            <summary>
            Reference to the SlavePortIndex properthy.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NForeignGlue`1">
            <summary>
            An attribute that serves as base class for all types of glue (end points glue, master glue, control points glue etc.)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NForeignGlue`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NForeignGlue`1.GlueToElementRef">
            <summary>
            Gets or sets the reference to the element to which the end-point is glued to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NForeignGlue`1.GlueToShape">
            <summary>
            Gets the shape to which the glue is currently glued to.
            Returns null, if the glue is not glued to a shape, or this object is not added to a document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NForeignGlue`1.OnGlueToElementRefChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the GlueToElementRef property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NForeignGlue`1.NForeignGlueSchema">
            <summary>
            Reference to the NForeignGlue property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NForeignGlue`1.GlueToElementRefProperty">
            <summary>
            Reference to the ElementRef property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NForeignGlue`1.NForeignGlueDesigner">
            <summary>
            Designer for NForeignGlue.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NForeignGlue`1.NForeignGlueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGlue`1">
            <summary>
            An attribute that serves as base class for all types of glue (end points glue, master glue, control points glue, ports etc.)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGlue`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGlue`1.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Overriden to pool for parse and evaluation the expressions which depend on this glue.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGlue`1.OwnerShape">
            <summary>
            Gets the shape to which this glue belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGlue`1.NGlueSchema">
            <summary>
            Reference to the NGlue property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGlue`1.NGlueDesigner">
            <summary>
            Designer for NGlue.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGlue`1.NGlueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortGlue">
            <summary>
            Represents the glue that is used by NPortGlueFx expressions assigned to the shape ports.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlue.GetLocationAndDirectionInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Gets port point and direction in target port shape local coordinates.
            </summary>
            <param name="location"></param>
            <param name="direction"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlue.NPortGlueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortGlueToGeometryContour">
            <summary>
            A port glue, which glues the port to a the factor location specified by the LocationFactor parameter (0 is the start of the geomety contour, 1 is the end).
            Additionally the location can be offset with an absolute value, specified by the LocationOffset parameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToGeometryContour.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToGeometryContour.#ctor(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useContourOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToGeometryContour.LocationFactor">
            <summary>
            Gets or sets the factor [0, 1] from the contour line on which the port is positioned.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToGeometryContour.LocationOffset">
            <summary>
            Gets or sets the location offset from the position specified by the location factor.
            Negative values move the port towards the begin point and positive values towards the end point of the contour.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToGeometryContour.UseContourOrientation">
            <summary>
            Gets or sets whether the text uses the default contour orientation.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToGeometryContour.AngleOffset">
            <summary>
            Gets or sets the angle offset, which is applied to the angle of the shape line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToGeometryContour.GetLocationAndDirectionInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Overriden to return the port location and direction in local coordinates
            </summary>
            <param name="location"></param>
            <param name="direction"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToGeometryContour.NPortGlueToGeometryContourSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToGeometryContour.UseContourOrientationProperty">
            <summary>
            Reference to the UseContourOrientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToGeometryContour.LocationFactorProperty">
            <summary>
            Reference ot hte LocationFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToGeometryContour.LocationOffsetProperty">
            <summary>
            Reference to the LocationOffset property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToGeometryContour.AngleOffsetProperty">
            <summary>
            Reference to the AngleOffset property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortGlueToGeometryContour.NPortGlueToGeometryContourDesigner">
            <summary>
            Designer for NPortGlueToGeometryContour.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToGeometryContour.NPortGlueToGeometryContourDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortGlueToShapeLine">
            <summary>
            A port glue, which glues a port to a factor location along the line connecting the begin and end points of the shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToShapeLine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToShapeLine.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a glue that glues to Shape Line location. Angle is set to zero.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToShapeLine.#ctor(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Initializes a glue that glues to Shape Line location and angle.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useLineOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToShapeLine.LocationFactor">
            <summary>
            Gets or sets the factor [0, 1] from the Line line on which the port is positioned.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToShapeLine.LocationOffset">
            <summary>
            Gets or sets the location offset from the position specified by the location factor.
            Negative values move the port towards the begin point and positive values towards the end point of the Line.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToShapeLine.UseLineOrientation">
            <summary>
            Gets or sets whether the port uses the default Line orientation.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPortGlueToShapeLine.AngleOffset">
            <summary>
            Gets or sets the angle offset, which is applied to the angle of the shape line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToShapeLine.GetLocationAndDirectionInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Overriden to compute the Pin and Angle values of the glue
            </summary>
            <param name="location"></param>
            <param name="direction"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToShapeLine.NPortGlueToShapeLineSchema">
            <summary>
            Schema associated with NPortGlueToShapeLineSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToShapeLine.LocationFactorProperty">
            <summary>
            Reference to the LocationFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToShapeLine.LocationOffsetProperty">
            <summary>
            Reference to the LocationOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToShapeLine.UseLineOrientationProperty">
            <summary>
            Reference to the UseLineOrientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortGlueToShapeLine.AngleOffsetProperty">
            <summary>
            Reference to the AngleOffset property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortGlueToShapeLine.NPortGlueToShapeLineDesigner">
            <summary>
            Designer for NPortGlueToShapeLine
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortGlueToShapeLine.NPortGlueToShapeLineDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlockGlue">
            <summary>
            Represents the glue that is used by NImageBlockGlueFx expressions assigned to the shape ports.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlue.ImageBlock">
            <summary>
            Gets the image block to which this glue is applied.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlue.NImageBlockGlueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour">
            <summary>
            An image block glue, which glues the image block Pin and Angel to a relative value along the shape contour.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a glue that glues to geometry contour location. Angle is set to zero.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.#ctor(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Initializes a glue that glues to geometry contour location and angle.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useContourOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.LocationFactor">
            <summary>
            Gets or sets the factor [0, 1] from the contour line on which the text block is positioned.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.LocationOffset">
            <summary>
            Gets or sets the location offset from the position specified by the location factor.
            Negative values move the text block towards the begin point and positive values towards the end point of the contour.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.UseContourOrientation">
            <summary>
            Gets or sets whether the text uses the default contour orientation.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.AngleOffset">
            <summary>
            Gets or sets the angle offset, which is applied to the angle of the shape line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Overriden to compute the Pin and Angle values of the outward glue.
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.NImageBlockGlueToGeometryContourSchema">
            <summary>
            Schema associated with NImageBlockGlueToGeometryContour.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.LocationFactorProperty">
            <summary>
            Reference to the LocationFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.LocationOffsetProperty">
            <summary>
            Reference to the LocationOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.UseContourOrientationProperty">
            <summary>
            Reference to the UseContourOrientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.AngleOffsetProperty">
            <summary>
            Reference to the AngleOffset property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.NImageBlockGlueToGeometryContourDesigner">
            <summary>
            Designer for NImageBlockGlueToGeometryContour.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToGeometryContour.NImageBlockGlueToGeometryContourDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlockGlueToLargestInnerRectangle">
            <summary>
            An image block glue, which glues the image block to the center of the largest inner rectangle in the shape's polygon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToLargestInnerRectangle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToLargestInnerRectangle.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Overriden to compute the Location and Angle in local coordinates
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToLargestInnerRectangle.NImageBlockGlueToLargestInnerRectangleSchema">
            <summary>
            Schema associated with NImageBlockGlueToLargestInnerRectangleSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine">
            <summary>
            A shape block glue, which glues a shape block to a factor location along the line connecting the begin and end points of a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a glue that glues to Shape Line location. Angle is set to zero.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.#ctor(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Initializes a glue that glues to Shape Line location and angle.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useLineOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.LocationFactor">
            <summary>
            Gets or sets the factor [0, 1] from the Line line on which the text block is positioned.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.LocationOffset">
            <summary>
            Gets or sets the location offset from the position specified by the location factor.
            Negative values move the text block towards the begin point and positive values towards the end point of the Line.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.UseLineOrientation">
            <summary>
            Gets or sets whether the text uses the default Line orientation.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.AngleOffset">
            <summary>
            Gets or sets the angle offset, which is applied to the angle of the shape line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Overriden to compute the Pin and Angle values of the glue
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.NImageBlockGlueToShapeLineSchema">
            <summary>
            Schema associated with NImageBlockGlueToShapeLineSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.LocationFactorProperty">
            <summary>
            Reference to the LocationFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.LocationOffsetProperty">
            <summary>
            Reference to the LocationOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.UseLineOrientationProperty">
            <summary>
            Reference to the UseLineOrientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.AngleOffsetProperty">
            <summary>
            Reference to the AngleOffset property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.NImageBlockGlueToShapeLineDesigner">
            <summary>
            Designer for NImageBlockGlueToShapeLine
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlockGlueToShapeLine.NImageBlockGlueToShapeLineDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeBlockGlue`1">
            <summary>
            The glue associated with shape blocks. Serves as base class for NImageBlockGlue and NTextBlockGlue
            </summary>
            <typeparam name="TFx"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlockGlue`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlockGlue`1.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Must override to return the Pin and Angle.
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlockGlue`1.NShapeBlockGlueSchema">
            <summary>
            Schema associated with NShapeBlockGlue
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockGlue">
            <summary>
            Represents the glue that is used by NTextBlockGlueFx expressions assigned to the shape ports.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlue.TextBlock">
            <summary>
            Gets the image block to which this glue is applied.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlue.NTextBlockGlueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour">
            <summary>
            A shape block glue, which serves as base class for Text and text blocks glue that glue the box to a geometry contour location and angle.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a glue that glues to geometry contour location. Angle is set to zero.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.#ctor(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Initializes a glue that glues to geometry contour location and angle.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useContourOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.LocationFactor">
            <summary>
            Gets or sets the factor [0, 1] from the contour line on which the text block is positioned.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.LocationOffset">
            <summary>
            Gets or sets the location offset from the position specified by the location factor.
            Negative values move the text block towards the begin point and positive values towards the end point of the contour.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.UseContourOrientation">
            <summary>
            Gets or sets whether the text uses the default contour orientation.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.AngleOffset">
            <summary>
            Gets or sets the angle offset, which is applied to the angle of the shape line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Overriden to compute the Pin and Angle values of the outward glue.
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.NTextBlockGlueToGeometryContourSchema">
            <summary>
            Schema associated with NTextBlockGlueToGeometryContour.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.LocationFactorProperty">
            <summary>
            Reference to the LocationFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.LocationOffsetProperty">
            <summary>
            Reference to the LocationOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.UseContourOrientationProperty">
            <summary>
            Reference to the UseContourOrientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.AngleOffsetProperty">
            <summary>
            Reference to the AngleOffset property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.NTextBlockGlueToGeometryContourDesigner">
            <summary>
            Designer for NTextBlockGlueToGeometryContour.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToGeometryContour.NTextBlockGlueToGeometryContourDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockGlueToLargestInnerRectangle">
            <summary>
            A text block glue, which glues the text block to the center of the largest inner rectangle in the shape's polygon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToLargestInnerRectangle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToLargestInnerRectangle.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Overriden to compute the Location and Angle in local coordinates
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToLargestInnerRectangle.NTextBlockGlueToLargestInnerRectangleSchema">
            <summary>
            Schema associated with NTextBlockGlueToLargestInnerRectangleSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine">
            <summary>
            A shape block glue, which glues a shape block to a factor location along the line connecting the begin and end points of a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a glue that glues to Shape Line location. Angle is set to zero.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.#ctor(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Initializes a glue that glues to Shape Line location and angle.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useLineOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.LocationFactor">
            <summary>
            Gets or sets the factor [0, 1] from the Line line on which the text block is positioned.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.LocationOffset">
            <summary>
            Gets or sets the location offset from the position specified by the location factor.
            Negative values move the text block towards the begin point and positive values towards the end point of the Line.
            By default set to 0.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.UseLineOrientation">
            <summary>
            Gets or sets whether the text uses the default Line orientation.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.AngleOffset">
            <summary>
            Gets or sets the angle offset, which is applied to the angle of the shape line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.GetLocationAndAngleInLocal(Nevron.Nov.Graphics.NPoint@,Nevron.Nov.NAngle@)">
            <summary>
            Overriden to compute the Pin and Angle values of the glue
            </summary>
            <param name="pin"></param>
            <param name="angle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.NTextBlockGlueToShapeLineSchema">
            <summary>
            Schema associated with NTextBlockGlueToShapeLineSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.LocationFactorProperty">
            <summary>
            Reference to the LocationFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.LocationOffsetProperty">
            <summary>
            Reference to the LocationOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.UseLineOrientationProperty">
            <summary>
            Reference to the UseLineOrientation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.AngleOffsetProperty">
            <summary>
            Reference to the AngleOffset property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.NTextBlockGlueToShapeLineDesigner">
            <summary>
            Designer for NTextBlockGlueToShapeLine
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockGlueToShapeLine.NTextBlockGlueToShapeLineDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NImageBlock">
            <summary>
            Represents an image block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.#ctor(Nevron.Nov.Graphics.NImage)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlock.Glue">
            <summary>
            Gets or sets the text block glue, that glues the block PinX, PinY and Angle properties.
            Use the Glue() methods for an easier way to work with the glue.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlock.ResizeMode">
            <summary>
            Gets or sets the mode in which the image block can be automatically resized.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlock.Image">
            <summary>
            Gets or sets the image shown by this image block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NImageBlock.TextureMapping">
            <summary>
            Gets or sets the value of the texture mapping property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.GlueToShapeLine(System.Double,System.Double)">
            <summary>
            Glues the image block Pin to a relative location along the line connecting the Begin and End shape points.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.GlueToShapeLine(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Glues the image block Pin and Angle to a relative location along the line connecting the Begin and End shape points.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useLineOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.GlueToLargestInnerRectangle">
            <summary>
            Glues the image block Pin to the largest inner rectangle inside the shape geometry or shape box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.GlueToShapeGeometryContour(System.Double,System.Double)">
            <summary>
            Glues the image block Pin to a relative location along the owner shape geometry contour.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.GlueToShapeGeometryContour(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Glues the image block Pin and Angle to a relative location along the owner shape geometry contour.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useContourOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.InitXForm(Nevron.Nov.Diagram.ENImageBlockXForm)">
            <summary>
            Helper method for setting up the transformation of the image block relative to the owner shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.MeasureContent">
            <summary>
            Measures the content of this element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.ArrangeContent">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NImageBlock.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Called when the background of the text block needs to be painted
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlock.NImageBlockSchema">
            <summary>
            Schema associated with NImageBlock.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlock.GlueChild">
            <summary>
            Reference to the Glue child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlock.ImageProperty">
            <summary>
            Reference to the Image property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlock.TextureMappingProperty">
            <summary>
            Reference to the TextureMapping property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NImageBlock.ResizeModeProperty">
            <summary>
            Reference to the ResizeMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeMenuAction">
            <summary>
            Represents a menu action from the shape menu actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeMenuAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuAction.Action">
            <summary>
            Gets or sets the formula action, which is executed when the shape menu item is clicked.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuAction.Checkable">
            <summary>
            Gets or sets whether the menu item is checkable by the user or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuAction.Checked">
            <summary>
            Gets or sets whether the menu item is checked
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeMenuAction.BuildMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Overriden to create a shape menu action.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuAction.NShapeMenuActionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuAction.ActionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuAction.CheckableProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuAction.CheckedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeMenuItem">
            <summary>
            Serves as base class for all shape menu items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeMenuItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuItem.Text">
            <summary>
            Gets or sets the text which appears in the menu item created for this action.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuItem.Enabled">
            <summary>
            Gets or sets whether the menu item is enabled or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuItem.Visible">
            <summary>
            Gets or sets whether the menu item is visible or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuItem.SeparatorBefore">
            <summary>
            Gets or sets whether a separator is added to the menu before this item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeMenuItem.SeparatorAfter">
            <summary>
            Gets or sets whether a separator is added to the menu after this item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeMenuItem.BuildMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Must override to create a menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItem.NShapeMenuItemSchema">
            <summary>
            Schema associated with NShapeMenuItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItem.TextProperty">
            <summary>
            Reference to the Text property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItem.EnabledProperty">
            <summary>
            Reference to the Enabled property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItem.VisibleProperty">
            <summary>
            Reference to the Visible property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItem.SeparatorBeforeProperty">
            <summary>
            Reference to the SeparatorBefore property. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItem.SeparatorAfterProperty">
            <summary>
            Reference to the SeparatorAfter property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeMenuItemCollection">
            <summary>
            A collection of NShapeMenuItem elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeMenuItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeMenuItemCollection.BuildMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Must override to create a menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeMenuItemCollection.NShapeMenuItemCollectionSchema">
            <summary>
            Schema associated with NShapeMenuItemCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeSubmenu">
            <summary>
            A shape menu item that creates a menu item that has a submenu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeSubmenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeSubmenu.Items">
            <summary>
            Gets or sets the shape menu items that appear as child items of this menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeSubmenu.BuildMenu(Nevron.Nov.UI.NMenu)">
            <summary>
            Overriden to create a submenu item.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeSubmenu.NShapeSubmenuSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeSubmenu.ItemsChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGroup">
            <summary>
            Represents a shape that holds (contains) other shapes and which the user can manipulate (group, ungroup etc.).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests a group by point.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests a group by region
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.GetAbilitiesMask">
            <summary>
            Overriden to return the group abilities
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGroup.Shapes">
            <summary>
            Gets/Sets the shapes contained in the group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGroup.ResizeShapes">
            <summary>
            Gets or sets the default way in which the group shapes are resized.
            Group shapes, whose ResizeInGroup property is set to UseGroupSettings 
            will use this resize mode, when in group and resized by the user.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGroup.SelectionMode">
            <summary>
            Gets or sets the way in which NOV Diagram selects the group and the shapes inside this group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGroup.SnapToShapes">
            <summary>
            Specifies that you can snap and glue to shapes within a group. By default set to true.
            When set to false, the group will prevent the snap-and-glue to work on the shapes that are contained inside this group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGroup.ElementsZOrder">
            <summary>
            Gets or sets the ZOrder of the group geometry in relation to the member shapes. By default set to BehindMembers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGroup.AllowUngroup">
            <summary>
            Gets/Sets whether ungrouping is allowed. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.OnShapesChildInserting(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.OnShapesChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.OnShapesChildRemoving(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.OnShapesChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.OnPageTransformChanged">
            <summary>
            Overriden to notify the grouped shapes that their page transform has also changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.GetDisplayBounds">
            <summary>
            Gets the current display bounds of this shape.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.NGroupSchema">
            <summary>
            Schema associated with NGroup
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.ShapesChild">
            <summary>
            Reference to the Shapes child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.ResizeShapesProperty">
            <summary>
            Reference to the ResizeShapes property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.SelectionModeProperty">
            <summary>
            Reference to the SelectionMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.SnapToShapesProperty">
            <summary>
            Reference to the SnapToShapes property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.ElementsZOrderProperty">
            <summary>
            Reference to the ElementsZOrder property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGroup.AllowUngroupProperty">
            <summary>
            Reference to the AllowUngroup property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGroup.NGroupDesigner">
            <summary>
            A designer for NGroup.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGroup.NGroupDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLayoutData">
            <summary>
            Represents a per shape data that NOV Diagram layouts can optionally use.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLayoutData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.DockArea">
            <summary>
            Gets or sets the dock area of the shape.
            The Dock layout uses this value to determine the area to which to dock the shape.
            Applicable to 2D shapes only. By default set to Top.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.WrapFlowBreak">
            <summary>
            Gets or sets whether flow layouts should break after this shape.
            The WrapFlow and Table layouts uses this value to determine whether they should make a new lane after the shape.
            Applicable to 2D shapes only. By default false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.IndexInLayer">
            <summary>
            Gets or sets the index of the vertex in the layer.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.LayerIndex">
            <summary>
            Determines layer index of the node when Layered Graph Layout is applied. By default
            set to -1, which means that the index will be determined automatically.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.TipOverChildrenPlacement">
            <summary>
            Gets or sets the way in which the TipOver tree layout arranges the shape children.
            Applicable only to 2D shapes. By default set to Row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.XMoveable">
            <summary>
            Gets or sets whether force directed layouts are allowed to move the shape in the X direction.
            Applicable to 2D shapes only. By default true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.YMoveable">
            <summary>
            Gets or sets whether force directed layouts are allowed to move the shape in the Y direction.
            Applicable to 2D shapes only. By default true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.MagnetizationType">
            <summary>
            Gets or sets the type of magnetization of the 1D shape. Applicable only to 1D shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.ElectricalCharge">
            <summary>
            Gets or sets the ellectrical charge of the shape. 
            In Spring Graph Layouts this affects the strength with which vertex repels other vertices.
            Applicable to 2D Shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.SpringStiffness">
            <summary>
            Gets or sets the spring stiffness of the shape. 
            In Spring Graph Layouts this affects the strength with which edge repels or attracts the connected vertices.
            Applicable to 1D Shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.SpringLength">
            <summary>
            Gets or sets the spring length of the shape. 
            In Spring Graph Layouts this affects the natural length of the spring. The layout tries to arrange the vertices connected by this edge at this distance.
            Applicable to 1D Shapes only.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLayoutData.Mass">
            <summary>
            Gets or sets the mass of the shape. 
            In Force Directed Layouts this affects the strength with which vertex is attracted to the current barycenter of the graph.
            Applicable to 2D Shapes only.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.NLayoutDataSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.DockAreaProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.WrapFlowBreakProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.TipOverChildrenPlacementProperty">
            <summary>
            Reference to the ChildrenPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.IndexInLayerProperty">
            <summary>
            Reference to the IndexInLayer property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.LayerIndexProperty">
            <summary>
            Reference to the LayerIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.XMoveableProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.YMoveableProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.MagnetizationTypeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.ElectricalChargeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.SpringStiffnessProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.SpringLengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLayoutData.MassProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLayoutData.NGridDesigner">
            <summary>
            Designer for NGrid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLayoutData.NGridDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NNamedShapePart">
            <summary>
            Represents a named shape part, which is a shape element that has a name, with which it can be referenced in the shape sheet.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNamedShapePart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNamedShapePart.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNamedShapePart.Name">
            <summary>
            Gets or sets the name of this shape part.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNamedShapePart.OnNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the Name property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNamedShapePart.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
            <param name="reparentedNode"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNamedShapePart.NNamedShapePartSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNamedShapePart.NameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NNamedShapePartCollection`1">
            <summary>
            A collection of NUserCell elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNamedShapePartCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NNamedShapePartCollection`1.Item(System.String)">
            <summary>
            Gets the item in this collection with the given name.
            Returns null if an item with the specified name is not found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NNamedShapePartCollection`1.Remove(System.String)">
            <summary>
            Removes the element with the given name.
            </summary>
            <param name="name"></param>
            <returns>True if an item with the given name was found and removed.</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NNamedShapePartCollection`1.NNamedShapePartCollectionSchema">
            <summary>
            Schema associated with NNamedShapePartCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRoutableConnector">
            <summary>
            Represents a shape, the geometry of which can avoid obstacles (other shapes) in its path.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NRoutableConnector.CreateGeometryPath">
            <summary>
            Occurs when the connector needs to create a path from the base routing points.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.RerouteMode">
            <summary>
            Specifies the mode in which this route is automatically rerouted. 
            Only taken into account if the ShapeType property is set to Shape1D.
            </summary>
            <remarks>
            By default set to Never
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.Model">
            <summary>
            Gets or sets model that defines this connector geometry.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.AllowLayoutsReroute">
            <summary>
            Gets or sets whether layouts are allowed to reroute the connector. 
            By default set to true.
            </summary>
            <remarks>
            Typically each layout has some predefined routing logic. 
            That is why when routable connectors that allow reroute are routed by the layout, their RerouteMode is set to Never, and their model is defined by the layout.
            If you wish to protect a specific connector from this default behavior, you can set this property to false.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.UpdatingGeometry">
            <summary>
            Gets or sets whether the geoemtry is currently being updated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.GetAlignBoxInParent">
            <summary>
            Overriden to include the bounds of the model points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.Translate1D(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Translates a 1D shape, by offseting the begin and end points of the shape.
            The modification of both the begin and end points of the shape is optional.
            Overriden to translate the model points too.
            Throws an exception if this is not a 1D shape.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="translateBegin"></param>
            <param name="translateEnd"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.CanRequestReroute">
            <summary>
            Determines whether the route can currently be rerouted
            </summary>
            <remarks>
            This implementation returns true if the graph edge is not reflexive and the edge is connected to a routing service
            </remarks>
            <returns>true if it can reroute, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.RequestReroute">
            <summary>
            Requests the finding of a new route of this connector, which strives not to cross any obstacles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.CanReroute">
            <summary>
            Determines whether the route can currently be rerouted
            </summary>
            <remarks>
            This implementation returns true if the graph edge is not reflexive and the edge is connected to a routing service
            </remarks>
            <returns>true if it can reroute, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.Reroute">
            <summary>
            Finds of a new route of this connector, which strives not to cross any obstacles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.UpdateGeometry">
            <summary>
            Updates the geometry of the connector from its model. Automatically called by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.GetIntersectionPoints(Nevron.Nov.Diagram.NRoutableConnector)">
            <summary>
            Gets a list with the intersection points of this connector with the given connector
            in page coordinates. If the connectors do not intersect an empty list is returned.
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.IsLine">
            <summary>
            Determines whether this connector is currently behaving as a line.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.IsPolyline">
            <summary>
            Determines whether this connector is currently behaving as a poly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnector.IsOrthogonal">
            <summary>
            Determines whether this connector is currently behaving as an HV.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.MakeLine">
            <summary>
            Makes this routable connector a simple line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.MakePolyline">
            <summary>
            Makes this routable connector a polyline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.MakePolyline(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Makes this routable connector a polyline.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.MakeOrthogonal">
            <summary>
            Makes this routable connector model orthogonal.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.MakeOrthogonal(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Makes this routable connector model orthogonal.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.OnEndPointGlueChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the BeginGlue or EndGlue has changed.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.OnEndPointsChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called whenever the geometries count or properties have changed.
            Raises the EndPoints event and requests a reroute of the connector (if RerouteMode is not Never).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.OnTransformChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the transformation from local to parent coordinates of this shape has changed.
            Raises the transform changed event and invalidates the connector arrange.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.OnGeometryChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called whenever the geometry has changed.
            Raises the GeometryChanged event.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Overriden to create custom commands
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.CreateStyle">
            <summary>
            Called to create the default shape style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.OnCreateGeometryPath(Nevron.Nov.Graphics.NPoint[],System.Double)">
            <summary>
            Creates a path for the connector in the normal case (the connector is inside the page)
            </summary>
            <param name="basePoints">points in parent coordinates</param>
            <param name="cornerRounding">corner rounding</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnector.NRoutableConnectorSchema">
            <summary>
            Schema associated with NRoutableRoutableConnector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnector.RerouteModeProperty">
            <summary>
            Reference to the RerouteMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnector.AllowLayoutsRerouteProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnector.ModelProperty">
            <summary>
            Reference to the Model property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnector.CreateGeometryPathEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRoutableConnector.NRoutableConnectorDesigner">
            <summary>
            A designer for NRoutableConnector
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnector.NRoutableConnectorDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShape">
            <summary>
            A page item that represents an object from the real world, concept or abstraction. 
            Shapes are the primary building blocks of drawings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.TransformChanged">
            <summary>
            Occurs when the shape transform has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.PageTransformChanged">
            <summary>
            Occurs when the shape page transform has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.GeometryChanged">
            <summary>
            Occurs when the shape Geometry has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.TextBlockChanged">
            <summary>
            Occurs when the shape TextBlock has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.PortsChanged">
            <summary>
            Occurs when the ports have changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.ControlsChanged">
            <summary>
            Occurs when the shape control points have changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.SizeChanged">
            <summary>
            Occurs when the shape size has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.BeginPointChanged">
            <summary>
            Occurs when the coordinates of the shape Begin Point has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.EndPointChanged">
            <summary>
            Occurs when the coordinates of the shape End Point has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.BeginPointGlueChanged">
            <summary>
            Occurs when the BeginPoint glue has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.EndPointGlueChanged">
            <summary>
            Occurs when the EndPoint glue has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.MasterGlueChanged">
            <summary>
            Occurs when the MasterGlue glue has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.ShapeTypeChanged">
            <summary>
            Occurs when the ShapeType property has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.QueryAutoConnectButtonContent">
            <summary>
            Occurs when the shape queries for a connect button content.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShape.ShapeCodeBehindChanged">
            <summary>
            Occurs when the code-behind of the shape has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element layout
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.ValidateArrange">
            <summary>
            Called to layout the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent,
            and want to inform it to invalidate it's measure.
            </summary>
            <param name="measureChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Appends custom context menu items.
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Angle">
            <summary>
            Gets or sets the shape angle of rotation
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.PinX">
            <summary>
            Gets or sets the pin point X coordinate (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.PinY">
            <summary>
            Gets or sets the pin point Y coordinate (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.LocPinX">
            <summary>
            Gets or sets the local pin point X coordinate (in local or relative local coordinates depending on LocPinRelative), 
            to which the pin point X coordinate is mapped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.LocPinY">
            <summary>
            Gets or sets the local pin point Y coordinate (in local or relative local coordinates depending on LocPinRelative), 
            to which the pin point Y coordinate is mapped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.LocPinRelative">
            <summary>
            Gets or sets whether the local pin point is positioned relatively to the shape Width and Height.
            By default true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetThemeInfo">
            <summary>
            Gets the theme properties to use for styling this styleable element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetShapeStyle">
            <summary>
            Gets the shape style to apply to this styleable element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CanClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetClip">
            <summary>
            Gets the shape clipping path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPaintCacheMode">
            <summary>
            Determines whether the 2D painting of the object can be cached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPermissionsMask">
            <summary>
            Gets the shape permissions mask
            </summary>
            <remarks>
            Overriden to:
            <para>
            Drop the UpdateBounds permission, if the ShapeType property is Shape1D.
            </para>
            <para>
            Drop the Select permission, if in group, whose SelectionMode is GroupOnly
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests a shape by point
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests a shape by region
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetAbilitiesMask">
            <summary>
            Overriden to return the shape abilities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.ShowPropertiesDialog">
            <summary>
            Shows the shape properties dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Translate(System.Double,System.Double)">
            <summary>
            Translate this item with the specified amounts.
            For 2D shapes this method translates the PinPoint,
            For 1D shapes this method translates the BeginPonit and EndPoint of the shape.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Translate2D(System.Double,System.Double)">
            <summary>
            Translates a 2D shape, by offseting the PinPoint with the specified amounts.
            Throws an exception if this is not a 2D shape.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Translate1D(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Translates a 1D shape, by offseting the begin and end points of the shape.
            The modification of both the begin and end points of the shape is optional.
            Throws an exception if this is not a 1D shape.
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="translateBegin"></param>
            <param name="translateEnd"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.RaiseQueryAutoConnectButtonContent(Nevron.Nov.Diagram.NAutoConnectButtonInfo@,Nevron.Nov.Diagram.NAutoConnectButtonInfo@,Nevron.Nov.Diagram.NAutoConnectButtonInfo@,Nevron.Nov.Diagram.NAutoConnectButtonInfo@)">
            <summary>
            Raises the QueryShowAutoConnectButton event
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetSnappedBoxDirection(Nevron.Nov.ENBoxDirection)">
            <summary>
            Gets the snapped box direction
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Geometry">
            <summary>
            Gets or sets the Geometry of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.GeometryNoCreate">
            <summary>
            Gets the Geometry of this shape without creating it if it does not exist.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.TextBlock">
            <summary>
            Gets or sets the TextBlock of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.TextBlockNoCreate">
            <summary>
            Gets the TextBlock contained in this shape without creating it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ImageBlock">
            <summary>
            Gets or sets the ImageBlock of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ImageBlockNoCreate">
            <summary>
            Gets the ImageBlock contained in this shape without creating it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Controls">
            <summary>
            Gets or sets the control points collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Ports">
            <summary>
            Gets or sets the ports collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.MenuItems">
            <summary>
            Gets or sets the menu items collection, which defines custom actions that can be executed upon this shape from the shape context menu.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.UserCells">
            <summary>
            Gets or sets the shape user cells.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Properties">
            <summary>
            Gets or sets the shape properties.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Scratches">
            <summary>
            Gets or sets the scratches of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.LayoutData">
            <summary>
            Gets or sets the data that layouts can use when arranging this shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Style">
            <summary>
            Gets/Sets the Style child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Widget">
            <summary>
            Gets or sets the child widget.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Hyperlink">
            <summary>
            Gets/Sets the Hyperlink child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.BeginX">
            <summary>
            Gets or sets the X coordinate of the begin point (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.BeginY">
            <summary>
            Gets or sets the Y coordinate of the begin point (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.EndX">
            <summary>
            Gets or sets the X coordinate of the end point (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.EndY">
            <summary>
            Gets or sets the Y coordinate of the end point (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.DefaultShapeGlue">
            <summary>
            Gets or sets the way in which other shapes begin points by default glue to this shape.
            By default set to GlueToGeometryContour.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsBeginPointGlued">
            <summary>
            Determines whether the begin point is glued.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsEndPointGlued">
            <summary>
            Determines whether the end point is glued.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsConnected1DShape">
            <summary>
            Gets whether this is a connected 1D shape (i.e. 1D shape whose begin or end point is connected).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.BeginPointGlue">
            <summary>
            Gets or sets the begin glue. 
            Use one of the GlueBeginToXXX() methods for an easier way to glue the begin point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.EndPointGlue">
            <summary>
            Gets or sets the end glue. 
            Use one of the GlueEndToXXX() methods for an easier way to glue the end point.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.MasterGlue">
            <summary>
            Gets or sets the master glue. 
            Use the GlueToMaster() methods for an easier way to work with master glue.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.FromShape">
            <summary>
            Gets the shape to which the begin point is currently glued to. 
            Returns null, if the begin point is not glued.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ToShape">
            <summary>
            Gets the shape to which the end point is currently glued to.
            Returns null, if the end point is not glued.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.MasterShape">
            <summary>
            Gets the shape to which the shape is currently a slave of.
            Returns null, if the shape is not glued to a master shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsReflexive">
            <summary>
            Queries whether this shape is reflexive (e.g. its FromShape is equal to its EndShape)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Width">
            <summary>
            Gets or sets the shape width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Height">
            <summary>
            Gets or sets the shape height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Size">
            <summary>
            Gets or sets the size of the shape. Internally this property delegates to the Width and Height properties.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.FlipX">
            <summary>
            Gets or sets whether the shape coordinate system X flipped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.FlipY">
            <summary>
            Gets or sets whether the shape coordinate system Y flipped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.IsVisible">
            <summary>
            Determines whether the shape is visible in the page.
            This method returns true if the shape itself is visible and if all ancestor groups are visible too.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ShapeType">
            <summary>
            Gets or sets the shape type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.EditHeightIn1D">
            <summary>
            Gets or sets whether it is allowed to edit the height of the shape, when the ShapeType is set to 1D.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Visible">
            <summary>
            Gets or sets the shape visibility.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ResizeInGroup">
            <summary>
            Gets or sets the shape resize mode, 
            which defines how Nevron updates the shape dimensions and transformation 
            when the user resizes this shape and it is contained in a group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.GraphPart">
            <summary>
            Gets or sets whether the shape should be threated as a part of the logical graph,
            which the page represents
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.MoveSlaves">
            <summary>
            Gets or sets the shapes that are translated together with this shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ShowShapeHandles">
            <summary>
            Gets or sets whether the shape handles (box Width and Height for 2D shapes and start-end points for 1D shapes) are displayed when the shape is ``.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ShowControlHandles">
            <summary>
            Gets or sets whether the control points of the shapes are displayed when the shape is selected
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.CodeBehindSource">
            <summary>
            Gets or sets the code assembly that defines the code behind object.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowFormat">
            <summary>
            Locks the AllowFormatting of a shape so it cannot be changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowResizeX">
            <summary>
            Gets or sets whether the user is allowed to change the Width of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowResizeY">
            <summary>
            Gets or sets whether the user is allowed to change the Height of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowChangeAspectRatio">
            <summary>
            Gets or sets whether the user is allowed to change the aspect ratio (Width vs Height) of this shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowMoveX">
            <summary>
            Gets or sets whether the user is allowed to move the shape horizontally.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowMoveY">
            <summary>
            Gets or sets whether the user is allowed to move the shape vertically.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowRotate">
            <summary>
            Gets or sets whether the user is allowed to rotate the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowChangePinPoint">
            <summary>
            Gets or sets whether the user is allowed to change the pin point of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowChangeBeginPoint">
            <summary>
            Gets or sets whether the user is allowed to reposition, glue or unglue the begin point of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowChangeEndPoint">
            <summary>
            Gets or sets whether the user is allowed to reposition, glue or unglue the end point of the shape.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowGeometryEdit">
            <summary>
            Gets or sets whether the user is allowed to edit the geometry of this shape, when it is selected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowInplaceEdit">
            <summary>
            Gets or sets whether the user is allowed to inplace edit this shape, when double clicked.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowUpdateBounds">
            <summary>
            Gets or sets whether the user is allowed to update the bounds of this shape.
            This is only applicable to 2D shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.HorizontalPlacement">
            <summary>
            Gets or sets the horizontal placement of the shape within the arrange slot provided by an automatic layout.
            By default set to Fit.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.VerticalPlacement">
            <summary>
            Gets or sets the vertical placement of the shape within the arrange slot provided by an automatic layout.
            By default set to Fit.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowLayoutsReglueBeginPoint">
            <summary>
            Gets or sets whether layouts can reglue the begin point. 
            Applicalbe only if this is a 1D shape. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.AllowLayoutsReglueEndPoint">
            <summary>
            Gets or sets whether layouts can reglue the end point. 
            Applicalbe only if this is a 1D shape. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.RouteThroughHorizontally">
            <summary>
            Gets or sets whether routes are allowed to pass trough this shape horizontally.
            Only applicable if ShapeType is set to Shape2D. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.RouteThroughVertically">
            <summary>
            Gets or sets whether routes are allowed to pass trough this shape vertically.
            Only applicable if ShapeType is set to Shape2D. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.CanSplit">
            <summary>
            Gets or sets whether the shape can split 1D shapes when dropped on them.
            The value of this property has no effect if the page interaction Enable1DShapeSplitting property is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Splittable">
            <summary>
            Gets or sets whether the shape is splittable and can be split by 2D shapes dropped on it.
            The value of this property has no effect if the page interaction Enable1DShapeSplitting property is set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.OwnerGroup">
            <summary>
            Gets the group in which the shape resides, if any
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ThemeId">
            <summary>
            Gets/Sets the value of the ThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ColorThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose color palette to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.StyleThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose style component to use.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.FontThemeId">
            <summary>
            Gets/Sets the value of the FontThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.ConnectorThemeId">
            <summary>
            Gets/Sets the value of the ConnectorThemeId property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.VariantColorIndex">
            <summary>
            Gets/Sets the value of the VariantColorIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.VariantStyleIndex">
            <summary>
            Gets/Sets the value of the VariantStyleIndex property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetTextSelection">
            <summary>
            Gets the text selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetTextBlock">
            <summary>
            Helper method that gets a NTextBlock object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetTableBlock">
            <summary>
            Helper method that gets a NTableBlock object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetTextBlockContentNoCreate">
            <summary>
            Gets the text block content without creating a text block if it not already created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.MoveTextBlockBelowShape">
            <summary>
            Moves the text block of the shape below it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Init2DShape">
            <summary>
            Helper method that sets the ShapeType to Shape2D and places the local pin point inside the center of the shape Width and Height (via expressions).
            Additionally, if the shape was previously a Shape1D, this method unglues the Begin and End points and destroys any expressions associated with the shape Angle, Width, Height, PinX and PinY properties.
            <remarks>
            ShapeType = ENShapeType.Shape2D;
            SetFx(NShape.LocPinXProperty, new NShapeWidthFactorFx(0.5f));
            SetFx(NShape.LocPinYProperty, new NShapeHeightFactorFx(0.5f));
            </remarks>
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Resize(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.ENCompassDirection,System.Boolean)">
            <summary>
            Resizes the shape box by setting the specified value to the box point corresponding to a compass direction.
            </summary>
            <param name="point"></param>
            <param name="direction"></param>
            <param name="preserveAspectRatio"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Resize(System.Double,System.Double)">
            <summary>
            Changes the shape Width and Height.
            </summary>
            <param name="newWidth"></param>
            <param name="newHeight"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetWidth(System.Double)">
            <summary>
            Sets the shape Width. 
            If the shape is inside a group, this method updates the expression for shape Width. 
            If the shape is inside a page, this method sets a constant value to the shape Width.
            </summary>
            <param name="newWidth"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetHeight(System.Double)">
            <summary>
            Sets the shape Height. 
            If the shape is inside a group, this method updates the expression for shape Height. 
            If the shape is inside a page, this method sets a constant value to the shape Height.
            </summary>
            <param name="newHeight"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetLocPinPoint">
            <summary>
            Gets the local pin point position (in local coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetLocPinPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the local pin point position (in local coordinates).
            By default the local pin point is specified relatively to the shape width and height.
            This implementation sets proportional expressions to the LocPinX and LocPinY properties.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetLocPinPoint(System.Double,System.Double)">
            <summary>
            Sets the local pin point position (in local coordinates).
            By default the local pin point is specified relatively to the shape width and height.
            This implementation sets proportional expressions to the LocPinX and LocPinY properties.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPinPoint">
            <summary>
            Gets the pin point position (in parent coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPinPointInWHBox">
            <summary>
            Gets the pin point position (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPinPointInPage">
            <summary>
            Gets the pin point position in page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetPinPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the pin point position (in parent coordinates). 
            This operation unglues the shape from its master (if any).
            If the shape resides in a group, the Pin is expressed as factor expressions of the group dimensions.
            If the shape resides in a page, the Pin is set to constant values.
            </summary>
            <param name="pt">New pin point position (in parent coordinates).</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetPinPoint(System.Double,System.Double)">
            <summary>
            Sets the pin point position (in parent coordinates). 
            This operation unglues the shape from its master (if any).
            If the shape resides in a group, the Pin is expressed as factor expressions of the group dimensions.
            If the shape resides in a page, the Pin is set to constant values.
            </summary>
            <param name="x">New pin point X position (in parent coordinates).</param>
            <param name="y">New pin point Y position (in parent coordinates).</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetAngle(Nevron.Nov.NAngle)">
            <summary>
            Sets the shape angle relatively to its parent (i.e. Page or Group).
            This operation unglues the shape from its master (if any).
            If the shape is inside the page, this method sets a constant value to the Angle property.
            If the shape is inside a group, this method also updates the expressions of the Width and Height properties, depending on the ResizeInGroup setting.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Rotate(Nevron.Nov.NAngle)">
            <summary>
            Rotates the shape with the specified angle amount.
            Internally this method calls SetAngle with a value equal to Angle + angle.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueMasterPortToPort(Nevron.Nov.Diagram.NPort,Nevron.Nov.Diagram.NPort)">
            <summary>
            Glues (connects) a port of this shape to a port of the master shape.
            This type of glue translates the shape to match the port locations,
            and rotates the shape to match the port directions.
            </summary>
            <param name="slavePort"></param>
            <param name="masterPort"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UnglueFromMaster">
            <summary>
            Unglues (disconnects) the outward connection of this shape if any.
            </summary>
            <remarks>
            <para>
            The outward connection for a shape controls the shape PinX, PinY and Angle properties 
            by binding them to the aspect and element defined by the MasterElementRef and MasterGlue properties.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Init1DShape(Nevron.Nov.Diagram.EN1DShapeXForm)">
            <summary>
            Helper method for setting up a 1D shape.
            Sets the ShapeType to 1D.
            <para>
            If xformType is Vector, the shape transform is initialized as a vector connecting the begin and end points, such that:
            Binds the Width to the distance between the Begin and End points.
            Binds the Angle to the angle formed by the line connecting the Begin and End points and the X axis.
            Binds the PinX and PinY to the middle point of the line connecting the Begin and End points.
            Binds the LocPinX and LocPinY to the center of the shape local alignment box.
            </para>
            <para>
            If xformType is Box, the shape transform is initialized as a vector connecting the begin and end points, such that:
            Binds the Width to the X distance between the Begin and End points.
            Binds the Height to the Y distance between the Begin and End points.
            Sets the angle to zero.
            Binds the PinX and PinY to the middle point of the line connecting the Begin and End points.
            Binds the LocPinX and LocPinY to the center of the shape.
            </para>
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetBeginPoint">
            <summary>
            Gets the begin point of the shape (in parent coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetBeginPointInPage">
            <summary>
            Gets the begin point of the shape in page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetBeginPointInDrawing">
            <summary>
            Gets the begin point of the shape in drawing coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetBeginPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets a constant begin point of the shape (in parent coordinates).
            This implementation Unglues the begin point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetEndPoint">
            <summary>
            Gets the end point of the shape (in parent coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetEndPointInPage">
            <summary>
            Gets the end point of the shape (in page coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetEndPointInDrawing">
            <summary>
            Gets the end point of the shape in drawing coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetEndPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets a constant end point of the shape (in parent coordinates).
            This implementation Unglues the end point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToGeometryIntersection(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues (connects) the begin point of this shape to the intersection point between 
            the vector formed by the FROM shape center and the begin-point direction vector and the FROM shape geometry.
            </summary>
            <param name="fromShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToGeometryContour(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Glues (connects) the begin point of this shape to a factor location on the specified FROM shape geometry contour.
            0 is the begin of the countour, 1 is the end of the contour.
            </summary>
            <param name="fromShape"></param>
            <param name="locationFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToGeometryContour(Nevron.Nov.Diagram.NShape,System.Double,System.Double)">
            <summary>
            Glues (connects) the begin point of this shape to a factor location on the specified FROM shape geometry contour.
            0 is the begin of the countour, 1 is the end of the contour.
            </summary>
            <param name="fromShape"></param>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToGeometryVertex(Nevron.Nov.Diagram.NGeometryCommand,System.Int32)">
            <summary>
            Glues the begin point of the shape to the vertex of the specified geometry command.
            </summary>
            <param name="fromCommand"></param>
            <param name="vertexIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToPort(Nevron.Nov.Diagram.NPort)">
            <summary>
            Glues the begin point of this shape to the specified port
            </summary>
            <param name="fromPort"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToNearestPort(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues the begin point of this shape to the nearest port of the specified FROM shape.
            </summary>
            <param name="fromShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToShapeBoxIntersection(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues (connects) the begin point of this shape to the intersection point between 
            the vector formed by the FROM shape center and the begin-point direction vector and the FROM shape Width/Height box.
            </summary>
            <param name="fromShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToShapeBox(Nevron.Nov.Diagram.NShape,System.Double,System.Double)">
            <summary>
            Glues the begin point of the shape to a point defined by factors in the specified FROM shape box.
            </summary>
            <param name="fromShape"></param>
            <param name="widthFactor"></param>
            <param name="heightFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToShapeLine(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Glues the begin point of the shape to a factor location along the FROM shape line. 
            0 is the begin of the line, 1 is the end of the line.
            </summary>
            <param name="fromShape"></param>
            <param name="locationFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueBeginToShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues the begin point to the specified shape. 
            The type of glue that is performed depends on the shape.DefaultShapeGlue property.
            </summary>
            <param name="fromShape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.TryGlueEndPoint(System.Boolean,Nevron.Nov.Diagram.NSnapPointResult)">
            <summary>
            Glues the begin or end point of the shape to a snap point result.
            Returns true, if successfully glued to a port, shape or geometry. 
            Otherwise returns false.
            </summary>
            <param name="begin"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToGeometryIntersection(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues (connects) the end point of this shape to the intersection point between 
            the vector formed by the TO shape center and the end-point direction vector and the TO shape geometry.
            </summary>
            <param name="toShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToGeometryContour(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Glues (connects) the end point of this shape to a factor location on the specified TO shape geometry contour.
            0 is the end of the countour, 1 is the end of the contour.
            </summary>
            <param name="toShape"></param>
            <param name="locationFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToGeometryContour(Nevron.Nov.Diagram.NShape,System.Double,System.Double)">
            <summary>
            Glues (connects) the end point of this shape to a factor location on the specified TO shape geometry contour.
            0 is the end of the countour, 1 is the end of the contour.
            </summary>
            <param name="toShape"></param>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToGeometryVertex(Nevron.Nov.Diagram.NGeometryCommand,System.Int32)">
            <summary>
            Glues the end point of the shape to the vertex of the specified geometry command.
            </summary>
            <param name="toCommand"></param>
            <param name="vertexIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToPort(Nevron.Nov.Diagram.NPort)">
            <summary>
            Glues the end point of this shape to the specified port
            </summary>
            <param name="toPort"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToNearestPort(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues the end point of this shape to the nearest port of the specified TO shape.
            </summary>
            <param name="toShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToShapeBoxIntersection(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues (connects) the end point of this shape to the intersection point between 
            the vector formed by the TO shape center and the end-point direction vector and the TO shape Width/Height box.
            </summary>
            <param name="toShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToShapeBox(Nevron.Nov.Diagram.NShape,System.Double,System.Double)">
            <summary>
            Glues the end point of the shape to a point defined by factors in the specified TO shape box.
            </summary>
            <param name="toShape"></param>
            <param name="widthFactor"></param>
            <param name="heightFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToShapeLine(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Glues the end point of the shape to a factor location along the TO shape line. 
            0 is the begin of the line, 1 is the end of the line.
            </summary>
            <param name="toShape"></param>
            <param name="locationFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GlueEndToShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Glues the end point to the specified shape. 
            The type of glue that is performed depends on the shape.DefaultShapeGlue property.
            </summary>
            <param name="toShape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.TryGlueEndPoint(System.Boolean,Nevron.Nov.Diagram.NSnapPointResult,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Glues the begin or end point of the shape to a snap point result.
            Returns true, if successfully glued to a port, shape or geometry. 
            Otherwise returns false.
            </summary>
            <param name="begin"></param>
            <param name="res"></param>
            <param name="toolTip"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UnglueBegin">
            <summary>
            Unglues the begin point
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UnglueEnd">
            <summary>
            Unglues the end point
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UnglueAll">
            <summary>
            Destroys the shape begin glue, end glue and master glue, if any.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UnglueFromIncommingShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Unglues this shape from the specified incomming shape. 
            If the specified shape is not an incomming shape, does nothing.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UnglueFromOutgoingShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Unglues this shape from the specified outgoing shape. 
            If the specified shape is not an outgoing shape, does nothing.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetWHBox">
            <summary>
            Gets the box formed by the shape Width and Height (in shape local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetWHBoxInParent">
            <summary>
            Gets the box formed by the shape Width and Height, projected to the shape parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetAlignBoxInPage">
            <summary>
            Gets the alignment box of the shape. 
            For a 2D shape this is the bounds of the shape box projection in page coordinates.
            For a 1D shape this is the bounds of the shape end-points projection in page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetAlignBoxInParent">
            <summary>
            Gets the alignment box of the shape. 
            For a 2D shape this is the bounds of the shape box projection in parent coordinates.
            For a 1D shape this is the bounds of the shape end-points projection in parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.AlignInPage(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the left-top corner of the shape Alignment Box in page coordinates to be the specified point.
            This method is internally performing a translation of the shape.
            </summary>
            <param name="originInPage"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the bounding box the shape to be the specified rectangle (in parent coordinates).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetBounds(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets the bounding box the shape to be the specified rectangle (in parent coordinates).
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetArrangeSlot(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the arrange slot of the shape and positions it into it taking into account the
            horizontal and vertical placement specified in the <see cref="P:Nevron.Nov.Diagram.NShape.LayoutData"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetArrangeSlot(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets the arrange slot of the shape and positions it into it taking into account the
            horizontal and vertical placement specified in the <see cref="P:Nevron.Nov.Diagram.NShape.LayoutData"/>.
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.UpdateBounds">
            <summary>
            Updates the Width and Height box of the shape to encompass the geometry and inner shapes of the shape.
            This operation should be carefully used, since it refactors the geometry expressions to be proportional to the new shape bounds.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.TryGetBounds(Nevron.Nov.Diagram.ENShapeBoundsMask,Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the specified shape bounds (in shape coordinates)
            </summary>
            <param name="boundsMask"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetFromToShapes">
            <summary>
            Gets a list of the shapes to whose inward ports, the plugs of this shape are connected
            </summary>
            <returns>list of shapes connected to this shape plugs</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetIncomingShapes">
            <summary>
            Gets a list of the 1D shapes whose end plug is connected to an inward port of this shape
            </summary>
            <returns>list of incomming shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetOutgoingShapes">
            <summary>
            Gets a list of the 1D shapes whose start plug is connected to an inward port of this shape
            </summary>
            <returns>list of outgoing shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetSlaveShapes">
            <summary>
            Gets a list of the shapes, which consider this shape as master (i.e. are glued in a master-slave manner)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetReflexiveShapes">
            <summary>
            Gets a list of the 1D shapes whose start and end plugs are connected to inward port(s) of this shape 
            (e.g. 1D shapes, which start and end in this shape)
            </summary>
            <returns>list of reflexive shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetSourceShapes">
            <summary>
            Gets a list of the source shapes (e.g. the shapes which are connected to the start plug of incoming shapes).
            </summary>
            <returns>list of source shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetDestinationShapes">
            <summary>
            Gets a list of the destination shapes (e.g. the shapes which are connected to the end plug of outgoing shapes).
            </summary>
            <returns>list of destination shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetNeighbourShapes">
            <summary>
            Gets the union of the Source and Destination shapes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPredecessorShapes">
            <summary>
            Gets a list of the predecessor shapes (e.g. SourceShapes + the predecessor shapes of the source shapes)
            </summary>
            <returns>list of predecessor shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetSuccessorShapes">
            <summary>
            Gets a list of the successor shapes (e.g. DestinationShapes + the successor shapes of the destination shapes)
            </summary>
            <returns>list of successor shapes</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetAccessibleShapes">
            <summary>
            Gets a list of the accessible shapes (e.g. NeighbourShapes + the accessible shapes of the neighbour shapes)
            </summary>
            <returns>list of successor shapes</returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.HasOutwardPorts">
            <summary>
            Determines whether the shape has outward ports
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.HasInwardPorts">
            <summary>
            Determines whether the shape has inward ports
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetPortByName(System.String)">
            <summary>
            Gets the first port with the specified name. Returns null if no such port exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShape.Text">
            <summary>
            A shortcut property that gets/sets the shape text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.StartInplaceEditing">
            <summary>
            Starts inplace editing for this shape, by showing the inplace editor of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.StartInplaceEditing(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Starts inplace editing for this shape, by showing the inplace editor of the shape.
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetMoveSlaves">
            <summary>
            Gets a list of shapes which will be moved when this shape is moved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.Split(Nevron.Nov.Diagram.NShape)">
            <summary>
            Splits this shape with the given 2D shape. Works only if this shape is a splittable 1D shape
            (<see cref="P:Nevron.Nov.Diagram.NShape.Splittable"/> = true) and the given 2D shape can split shapes
            (<see cref="P:Nevron.Nov.Diagram.NShape.CanSplit"/> = true).
            </summary>
            <param name="shape2D"></param>
            <returns>Returns the newly created connector result of the splitting.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.TryGetShapePropertyValue(System.String,Nevron.Nov.NVariant@)">
            <summary>
            Tries to get the value of the specified property for the this shape.
            </summary>
            <param name="propertyName"></param>
            <param name="variant"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SetShapePropertyValue(System.String,Nevron.Nov.NVariant)">
            <summary>
            Sets a shape property with the given name and variant to the <see cref="P:Nevron.Nov.Diagram.NShape.Properties"/>
            collection of this shape.
            </summary>
            <param name="shape"></param>
            <param name="propertyName"></param>
            <param name="image"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Updates any references or cache related to the visitor of the node children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the visitor of the node ancestors
            </summary>
            <remarks>
            Overriden to cache references to the owner page and group
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnOwnerPageChanged(Nevron.Nov.Diagram.NPage)">
            <summary>
            Called when the owner page of the shape has changed.
            </summary>
            <param name="oldOwnerPage"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnProtectionChanged">
            <summary>
            Called when a shape protection has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.MeasureContent">
            <summary>
            Measures the desired size of the element content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Layouts the content of the element inside the specified content area
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnPortsChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called whenever the ports count or ports properties have changed.
            Raises the PortsChanged event.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnGeometryChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called whenever the geometry has changed.
            Raises the GeometryChanged event.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnControlsChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called whenever the geometries count or properties have changed.
            Raises the ControlsChanged event.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnBeginPointGlueChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the BeginPointGlue has changed.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnEndPointGlueChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the BeginGlue or EndGlue has changed.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnMasterGlueChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the MasterElementRef property has changed.
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnTextBlockChanged(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChangeData)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnShapeTypeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShapeType has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnShowHandlesChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowHandles has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnCodeBehindSourceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the shape behavior has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnSizeChanging(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called whenever the Width or Height properties are about to change
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnSizeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called whenever the Width or Height properties have changed.
            Raises the SizeChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnEndPointsChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called whenever the geometries count or properties have changed.
            Raises the EndPoints event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnTransformChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the transformation from local to parent coordinates of this shape has changed.
            Raises the transform changed event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnPageTransformChanged">
            <summary>
            Called when the transformation from local to page coordinates of this shape has changed.
            Raises the page transform changed event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetDisplayBoundsInPage">
            <summary>
            Gets the display bounds of the shape in page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.GetDisplayBounds">
            <summary>
            Gets the current display bounds of this shape (in local coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateGeometry">
            <summary>
            Called to create a default geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateTextBlock">
            <summary>
            Called to create a default text block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateImageBlock">
            <summary>
            Called to create a default image block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateStyle">
            <summary>
            Called to create the default shape style.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateInplaceEditor">
            <summary>
            Creates the inplace edit control that this shape must use.
            This implementation creates a text box that is sized to the text block and positioned to the text block pin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.StartEditing(Nevron.Nov.Diagram.NInplaceEditor,Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Focuses the inplace editor content
            </summary>
            <param name="editor"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateInplaceEditorContent(Nevron.Nov.Diagram.NInplaceEditor)">
            <summary>
            Creates and initializes the content of the scpecified inplace editor.
            This implementation creates a text box.
            </summary>
            <param name="editor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.AbortInplaceEditing(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Aborts the inplace editing
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CommitInplaceEditing(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Commits the inplace editing of the specified editor. Note that the editor must be created by this shape's CreateInplaceEditor method.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateFormatGeometryCommandsMenuItem">
            <summary>
            Creates the View menu item, that contains formatting commands like Fill, Stroke and Shadow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateFormatTextBlockCommandsMenuItem">
            <summary>
            Creates the Format Text menu item, that contains formatting commands like Fill, Stroke and Shadow.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateActionCommands">
            <summary>
            Creates the action commands - Flip HV/Rotate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates the custom commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.OnDeserialized(Nevron.Nov.Serialization.NDomDeserializationContext)">
            <summary>
            Called when the node is deserialized
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.NShapeSchema">
            <summary>
            Schema associated with NShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.TransformChangedEvent">
            <summary>
            Reference to the transform changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.PageTransformChangedEvent">
            <summary>
            Reference to the page transform changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.GeometryChangedEvent">
            <summary>
            Reference to the geometries changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.TextBlockChangedEvent">
            <summary>
            Reference to the text block changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.PortsChangedEvent">
            <summary>
            Reference to the PortsChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ControlsChangedEvent">
            <summary>
            Reference to the controls changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.SizeChangedEvent">
            <summary>
            Reference to the size changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.BeginPointChangedEvent">
            <summary>
            Reference to the BeginPointChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.EndPointChangedEvent">
            <summary>
            Reference to the EndPointChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.BeginPointGlueChangedEvent">
            <summary>
            Reference to the BeginPointGlueChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.EndPointGlueChangedEvent">
            <summary>
            Reference to the EndPointGlueChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.MasterGlueChangedEvent">
            <summary>
            Reference to the MasterGlueChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.QueryAutoConnectButtonContentEvent">
            <summary>
            Reference to the QueryAutoConnectButtonContent event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.GeometryChild">
            <summary>
            Reference to the Geometry child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ControlsChild">
            <summary>
            Reference to the Controls child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.PortsChild">
            <summary>
            Reference to the Ports child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ScratchesChild">
            <summary>
            Reference to the Scratches child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.MenuItemsChild">
            <summary>
            Reference to the MenuItems child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.UserCellsChild">
            <summary>
            Reference to the UserCells child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.PropertiesChild">
            <summary>
            Reference to the Properties child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.LayoutDataChild">
            <summary>
            Reference to the LayoutData child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.StyleChild">
            <summary>
            Reference to the Style child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.WidgetChild">
            <summary>
            Reference to the Widget child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ImageBlockChild">
            <summary>
            Reference to the ImageBlock child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.TextBlockChild">
            <summary>
            Reference to the TextBlock child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.BeginPointGlueChild">
            <summary>
            Reference to the BeginPoint property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.EndPointGlueChild">
            <summary>
            Reference to the EndGlue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.MasterGlueChild">
            <summary>
            Reference to the MasterGlue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.HyperlinkChild">
            <summary>
            Reference to the Hyperlink child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ShapeTypeProperty">
            <summary>
            Reference to the ShapeType property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.VisibleProperty">
            <summary>
            Reference to the Visibility property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.GraphPartProperty">
            <summary>
            Reference to the GraphPart property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ShowShapeHandlesProperty">
            <summary>
            Reference to the ShowShapeHandles property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ShowControlHandlesProperty">
            <summary>
            Reference to the ShowControlHandles property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.DefaultShapeGlueProperty">
            <summary>
            Reference to the DefaultShapeGlue property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ResizeInGroupProperty">
            <summary>
            Reference to the ResizeInGroup property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.MoveSlavesProperty">
            <summary>
            Reference to the MoveSlaves property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.EditHeightIn1DProperty">
            <summary>
            Reference to the EditHeightIn1D property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.CodeBehindSourceProperty">
            <summary>
            Reference to the CodeBehind property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.BeginXProperty">
            <summary>
            Reference to the BeginX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.BeginYProperty">
            <summary>
            Reference to the BeginY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.EndXProperty">
            <summary>
            Reference to the EndX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.EndYProperty">
            <summary>
            Reference to the EndY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AngleProperty">
            <summary>
            Reference to the Angle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.PinXProperty">
            <summary>
            Reference to the PinX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.PinYProperty">
            <summary>
            Reference to the PinY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.LocPinXProperty">
            <summary>
            Reference to the LocPinX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.LocPinYProperty">
            <summary>
            Reference to the LocPinY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.LocPinRelativeProperty">
            <summary>
            Reference to the LocPinRelative property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.FlipXProperty">
            <summary>
            Reference to the FlipX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.FlipYProperty">
            <summary>
            Reference to the FlipY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowFormatProperty">
            <summary>
            Reference to the AllowFormat property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowResizeXProperty">
            <summary>
            Reference to the AllowResizeX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowResizeYProperty">
            <summary>
            Reference to the AllowResizeY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowChangeAspectRatioProperty">
            <summary>
            Reference to the AllowChangeAspectRatio property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowMoveXProperty">
            <summary>
            Reference to the AllowMoveX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowMoveYProperty">
            <summary>
            Reference to the AllowMoveY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowRotateProperty">
            <summary>
            Reference to the AllowRotate property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowChangePinPointProperty">
            <summary>
            Reference to the AllowChangePinPoint property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowChangeBeginPointProperty">
            <summary>
            Reference to the AllowChangeBeginPoint property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowChangeEndPointProperty">
            <summary>
            Reference to the AllowChangeEndPoint property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowGeometryEditProperty">
            <summary>
            Reference to the AllowGeometryEdit property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowInplaceEditProperty">
            <summary>
            Reference to the AllowInplaceEdit property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowUpdateBoundsProperty">
            <summary>
            Reference to the AllowUpdateBounds property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.HorizontalPlacementProperty">
            <summary>
            Reference to the HorizontalPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.VerticalPlacementProperty">
            <summary>
            Reference to the VerticalPlacement property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowLayoutsReglueBeginPointProperty">
            <summary>
            Reference to the AllowLayoutsReglueBeginPoint property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.AllowLayoutsReglueEndPointProperty">
            <summary>
            Reference to the AllowLayoutsReglueEndPoint property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.RouteThroughHorizontallyProperty">
            <summary>
            Reference to the RouteThroughHorizontally property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.RouteThroughVerticallyProperty">
            <summary>
            Reference to the RouteThroughVertically property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.CanSplitProperty">
            <summary>
            Reference CanSplit property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.SplittableProperty">
            <summary>
            Reference Splitable property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ThemeIdProperty">
            <summary>
            Reference to the ThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ColorThemeIdProperty">
            <summary>
            Reference to the ColorThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.StyleThemeIdProperty">
            <summary>
            Reference to the StyleThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.FontThemeIdProperty">
            <summary>
            Reference to the FontThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.ConnectorThemeIdProperty">
            <summary>
            Reference to the ConnectorThemeId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.VariantColorIndexProperty">
            <summary>
            Reference to the VariantColorIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShape.VariantStyleIndexProperty">
            <summary>
            Reference to the VariantStyleIndex property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.IsConnector(Nevron.Nov.Diagram.NShape)">
            <summary>
            Gets whether the given shape is a connector, which is true if it is a 1D shape and its
            UserClass is equal to "Connector".
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateLineShape">
            <summary>
            Initializes a 1D shape, the geometry of which draws a line from the Begin to the End point of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateRectangle">
            <summary>
            Creates a 2D shape, the geometry of which draws a rectangle inside the WH box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.CreateEllipse">
            <summary>
            Creates an ellipse shape
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShape.NShapeDesigner">
            <summary>
            Designer for NShape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.NShapeDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.NShapeDesigner.GetChildBrowsable(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChild)">
            <summary>
            Gets whether the specified child of the specified node is browsable or not.
            </summary>
            <param name="node"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShape.NShapeDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeBlock">
            <summary>
            A shape part, which represents a rotatable box inside the shape coordinate system. Serves as base class for NTextBlock and NImageBlock
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Angle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.PinX">
            <summary>
            Gets or sets the pin point X coordinate (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.PinY">
            <summary>
            Gets or sets the pin point Y coordinate (in parent coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.LocPinX">
            <summary>
            Gets or sets the local pin point X coordinate (in local coordinates or relative local coordinate depending on LocPinRelative), 
            to which the pin point X coordinate is mapped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.LocPinY">
            <summary>
            Gets or sets the local pin point Y coordinate (in local coordinates or relative local coordinate depending on LocPinRelative), 
            to which the pin point Y coordinate is mapped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.LocPinRelative">
            <summary>
            Gets or sets whether the local pin point is positioned relatively to the text block Width and Height.
            By default true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <remarks>
            Overriden to render the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetPaintCacheMode">
            <summary>
            Gets the mode in which this visual attemps to cache its display.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.CanTransform">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetTransform">
            <summary>
            Overriden to return the block transform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetClip">
            <summary>
            Overrien to return the border edge of the text block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the text block by point
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests the text block by region
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Visible">
            <summary>
            Gets or sets whether this shape block is visible or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.BackgroundFill">
            <summary>
            Gets or sets the shape blcok background fill.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Border">
            <summary>
            Gets or sets the border.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Margins">
            <summary>
            Gets or sets the margins 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.BorderThickness">
            <summary>
            Gets or sets the thickness of the box border sides.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Padding">
            <summary>
            Gets or sets the padding applied to the box content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Width">
            <summary>
            Gets or sets the text block width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.Height">
            <summary>
            Gets or sets the text block height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.DesiredWidth">
            <summary>
            Gets the desired width text block.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.DesiredHeight">
            <summary>
            Gets the desired height text block
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeBlock.DesiredSize">
            <summary>
            Gets the desired size of the shape block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetPinPoint">
            <summary>
            Gets the pin point position (in shape coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.SetPinPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the pin point position (in shape coordinates). 
            This operation unglues the text pin from its master (if any).
            If the text resides in a shape, the Pin is expressed as factor expressions of the shape dimensions.
            If the text does not reside in a page, the Pin is set to constant values.
            </summary>
            <param name="pt">new pin point position (in parent coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetLocPinPoint">
            <summary>
            Gets the local pin point position (in shape block coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.SetLocPinPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the loc pin point position (in shape block coordinates). 
            </summary>
            <param name="pt">new pin point position (in parent coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.Unglue">
            <summary>
            Unglues the text block (clears the expressions set to the PinXProperty, PinYProperty and AngleProperty)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetContentEdge">
            <summary>
            Gets the content edge (inner edge) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetContentEdge(System.Double,System.Double)">
            <summary>
            Gets the content edge (inner edge) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetPaddingEdge">
            <summary>
            Gets the padding edge (padding area) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetPaddingEdge(System.Double,System.Double)">
            <summary>
            Gets the padding edge (padding area) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetBorderEdge">
            <summary>
            Gets the border edge (border area) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetBorderEdge(System.Double,System.Double)">
            <summary>
            Gets the border edge (border area) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetInsets">
            <summary>
            Gets the element insets, which is the sum of the margins, padding and border thickness.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.MeasureContent">
            <summary>
            Measures the element content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.ArrangeContent">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.OnDesiredSizeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the desired width or the desired height has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Called when the background of the text block needs to be painted
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.CreateBorderWall(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Creates the border wall of the box.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.GetDrawingView">
            <summary>
            Gets the drawing view that host this rich text block editor
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.NShapeBlockSchema">
            <summary>
            Schema associated with NShapeBlock.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.AngleProperty">
            <summary>
            Reference to the Angle property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.PinXProperty">
            <summary>
            Reference to the PinX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.PinYProperty">
            <summary>
            Reference to the PinY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.LocPinXProperty">
            <summary>
            Reference to the LocPinX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.LocPinYProperty">
            <summary>
            Reference to the LocPinY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.LocPinRelativeProperty">
            <summary>
            Reference to the LocPinRelative property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.PaddingProperty">
            <summary>
            Reference to the Padding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.BorderThicknessProperty">
            <summary>
            Reference to the BorderThickness property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.MarginsProperty">
            <summary>
            Reference to the Margins property
            </summary>	
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.BorderProperty">
            <summary>
            Reference to the border property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.BackgroundFillProperty">
            <summary>
            Reference to the background fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.DesiredWidthProperty">
            <summary>
            Reference to the DesiredWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeBlock.DesiredHeightProperty">
            <summary>
            Reference to the DesiredHeight property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeBlock.NShapeBlockDesigner">
            <summary>
            Designer for NTextBlock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.NShapeBlockDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeBlock.NShapeBlockDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            Appends the expression types that can be applied to the specified property.
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeCollection">
            <summary>
            A collection of NShape elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCollection.OnChildInserting(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCollection.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCollection.OnChildRemoving(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeCollection.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeCollection.NShapeCollectionSchema">
            <summary>
            Schema associated with NShapeCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapePart">
            <summary>
            Serves as base class for all subelements of a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapePart.OwnerShape">
            <summary>
            Gets the shape, to which this shape part belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePart.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
            <remarks>
            Overriden to cache a reference to the owner shape
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePart.NShapePartSchema">
            <summary>
            Schema associated with NShapePart.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePart.ShapePartAbilities">
            <summary>
            Shape part abilities.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTaskShape">
            <summary>
            Task shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTaskShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTaskShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTaskShape.TaskType">
            <summary>
            Gets/Sets the value of the TaskType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTaskShape.Loop">
            <summary>
            Gets/Sets the value of the Loop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTaskShape.IsCompensation">
            <summary>
            Gets/Sets the value of the IsCompensation property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTaskShape.NTaskShapeSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTaskShape.TaskTypeProperty">
            <summary>
            Reference to the TaskType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTaskShape.LoopProperty">
            <summary>
            Reference to the Loop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTaskShape.IsCompensationProperty">
            <summary>
            Reference to the IsCompensation property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NVisualShapePart">
            <summary>
            Serves as base class for Geometry and TextBlock subelements of a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualShapePart.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NVisualShapePart.IsInConnector">
            <summary>
            Gets whether this visual shape part is in a connector.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NVisualShapePart.OwnerShape">
            <summary>
            Gets the shape, to which this shape part belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualShapePart.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to cache a reference to the owner shape.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVisualShapePart.NVisualShapePartSchema">
            <summary>
            Schema associated with NVisualShapePart
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControl">
            <summary>
            Represents a shape control point. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControl.Visible">
            <summary>
            Gets or sets whether this control point should be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControl.XBehavior">
            <summary>
            Gets or sets the way in which the control point X expression should be modified,
            when the point is interactively modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControl.YBehavior">
            <summary>
            Gets or sets the way in which the control point Y expression should be modified,
            when the point is interactively modified.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControl.CanGlue">
            <summary>
            Gets or sets whether the shape point can be glued when interactively moved by the user.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NControl.Tooltip">
            <summary>
            Gets or sets the tooltip (prompt) that is displayed 
            when the user hovers over the control point.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.SetLocation(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the location (X, Y properties) of the control point. The location is in local coordinates.
            Takes into account the XBehavior and YBehavior properties to properly update the X and Y expressions.
            Unglues the control point prior to the expressions update.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.GlueToGeometryContour(Nevron.Nov.Diagram.NShape,System.Double,System.Double)">
            <summary>
            Glues (connects) the control point to a factor location on the specified shape geometry contour.
            0 is the begin of the contour, 1 is the end of the contour.
            </summary>
            <param name="shape"></param>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.GlueToGeometryVertex(Nevron.Nov.Diagram.NGeometryCommand,System.Int32)">
            <summary>
            Glues the control point to a vertex of the specified geometry command.
            </summary>
            <param name="command"></param>
            <param name="vertexIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.GlueToPort(Nevron.Nov.Diagram.NPort)">
            <summary>
            Glues the control point to the specified port.
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.GlueToShapeBox(Nevron.Nov.Diagram.NShape,System.Double,System.Double)">
            <summary>
            Glues the control point to a point defined by factors in the specified shape box.
            </summary>
            <param name="shape"></param>
            <param name="widthFactor"></param>
            <param name="heightFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.GlueToShapeLine(Nevron.Nov.Diagram.NShape,System.Double)">
            <summary>
            Glues the control point to a factor location along the shape line. 
            0 is the begin of the line, 1 is the end of the line.
            </summary>
            <param name="shape"></param>
            <param name="locationFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.Unglue">
            <summary>
            Unglues the control
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControl.NControlSchema">
            <summary>
            Schema associated with NControl
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControl.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControl.XBehaviorProperty">
            <summary>
            Reference to the X Behavior property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControl.YBehaviorProperty">
            <summary>
            Reference to the Y Behavior property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControl.CanGlueProperty">
            <summary>
            Reference to the CanGlue property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControl.TooltipProperty">
            <summary>
            Reference to the Tooltip property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControl.NControlDesigner">
            <summary>
            Designer for NControl.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.NControlDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControl.NControlDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NControlCollection">
            <summary>
            A collection of NControl elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NControlCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called whenever the children of a node have changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NControlCollection.NControlCollectionSchema">
            <summary>
            Schema associated with NControlCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapePoint`1">
            <summary>
            Serves as base class for ports and control points.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="E:Nevron.Nov.Diagram.NShapePoint`1.LocationChanged">
            <summary>
            Occurs when the location of the shape point has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapePoint`1.X">
            <summary>
            Gets or sets the point X coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapePoint`1.Y">
            <summary>
            Gets or sets the point Y coordinate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapePoint`1.Glue">
            <summary>
            Gets or sets the point glue that glues the point X and Y and other properties.
            Use the Glue() methods for an easier way to work with glue.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.GetLocation">
            <summary>
            Gets the point location (in shape coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.SetLocation(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Must overriden to set the location of the shape point.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.GetLocationInPage">
            <summary>
            Gets the point location (in page coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.OnLocationChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the location of the shape point has changed. 
            Raises the LocationChangedEvent.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePoint`1.NShapePointSchema">
            <summary>
            Schema associated with NShapePoint
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePoint`1.GlueChild">
            <summary>
            Reference to the Glue child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePoint`1.XProperty">
            <summary>
            Reference to the X property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePoint`1.YProperty">
            <summary>
            Reference to the Y property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapePoint`1.LocationChangedEvent">
            <summary>
            Reference to the LocationChanged event
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapePoint`1.NShapePointDesigner">
            <summary>
            Designer for NShapePoint.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.NShapePointDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapePoint`1.NShapePointDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPort">
            <summary>
            Represents a shape port. 
            A port is a point in the shape local coordinate system, which is typically used in shape connections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="relative"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.#ctor(System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="relative"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.ToString">
            <summary>
            Gets the string representation of the shape
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.Name">
            <summary>
            Gets or sets the name of the port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.DirectionMode">
            <summary>
            Gets or sets the mode in which the port direction angle is determined. By default set to custom.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.DirX">
            <summary>
            Determines the x-component for the required alignment vector of a matching port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.DirY">
            <summary>
            Determines the y-component for the required alignment vector of a matching port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.Relative">
            <summary>
            Gets or sets whether the port coordinates are expressed in absolute or relative values.
            By default set to false, meaning that port coordinates are in absolute shape coordinates.
            </summary>
            <remarks>
            It is often required to make ports the coordinates of which are expressed relatively to the shape Width and Height.
            In such cases you may set the Relative property to true. 
            <br></br>
            For example: 
            if Relative is set to false, to define a port in the center of the shape you can set the "Width*0.5" and "Height*0.5" expressions to the X and Y coordindates of the port.
            This syntax requires one expressions per port coordinate.
            <br></br>
            if Relative is set to true, to define a port in the center of the shape you can set the X property to 0.5 and the Y property to 0.5.
            This syntax does not require expressions.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.GlueMode">
            <summary>
            Gets or sets the port glue mode, which defines the way in which this port can glue to other shapes ports 
            and whether other shapes end-points are allowed to glue to this port.
            By default set to <see cref="F:Nevron.Nov.Diagram.ENPortGlueMode.Inward"/>.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.IsInward">
            <summary>
            Gets whether the glue mode is either Inward or InwardOutward.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.IsOutward">
            <summary>
            Gets whether the glue mode is either Outward or InwardOutward.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.FlowMode">
            <summary>
            Gets or sets the port flow mode, which defines the way in which this port can glue to other shapes ports 
            and whether other shapes begin or end points are allowed to glue to this port.
            By default set to <see cref="F:Nevron.Nov.Diagram.ENPortFlowMode.InputOutput"/>.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.IsInput">
            <summary>
            Gets whether the glue mode is either Input or InputOutput.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPort.IsOutput">
            <summary>
            Gets whether the flow mode is either Output or InputOutput.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.TryGetDirectionVector(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to get a normalized direction vector of the port.
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.TryGetDirectionVectorInPage(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Gets the direction vector of the port, whose coordinates are (X + DirX, Y  + DirY) transformed to page coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.TryGetDirectionAngle(System.Double@)">
            <summary>
            Tries to get the direction angle of the port (in radians, in local coordinates).
            </summary>
            <param name="angle">direction angle (in radians)</param>
            <returns>true if direction angle can be provided, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.TryGetDirectionAngleInPage(System.Double@)">
            <summary>
            Gets the direction vector angle (in radians, in page coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.SetDirection(Nevron.Nov.ENBoxDirection)">
            <summary>
            Sets a direction vector for the this port
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.SetDirection(System.Double)">
            <summary>
            Sets a direction that represents the specified angle (in radians)
            </summary>
            <param name="angle">angle (in radians)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.CanGlueBegin">
            <summary>
            Determines whether a begin point can be glued to this port
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.CanGlueEnd">
            <summary>
            Determines whether an end point can be glued to this port
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.CanGluePort(Nevron.Nov.Diagram.NPort)">
            <summary>
            Determines whether 
            </summary>
            <param name="otherPort"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.GlueToGeometryContour(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Glues the port location and direction to a relative position along the owner shape geometry contour.
            </summary>
            <param name="locationFactor">relative location along the geometry contour (0 is the begin of the contour, 1 is the end of the contour)</param>
            <param name="locationOffset">absolute offset along the contour from the relatively calculated location</param>
            <param name="useContourOrientation">whether to use the orientation of the contour at the location or not</param>
            <param name="angleOffset">offset applied to the calculated direction angle</param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.GlueToGeometryContour(System.Double,System.Double)">
            <summary>
            Glues the port location to a relative position along the owner shape geometry contour. The direction is not affected by the this binding.
            </summary>
            <param name="locationFactor">relative location along the geometry contour (0 is the begin of the contour, 1 is the end of the contour)</param>
            <param name="locationOffset">absolute offset along the contour from the relatively calculated location</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.GlueToShapeLine(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Glues the port location and direction to a relative position along the owner shape line.
            </summary>
            <param name="locationFactor">relative location along the shape line (0 is the begin, 1 is the end)</param>
            <param name="locationOffset">absolute offset along the line from the relatively calculated location</param>
            <param name="useLineOrientation">whether to use the orientation of the line or not</param>
            <param name="angleOffset">offset applied to the calculated direction angle</param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.GlueToShapeLine(System.Double,System.Double)">
            <summary>
            Glues the port location to a relative position along the owner shape line. The direction is not affected by the this binding.
            </summary>
            <param name="locationFactor">relative location along the shape line (0 is the begin, 1 is the end)</param>
            <param name="locationOffset">absolute offset along the line from the relatively calculated location</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.Unglue">
            <summary>
            Unglues the control
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary change occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.GetLocation">
            <summary>
            Overriden to get the location of the port in shape coordinates. Takes into account the value of the Relative property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.SetLocation(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the port location (in shape local coordinates)
            </summary>
            <param name="pt"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.NPortSchema">
            <summary>
            Schema associated with NPort
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.NameProperty">
            <summary>
            Reference to the Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.DirectionModeProperty">
            <summary>
            Reference to the PortDirectionMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.DirXProperty">
            <summary>
            Reference to the X Behavior property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.DirYProperty">
            <summary>
            Reference to the Y Behavior property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.GlueModeProperty">
            <summary>
            Reference to the GlueMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.FlowModeProperty">
            <summary>
            Reference to the FlowMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPort.RelativeProperty">
            <summary>
            Reference to the Relative property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPort.NPortDesigner">
            <summary>
            Designer for NPort.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.NPortDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPort.NPortDesigner.AppendPropertyExpressionTypes(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.NProperty,Nevron.Nov.DataStructures.NList{System.Type})">
            <summary>
            
            </summary>
            <param name="targetElement"></param>
            <param name="targetProperty"></param>
            <param name="expressionTypes"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPortCollection">
            <summary>
            A collection of NPort elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortCollection.GetCanGlueBeginCount">
            <summary>
            Gets the count of ports in this collection that can glue to a begin point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortCollection.GetCanGlueEndCount">
            <summary>
            Gets the count of ports in this collection that can glue to an end point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortCollection.GetPortByName(System.String)">
            <summary>
            Gets the first port with the specified name. Returns null if no such port exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPortCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called whenever the children of a node have changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPortCollection.NPortCollectionSchema">
            <summary>
            Schema associated with NPortCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableCellPort">
            <summary>
            Represents a port which is attached to a table cell
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableCellPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableCellPort.#ctor(Nevron.Nov.Text.NTableCell,Nevron.Nov.Diagram.ENTableCellPortDirection)">
            <summary>
            Initializer contructor
            </summary>
            <param name="cell"></param>
            <param name="direction"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableCellPort.TableCellRef">
            <summary>
            Gets/Sets the value of the table cell this port is attached to
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableCellPort.TableCell">
            <summary>
            Gets the table cell of this port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableCellPort.Direction">
            <summary>
            Gets or sets whether the port is attached to the cell top or bottom side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableCellPort.NTableCellPortSchema">
            <summary>
            Schema associated with NTableCellPort
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableCellPort.TableCellRefProperty">
            <summary>
            Reference to the TableCellProperty.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableCellPort.DirectionProperty">
            <summary>
            Reference to the DirectionProperty
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableColumnPort">
            <summary>
            Represents a port which is attached to a table col
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableColumnPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableColumnPort.#ctor(Nevron.Nov.Text.NTableColumn,System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="column"></param>
            <param name="topOrBottom"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableColumnPort.TableColumnRef">
            <summary>
            Gets/Sets the value of the table col this port is attached to
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableColumnPort.TableColumn">
            <summary>
            Gets the table column of this port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableColumnPort.TopOrBottom">
            <summary>
            Gets or sets whether the port is attached to the col top or bottom side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableColumnPort.NTableColumnPortSchema">
            <summary>
            Schema associated with NTableColumnPort
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableColumnPort.TableColumnRefProperty">
            <summary>
            Reference to the TableColProperty.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableColumnPort.TopOrBottomProperty">
            <summary>
            Reference to the TopOrBottomProperty
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTablePort">
            <summary>
            Represents a port which is attached to a table
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTablePort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTablePort.GetLocation">
            <summary>
            Gets the port location.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTablePort.BlockToShape(Nevron.Nov.Text.NBlock,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts the specified point in block local coordinates to shape coordinates
            </summary>
            <param name="block"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTablePort.NTablePortSchema">
            <summary>
            Schema associated with NTablePort
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableRowPort">
            <summary>
            Represents a port which is attached to a table row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableRowPort.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableRowPort.#ctor(Nevron.Nov.Text.NTableRow,System.Boolean)">
            <summary>
            Initializer contructor
            </summary>
            <param name="row"></param>
            <param name="leftOrRight"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableRowPort.TableRowRef">
            <summary>
            Gets/Sets the value of the table row this port is attached to
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableRowPort.TableRow">
            <summary>
            Gets the table column of this port
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableRowPort.LeftOrRight">
            <summary>
            Gets or sets whether the port is attached to the row left or right side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableRowPort.NTableRowPortSchema">
            <summary>
            Schema associated with NTableRowPort
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableRowPort.TableRowRefProperty">
            <summary>
            Reference to the TableRowProperty.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableRowPort.LeftOrRightProperty">
            <summary>
            Reference to the LeftOrRightProperty
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel">
            <summary>
            Represents an orthogonal (Horizontally-Vertical) routable connector model.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates a new HV model with the specified points
            </summary>
            <param name="points">points of the model</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.SegmentTypes">
            <summary>
            Gets the segment types. Automatically updated by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.CanMovePointX(System.Int32)">
            <summary>
            Overriden to return true.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.CanMovePointY(System.Int32)">
            <summary>
            Overriden to return true.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.SetPointAt(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the point at the specified index (in parent coordinates)
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set (in parent coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.MergePoints(System.Double)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.ReplacePoints(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Replaces the points in this model
            </summary>
            <param name="newPoints"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.Reset">
            <summary>
            Resets this model to its defaults
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.CanMoveSegment(System.Int32)">
            <summary>
            Overriden to return false of the specified segment is the first or the last one and the begin or end point respectively is glued.
            </summary>
            <param name="segmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.MoveSegment(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.SplitSegment(System.Int32,System.Int32@)">
            <summary>
            Splits the specified segment and returns information about the segment or point, which can be subsequently translated
            </summary>
            <param name="segmentIndex"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.GetSegmentTypeAt(System.Int32)">
            <summary>
            Gets the segment type at the specified index
            </summary>
            <param name="segmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.OrthogonalizeNeighbours(Nevron.Nov.Graphics.NPoint[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="segmentTypes"></param>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.Orthogonalize(Nevron.Nov.Graphics.NPoint[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="segmentTypes"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.RecomputeSegmentTypes">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.ComputeSegmentType(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Computes the segment type of a segment defined by two points
            </summary>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.NOrthogonalRoutableConnectorModelSchema">
            <summary>
            Reference to the NOrthogonalRoutableConnectorModel Schema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrthogonalRoutableConnectorModel.SegmentTypesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel">
            <summary>
            Represents a polyline routable connector model.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates a poly model with the specified points
            </summary>
            <param name="points">points of the polyline</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.SetPointAt(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the point at the specified index (in parent coordinates)
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set (in parent coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.MergePoints(System.Double)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.ReplacePoints(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Replaces the points in this model
            </summary>
            <param name="newPoints"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.Reset">
            <summary>
            Resets this model to its defaults
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.CanMovePointX(System.Int32)">
            <summary>
            Overriden to return true.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.CanMovePointY(System.Int32)">
            <summary>
            Overriden to return true.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.CanMoveSegment(System.Int32)">
            <summary>
            Overriden to return true, since all polyline segments can be moved
            </summary>
            <param name="segmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.MoveSegment(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.SplitSegment(System.Int32,System.Int32@)">
            <summary>
            Splits the specified segment and returns the index of the segment or point, which must be subsequently moved.
            </summary>
            <param name="segmentIndex"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPolylineRoutableConnectorModel.NPolylineRoutableConnectorModelSchema">
            <summary>
            Reference to the NPolylineRoutableConnectorModel Schema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRoutableConnectorModel">
            <summary>
            Represents the model of a routable connector, that consists of points in the parent coordinate system.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.#ctor(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates a polypath with the specified points
            </summary>
            <param name="points">points of the polypath</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.ParentPageTransform">
            <summary>
            Gets the model parent transformation to page coordinates
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.OwnerConnector">
            <summary>
            Get the routable connector to which this model belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.Points">
            <summary>
            Gets the points in parent coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.PointsInPage">
            <summary>
            Gets or sets the points in page coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.PointsCount">
            <summary>
            Gets the number of points.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.SegmentsCount">
            <summary>
            Gets the number of line segments.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NRoutableConnectorModel.Bounds">
            <summary>
            Gets the bounds of the points in the model (in parent coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.CanMovePointX(System.Int32)">
            <summary>
            Must override to return whether the point at the specified index can be moved in the X direction.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.CanMovePointY(System.Int32)">
            <summary>
            Must override to return whether the point at the specified index can be moved in the Y direction.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.ReplacePoints(Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Replaces the points in this model.
            </summary>
            <param name="newPoints"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.MergePoints(System.Double)">
            <summary>
            Merges (removes) all points, whose oriented distance from the line formed 
            by its neighbours is smaller than the specified.
            </summary>
            <param name="distance">oriented distance below which the point is merged (in scene coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.Reset">
            <summary>
            Resets this connector to its defaults.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.GetPointAt(System.Int32)">
            <summary>
            Gets the point at the specified index (in parent coordinates)
            </summary>
            <param name="index">point index</param>
            <returns>point at the specified index (in parent coordinates)</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.SetPointAt(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Sets the point at the specified index (in parent coordinates)
            </summary>
            <param name="index">point index</param>
            <param name="point">point to set (in parent coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.Translate(System.Double,System.Double)">
            <summary>
            Translates all points with the specified amounts
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.GetSegmentMidPoint(System.Int32)">
            <summary>
            Gets the segment mid point at the specified index.
            </summary>
            <param name="segmentIndex">index of segment</param> 
            <returns>point in parent coordinates</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.CanMoveSegment(System.Int32)">
            <summary>
            Must override to determine whether the segment at the specified index can be moved.
            </summary>
            <param name="segmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.MoveSegment(System.Int32,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Moves the segment to the specified location
            </summary>
            <param name="segmentIndex">segment index</param>
            <param name="location">location to move to</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.SplitSegment(System.Int32,System.Int32@)">
            <summary>
            Splits the specified segment and returns the index of the segment or point, which must be subsequently moved.
            </summary>
            <param name="segmentIndex"></param>
            <param name="index">segment or point index</param>
            <returns>true to drag segment, false to drag point</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRoutableConnectorModel.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when the connector model has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnectorModel.NRoutableConnectorModelSchema">
            <summary>
            Reference to the NRoutableConnectorModel Schema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRoutableConnectorModel.PointsProperty">
            <summary>
            Reference to the Points property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NCollectionPropertyEditor`1">
            <summary>
            A property editor of collections.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCollectionPropertyEditor`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCollectionPropertyEditor`1.CreateValueControl">
            <summary>
            Creates the control that should edit the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NCollectionPropertyEditor`1.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCollectionPropertyEditor`1.NCollectionPropertyEditorSchema">
            <summary>
            Schema associated with NCollectionPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCollectionPropertyEditor`1.DefaultTemplate">
            <summary>
            The default string array property editor template.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NCollectionPropertyEditor`1.EmbedInGroupBoxTemplate">
            <summary>
            Template for a string array property editor embedded in a group box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFamilyShape">
            <summary>
            Represents a family relationship in a family tree diagram.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyShape.Marriage">
            <summary>
            Gets/Sets the marriage event of this family.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyShape.Divorce">
            <summary>
            Gets/Sets the divorce event of this family (if any).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.StartInplaceEditing(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Starts inplace editing of this shape. Overriden to show a dialog for editing
            the information for this family.
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.GetHusbandShape">
            <summary>
            Gets the husband shape connected to this family shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.GetWifeShape">
            <summary>
            Gets the wife shape connected to this family shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.GetChildShapes">
            <summary>
            Gets the child shapes connected to this family shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.ConnectToSpouseShape(Nevron.Nov.Diagram.NPersonShape)">
            <summary>
            Connects this family shape to the given spouse shape.
            This family shape should be added to a page before calling this method.
            </summary>
            <param name="spouseShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.ConnectToChildShape(Nevron.Nov.Diagram.NPersonShape)">
            <summary>
            Connects this family shape to the given child shape.
            This family shape shoudl be added to a page before calling this method.
            </summary>
            <param name="childShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.CreateGeometry">
            <summary>
            Creates the geometry of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.CreateTextBlock">
            <summary>
            Creates the text block of the shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.RequestTooltip">
            <summary>
            Called when the input element receive a chance to request a tooltip.
            This implementation uses the family shape info to create a tooltip.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates the custom commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.CreatePorts">
            <summary>
            Creates the ports of this shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.GetText(Nevron.Nov.ENDateTimeValueFormat)">
            <summary>
            Gets the text for this family shape.
            </summary>
            <param name="dateFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.OnMarriageChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Marriage property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.OnDivorceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Divorce property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyShape.NFamilyShapeSchema">
            <summary>
            Schema associated with NFamilyShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyShape.MarriageProperty">
            <summary>
            Reference to the Marriage property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyShape.DivorceProperty">
            <summary>
            Reference to the Divorce property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFamilyShape.NFamilyShapeDesigner">
            <summary>
            Designer of family shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyShape.NFamilyShapeDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFamilyTreeEvent">
            <summary>
            Represents a family tree event, for example birth, death, marriage or divorce.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeEvent.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeEvent.#ctor(System.DateTime)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeEvent.#ctor(Nevron.Nov.NDateTime)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="date"></param>
            <param name="place"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeEvent.#ctor(Nevron.Nov.NDateTime,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="date"></param>
            <param name="place"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyTreeEvent.Date">
            <summary>
            Gets/Sets the date of the event.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFamilyTreeEvent.Place">
            <summary>
            Gets/Sets the place of the event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFamilyTreeEvent.ToString">
            <summary>
            Returns a string that represents this family tree event.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeEvent.NFamilyTreeEventSchema">
            <summary>
            Schema associated with NFamilyTreeEvent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeEvent.DateProperty">
            <summary>
            Reference to the Date property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFamilyTreeEvent.PlaceProperty">
            <summary>
            Reference to the Place property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPersonShape">
            <summary>
            Represents a person in a family tree diagram.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.#ctor(Nevron.Nov.Diagram.ENGender)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="gender"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.#ctor(Nevron.Nov.Diagram.ENGender,System.String,System.String,System.Nullable{Nevron.Nov.NDateTime},System.Nullable{Nevron.Nov.NDateTime})">
            <summary>
            Initializing constructor.
            </summary>
            <param name="gender"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="birthDate"></param>
            <param name="deathDate"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.Gender">
            <summary>
            Gets/Sets the gender of the person.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.FirstName">
            <summary>
            Gets/Sets the first name (given name) of the person.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.LastName">
            <summary>
            Gets/Sets the last name (family name or surname) of the person.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.MarriedName">
            <summary>
            Gets/Sets the family name accepted after marriage.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.Email">
            <summary>
            Gets/Sets the email of the person.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.Photo">
            <summary>
            Gets/Sets the photo of the person.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.Birth">
            <summary>
            Gets/Sets the birth event of the person.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShape.Death">
            <summary>
            Gets/Sets the death event of the person (if any).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.StartInplaceEditing(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Starts inplace editing of this shape. Overriden to show a dialog for editing
            the information for this person.
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates the custom commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local and/or computed value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.CreateGeometry">
            <summary>
            Creates the geometry of this shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.CreatePorts">
            <summary>
            Creates the ports of this shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.CreatePhotoShape">
            <summary>
            Creates the shape that holds the person's photo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.UpdatePhoto(Nevron.Nov.Diagram.NPersonShapePart,Nevron.Nov.Graphics.NImage)">
            <summary>
            Updates the photo of the given photo shape.
            </summary>
            <param name="photoShape"></param>
            <param name="photo"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.CreateNameShape">
            <summary>
            Creates the shape that holds the person's name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.CreateDatesShape">
            <summary>
            Creates the shape that holds the person's dates of birth and death.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.GetFullName">
            <summary>
            Gets the full name of the person.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.GetDates(Nevron.Nov.ENDateTimeValueFormat)">
            <summary>
            Gets a string with the dates of birth and death of the person.
            </summary>
            <param name="dateFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.OnGenderChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Gender property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.NPersonShapeSchema">
            <summary>
            Schema associated with NPersonShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.GenderProperty">
            <summary>
            Reference to the Gender property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.FirstNameProperty">
            <summary>
            Reference to the FirstName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.LastNameProperty">
            <summary>
            Reference to the LastName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.MarriedNameProperty">
            <summary>
            Reference to the MarriedName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.EmailProperty">
            <summary>
            Reference to the Email property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.BirthProperty">
            <summary>
            Reference to the Birth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShape.DeathProperty">
            <summary>
            Reference to the Death property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPersonShape.NPersonShapeDesigner">
            <summary>
            Designer of person shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.NPersonShapeDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShape.tOSh.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the state editor for the given node. Overriden to add an image selector to let
            users quickly select a photo for a person shape.
            </summary>
            <param name="UOSh"></param>
            <param name="vOSh"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPersonShapePart">
            <summary>
            A group that is part of a person shape, for example the person's name,
            dates or photo.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShapePart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShapePart.#ctor(Nevron.Nov.Diagram.ENPersonShapePart)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="partType"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPersonShapePart.PartType">
            <summary>
            Gets the part type this person shape part represents.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShapePart.NPersonShapePartSchema">
            <summary>
            Schema associated with NPersonShapePart.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPersonShapePart.PartTypeProperty">
            <summary>
            Reference to the PartType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPersonShapePart.NPersonShapePartDesigner">
            <summary>
            Designer for person shape parts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPersonShapePart.NPersonShapePartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFemaleGenogramShape">
            <summary>
            Represents a female genogram shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetMainShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets the main shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetHeartDisease">
            <summary>
            Sets heart disease.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetDiabetes">
            <summary>
            Sets diabetes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetCancer">
            <summary>
            Sets cancer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetAlzheimer">
            <summary>
            Sets alzheimer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetDownSyndrome">
            <summary>
            Sets down syndrome.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFemaleGenogramShape.SetDepression">
            <summary>
            Sets depression.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFemaleGenogramShape.NFemaleGenogramShapeSchema">
            <summary>
            Schema associated with NFemaleGenogramShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGenogramConnectorShape">
            <summary>
            Genogram connector shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramConnectorShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramConnectorShape.#ctor(Nevron.Nov.Diagram.DrawingCommands.ENGenogramFamilyRelationship)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="relationshipType"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramConnectorShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramConnectorShape.HorizontalStroke">
            <summary>
            Gets/Sets the stroke of the horizontal line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramConnectorShape.NGenogramConnectorShapeSchema">
            <summary>
            Schema associated with NGenogramConnectorShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramConnectorShape.HorizontalStrokeProperty">
            <summary>
            Reference to the HorizontalStroke property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape">
            <summary>
            Genogram emotional connector shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.Frequency">
            <summary>
            Frequency.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.LineType">
            <summary>
            Line type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.OnSizeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when shape size has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.NGenogramEmotionalConnectorShapeSchema">
            <summary>
            Schema associated with NGenogramEmotionalConnectorShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.FrequencyProperty">
            <summary>
            Reference to the Frequency property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramEmotionalConnectorShape.LineTypeProperty">
            <summary>
            Reference to the LineType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGenogramEmotionalLineType">
            <summary>
            Enumerates genogram emotional line types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramEmotionalLineType.OneZigZag">
            <summary>
            One zig zag.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramEmotionalLineType.TwoZigZag">
            <summary>
            Two zig zag.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramEmotionalLineType.StraightLines">
            <summary>
            Straight lines.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGenogramInternalShape">
            <summary>
            Represents a Genogram shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramInternalShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramInternalShape.InnerShapeType">
            <summary>
            Gets/Sets the inner shape type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramInternalShape.NGenogramInternalShapeSchema">
            <summary>
            Schema associated with NGenogramInternalShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENGenogramInnerShapeType">
            <summary>
            Enumerates Genogram shape types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.MainShape">
            <summary>
            MainShape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.UpperText">
            <summary>
            UpperText
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.LowerText">
            <summary>
            LowerText
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Death">
            <summary>
            Death
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Diabetes">
            <summary>
            Diabetes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Carrier">
            <summary>
            Carrier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Affected">
            <summary>
            Affected
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.AffectedByHearsay">
            <summary>
            AffectedByHearsay
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Depression">
            <summary>
            Depression
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Cancer">
            <summary>
            Cancer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Alzheimer">
            <summary>
            Alzheimer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.PossblyAffected">
            <summary>
            PossblyAffected
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.HeartDisease">
            <summary>
            HeartDisease
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.DownSyndrome">
            <summary>
            DownSyndrome
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Miscarriage">
            <summary>
            Miscarriage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENGenogramInnerShapeType.Abortion">
            <summary>
            Abortion
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGenogramShape">
            <summary>
            Base class for genogram shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.AddBirthDayLabelShape">
            <summary>
            Adds birthday label shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.AddNameLabelShape">
            <summary>
            Adds name label shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetMainShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets main shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetHeartDisease">
            <summary>
            Sets heart disease.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetDiabetes">
            <summary>
            Sets diabetes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetCancer">
            <summary>
            Sets cancer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetAlzheimer">
            <summary>
            Sets alzheimer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetDownSyndrome">
            <summary>
            Sets down syndrome.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetDepression">
            <summary>
            Sets depression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.OnUnregistered">
            <summary>
            Called when this node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGenogramShape.SetShapeBounds(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets shape bounds.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramShape.MedicalState">
            <summary>
            Gets/Sets the medical state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramShape.IsDead">
            <summary>
            Gets/Sets whether the person is dead.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramShape.IsAdopted">
            <summary>
            If it is a child gets/sets whether it was adopted.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramShape.IsFoster">
            <summary>
            If it is a child gets/sets whether it was foster child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramShape.Twin">
            <summary>
            Gets/Sets the value of the Twin property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGenogramShape.IsTwin">
            <summary>
            Gets/Sets the value of the IsTwin property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.NGenogramShapeSchema">
            <summary>
            Schema associated with NGenogramShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.MedicalStateProperty">
            <summary>
            Reference to the  MedicalState property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.IsDeadProperty">
            <summary>
            Reference to the  IsDead property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.IsAdoptedProperty">
            <summary>
            Reference to the  IsAdopted property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.IsFosterProperty">
            <summary>
            Reference to the  IsFoster property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.TwinProperty">
            <summary>
            Reference to the Twin property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGenogramShape.IsTwinProperty">
            <summary>
            Reference to the IsTwin property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMaleGenogramShape">
            <summary>
            Represents a male genogram shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetMainShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets main shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetHeartDisease">
            <summary>
            Sets heart disease.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetDiabetes">
            <summary>
            Sets diabetes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetCancer">
            <summary>
            Sets cancer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetAlzheimer">
            <summary>
            Sets alzheimer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetDownSyndrome">
            <summary>
            Sets down syndrome.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMaleGenogramShape.SetDepression">
            <summary>
            Sets depression.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMaleGenogramShape.NMaleGenogramShapeSchema">
            <summary>
            Schema associated with NMaleGenogramShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPetGenogramShape">
            <summary>
            Pet genogram shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPetGenogramShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPetGenogramShape.AddBirthDayLabelShape">
            <summary>
            Add birthday label shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPetGenogramShape.SetMainShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets main shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPetGenogramShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPetGenogramShape.NPetGenogramShapeSchema">
            <summary>
            Schema associated with NPetGenogramShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPregnancyGenogramShape">
            <summary>
            Oregnancy genogram shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPregnancyGenogramShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPregnancyGenogramShape.IsMiscarriage">
            <summary>
            Is miscarriage.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPregnancyGenogramShape.IsAbortion">
            <summary>
            Is abortion.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPregnancyGenogramShape.AddBirthDayLabelShape">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPregnancyGenogramShape.AddNameLabelShape">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPregnancyGenogramShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPregnancyGenogramShape.SetMainShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets main shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPregnancyGenogramShape.NPregnancyGenogramShapeSchema">
            <summary>
            Schema associated with NPregnancyGenogramShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPregnancyGenogramShape.IsMiscarriageProperty">
            <summary>
            Reference to the IsMiscarriage property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPregnancyGenogramShape.IsAbortionProperty">
            <summary>
            Reference to the IsAbortion property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUnknownSexGenogramShape">
            <summary>
            Unknown sex genogram shaoe.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetMainShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Sets main shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetHeartDisease">
            <summary>
            Sets heart disease.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetDiabetes">
            <summary>
            Sets diabetes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetCancer">
            <summary>
            Sets cancer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetAlzheimer">
            <summary>
            Sets alzheimer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetDownSyndrome">
            <summary>
            Sets down syndrome.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.SetDepression">
            <summary>
            Sets depression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUnknownSexGenogramShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUnknownSexGenogramShape.NUnknownSexGenogramShapeSchema">
            <summary>
            Schema associated with NUnknownSexGenogramShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NBPMNFlowShape">
            <summary>
            BPMN flow shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBPMNFlowShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBPMNFlowShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBPMNFlowShape.FlowType">
            <summary>
            Gets/Sets the value of the FlowType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBPMNFlowShape.NBPMNFlowShapeSchema">
            <summary>
            Schema associated with NBPMNFlowShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NBPMNFlowShape.FlowTypeProperty">
            <summary>
            Reference to the FlowType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFishboneShape">
            <summary>
            Represents a fishbone shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFishboneShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFishboneShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFishboneShape.Add">
            <summary>
            Gets/Sets the value of the Add property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFishboneShape.FishboneShapeType">
            <summary>
            Gets/Sets the value of the ShapeType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFishboneShape.NFishboneShapeSchema">
            <summary>
            Schema associated with NFishboneShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFishboneShape.AddProperty">
            <summary>
            Reference to the Add property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFishboneShape.FishboneShapeTypeProperty">
            <summary>
            Reference to the ShapeType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NGatewayShape">
            <summary>
            Gateway shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGatewayShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NGatewayShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands and adds them to the given menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NGatewayShape.GatewayType">
            <summary>
            Gets/Sets the value of the TaskType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGatewayShape.NGatewayShapeSchema">
            <summary>
            Schema associated with NGatewayShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGatewayShape.GatewayTypeProperty">
            <summary>
            Reference to the GatewayType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGatewayShape.LoopProperty">
            <summary>
            Reference to the Loop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NGatewayShape.IsCompensationProperty">
            <summary>
            Reference to the IsCompensation property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NMultiLineArrowShape">
            <summary>
            Multi-line arrow shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMultiLineArrowShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NMultiLineArrowShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NMultiLineArrowShape.NMultiLineArrowShapeSchema">
            <summary>
            Schema associated with NMultiLineArrowShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NOrganizationalShape">
            <summary>
            Organizational shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrganizationalShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NOrganizationalShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Create custom menu commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NOrganizationalShape.Position">
            <summary>
            Gets/Sets the value of the PositionType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NOrganizationalShape.HasImage">
            <summary>
            Gets/Sets the value of the HasImage property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NOrganizationalShape.Title">
            <summary>
            Gets/Sets the value of the Title property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NOrganizationalShape.Image">
            <summary>
            Gets/Sets the value of the Image property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NOrganizationalShape.DataText">
            <summary>
            Gets/Sets the value of the DataText property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrganizationalShape.NOrganizationalShapeSchema">
            <summary>
            Schema associated with NOrganizationalShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrganizationalShape.PositionProperty">
            <summary>
            Reference to the PositionType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrganizationalShape.HasImageProperty">
            <summary>
            Reference to the HasImage property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrganizationalShape.TitleProperty">
            <summary>
            Reference to the Title property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrganizationalShape.ImageProperty">
            <summary>
            Reference to the ImageSource property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NOrganizationalShape.DataTextProperty">
            <summary>
            Reference to the DataText property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENUMLVisibility">
            <summary>
            Represents UML class member visibility.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLVisibility.Public">
            <summary>
            Public.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLVisibility.Private">
            <summary>
            Private.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLVisibility.Protected">
            <summary>
            Protected.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLVisibility.Derived">
            <summary>
            Derived.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLVisibility.Package">
            <summary>
            Package.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENUMLScope">
            <summary>
            Represents UML class member scope
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLScope.Instance">
            <summary>
            Scope to specific instance.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLScope.Classifier">
            <summary>
            Scope to the class itself (aka static).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.ENUMLParameterDirection">
            <summary>
            The direction of the parameter.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLParameterDirection.In">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.ENUMLParameterDirection.Out">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLShape">
            <summary>
            Base class for all UML shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLShape.InformationCategory">
            <summary>
            The Information category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLShape.c_FontSize">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLShape.NUMLShapeSchema">
            <summary>
            Schema associated with NUMLShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramAttribute">
            <summary>
            Represents an UML Class Diagram attribute.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramAttribute.NUMLClassDiagramAttributeSchema">
            <summary>
            Schema associated with NUMLClassDiagramAttribute.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramClassShape">
            <summary>
            UML Class shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.OnNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the name has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates custom commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.Attributes">
            <summary>
            Gets the class attributes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.Operations">
            <summary>
            Gets the class operations
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.Interface">
            <summary>
            Gets/Sets whether it is an interface
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.NUMLClassDiagramClassShapeSchema">
            <summary>
            Schema associated with NUMLClassDiagramClassShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.AttributesProperty">
            <summary>
            Reference to the Attributes property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.OperationsProperty">
            <summary>
            Reference to the Operations property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.InterfaceProperty">
            <summary>
            Reference to the Interface property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.NameCategory">
            <summary>
            The name category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.MembersCategory">
            <summary>
            The members category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.NUMLClassDiagramClassShapeDesigner">
            <summary>
            Designer for NUMLClassDiagramClassShape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramClassShape.NUMLClassDiagramClassShapeDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramEnumElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumElement.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when a property value has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramEnumElement.NUMLClassDiagramEnumElementSchema">
            <summary>
            Schema associated with NUMLClassDiagramEnumElement.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramEnumElement.NUMLClassDiagramEnumElementDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumElement.NUMLClassDiagramEnumElementDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.OnNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when name has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.CreateCustomCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates the custom commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.Elements">
            <summary>
            Gets the class attributes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.NUMLClassDiagramEnumShapeSchema">
            <summary>
            Schema associated with NUMLClassDiagramEnumShape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.ElementsProperty">
            <summary>
            Reference to the Elements property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.NameCategory">
            <summary>
            The Name category.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.ElementsCategory">
            <summary>
            The Elements category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.NUMLClassDiagramEnumShapeDesigner">
            <summary>
            Designer of NUMLClassDiagramEnumShape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramEnumShape.NUMLClassDiagramEnumShapeDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMember.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMember.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramMember.Type">
            <summary>
            Gets/Sets the value of the Type property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramMember.Visibility">
            <summary>
            Gets/Sets the value of Visibility property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramMember.Scope">
            <summary>
            Gets/Sets the value of Scope property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMember.NUMLClassDiagramMemberSchema">
            <summary>
            Schema associated with NUMLClassDiagramMember.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMember.TypeProperty">
            <summary>
            Reference to the Type property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMember.VisibilityProperty">
            <summary>
            Reference to the Visibility property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMember.ScopeProperty">
            <summary>
            Reference to the Scope property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramMember.NUMLClassDiagramMemberDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMember.NUMLClassDiagramMemberDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramMember.NUMLEnumDiagramMemberDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMember.NUMLEnumDiagramMemberDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.NameChanged">
            <summary>
            Name changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.Name">
            <summary>
            Gets/Sets the value of the Name property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.DefaultValue">
            <summary>
            Gets/Sets the value of the DefaultValue property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.NUMLClassDiagramMemberBaseSchema">
            <summary>
            Schema associated with NUMLClassDiagramMemberBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.NameProperty">
            <summary>
            Reference to the Name property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.DefaultValueProperty">
            <summary>
            Reference to the DefaultValue property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.NUMLClassDiagramMemberBaseDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMemberBase.NUMLClassDiagramMemberBaseDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramMembersCollection`1">
            <summary>
            Collection of UML class diagram members.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMembersCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramMembersCollection`1.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when children have changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramMembersCollection`1.NUMLClassDiagramMembersCollectionSchema">
            <summary>
            Schema associated with NUMLClassDiagramMembersCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramOperation">
            <summary>
            Represents an UML Class Diagram operation
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramOperation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramOperation.Parameters">
            <summary>
            Gets/Sets the operation parameters
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramOperation.NUMLClassDiagramOperationSchema">
            <summary>
            Schema associated with NUMLClassDiagramOperation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramOperation.ParametersProperty">
            <summary>
            Reference to the Parameters property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramOperation.NUMLClassDiagramOperationDesigner">
            <summary>
            Designer of NUMLClassDiagramOperation instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramOperation.NUMLClassDiagramOperationDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.Direction">
            <summary>
            Gets/Sets the value of the Direction property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.NUMLClassDiagramOperationParameterSchema">
            <summary>
            Schema associated with NUMLClassDiagramOperationParameter.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.DirectionProperty">
            <summary>
            Reference to the Direction property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.NUMLClassDiagramOperationParameterDesigner">
            <summary>
            Designer of NUMLClassDiagramOperationParameter.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramOperationParameter.NUMLClassDiagramOperationParameterDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramAggregationShape">
            <summary>
            Represents an UML class diagram aggregation shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramAggregationShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramAggregationShape.NUMLClassDiagramAggregationShapeSchema">
            <summary>
            Schema associated with NUMLClassDiagramAggregationShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramCompositionShape">
            <summary>
            Represents an UML class diagram composition shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramCompositionShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramCompositionShape.NUMLClassDiagramCompositionShapeSchema">
            <summary>
            Schema associated with NUMLClassDiagramCompositionShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramDependencyShape">
            <summary>
            Represents an UML class diagram dependency shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramDependencyShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramDependencyShape.NUMLClassDiagramDependencyShapeSchema">
            <summary>
            Schema associated with NUMLClassDiagramDependencyShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUMLClassDiagramImplementaionShape">
            <summary>
            Represents an UML class diagram implementation shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUMLClassDiagramImplementaionShape.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUMLClassDiagramImplementaionShape.NUMLClassDiagramImplementaionShapeSchema">
            <summary>
            Schema associated with NUMLClassDiagramImplementaionShape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeStyle">
            <summary>
            Contains theme styling information about a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeStyle.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a shape style with the given style index set to all style index properties
            and the given color index set to all color index properties.
            </summary>
            <param name="styleIndex"></param>
            <param name="colorIndex"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeStyle.FillColorIndex">
            <summary>
            Gets/Sets the value of the FillColorIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeStyle.FillStyleIndex">
            <summary>
            Gets/Sets the value of the FillStyleIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeStyle.StrokeColorIndex">
            <summary>
            Gets/Sets the value of the StrokeColorIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeStyle.StrokeStyleIndex">
            <summary>
            Gets/Sets the value of the StrokeStyleIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeStyle.FontColorIndex">
            <summary>
            Gets/Sets the value of the FontColorIndex property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeStyle.FontStyleIndex">
            <summary>
            Gets/Sets the value of the FontStyleIndex property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeStyle.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.NShapeStyleSchema">
            <summary>
            Schema associated with NShapeStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.FillColorIndexProperty">
            <summary>
            Reference to the FillColorIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.FillStyleIndexProperty">
            <summary>
            Reference to the FillStyleIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.StrokeColorIndexProperty">
            <summary>
            Reference to the StrokeColorIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.StrokeStyleIndexProperty">
            <summary>
            Reference to the StrokeStyleIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.FontColorIndexProperty">
            <summary>
            Reference to the FontColorIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeStyle.FontStyleIndexProperty">
            <summary>
            Reference to the FontStyleIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeStyle.NShapeStyleDesigner">
            <summary>
            Designer for shape styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeStyle.NShapeStyleDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NThemeAndStyle">
            <summary>
            Contains theme info and shape style nodes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NThemeAndStyle.#ctor(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="themeInfo"></param>
            <param name="style"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeAndStyle.ThemeInfo">
            <summary>
            The theme info.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThemeAndStyle.Style">
            <summary>
            The shape style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NThemeAndStyle.FromStyleableElement(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Creates an NThemeAndStyle instance from the given styleable element.
            </summary>
            <param name="styleableElement"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.INTextBlockContent">
            <summary>
            Interface implemented by text block content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.INTextBlockContent.Reflow(Nevron.Nov.Graphics.NSize)">
            <summary>
            Reflows the text to the given size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTextBlockContent.IsContentEmpty">
            <summary>
            Gets whether the content is empty.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTextBlockContent.ViewportOriginX">
            <summary>
            Gets/Sets the viewport origin X.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTextBlockContent.ViewportOriginY">
            <summary>
            Gets/Sets the viewport origin Y.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTextBlockContent.WindowOriginX">
            <summary>
            Gets/Sets the window origin X.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTextBlockContent.WindowOriginY">
            <summary>
            Gets/Sets the window origin Y.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTextBlockContent.FlowHeight">
            <summary>
            Gets the flow height.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableBlockEditor">
            <summary>
            Enables the inplace editing of table text block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockEditor.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockEditor.TableContent">
            <summary>
            Gets or sets the text block content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockEditor.NTableBlockEditorSchema">
            <summary>
            Schema associated with NTextBlockEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockEditor.TableContentChild">
            <summary>
            Reference to the TextBlock child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockBaseEditor">
            <summary>
            A scrollable widget that displays an editable text. The text is controlled by the TextBlockContent property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to include the caret
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node.
            This implementation directly calls the VisitDisplaySubtree method of the child node.
            </summary>
            <param name="child"></param>
            <param name="visitor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.IsActive">
            <summary>
            Retursnt true if the view is active
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.IsInPlace">
            <summary>
            Returns true if the view is in place edit view (and handles Esc key)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.IsReadOnly">
            <summary>
            Returns whether the view is readonly
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.IsSelectable">
            <summary>
            Returns whether the view is selectable
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.AdjustTextColorForReadability">
            <summary>
            Returns true whether to adjust text color for readability purposes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.EditSettings">
            <summary>
            Gets the text view settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.ViewSettings">
            <summary>
            Gets the text view settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.FindSettings">
            <summary>
            Gets the text find settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.InsertDateSettings">
            <summary>
            Gets the insert date settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.InsertTimeSettings">
            <summary>
            Gets the insert time settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.SpellChecker">
            <summary>
            Gets the spell checker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.EditingRoot">
            <summary>
            Gets the editing root element. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.TextDocument">
            <summary>
            Gets the text document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.TextContent">
            <summary>
            Gets the text content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.HRuler">
            <summary>
            Gets the horizontal ruler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.VRuler">
            <summary>
            Gets the vertical ruler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.AcceptsTab">
            <summary>
            Returns true if the view accepts tabs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.ContextMenuBuilder">
            <summary>
            Gets the context menu builder
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.TryGetTextPositionFromMousePosition(Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position in the current editing root given the current mouse position
            </summary>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.TryGetMousePositionInDocumentCoordinates(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to get the mouse position in document coordinates
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.UpdateCaretInfo">
            <summary>
            Immediately calls the UpdateCaretInfo of the caret if any.
            Does nothing if the m_nUpdateTextCounter is raised.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.EnsureCaretVisible">
            <summary>
            Ensures caret is visible.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.GetPageUpPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets page up position.
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.GetPageDownPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets page down position.
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.IsPointOverText(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Gets whether the given point is over text.
            </summary>
            <param name="point"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.ViewToDocument(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a pont form view to document coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.GetOwnerWidget">
            <summary>
            Gets the owner widget of this view
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.Information">
            <summary>
            Gets the document information
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBaseEditor.MailMerge">
            <summary>
            Gets the mail merge
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.Nevron#Nov#UI#INUndoRedoCommandActionHost#GetUndoRedoHistoryService">
            <summary>
            Returns the effective history service of the drawing document displayed by the view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.MeasureViewportContent(System.Boolean)">
            <summary>
            Measures the element's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.GetTotalViewport">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.GetViewportOrigin">
            <summary>
            Overriden to return the Document ViewportOrigin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to set the Document ViewportOrigin
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBaseEditor.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the rich text commander, by adding the rich text command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.NTextBlockBaseEditorSchema">
            <summary>
            Schema associated with NTextBlockEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.CaretChild">
            <summary>
            Reference to the Caret child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.VerticalAlignmentProperty">
            <summary>
            Reference to the VerticalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.HorizontalAlignmentProperty">
            <summary>
            Reference to the HorizontalAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FontNameProperty">
            <summary>
            Reference to the FontName property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FontSizeProperty">
            <summary>
            Reference to the FontSize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FontStyleBoldProperty">
            <summary>
            Reference to the FontStyleBold property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FontStyleItalicProperty">
            <summary>
            Reference to the FontStyleItalic property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FontStyleUnderlineProperty">
            <summary>
            Reference to the FontStyleUnderline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FontStyleStrikethroughProperty">
            <summary>
            Reference to the FontStyleStrikethrough property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.BaselineProperty">
            <summary>
            Reference to the Baseline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBaseEditor.ShadowProperty">
            <summary>
            Reference to the Shadow property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockEditor">
            <summary>
            A scrollable widget that displays an editable text. The text is controlled by the TextBlockContent property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockEditor.#ctor(Nevron.Nov.Diagram.NDrawing)">
            <summary>
            Initializer constructor
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockEditor.TextContent">
            <summary>
            Gets or sets the text block content child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockEditor.NTextBlockEditorSchema">
            <summary>
            Schema associated with NTextBlockEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockEditor.TextContentChild">
            <summary>
            Reference to the TextBlock child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockBase">
            <summary>
            A shape part, which renders a text string. The text is controlled by the <see cref="P:Nevron.Nov.Diagram.NTextBlockBase.Text"/> property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.IsActive">
            <summary>
            Retursnt true if the view is active
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.IsInPlace">
            <summary>
            Returns true if the view is in place edit view (and handles Esc key)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.IsReadOnly">
            <summary>
            Returns whether the view is readonly
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.IsSelectable">
            <summary>
            Gets whether the view is selectable
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.AdjustTextColorForReadability">
            <summary>
            Returns true whether to adjust text color for readability purposes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.ViewSettings">
            <summary>
            Gets the text view settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.EditSettings">
            <summary>
            Gets the text view settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FindSettings">
            <summary>
            Gets the text find settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.InsertDateSettings">
            <summary>
            Gets the insert date settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.InsertTimeSettings">
            <summary>
            Gets the insert time settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.SpellChecker">
            <summary>
            Gets the spell checker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.EditingRoot">
            <summary>
            Gets the editing root element. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.TextDocument">
            <summary>
            Gets the text document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.TextContent">
            <summary>
            Gets the text content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.HRuler">
            <summary>
            Gets the horizontal ruler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.VRuler">
            <summary>
            Gets the vertical ruler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.AcceptsTab">
            <summary>
            Returns true if the view accepts tabs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.ContextMenuBuilder">
            <summary>
            Gets the rich text context menu builder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.TryGetTextPositionFromMousePosition(Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position in the current editing root given the current mouse position
            </summary>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.TryGetMousePositionInDocumentCoordinates(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to get the mouse position in document coordinates
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.EnsureCaretVisible">
            <summary>
            Ensures caret is visible.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GetPageUpPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets page up position.
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GetPageDownPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets page down position.
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.IsPointOverText(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Gets whether the given point is over text.
            </summary>
            <param name="point"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.ViewToDocument(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a pont form view to document coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GetOwnerWidget">
            <summary>
            Gets the owner widget of this view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.UpdateCaretInfo">
            <summary>
            Updates the caret
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GetClip">
            <summary>
            Overriden to return the border edge of the text block.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.Glue">
            <summary>
            Gets or sets the text block glue, that glues the block PinX, PinY and Angle properties.
            Use the Glue() methods for an easier way to work with the glue.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.HorizontalAlignment">
            <summary>
            Gets or sets the block horizontal alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.VerticalAlignment">
            <summary>
            Gets or sets the text vertical alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.KeepUpward">
            <summary>
            Gets or sets whether the text can be displayed with downward orientation. By default false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.Text">
            <summary>
            Gets or sets the text in this text block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.TextBlockContent">
            <summary>
            Gets the text block content object (generally a root block that implements the INTextBlockContent interface)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.TextBlockContentChild">
            <summary>
            Gets the text block content child
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontName">
            <summary>
            The name of the used font
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontSize">
            <summary>
            Gets or Sets the em size of the used font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontStyleBold">
            <summary>
            Gets or sets the bold font style flag
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontStyleItalic">
            <summary>
            Gets or sets the italic font style flag
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontStyleStrikethrough">
            <summary>
            Gets or sets the strikeout font style flag
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontStyleUnderline">
            <summary>
            Gets or sets the underline font style flag
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.FontStyle">
            <summary>
            The style of the used font
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.Baseline">
            <summary>
            Gets or sets the text baseline
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.LineHeightFactor">
            <summary>
            Gets or sets the line height factor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.Fill">
            <summary>
            Gets or sets the text fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.Stroke">
            <summary>
            Gets or sets the text stroke
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockBase.Shadow">
            <summary>
            Gets or sets the text shadow
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.InitXForm(Nevron.Nov.Diagram.ENTextBlockXForm)">
            <summary>
            Helper method for setting up the transformation of the text block relative to the owner shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GlueToShapeLine(System.Double,System.Double)">
            <summary>
            Glues the text block Pin to a relative location along the line connecting the Begin and End shape points.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GlueToShapeLine(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Glues the text block Pin and Angle to a relative location along the line connecting the Begin and End shape points.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useLineOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GlueToLargestInnerRectangle">
            <summary>
            Glues the text block Pin to the largest inner rectangle inside the shape geometry or shape box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GlueToShapeGeometryContour(System.Double,System.Double)">
            <summary>
            Glues the text block Pin to a relative location along the owner shape geometry contour.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GlueToShapeGeometryContour(System.Double,System.Double,System.Boolean,Nevron.Nov.NAngle)">
            <summary>
            Glues the text block Pin and Angle to a relative location along the owner shape geometry contour.
            </summary>
            <param name="locationFactor"></param>
            <param name="locationOffset"></param>
            <param name="useContourOrientation"></param>
            <param name="angleOffset"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.MeasureContent">
            <summary>
            Measures the element content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.GetKeepUpwardTransform(Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Gets the keep upward transform
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.NTextBlockBaseSchema">
            <summary>
            Schema associated with NTextBlockBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.GlueChild">
            <summary>
            Reference to the Glue child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.CaretChild">
            <summary>
            Reference to the caret child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.VerticalAlignmentProperty">
            <summary>
            Reference to the VerticalAlignment property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.HorizontalAlignmentProperty">
            <summary>
            Reference to the horizontal alignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.KeepUpwardProperty">
            <summary>
            Reference to the KeepUpward property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.TextProperty">
            <summary>
            Reference to the text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontNameProperty">
            <summary>
            Reference to the font name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontSizeProperty">
            <summary>
            Reference to the font size property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontStyleProperty">
            <summary>
            Reference to the FontStyle property - not used for compatiblity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontStyleBoldProperty">
            <summary>
            Reference ot the FontStyleBold property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontStyleItalicProperty">
            <summary>
            Reference ot the FontStyleItalic property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontStyleUnderlineProperty">
            <summary>
            Reference ot the FontStyleUnderline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FontStyleStrikethroughProperty">
            <summary>
            Reference ot the FontStyleStrikethrough property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.BaselineProperty">
            <summary>
            Reference to the baseline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.LineHeightFactorProperty">
            <summary>
            Reference to the lineheightfactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.FillProperty">
            <summary>
            Reference to the fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.StrokeProperty">
            <summary>
            Reference to the stroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockBase.ShadowProperty">
            <summary>
            Reference to the shadow property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockBase.NTextBlockBaseDesigner">
            <summary>
            Designer for NTextBlock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.NTextBlockBaseDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockBase.NTextBlockBaseDesigner.GetChildBrowsable(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChild)">
            <summary>
            Gets whether the specified child of the specified node is browsable or not.
            </summary>
            <param name="node"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableBlock">
            <summary>
            A shape part, which renders a text table. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new table block with the specified dimensions
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.#ctor(System.Int32,System.Int32,Nevron.Nov.UI.NBorder,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Creates a new table block with the specified dimensions
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
            <param name="border"></param>
            <param name="borderThickness"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.IsSelectable">
            <summary>
            Returns whether the view is readonly
            </summary>
            <summary>
            Gets whether the view is selectable
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.Text">
            <summary>
            Shortcut property to get or set the text contained in this rich text block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.Content">
            <summary>
            A shortcut property that gets or sets the content inside the document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.ResizeMode">
            <summary>
            Gets or sets the table resize mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.PortsDistributionMode">
            <summary>
            Gets or sets the table port distribution mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.TextBlockContent">
            <summary>
            Gets the text block content object (generally a root block that implements the INTextBlockContent interface)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlock.TextBlockContentChild">
            <summary>
            Gets the text block content child
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.TryGetCellPort(System.Int32,System.Int32,Nevron.Nov.Diagram.ENTableCellPortDirection,Nevron.Nov.Diagram.NTableCellPort@)">
            <summary>
            Gets the cell port for the specified row / col index and direction
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="direction"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.TryGetColumnPort(System.Int32,System.Boolean,Nevron.Nov.Diagram.NTableColumnPort@)">
            <summary>
            Gets the cell port for the specified row / col index and direction
            </summary>
            <param name="colIndex"></param>
            <param name="topOrBottom"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.TryGetRowPort(System.Int32,System.Boolean,Nevron.Nov.Diagram.NTableRowPort@)">
            <summary>
            Gets the cell port for the specified row / col index and direction
            </summary>
            <param name="rowIndex"></param>
            <param name="leftOrRight"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.OnTableChanged(Nevron.Nov.Text.NTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.InvalidateArrange(System.Object)">
            <summary>
            Invalidates arrange.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.ArrangeContent">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.MeasureContent">
            <summary>
            Measures the element content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of the element measure parent.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.OnDesiredSizeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the desired width or the desired height has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.InitXForm(Nevron.Nov.Diagram.ENTextBlockXForm)">
            <summary>
            Helper method for setting up the transformation of the text block relative to the owner shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.OnRegistered">
            <summary>
            Overrided to update the ports after the entire subtree has been registered
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlock.GetTransform">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlock.NTableBlockSchema">
            <summary>
            Schema associated with NRichTextBlock.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlock.ContentChild">
            <summary>
            Reference to the Content child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlock.ResizeModeProperty">
            <summary>
            Reference to the resize mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlock.PortsDistributionModeProperty">
            <summary>
            Reference to the PortsDistributionModeProperty
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableBlockContent">
            <summary>
            The document block represents the text document and contains one or more sections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.#ctor">
            <summary>
            Creates a new document block and adds the predefined styles to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.#ctor(System.Int32,System.Int32)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.#ctor(System.Int32,System.Int32,Nevron.Nov.UI.NBorder,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initalizer constructor
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
            <param name="border"></param>
            <param name="borderThickness"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.BulletLists">
            <summary>
            Gets / sets the bullet lists in this document block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.WindowOriginX">
            <summary>
            Gets or sets the Window Origin X value (in parent coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.WindowOriginY">
            <summary>
            Gets or sets the Window Origin Y value (in parent coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.ValidateMeasure">
            <summary>
            Deferly called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.ValidateArrange">
            <summary>
            Deferly called to validate the element arrange.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.GetPaintCacheMode">
            <summary>
            Gets the paint cache mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.AccumulateVRulerInfos(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NRulerRangeTextElementInfo},Nevron.Nov.Text.NBlock)">
            <summary>
            Accumulates the VRulerInfo objects for this element to the provided list.
            </summary>
            <param name="infos"></param>
            <param name="paperPage"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.EditTargetType">
            <summary>
            The edit target type of this root
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.UsesPagedPaint">
            <summary>
            Whether this root uses paged painting
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.LastCaretPosition">
            <summary>
            Gets the last valid caret position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from paged coordinate to local logical coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from local logical coordinate to paged coordinate.
            </summary>
            <param name="point"></param>
            <param name="hintPage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.Information">
            <summary>
            Gets or sets the document information
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.Layout">
            <summary>
            Gets / sets the text layout of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.LineSpacingMode">
            <summary>
            Gets / sets the line spacing mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.IsLayoutPaged">
            <summary>
            Gets whether the layout is paged
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.SupportsPagedLayout">
            <summary>
            Gets whether the document supports paged layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.MailMerge">
            <summary>
            Gets or sets the mail merge object of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.SpellChecker">
            <summary>
            Gets the spellchecker attached to this document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.BookmarkManager">
            <summary>
            Gets the bookmark manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.Styles">
            <summary>
            Gets/Sets the rich text styles of this document block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.DefaultTabWidth">
            <summary>
            Gets / sets the default tab width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.EditTarget">
            <summary>
            Gets the edit target
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.OwnerView">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.Statistics">
            <summary>
            Gets the document statistics
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.ViewSettings">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.ZoomFactor">
            <summary>
            Zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.BoxTextElementEditors">
            <summary>
            Gets the box text elemenet editors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.GetVisibleLogicalRange(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the visible logical range.
            </summary>
            <param name="visitor"></param>
            <param name="descendantBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.Goto(Nevron.Nov.Text.ENTextDocumentPart,System.String,System.Boolean)">
            <summary>
            Positions the caret at the specified position
            </summary>
            <param name="part"></param>
            <param name="reference"></param>
            <param name="ensureCaretVisible"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.IsBlockVisible(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets whether the block is visible.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.RegisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Registers a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.UnregisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Unregisters a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.Reflow(Nevron.Nov.Graphics.NSize)">
            <summary>
            
            </summary>
            <param name="windowSize"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.IsContentEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.ViewportOriginX">
            <summary>
            Gets or sets the Origin X value.
            The Origin is the first visible point from the page (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.ViewportOriginY">
            <summary>
            Gets or sets the Origin Y value.
            The Origin is the first visible point from the page (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTableBlockContent.FlowHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.GetChildBlocksChild">
            <summary>
            Gets the ChildBlocks child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateMeasure method of the first ancestor element that implements the INMeasureElement interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the first ancestor element that implements the INLayoutElement interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.InvalidateParentDisplay">
            <summary>
            Invalidates the display of element display parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateDisplay method of the first ancestor element that implements the INVisual interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when a property value has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.OnTransformChanged">
            <summary>
            Called when the transformation from local to parent coordinates of this page has changed.
            Raises the transform changed event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.NTableBlockContentSchema">
            <summary>
            Schema associated with NDocumentRootElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.LineSpacingModeProperty">
            <summary>
            Reference to the line spacing mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.DefaultTabWidthProperty">
            <summary>
            Schema associated with default tab width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.BulletListsChild">
            <summary>
            Reference to the BulletLists child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.ViewportOriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.ViewportOriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.WindowOriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTableBlockContent.WindowOriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTableBlockContent.NTableBlockContentDesigner">
            <summary>
            Designer for tables.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTableBlockContent.NTableBlockContentDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlock">
            <summary>
            A shape part, which renders a text string. The text is controlled by the <see cref="P:Nevron.Nov.Diagram.NTextBlock.Text"/> property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.IsSelectable">
            <summary>
            Gets whether the view is selectable.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.Text">
            <summary>
            Shortcut property to get or set the text contained in this rich text block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.Content">
            <summary>
            A shortcut property that gets or sets the content inside the document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.ResizeMode">
            <summary>
            Gets or sets the mode in which the text block can be automatically resized.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.ViewMode">
            <summary>
            Gets or sets whether the text must be stretched to fill the display bounds of the text block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.ClipWithBlockBounds">
            <summary>
            Gets or sets whether the text should be clipped with the text block bounds. By default the text is not clipped.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.TextBlockContent">
            <summary>
            Gets the text block content object (generally a root block that implements the INTextBlockContent interface)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlock.TextBlockContentChild">
            <summary>
            Gets the text block content child
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.InitXForm(Nevron.Nov.Diagram.ENTextBlockXForm)">
            <summary>
            Helper method for setting up the transformation of the text block relative to the owner shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.ArrangeContent">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.OnDesiredSizeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the desired width or the desired height has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlock.NTextBlockSchema">
            <summary>
            Schema associated with NTextBlock.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlock.ContentChild">
            <summary>
            Reference to the Content child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlock.ResizeModeProperty">
            <summary>
            Reference to the ResizeMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlock.ViewModeProperty">
            <summary>
            Reference to the ViewMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlock.ClipWithBlockBoundsProperty">
            <summary>
            Reference to the ClipWithBlockBounds property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlock.IsEmptyProperty">
            <summary>
            Reference to the IsEmpty property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlock.NTextBlockDesigner">
            <summary>
            Designer for NTextBlock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.NTextBlockDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlock.NTextBlockDesigner.GetChildBrowsable(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChild)">
            <summary>
            We do not want to browse the text block children
            </summary>
            <param name="node"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockContent">
            <summary>
            The document block represents the text document and contains one or more sections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.#ctor">
            <summary>
            Creates a new document block and adds the predefined styles to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new document block.
            </summary>
            <param name="addPredefinedStyles">Determines whether to add the predefined styles
            to the document block or not.</param>
            <param name="addDefaultDocumentStyles">Specifies whether to add default document styles
            to this document, i.e. styles that are applied to all paragraphs, inlines and tables
            in the document. The names of these styles are null and that is why they get
            applied to all elements of the specific type.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.Blocks">
            <summary>
            Gets or sets the child blocks element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.BulletLists">
            <summary>
            Gets / sets the bullet lists in this document block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.WindowOriginX">
            <summary>
            Gets or sets the Window Origin X value (in parent coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.WindowOriginY">
            <summary>
            Gets or sets the Window Origin Y value (in parent coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.ValidateMeasure">
            <summary>
            Deferly called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.ValidateArrange">
            <summary>
            Deferly called to validate the element arrange.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.GetPaintCacheMode">
            <summary>
            Gets the paint cache mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.AccumulateVRulerInfos(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NRulerRangeTextElementInfo},Nevron.Nov.Text.NBlock)">
            <summary>
            Accumulates the VRulerInfo objects for this element to the provided list.
            </summary>
            <param name="infos"></param>
            <param name="paperPage"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.EditTargetType">
            <summary>
            The edit target type of this root
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.UsesPagedPaint">
            <summary>
            Whether this root uses paged painting
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.LastCaretPosition">
            <summary>
            Gets the last valid caret position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from paged coordinate to local logical coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from local logical coordinate to paged coordinate.
            </summary>
            <param name="point"></param>
            <param name="hintPage"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.Information">
            <summary>
            Gets or sets the document information
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.Layout">
            <summary>
            Gets / sets the text layout of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.LineSpacingMode">
            <summary>
            Gets / sets the line spacing mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.IsLayoutPaged">
            <summary>
            Gets whether the layout is paged
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.SupportsPagedLayout">
            <summary>
            Gets whether the document supports paged layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.MailMerge">
            <summary>
            Gets or sets the mail merge object of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.SpellChecker">
            <summary>
            Gets the spellchecker attached to this document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.BookmarkManager">
            <summary>
            Gets the bookmark manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.Styles">
            <summary>
            Gets/Sets the rich text styles of this document block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.DefaultTabWidth">
            <summary>
            Gets / sets the default tab width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.EditTarget">
            <summary>
            Gets the edit target
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.OwnerView">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.Statistics">
            <summary>
            Gets the document statistics
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.ViewSettings">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.ZoomFactor">
            <summary>
            Zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.BoxTextElementEditors">
            <summary>
            Gets the box text elemenet editors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.GetVisibleLogicalRange(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the visible logical range.
            </summary>
            <param name="visitor"></param>
            <param name="descendantBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.Goto(Nevron.Nov.Text.ENTextDocumentPart,System.String,System.Boolean)">
            <summary>
            Positions the caret at the specified position
            </summary>
            <param name="part"></param>
            <param name="reference"></param>
            <param name="ensureCaretVisible"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.IsBlockVisible(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets whether the block is visible.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.RegisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Registers a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.UnregisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Unregisters a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.Reflow(Nevron.Nov.Graphics.NSize)">
            <summary>
            
            </summary>
            <param name="windowSize"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.IsContentEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.ViewportOriginX">
            <summary>
            Gets or sets the Origin X value.
            The Origin is the first visible point from the page (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.ViewportOriginY">
            <summary>
            Gets or sets the Origin Y value.
            The Origin is the first visible point from the page (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NTextBlockContent.FlowHeight">
            <summary>
            Gets the flow height.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.GetChildBlocksChild">
            <summary>
            Gets the ChildBlocks child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateMeasure method of the first ancestor element that implements the INMeasureElement interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the first ancestor element that implements the INLayoutElement interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.InvalidateParentDisplay">
            <summary>
            Invalidates the display of element display parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateDisplay method of the first ancestor element that implements the INVisual interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when a property value has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.OnTransformChanged">
            <summary>
            Called when the transformation from local to parent coordinates of this page has changed.
            Raises the transform changed event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.NTextBlockContentSchema">
            <summary>
            Schema associated with NDocumentRootElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.LineSpacingModeProperty">
            <summary>
            Reference to the line spacing mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.DefaultTabWidthProperty">
            <summary>
            Schema associated with default tab width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.BlocksChild">
            <summary>
            Reference to the blocks child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.BulletListsChild">
            <summary>
            Reference to the BulletLists child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.ViewportOriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.ViewportOriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.WindowOriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NTextBlockContent.WindowOriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NTextBlockContent.NDocumentStateDesigner">
            <summary>
            Section state designer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.NDocumentStateDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.NDocumentStateDesigner.AddSizeCategory">
            <summary>
            Adds the "Size" category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NTextBlockContent.NDocumentStateDesigner.AddLayoutCategory">
            <summary>
            Adds the "Layout" category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUserCell">
            <summary>
            Represents a user cell from the user cells collection of a shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUserCell.Value">
            <summary>
            Gets or sets the value of the cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NUserCell.Prompt">
            <summary>
            Gets or sets the value of the cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUserCell.NUserCellSchema">
            <summary>
            Schema associated with the user cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUserCell.ValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUserCell.PromptProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NUserCellCollection">
            <summary>
            A collection of NUserCell elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NUserCellCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NUserCellCollection.NUserCellCollectionSchema">
            <summary>
            Schema associated with NUserCellCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSnapAndGlue">
            <summary>
            An attribute, which controls the snap and glue behavior of a drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapToRulers">
            <summary>
            Specifies whether coordinates should be snapped to the rulers. By default set to true
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapToGrid">
            <summary>
            Specifies whether coordinates should be snapped to the grid. By default set to true
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapToGuidelines">
            <summary>
            Specifies whether coordinates should be snapped to guidelines. By default set to true
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapToGeometries">
            <summary>
            Specifies whether to snap to geometries. By default set to true
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapToPorts">
            <summary>
            Specifies whether to snap to shape ports. By default set to true
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapToShapes">
            <summary>
            Specifies whether to snap to shapes. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GlueToShapes">
            <summary>
            Specifies whether points can be be glued to shapes. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GlueToGeometries">
            <summary>
            Specifies whether points can be glued to geometries. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GlueToPorts">
            <summary>
            Specifies whether points can be be glued to ports. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.RulersStrength">
            <summary>
            Specifies the strength (area) in which the rulers ticks attracts coordinates (in pixels)
            </summary>
            <remarks>
            By default set to 4
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GridStrength">
            <summary>
            Specifies the strength (area) in which the grid lines attracts coordinates (in pixels)
            </summary>
            <remarks>
            By default set to 5
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GuidelinesStrength">
            <summary>
            Specifies the strength (area) in which the guidelines attracts coordinates (in pixels)
            </summary>
            <remarks>
            By default set to 10
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GeometryStrength">
            <summary>
            Specifies the strength (area) in which the geometry outline attract points (in pixels)
            </summary>
            <remarks>
            By default set to 8
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.GeometryVerticesStrength">
            <summary>
            Specifies the strength (area) in which the geometry vertices attract points (in pixels)
            </summary>
            <remarks>
            By default set to 8
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.PortsStrength">
            <summary>
            Specifies the strength (area) in which the ports attract points (in pixels)
            </summary>
            <remarks>
            By default set to 10
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.SnapRotation">
            <summary>
            Specifies whether rotation angles must be snapped. By default set to true
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.RotationTolerance">
            <summary>
            Controls the tolerance, under which the snapping of the rotation angles occurs. 
            By default set to 5 degrees.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.RotationStep">
            <summary>
            Controls the step to which rotation angles are snapped.
            360 degrees must be divisible to the specified value. By default set to 45 degrees.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.OwnerDrawingView">
            <summary>
            Gets the drawing owning this attribute
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSnapAndGlue.OwnerDrawing">
            <summary>
            Gets the drawing to which this object belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapRotationAngle(Nevron.Nov.NAngle,Nevron.Nov.NAngle@)">
            <summary>
            Snaps the specified rotation angle
            </summary>
            <param name="rotation">rotation to snap (in degrees)</param>
            <param name="snappedRotation">snapped rotation (in degrees)</param>
            <returns>true if snapping was successfull, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapBounds(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Snaps the specified bounds sides (in drawing coordinates) to guides, grid and rules of the active page.
            </summary>
            <param name="bounds">bounds to snap (in drawing coordinates)</param>
            <returns>snapped bounds (in drawing coordinates)</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.Snap1DPrimitiveStartPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Snaps the Start Point of a 1D primitive (line, bezier, arc etc.).
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.Snap1DPrimitiveEndPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Diagram.NGeometryCommand)">
            <summary>
            Snaps the End Point of a 1D primitive (line, bezier, arc etc.).
            </summary>
            <param name="point"></param>
            <param name="prevGeometryCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.Snap1DPrimitiveEndPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Diagram.NGeometryCommand,System.Boolean)">
            <summary>
            Snaps the End Point of a 1D primitive (line, bezier, arc etc.).
            </summary>
            <param name="point"></param>
            <param name="prevGeometryCommand"></param>
            <param name="snapToGridPortsAndRulers"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapPointToPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Tries to snap a point to a point (in drawing coordinates).
            </summary>
            <param name="point"></param>
            <param name="pointToSnapTo"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapBeginPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Diagram.NShape)">
            <summary>
            Snaps the begin point of the specified shape, to the ports, geometries, shapes, guides, grids and rulers of the active page.
            </summary>
            <param name="point">point to snap (in drawing coordinates)</param>
            <param name="shape">shape to which the end point belongs</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapEndPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Diagram.NShape)">
            <summary>
            Snaps the end point of the specified shape, to the ports, geometries, shapes, guides, grids and rulers of the active page.
            </summary>
            <param name="point">point to snap (in drawing coordinates)</param>
            <param name="shape">shape to which the end point belongs</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapPinPoint(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Snaps the specicified pin point
            </summary>
            <param name="point">point to snap (in drawing coordinates)</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapControlPoint(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Diagram.NShape)">
            <summary>
            Snaps a shape control point
            </summary>
            <param name="point">point to snap (in drawing coordinates)</param>
            <param name="shape">shape to which the end point belongs</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapPointToGuidelinesGridAndRulers(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Snaps a point (in drawing coordinates) to the guidelines, grid and rulers of the active page.
            </summary>
            <param name="point">point to snap (in drawing coordinates)</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapOutwardPort(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Diagram.ENPortFlowMode,Nevron.Nov.Diagram.NShape)">
            <summary>
            Snaps the outward ports of the shape to other inward/outward ports.
            </summary>
            <param name="point">point to snap (in drawing coordinates)</param>
            <param name="flowMode">flow mode of the port</param>
            <param name="shape">shape to which the port belongs</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapGuidelineX(System.Double)">
            <summary>
            Snaps a guideline X coordinate to the grid and rulers
            </summary>
            <param name="coordInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapGuidelineY(System.Double)">
            <summary>
            Snaps a guideline Y coordinate to the grid and rulers
            </summary>
            <param name="coordInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapXToGuidelines(Nevron.Nov.Diagram.NPage,System.Double,System.Double,System.Double@)">
            <summary>
            Tries to snaps a X coordinate to a vertical guideline coordinate.
            </summary>
            <param name="activePage"></param>
            <param name="x">coordinate to snap</param>
            <param name="snapArea">area around guideline for snapping</param>
            <param name="snappedX">the result of snapping</param>
            <returns>true if snapping succeeded, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.SnapYToGuidelines(Nevron.Nov.Diagram.NPage,System.Double,System.Double,System.Double@)">
            <summary>
            Tries to snaps an Y coordinate to a horizontal guideline coordinate.
            </summary>
            <param name="activePage"></param>
            <param name="y">coordinate to snap</param>
            <param name="snapArea">area around guideline for snapping</param>
            <param name="snappedY">the result of snapping</param>
            <returns>true if snapping succeeded, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.NSnapAndGlueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapToRulersProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapToGridProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapToGuidelinesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapToGeometriesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapToPortsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapToShapesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GlueToShapesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GlueToGeometriesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GlueToPortsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.RulersStrengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GridStrengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GuidelinesStrengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GeometryStrengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.GeometryVerticesStrengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.PortsStrengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.SnapRotationProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.RotationToleranceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapAndGlue.RotationStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSnapAndGlue.NSnapAndGlueDesigner">
            <summary>
            Designer for NSnapAndGlue.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapAndGlue.NSnapAndGlueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSnapCoordinateResult">
            <summary>
            Base class for all snap point results
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapCoordinateResult.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor
            </summary>
            <param name="coordInDrawing"></param>
            <param name="coordInPage"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapCoordinateResult.CoordinateInDrawing">
            <summary>
            The snapped coordinate in drawing coordinates
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapCoordinateResult.CoordinateInPage">
            <summary>
            The snapped coordinate in page coordinates
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSnapPointResult">
            <summary>
            Represents the result of a point snapping. The snapped point is available in two coordinate systems - the drawing and the active page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapPointResult.#ctor(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="pointInDrawing">snap point (in drawing coordinates)</param>
            <param name="pointInPage">snap point (in page coordinates)</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapPointResult.#ctor(Nevron.Nov.Dom.NElement,System.Boolean,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="snapTarget"></param>
            <param name="canGlue"></param>
            <param name="pointInDrawing">snap point (in drawing coordinates)</param>
            <param name="pointInPage">snap point (in page coordinates)</param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapPointResult.PointInDrawing">
            <summary>
            The snapped point (in drawing coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapPointResult.PointInPage">
            <summary>
            The snapped point (in page coordinates)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSnapResult">
            <summary>
            Serves as base class for NSnapPointResult and NSnapCoordinateResult.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapResult.#ctor(Nevron.Nov.Dom.NElement,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="snapTarget"></param>
            <param name="canGlue"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapResult.SnapTarget">
            <summary>
            The target to which the coordinate or point was snapped to.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSnapResult.CanGlue">
            <summary>
            Whether it is allowed to glue to the snap target.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSnapResult.GetTooltipString(System.String)">
            <summary>
            Gets a human readable name for the current snap target
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NArrowheadShape">
            <summary>
            Represents an arrowhead shape
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowheadShape.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowheadShape.NArrowheadShapeStyleSchema">
            <summary>
            Schema associated with NArrowheadShape
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NArrowheadStencil">
            <summary>
            Represents the stencil that is used to render the arrowheads in a drawing
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NArrowheadStencil.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NArrowheadStencil.NArrowheadStencilSchema">
            <summary>
            Schema associated with NArrowheadStencil
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool">
            <summary>
            Serves as base class for all tools that create 1D shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.StretchPreview(System.Boolean)">
            <summary>
            Overriden to change the Begin and End Points of the shape.
            </summary>
            <param name="firstStretch"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to perform a 1D primitive Start or End point snapping.
            </summary>
            <param name="begin"></param>
            <param name="pointInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.AddPageItemToActivePage">
            <summary>
            Overriden to either append a geometry command to an already existing geometry, or create a new 1D shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.AddGeometryCommandToActivePage">
            <summary>
            Adds a geometry command to the active page. 
            Called by the AddPageItemToActivePage when the start point has been snapped to a gometry command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.AddShapeToActivePage">
            <summary>
            Adds a 1D shape to the active page and selects it. 
            If the shape begin and/or end point was snapped to port or shape, it is glued to the respective target.
            Called by the AddPageItemToActivePage when the start point has not been snapped to a gometry command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.CreateShapeGeometryCommand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Must override to create a geometry command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.GetNormalCursor">
            <summary>
            Must override to return the default cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.GetOnlyBeginHighlightCursor">
            <summary>
            Must override to return the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.GetOnlyEndHighlightCursor">
            <summary>
            Must override to return the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.GetBothBeginEndHighlightCursor">
            <summary>
            Must override to return the cursor when both the begin and end points are snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active.
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when non active.
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreate1DShapeTool.NCreate1DShapeToolSchema">
            <summary>
            Schema associated with NCreate1DShapeTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool">
            <summary>
            A tool that creates arc shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.CreatePageItem">
            <summary>
            Overriden to create a shape whose geometry is an arc
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.CreateShapeGeometryCommand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Overriden to create an arc geometry command.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.GetNormalCursor">
            <summary>
            Return the default cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.GetOnlyBeginHighlightCursor">
            <summary>
            Returns the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.GetOnlyEndHighlightCursor">
            <summary>
            Returns the cursor when both the end point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.GetBothBeginEndHighlightCursor">
            <summary>
            Returns the cursor when both the begin and end points are snapped
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateArcTool.NCreateArcToolSchema">
            <summary>
            Schema associated with NCreateArcTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool">
            <summary>
            A tool that creates line shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.StretchPreview(System.Boolean)">
            <summary>
            Overriden to change the Begin and End Points of the shape.
            </summary>
            <param name="firstStretch"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.StartPreview">
            <summary>
            Starts a the page item preview. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.EndPreview">
            <summary>
            Ends the preview of the page item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to perform a 1D primitive Start or End point snapping.
            </summary>
            <param name="begin"></param>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.CreatePageItem">
            <summary>
            Overriden to create a rectangle shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.AddPageItemToActivePage">
            <summary>
            Overriden to either append a geometry command to an already existing geometry, or create a new 1D shape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when non active.
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateConnectorTool.NCreateConnectorToolSchema">
            <summary>
            Schema associated with NCreateConnectorTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool">
            <summary>
            A tool that creates bezier shapes or bezier geometry segments
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.CreatePageItem">
            <summary>
            Overriden to create a shape whose geometry is an arc
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.CreateShapeGeometryCommand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Overriden to create an arc geometry command.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.GetNormalCursor">
            <summary>
            Return the default cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.GetOnlyBeginHighlightCursor">
            <summary>
            Returns the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.GetOnlyEndHighlightCursor">
            <summary>
            Returns the cursor when both the end point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.GetBothBeginEndHighlightCursor">
            <summary>
            Returns the cursor when both the begin and end points are snapped
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateCubicBezierTool.NCreateCubicBezierToolSchema">
            <summary>
            Schema associated with NCreateCubicBezierTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool">
            <summary>
            A tool that creates arc shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.CreatePageItem">
            <summary>
            Overriden to create a rectangle shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.CreateShapeGeometryCommand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Overriden to create an arc geometry command.
            </summary>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.GetNormalCursor">
            <summary>
            Return the default cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.GetOnlyBeginHighlightCursor">
            <summary>
            Returns the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.GetOnlyEndHighlightCursor">
            <summary>
            Returns the cursor when both the end point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.GetBothBeginEndHighlightCursor">
            <summary>
            Returns the cursor when both the begin and end points are snapped
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateEllipticalArcTool.NCreateEllipticalArcToolSchema">
            <summary>
            Schema associated with NCreateEllipticalArcTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool">
            <summary>
            A tool that creates line shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.CreatePageItem">
            <summary>
            Overriden to create a rectangle shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.CreateShapeGeometryCommand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates a geometry command in case the tool is used to extend an existing geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="begin"></param>
            <param name="pointInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.GetNormalCursor">
            <summary>
            Return the default cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.GetOnlyBeginHighlightCursor">
            <summary>
            Returns the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.GetOnlyEndHighlightCursor">
            <summary>
            Returns the cursor when both the end point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.GetBothBeginEndHighlightCursor">
            <summary>
            Returns the cursor when both the begin and end points are snapped
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateLineTool.NCreateLineToolSchema">
            <summary>
            Schema associated with NCreateLineTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool">
            <summary>
            A tool that creates line shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.StretchPreview(System.Boolean)">
            <summary>
            
            </summary>
            <param name="firstStretch"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="begin"></param>
            <param name="pointInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.IsPageItemContentEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.CreateShapeGeometryCommand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates a geometry command in case the tool is used to extend an existing geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.CreatePageItem">
            <summary>
            Overriden to create a rectangle shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.OnActivated">
            <summary>
            Overriden to start the control point recording timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.OnDeactivated">
            <summary>
            Overriden to stop the control point recording timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.OnAborted">
            <summary>
            Overriden to stop the control point recording timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.GetNormalCursor">
            <summary>
            Return the default cursor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.GetOnlyBeginHighlightCursor">
            <summary>
            Returns the cursor when both the begin point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.GetOnlyEndHighlightCursor">
            <summary>
            Returns the cursor when both the end point is snapped
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.GetBothBeginEndHighlightCursor">
            <summary>
            Returns the cursor when both the begin and end points are snapped
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateNurbsTool.NCreateNurbsToolSchema">
            <summary>
            Schema associated with NCreateNurbsTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool">
            <summary>
            Serves as base class for all tools that create 2D shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.StretchPreview(System.Boolean)">
            <summary>
            Overriden to change the shape Width, Height and Pin
            </summary>
            <param name="firstStretch"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to change the snap the point the guides, grids an rulers
            </summary>
            <param name="begin"></param>
            <param name="pointInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active.
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets ready cursor and tooltip.
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.GetCreate2DShapeCursor">
            <summary>
            Must override to return the create 2D Shape cursor
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreate2DShapeTool.NCreate2DShapeToolSchema">
            <summary>
            Schema associated with NCreate2DShapeTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateEllipseTool">
            <summary>
            A tool that creates ellipse shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipseTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipseTool.CreatePageItem">
            <summary>
            Overriden to create a rectangle shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateEllipseTool.GetCreate2DShapeCursor">
            <summary>
            Overriden to return the Cursor_CreateEllipse_cur
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateEllipseTool.NCreateEllipseToolSchema">
            <summary>
            Schema associated with NCreateEllipseTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateRectangleTool">
            <summary>
            A tool that creates rectangle shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateRectangleTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateRectangleTool.CreatePageItem">
            <summary>
            Overriden to create a rectangle shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateRectangleTool.GetCreate2DShapeCursor">
            <summary>
            Overriden to return the Cursor_CreateRectangle_cur
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateRectangleTool.NCreateRectangleToolSchema">
            <summary>
            Schema associated with NCreateRectangleTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateTextTool">
            <summary>
            A tool that creates text shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateTextTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateTextTool.CreatePageItem">
            <summary>
            Overriden to create a text shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateTextTool.GetCreate2DShapeCursor">
            <summary>
            Overriden to return the Cursor_CreateText_cur
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateTextTool.NCreateTextToolSchema">
            <summary>
            Schema associated with NCreateTextTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool">
            <summary>
            A drag tool that creates horizontal and vertical guidelines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether the guidelines are globally visible and whether one of the rulers is hit
            </remarks>
            <returns>true if the tool can activate, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.TryActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to active the tool in H or V guideline mode
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.CreatePageItem">
            <summary>
            Overriden to create a horizontal or vertical guideline, depending on whether the HRuler or VRuler was hit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.StretchPreview(System.Boolean)">
            <summary>
            Overriden to change the guideline coordinate
            </summary>
            <param name="firstStretch"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.AddPageItemToActivePage">
            <summary>
            Overriden to add the guideline to the page if the guideline is inside the drawing window area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to snap the X or Y coordinate of the point, depending on the tool mode
            </summary>
            <param name="begin"></param>
            <param name="pointInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.OnAborted">
            <summary>
            Called when the tool was aborted
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.OperatesInWindowArea">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateGuidelineTool.NCreateGuidelineToolSchema">
            <summary>
            Schema associated with NCreateGuidelineTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1">
            <summary>
            A drawing drag tool that serves as base class for tools that create page items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.CreateItemDistance">
            <summary>
            Gets or sets the distance, beyond which the mouse has to be dragged for the respective page item to be created.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to check whether the tool is connected to a document and 
            if the tool requires an active layer, whether the document can provide it
            </remarks>
            <returns>true if the tool can activate, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.OnActivated">
            <summary>
            Overriden to start a drag operation in the view
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.OnDeactivated">
            <summary>
            Overriden to end a drag operation in the view
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.OnAborted">
            <summary>
            Overriden to end a drag operation in the view
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.OnEnabledChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the enabled flag has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.CreatePageItem">
            <summary>
            Must override to create a new page item that the tool edits and later appends to the page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.SnapPoint(System.Boolean,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Snaps the begin or end point point
            </summary>
            <param name="begin"></param>
            <param name="pointInDrawing"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.StartPreview">
            <summary>
            Starts a the page item preview. This implementation creates a page item and adds it the active page previews.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.StretchPreview(System.Boolean)">
            <summary>
            Must override to stretch the preview according to the current values of BeginPagePos and EndPagePos.
            </summary>
            <param name="firstStretch"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.EndPreview">
            <summary>
            Ends the preview of the page item. This implementation removes the item from the active page previews.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.AddPageItemToActivePage">
            <summary>
            Adds the page item to the active page. This implementation adds the created item to the active page and single selects its.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.IsPageItemContentEmpty">
            <summary>
            Determines whether the page item content is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.PageItem">
            <summary>
            Obtains a reference to the page element, which is created for preview purposes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.StartSnapPoint">
            <summary>
            Gets the snap point (in drawing coordinates) with which the page item preview was started.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.EndSnapPoint">
            <summary>
            Gets the snap point (in drawing coordinates) with which the page item preview was last stretched.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.CreateItemDistancePassed">
            <summary>
            Gets the CreateItemDistance has been passed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.NCreatePageItemToolSchema">
            <summary>
            Schema associated with NCreatePageItemTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreatePageItemTool`1.CreateItemDistanceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NCreateShapeTool`1">
            <summary>
            Serves as base class for all tools that create shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateShapeTool`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NCreateShapeTool`1.UpdateAids">
            <summary>
            Called to update the visual aids of this tool. 
            </summary>
            <remarks>
            This implementation shows/hides the snap point and snap target aids.
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NCreateShapeTool`1.NCreateShapeToolSchema">
            <summary>
            Schema associated with NCreateShapeTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool">
            <summary>
            Represents the diagram 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.AlignBoundsPadding">
            <summary>
            Controls the padding around the shape WHBox at which the arrow buttons are positioned
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.AreaBoundsPadding">
            <summary>
            Controls the padding around the AutoConnect aid, that is considered as aid bounds.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ContextMenuOffset">
            <summary>
            Controls the offset of the context menu from the respective button.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ButtonSize">
            <summary>
            Controls the the size of the auto connect buttons
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Occurs when the user hovers the mouse over the 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.UpdateAids">
            <summary>
            Updates the visual aids of this tool.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.GetAutoConnectShape(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the shape for auto connection given a point in page coordinates
            </summary>
            <param name="pointInPage"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.NAutoConnectToolSchema">
            <summary>
            Schema associated with NAutoConnectTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.AlignBoundsPaddingProperty">
            <summary>
            Reference to the AlignBoundsPadding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.AreaBoundsPaddingProperty">
            <summary>
            Reference to the AreaBoundsPadding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ContextMenuOffsetProperty">
            <summary>
            Reference to the ContextMenuOffset property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ButtonSizeProperty">
            <summary>
            Reference to the ButtonSymbolSize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ButtonFillColor">
            <summary>
            Controls the fill color of the auto connect buttons
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ButtonHighlightFillColor">
            <summary>
            Controls the highlight fill color of the auto connect buttons
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NAutoConnectTool.ButtonStrokeColor">
            <summary>
            Controls the stroke color of the auto connect buttons
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool">
            <summary>
            The NClickSelectTool performs the click select functionality of the drawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.AllowDrillDown">
            <summary>
            Specifies whether drill down selection is allowed. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.ClickSelectMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the tool performs click selection.
            By default set to ENMouseButtonEvent.LeftButtonDown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.DrillDownSelectMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the tool performs drill down selection
            By default set to ENMouseButtonEvent.LeftButtonUp.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.CanClickSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether click select can be performed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.ClickSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Performs a click select.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.CanDrillDownSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether drill down select can be performed.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.DrillDownSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Performs a drill down select.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.NClickSelectToolSchema">
            <summary>
            Schema associated with NClickSelectTool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.AllowDrillDownProperty">
            <summary>
            Reference to the AllowDrillDown property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.ClickSelectMouseButtonEventProperty">
            <summary>
            Reference to the ClickSelectEvent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NClickSelectTool.DrillDownSelectMouseButtonEventProperty">
            <summary>
            Reference to the DrillDownSelectEvent property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool">
            <summary>
            The NContextMenuTool shows a context menu for the items below the mouse pointer.
            The context menu that is displayed is controlled by the NDrawingView.ContextMenu attribute.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.ContextMenuMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the context menu is shown.
            By default set to ENMouseButtonEvent.RightButtonUp.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.ShowRichTextContextMenu">
            <summary>
            Gets/Sets whether to show the rich text context menu. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.CanShowContextMenu(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether context menu can be shown in response to the specified mouse event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.ShowContextMenu(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Shows the context menu.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.DetermineContextItem(Nevron.Nov.Diagram.NDiagramItem,Nevron.Nov.Diagram.NPage)">
            <summary>
            Determines the diagram item for which a context menu must be show.
            </summary>
            <param name="hitItem"></param>
            <param name="activePage"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.NContextMenuToolSchema">
            <summary>
            Schema associated with NContextMenuTool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.ContextMenuMouseButtonEventProperty">
            <summary>
            Reference to the ContextMenuMouseButtonEventProperty property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NContextMenuTool.ShowRichTextContextMenuProperty">
            <summary>
            Reference to the ShowRichTextContextMenu property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool">
            <summary>
            The NDragDropTargetTool class represents a tool, which is used to make the drawing view a drag drop target.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.OnDragOut(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Processes the drag out event 
            </summary>
            <remarks>
            Overriden to destroy the possibly created data object preview
            </remarks>
            <param name="args"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.OnDragIn(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.OnDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Processes the drag over event 
            </summary>
            <remarks>
            If the mouse left the view window this method will destroy the preview.
            Otherwise it will create it (if not created) and translate it.
            Then it will update the drag drop effect
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.OnDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Processes the drag drop event 
            </summary>
            <remarks>
            Overriden to the drag drop data object in the document active layer
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.StartMove(Nevron.Nov.UI.NDataObject)">
            <summary>
            Starts to move a preview of the objects contained in the specified data object
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.Move">
            <summary>
            Moves the preview to the current mouse position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.EndMove(System.Boolean)">
            <summary>
            Ends the preview move and optionally commits the result
            </summary>
            <param name="commit"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.DestroyPreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.UpdateDragDropEffect(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Updates the drag and drop effect
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NDragDropTargetTool.NDragDropTargetToolSchema">
            <summary>
            Schema associated with NDragDropTargetTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool">
            <summary>
            A drawing drag tool that performs the dragging of the top most handle below the mouse pointer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to return false if the mouse is not over a handle, or the handle cannot be dragged
            </remarks>
            <returns>true if the tool can activate, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.OnActivated">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            Overriden to store a reference to the last hit handle, which can be obtained from the DraggedHandle property.
            Also calls the BeginDragging method of the handle.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.OnDeactivated">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            Overriden to call the EndDragging method of the dragged handle and reset the reference to it.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.OnAborted">
            <summary>
            Overriden to call the CancelDragging method of the dragged handle and reset the reference to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NDragHandleTool.NDragHandleToolSchema">
            <summary>
            Reference to the NDragHandleTool schema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool">
            <summary>
            The NDrawingDragTool class serves as base class for drag tools of drawing elements.
            </summary>
            <remarks>
            Tools, which derive from this class can obtain a reference to the drawing hosting the tool 
            by the OwnerDrawing property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.OwnerDrawingView">
            <summary>
            Obtains a reference to the drawing vuew to which this tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.ActivePage">
            <summary>
            Gets the active page of the owner drawing
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.StartPagePos">
            <summary>
            Gets the mouse start position in page coordinates.
            Valid only when the tool is active.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.OnActivated">
            <summary>
            Called when the tool was activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.OnDeactivated">
            <summary>
            Called when the tool is deactivated
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.OnAborted">
            <summary>
            Called when the tool is aborted
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.UpdateCursorAndTooltip">
            <summary>
            Requests cursor and tooltip depending on the tool state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.OperatesInWindowArea">
            <summary>
            Determines whether the tool operates in the drawing window area.
            This implementation returns true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NDrawingDragTool.NDrawingDragToolSchema">
            <summary>
            Schema associated with NDrawingDragTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NDrawingTool">
            <summary>
            The NDrawingTool class serves as base class for tools that are created for the NDrawingView widget.
            </summary>
            <remarks>
            Tools, which derive from this class can obtain a reference to the drawing view hosting the tool by the OwnerDrawingView property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NDrawingTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NDrawingTool.OwnerDrawingView">
            <summary>
            Gets a reference to the drawing view to which this tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NDrawingTool.OwnerDrawing">
            <summary>
            Gets a reference to the drawing to which this tool belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NDrawingTool.NDrawingToolSchema">
            <summary>
            Schema associated with NDrawingTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool">
            <summary>
            The NInplaceEditTool starts an inplace editing for the shape that is Double clicked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.InplaceEditMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the context menu is shown.
            By default set to ENMouseButtonEvent.RightButtonUp
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Processes the key down event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.CanStartInplaceEdit(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether inplace editing can be started in response to the specified mouse event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.StartInplaceEdit(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Starts the inplace editing of the shape.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.DetermineInplaceEditShape(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Determines the shape from the given selecteion path for which inplace editing should start.
            </summary>
            <param name="selectionPath"></param>
            <returns>Shape for which to start inplace editing.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.CanStartInplaceEdit(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Determines whether inplace editing can be started in response to the specified keyboard event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.StartInplaceEdit(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Starts the inplace editing of the shape.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.DetermineInplaceEditShape">
            <summary>
            Determines the element for which inplace editing must occur. This implementation
            returns the anchor shape of the active page.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.NInplaceEditToolSchema">
            <summary>
            Schema associated with NInplaceEditTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NInplaceEditTool.InplaceEditMouseButtonEventProperty">
            <summary>
            Reference to the ClickSelectEvent property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NMoveTool">
            <summary>
            A drawing drag tool that moves the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NMoveTool.StartMoveDistance">
            <summary>
            Gets or sets the distance after which the move starts. 
            If the user presses the left mouse button, but does not move the mouse more than this distance, the move will not be started.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NMoveTool.Keep1DShapesConnected">
            <summary>
            Gets or sets whether 1D shapes, whose begin or end point is connected to a shape outside of the the moved items, should be kept connected when moved.
            By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NMoveTool.AllowDuplicate">
            <summary>
            Gets or sets whether duplication on move is allowed.
            By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.OnActivated">
            <summary>
            Called when the tool was activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.OnAborted">
            <summary>
            Called when the tool was aborted. Raises the Aborted event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.DeactivationHandlesEvent">
            <summary>
            Overriden to return true, if the shape was actually moved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the ready cursor and tooltip
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.MoveSelectedItems(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Boolean)">
            <summary>
            Moves the preview of the selected items to the position specified by dragPos.
            If preview is not created, it is created if the mustCreatePreview is true, or the mouse has moved a certain amount from the tool activation position.
            Finally if the preview is created, it is started with the location specified by startPos parameter.
            </summary>
            <param name="dragPos">position to move preview to (in page coordinates)</param>
            <param name="startPos">position to start preview from (in page coordinates)</param>
            <param name="mustCreatePreview"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.StartDragAndDrop">
            <summary>
            Starts a Drag-And-Drop operation
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.OnDragEnded(Nevron.Nov.UI.NDragEndedEventArgs)">
            <summary>
            Called by Drag-And-Drop when the operation has ended
            </summary>
            <param name="dragEndedArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.OnQueryDragAction(Nevron.Nov.UI.NQueryDragActionEventArgs)">
            <summary>
            Called by Drag-And-Drop to query the source whtat the action of the operation will be.
            </summary>
            <param name="queryDragActionArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.MustDuplicateMovedItems">
            <summary>
            Gets whether the moved items should be duplicated when moving ends.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NMoveTool.HasHitSelectedItem(Nevron.Nov.Diagram.NDiagramItem@)">
            <summary>
            Checks to see whether there is a hit selected item.
            </summary>
            <param name="hitItem"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NMoveTool.NMoveToolSchema">
            <summary>
            Schema associated with NMoveTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NMoveTool.StartMoveDistanceProperty">
            <summary>
            Reference to the StartMoveDistance property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NMoveTool.Keep1DShapesConnectedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NMoveTool.AllowDuplicateProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NOpenShapeHyperlinkTool">
            <summary>
            Opens a shape hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NOpenShapeHyperlinkTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NOpenShapeHyperlinkTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to open shape hyperlink on Ctrl + Left Mouse Button click.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NOpenShapeHyperlinkTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event. Overriden to change cursor and tooltip of shapes with shape hyperlink.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NOpenShapeHyperlinkTool.OpenHyperlink(Nevron.Nov.Diagram.NShapeHyperlink)">
            <summary>
            Opens the given shape hyperlink.
            </summary>
            <param name="hyperlink"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NOpenShapeHyperlinkTool.NOpenShapeHyperlinkToolSchema">
            <summary>
            Schema associated with NOpenShapeHyperlinkTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NPanTool">
            <summary>
            A drawing drag tool that shows a hand cursor on click and pans the drawing on drag.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NPanTool.StartViewportOrigin">
            <summary>
            Gets the start viewport origin.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NPanTool.StartMousePositionInDrawingView">
            <summary>
            Gets the start mouse position in drawing view coordinates.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to return false if the active page selection is not empty
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.OnActivated">
            <summary>
            Called when the tool was activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.OnAborted">
            <summary>
            Called when the tool was aborted. Raises the Aborted event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.OperatesInWindowArea">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when not active.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPanTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NPanTool.NPanToolSchema">
            <summary>
            Schema associated with NPanTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NPointerTool">
            <summary>
            Represents the drawing pointer tool, which is a composite tool that comprises from other tools.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NPointerTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NPointerTool.NPointerToolSchema">
            <summary>
            Schema associated with NPointerTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool">
            <summary>
            A drawing drag tool that performs a rectangle selection by the rectangle dragged by the user.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.Stroke">
            <summary>
            Gets or sets the stroke that is used for the display of the selection rectangle 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.StartMoveDistance">
            <summary>
            Gets or sets the distance after which the rectangle dragging starts. 
            If the user presses the left mouse button, but does not move the mouse more than this distance, the move will not be started.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.RectDraggingStarted">
            <summary>
            Gets or sets whether the tool is considered dragged when activated.
            This property is automatically set to true when the mouse has 
            travelled a certain distance since the tool was activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.UpdateAids">
            <summary>
            Called to update the visual aids of this tool. 
            </summary>
            <remarks>
            This implementation shows/hides the selection rectangle aids.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.OnActivated">
            <summary>
            Called when the tool was activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.DeactivationHandlesEvent">
            <summary>
            Overriden to return true, if the shape was actually moved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.TryGetSelectionRectInDrawing(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the selection rectangle in drawing coordinates.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.DestroyRectangleAid">
            <summary>
            Destroys the rectangle aid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.UpdateRectangleAid">
            <summary>
            Creates the rectangle aid if needed and updates it.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.NRectangleSelectToolSchema">
            <summary>
            Schema associated with NRectangleSelectTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.StrokeProperty">
            <summary>
            Reference to the stroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NRectangleSelectTool.StartMoveDistanceProperty">
            <summary>
            Reference to the StartMoveDistance property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool">
            <summary>
            A tool, which implements mouse wheel scrolling and zooming of a NDrawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.DoScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls in the given direction.
            </summary>
            <param name="dir"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.DoZoomIn">
            <summary>
            Zooms in.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.DoZoomOut">
            <summary>
            Zooms out.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.DoZoomIn(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Zooms in.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.DoZoomOut(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Zooms out.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NScrollAndZoomTool.NScrollAndZoomToolSchema">
            <summary>
            Schema associated with NScrollAndZoomTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockCellTool">
            <summary>
            Represents a tool that allows the user to select table cells
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockCellTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockCellTool.NSelectTableBlockCellToolSchema">
            <summary>
            Schema associated with NSelectTableBlockCellTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockColumnTool">
            <summary>
            Represents a tool that allows the user to select table columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockColumnTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockColumnTool.NSelectTableBlockColumnToolSchema">
            <summary>
            Schema associated with NSelectTableBlockColumnTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockRowTool">
            <summary>
            Represents a tool that allows the user to select table rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockRowTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.DrawingTools.NSelectTableBlockRowTool.NSelectTableBlockRowToolSchema">
            <summary>
            Schema associated with NSelectTableBlockRowTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NBuildContextMenuEventArgs">
            <summary>
            Event arguments associated with the NDiagramItem.BuildContextMenuEvent event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NBuildContextMenuEventArgs.#ctor(Nevron.Nov.Diagram.NDiagramItem,Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="targetNode"></param>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBuildContextMenuEventArgs.Menu">
            <summary>
            Gets the menu that is being built.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NBuildContextMenuEventArgs.ReadOnly">
            <summary>
            Gets whether the menu should be for a readonly scenario.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.INShapePart">
            <summary>
            Implemented by objects that belong to shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INShapePart.OwnerShape">
            <summary>
            Gets the owner shape.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.INTransformableElement">
            <summary>
            Implemented by trasnformable elements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.Width">
            <summary>
            The width of the element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.Height">
            <summary>
            The height of the element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.PinX">
            <summary>
            The X coordinate of the pin point in parent coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.PinY">
            <summary>
            The Y coodinate of the pin point in parent coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.LocPinX">
            <summary>
            The X coordinate of the local pin point in local coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.LocPinY">
            <summary>
            The Y coordinate of the local pin point in local coordinates.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.LocPinRelative">
            <summary>
            Gets or sets whether the local pin point is positioned relatively to the Width and Height.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.INTransformableElement.Angle">
            <summary>
            The angle the element is rotated on.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NCloseAllCommandAction">
            <summary>
            Closes the currently expanded library sections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseAllCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseAllCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseAllCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseAllCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NCloseAllCommandAction.NCloseAllCommandActionSchema">
            <summary>
            Schema associated with NCloseAllCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NCloseCommandAction">
            <summary>
            Closes the currently expanded library section.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCloseCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NCloseCommandAction.NCloseCommandActionSchema">
            <summary>
            Schema associated with NCloseCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction">
            <summary>
            Serves as base for commands associated wit the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction.GetLibraryBrowser(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the library browser
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction.GetExpandedLibraryView(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing view
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction.GetExpandedLibraryDocument(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the expanded library document
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction.GetExpandedLibrary(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the expanded library
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserCommandAction.NLibraryBrowserCommandActionSchema">
            <summary>
            Schema associated with NLibraryBrowserCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserToggleCommandAction">
            <summary>
            Serves as base for toggle commands associated wit the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserToggleCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserToggleCommandAction.NLibraryBrowserToggleCommandActionSchema">
            <summary>
            Schema associated with NLibraryBrowserToggleCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction">
            <summary>
            Selects a library display order for the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.#ctor(Nevron.Nov.Diagram.ENLibraryDisplayOrder)">
            <summary>
            Initializer constructor
            </summary>
            <param name="viewType"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.LibraryDisplayOrder">
            <summary>
            Gets or sets the view type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.NLibraryBrowserLibraryDisplayOrderCommandActionSchema">
            <summary>
            Schema associated with NLibraryBrowserLibraryDisplayOrderCommandAction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryDisplayOrderCommandAction.LibraryDisplayOrderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction">
            <summary>
            Lets the user select the opened predefined libraries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.OpenPredefinedLibrariesDialog(Nevron.Nov.Diagram.NLibraryBrowser)">
            <summary>
            Opens a dialog for selecting the visible predefined libraries.
            </summary>
            <param name="browser"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.OnPredefinedLibrariesDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the predefined libraries dialog has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryGalleryCommandAction.NLibraryGalleryCommandActionSchema">
            <summary>
            Schema associated with NPredefinedLibrariesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction">
            <summary>
            Selects a library view type for the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.#ctor(Nevron.Nov.Diagram.ENLibraryViewType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="viewType"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.LibraryViewType">
            <summary>
            Gets or sets the view type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.NLibraryBrowserLibraryViewTypeCommandActionSchema">
            <summary>
            Schema associated with NLibraryBrowserLibraryViewTypeCommandAction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryBrowserLibraryViewTypeCommandAction.LibraryViewTypeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction">
            <summary>
            Creates a new library and adds it to the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.OpenLibraryDialog(Nevron.Nov.Diagram.NLibraryBrowser)">
            <summary>
            Opens the new library dialog that creates a new blank library.
            </summary>
            <param name="browser"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.OnNewLibraryWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the "New Library" dialog has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryCommandActionSchema">
            <summary>
            Schema associated with NNewLibraryCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryWindowInfo">
            <summary>
            New library window info.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryWindowInfo.LibraryBrowser">
            <summary>
            Library browser.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryWindowInfo.RadioGroup">
            <summary>
            Radio group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryWindowInfo.NewLibraryTitleTextBox">
            <summary>
            New library title text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryWindowInfo.NewLibraryAuthorTextBox">
            <summary>
            New library author text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NNewLibraryCommandAction.NNewLibraryWindowInfo.PredefinedLibraryListBox">
            <summary>
            Predefined library list box.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NOpenLibraryCommandAction">
            <summary>
            Shows an Open File dialog and opens the selected library.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NOpenLibraryCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NOpenLibraryCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NOpenLibraryCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NOpenLibraryCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NOpenLibraryCommandAction.NOpenLibraryCommandActionSchema">
            <summary>
            Schema associated with NOpenLibraryCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction">
            <summary>
            Saves the currently open library.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="saveAs"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.SaveAs">
            <summary>
            Gets or sets whether the command implements save or save as logic.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.NSaveLibraryCommandActionSchema">
            <summary>
            Schema associated with NSaveLibraryCommandAction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NSaveLibraryCommandAction.SaveAsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction">
            <summary>
            Selects the library item at the bottom of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NSelectDownCommandAction.NSelectDownCommandActionSchema">
            <summary>
            Schema associated with NSelectDownCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction">
            <summary>
            Selects the library item at the left of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NSelectLeftCommandAction.NSelectLeftCommandActionSchema">
            <summary>
            Schema associated with NSelectLeftCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction">
            <summary>
            Selects the library item at the right of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NSelectRightCommandAction.NSelectRightCommandActionSchema">
            <summary>
            Schema associated with NSelectRightCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction">
            <summary>
            Selects the library item at the top of the currently selected item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NSelectUpCommandAction.NSelectUpCommandActionSchema">
            <summary>
            Schema associated with NSelectUpCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction">
            <summary>
            Copies the currently selected text in the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NCopyCommandAction.NCopyCommandActionSchema">
            <summary>
            Schema associated with NCopyCommandAction  
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NCutCommandAction">
            <summary>
            Cuts the selected text to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCutCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCutCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCutCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NCutCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NCutCommandAction.NCutCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NDeleteCommandAction">
            <summary>
            Command action, that deletes the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NDeleteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NDeleteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NDeleteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NDeleteCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NDeleteCommandAction.NDeleteCommandActionSchema">
            <summary>
            Schema associated with NDeleteCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NPasteCommandAction">
            <summary>
            Pastes the text in the clipboard to the currentl position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NPasteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NPasteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NPasteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NPasteCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NPasteCommandAction.NPasteCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction">
            <summary>
            Serves as base for all drawing command actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.GetLibraryView(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the drawing view
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.GetLibraryDocument(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.GetLibrary(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the library hosted in the view
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryCommands.NLibraryCommandAction.NLibraryCommandActionSchema">
            <summary>
            Schema associated with NLibraryCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryBrowser">
            <summary>
            A navigation bar, which shows libraries and libraries created from shape factories.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.ExpandedLibrarySection">
            <summary>
            Gets or sets the currently selected library pane
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.ExpandedLibraryView">
            <summary>
            Gets the selected library view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.LibraryViewType">
            <summary>
            Gets or sets the type of view that needs to be used for viewing the libraries.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.LibraryDisplayOrder">
            <summary>
            Gets or sets the display order in which the libraries are viewed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.HandleAutoConnect">
            <summary>
            Gets or sets whether the library browser handles the AutoConnect event of the drawing view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.DrawingView">
            <summary>
            Gets or sets the drawing view associated with this library browser.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.LibrariesFolder">
            <summary>
            Gets or sets the libraries folder
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.SearchManager">
            <summary>
            Gets the library search manager.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryBrowser.Mode">
            <summary>
            Gets or sets the library browser mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.AddLibrarySection(Nevron.Nov.Diagram.NLibrary)">
            <summary>
            Creates a new library section from the specified library.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.AddLibrarySection(Nevron.Nov.Diagram.NLibraryView)">
            <summary>
            Creates a new library section from the specified library view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.AddLibrarySection(Nevron.Nov.IO.NFile)">
            <summary>
            Opens a library from the specified file and adds a new library group for it in the browser.
            </summary>
            <param name="libraryFile">Library file to open.</param>
            <returns>Library section associated with the loaded library.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.AddLibrarySection(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Adds the given library section to the library browser.
            </summary>
            <param name="librarySection"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.AddLibrarySections(Nevron.Nov.DataStructures.NList{Nevron.Nov.IO.NFile})">
            <summary>
            Opens the specified library sections.
            </summary>
            <param name="libraryFiles">Library files to open.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.CloseExpandedLibrarySection">
            <summary>
            Closes the current expanded library section
            </summary>
            <returns>a promise, which resolves to true, if the expanded section was successfully closed</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.CloseLibrarySection(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Closes the specified library section.
            </summary>
            <param name="librarySection"></param>
            <returns>a promise, which resolves to true, if the specified section was successfully closed and removed from the browser</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.CloseAllLibrarySections">
            <summary>
            Closes all opened library sections.
            </summary>
            <returns>a promise, which resolves to true, if all sections were successfully closed</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.CloseLibrarySections(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NLibrarySection})">
            <summary>
            Closes the specified library sections.
            </summary>
            <param name="librarySections"></param>
            <returns>a promise, which resolves to true, if all of the specified sections were successfully closed</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.CanMoveLibrarySectionUp(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Determines whether the can move up operation can be executed.
            </summary>
            <param name="librarySection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.MoveLibrarySectionUp(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Moves up the specified library section.
            </summary>
            <param name="librarySection"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.CanMoveLibrarySectionDown(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Determines whether the can move down operation can be executed.
            </summary>
            <param name="librarySection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.MoveLibrarySectionDown(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Moves down the specified library section.
            </summary>
            <param name="librarySection"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.GetLibrarySections">
            <summary>
            Gets all library sections in the library browser (library file sections and library search sections).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.GetLibraryFileSections">
            <summary>
            Gets all library file sections in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.GetLibrarySearchSections">
            <summary>
            Gets all library search sections in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.GetLibrarySectionCount">
            <summary>
            Gets the count of library sections in this library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.EnsureVisible(Nevron.Nov.Diagram.NLibrarySection)">
            <summary>
            Ensures the visibility of the specified library section.
            </summary>
            <param name="librarySection"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.ResetLibraries">
            <summary>
            Closes all currently opened shape libraries and opens only the default ones - "Basic" and "Connectors".
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the library browser commander, by adding command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.OnLibraryViewTypeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LibraryViewType property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.OnLibraryDisplayOrderChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LibraryDisplayOrder property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryBrowser.OnModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Mode property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryBrowser.NLibraryBrowserSchema">
            <summary>
            Schema associated with NLibraryBrowser
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryBrowser.SearchManagerProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryBrowser.LibraryViewTypeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryBrowser.LibraryDisplayOrderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryBrowser.ModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryBrowser.HandleAutoConnectProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySearchIndex">
            <summary>
            Library search index.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySearchParams">
            <summary>
            Encapsulates the library search options
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.CaseSensitive">
            <summary>
            Whether the search is case sensitive or not
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.MatchMode">
            <summary>
            The search match mode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.SearchInLibraryGallery">
            <summary>
            Whether to search for items in the library gallery
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.SearchInOpenedLibraries">
            <summary>
            Whether to search for items in the opened libraries
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.SearchShapes">
            <summary>
            Whether to search for shapes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.SearchLibraries">
            <summary>
            Whether to search for opened libraries
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.SearchFolders">
            <summary>
            Whether to search for folders whose names match
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchParams.SearchText">
            <summary>
            Text to search for
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySearchManager">
            <summary>
            Manages the searches for shapes and libraries inside NOV diagram.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySearchManager.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySearchManager.LibrariesFolder">
            <summary>
            Gets or sets the predefined libraries folder.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySearchManager.TaskRunning">
            <summary>
            Gets whether any search task is running the background.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySearchManager.OwnerLibraryBrowser">
            <summary>
            Gets the library browser that owns this manager.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySearchManager.LibraryGallerySearchInfo">
            <summary>
            Gets the library gallery search info.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchManager.NLibrarySearchManagerSchema">
            <summary>
            Schema associated with NLibrarySearchManager
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NFolderSearchItem">
            <summary>
            Information about a library folder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NFolderSearchItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NFolderSearchItem.Items">
            <summary>
            Gets or sets the items child 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFolderSearchItem.NFolderSearchItemSchema">
            <summary>
            Schema associated with NFolderSearchItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFolderSearchItem.ItemsChild">
            <summary>
            Reference to the Items child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NFolderSearchItem.FolderProperty">
            <summary>
            Reference to the Folder property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryFileSearchItem">
            <summary>
            Represents a library search item that is loaded from a file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSearchItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSearchItem.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryFileSearchItem.FileName">
            <summary>
            Gets/Sets the name of the file inside the current folder, from which the library shapes should be obtained.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSearchItem.GetFile(Nevron.Nov.IO.NFolder)">
            <summary>
            Gets the file from which the shapes are loaded.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSearchItem.NLibraryFileSearchItemSchema">
            <summary>
            Schema associated with NLibraryFileSearchItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSearchItem.FileNameProperty">
            <summary>
            Reference to the File property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryFileSectionSearchItem">
            <summary>
            Represents a library search item that is loaded from a library file section.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSectionSearchItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSectionSearchItem.#ctor(Nevron.Nov.Diagram.NLibraryFileSection)">
            <summary>
            Initializer constructor
            </summary>
            <param name="section"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryFileSectionSearchItem.LibraryFileSection">
            <summary>
            Gets the library file section, in which this item searches inside.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSectionSearchItem.NLibraryFileSectionSearchItemSchema">
            <summary>
            Schema associated with NLibraryFileSectionSearchItem
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySearchItem">
            <summary>
            Represents a search item that represents a library. 
            Serves as base class for NLibraryFileSearchItem and NLibraryFileSectionSearchItem
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySearchItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySearchItem.Shapes">
            <summary>
            Gets or sets the shape items contained in the library
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchItem.NLibrarySearchItemSchema">
            <summary>
            Schema associateed with NLibrarySearchItem
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchItem.ShapesChild">
            <summary>
            Shapes child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeSearchItem">
            <summary>
            Represents a shape search item
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeSearchItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeSearchItem.#ctor(System.String)">
            <summary>
            Creates new shape info object
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NShapeSearchItem.OwnerLibrary">
            <summary>
            Gets the library item owning this shape item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeSearchItem.CreateLibraryItem">
            <summary>
            Creates a library item that represents this
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeSearchItem.NShapeSearchItemSchema">
            <summary>
            Schema associated with NShapeSearchItem
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NShapeSearchItemCollection">
            <summary>
            Represents a collection of shape search items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NShapeSearchItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NShapeSearchItemCollection.NShapeSearchItemCollectionSchema">
            <summary>
            Schema associated with NShapeSearchItemCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDirectorySearchItem">
            <summary>
            Represents a search item from the directories tree. Serves as base class for NLibrarySeachItem and NFolderSearchItem
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDirectorySearchItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDirectorySearchItem.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDirectorySearchItem.ParentFolder">
            <summary>
            Gets the folder in which this library resides.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDirectorySearchItem.NDirectorySearchItemSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDirectorySearchItemCollection`1">
            <summary>
            Represents a collection of directory search items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDirectorySearchItemCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDirectorySearchItemCollection`1.NDirectorySearchItemCollectionSchema">
            <summary>
            Schema associated with NFolderSearchItemCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryGallerySearchInfo">
            <summary>
            Holds information about the predefined libraries in which to search for shapes and libraries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.Folders">
            <summary>
            Gets or sets the root folders in which to search
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.OwnerSearchManager">
            <summary>
            Gets or sets the owner search manager.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.GetSearchIndexNoCreate">
            <summary>
            Gets the search index. Does not create it on demand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.GetOrCreateSeachIndexAsync(Nevron.Nov.NProgress)">
            <summary>
            Gets or creates the search index.
            </summary>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.NeedsSaveToAppSettings">
            <summary>
            Gets or sets whether the search info needs to be saved to application settings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.LoadFromAppSettingsAsync">
            <summary>
            Loads the library gallery search info from the application settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.SaveToAppSettingsAsync">
            <summary>
            Saves the library gallery search info to the application settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.LoadFromFolderAsync(Nevron.Nov.IO.NFolder,Nevron.Nov.NProgress)">
            <summary>
            Loads the library folders from the specified root folder.
            </summary>
            <param name="folder"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.SaveToFileAsync(Nevron.Nov.IO.NFile)">
            <summary>
            Saves this search info to a file. If the file exists, it's overwritten.
            </summary>
            <param name="file"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.NLibraryGallerySearchInfoSchema">
            <summary>
            Schema associated with NLibraryGallerySearchInfo
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.FoldersChild">
            <summary>
            Reference to the Folders child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryGallerySearchInfo.LibrarySearchInfoFileName">
            <summary>
            The predefined libraries search info file name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSearchItem">
            <summary>
            Represents a search item. Serves as base class for shapes, libraries and folder search items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSearchItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSearchItem.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSearchItem.Name">
            <summary>
            Gets or sets the name 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSearchItem.OwnerSearchManager">
            <summary>
            Gets the search manager to which this item belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NSearchItem.OwnerSearchInfo">
            <summary>
            Gets the owner library search info.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSearchItem.NameProperty">
            <summary>
            Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSearchItem.NSearchItemSchema">
            <summary>
            Schema associated with NSearchItem
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NSearchItemCollection`1">
            <summary>
            Represents a collection of search items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NSearchItemCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NSearchItemCollection`1.NSearchItemCollectionSchema">
            <summary>
            Schema associated with NSearchItemCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrowheadPreview">
            <summary>
            A widget that shows previews of NArrowhead objects.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadPreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Overriden to paint a stroke preview.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrowheadPreview.NArrowheadPreviewSchema">
            <summary>
            Schema associated with NArrowheadPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrowheadShapePropertyEditor">
            <summary>
            Property editor associated with ENArrowheadShape.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadShapePropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadShapePropertyEditor.CreateComboBox">
            <summary>
            Creates a combo box for this editor. Overriden to paint arrowhead shape previews
            in the popup list box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadShapePropertyEditor.GetWidgetForOption(System.Object)">
            <summary>
            Overriden to return null for ENArrowheadShape.Custom in order to hide this value from the editor.
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrowheadShapePropertyEditor.NArrowheadShapePropertyEditorSchema">
            <summary>
            Schema associated with NArrowheadShapePropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrowheadSplitButton">
            <summary>
            A style split button, that is used to select an arrowhead style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.CreateMainDropDownWidget">
            <summary>
            Overriden to create the main drop down widget
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.CreatePropertyEditors">
            <summary>
            Creates a widget to edit various arrowhead properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.OnMoreOptionsButtonClicked(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Occurs when the more colors button has been clicked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.OnMoreOptionsWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the color dialog has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.OnPropertyEditorUpdatePreview(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the value of a property editor has been changed by the user.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.OnColorPickerSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when a color has been picked.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrowheadSplitButton.NArrowheadSplitButtonSchema">
            <summary>
            Schema associated with NArrowheadSplitButton
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramActionMenuBuilder">
            <summary>
            Creates the Nevron Diagram "Action" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramActionMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramActionMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramArrangeMenuBuilder">
            <summary>
            Creates the Nevron Diagram "Arrange" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramArrangeMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramArrangeMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramEditMenuBuilder">
            <summary>
            Creates the Nevron Diagram "Edit" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramEditMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramEditMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder">
            <summary>
            Creates the Nevron Diagram "File" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.NewImage">
            <summary>
            Gets the "New" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.OpenImage">
            <summary>
            Gets the "Open" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.SaveImage">
            <summary>
            Gets the "Save" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.SaveAsImage">
            <summary>
            Gets the "Save As" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.ImportImage">
            <summary>
            Gets the "Import" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.ExportImage">
            <summary>
            Gets the "Export" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.PageImage">
            <summary>
            Gets the "Page" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.DocumentInfoImage">
            <summary>
            Gets the "Document Information" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.PrintImage">
            <summary>
            Gets the "Print" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.OpenDatabaseSchemaImage">
            <summary>
            Gets the "Open Database Schema" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.ImportFlowchartImage">
            <summary>
            Gets the "Import Flowchart" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.ImportOrgChartImage">
            <summary>
            Gets the "Import Organizational Chart" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.DxfFormatImage">
            <summary>
            Gets the "DXF" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.GedFormatImage">
            <summary>
            Gets the "GED" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.HtmlFormatImage">
            <summary>
            Gets the "HTML" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.RasterImageFormatImage">
            <summary>
            Gets the "Raster Image" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.PdfFormatImage">
            <summary>
            Gets the "PDF" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.ShpFormatImage">
            <summary>
            Gets the "SHP" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.EmfFormatImage">
            <summary>
            Gets the "EMF" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.SvgFormatImage">
            <summary>
            Gets the "SVG" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.VsdxFormatImage">
            <summary>
            Gets the "VSDX" format image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.CreateImportMenuItem">
            <summary>
            Creates the "Import" menu item of the diagram command bars "File" menu and its submenu items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.CreateExportMenuItem">
            <summary>
            Creates the "Export" menu item of the diagram command bars "File" menu and its submenu items.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.MenuImportName">
            <summary>
            Gets the name of the "Import" menu item.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDiagramFileMenuBuilder.MenuExportName">
            <summary>
            Gets the name of the "Export" menu item.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramFormatMenuBuilder">
            <summary>
            Creates the Nevron Diagram "Format" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFormatMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFormatMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramInsertMenuBuilder">
            <summary>
            Creates the Nevron Diagram "Insert" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramInsertMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramInsertMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Creates the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramToolsMenuBuilder">
            <summary>
            Creates the Nevron Diagram "Tools" menu builder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramToolsMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramToolsMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramViewMenuBuilder">
            <summary>
            Creates the Nevron Diagram "View" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramViewMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramViewMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramStatusBarBuilder">
            <summary>
            Creates the diagram status bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramStatusBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramStatusBarBuilder.Create">
            <summary>
            Creates the diagram status bar.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramActionToolBarBuilder">
            <summary>
            Creates the Nevron Diagram "Action" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramActionToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramActionToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramFormatToolBarBuilder">
            <summary>
            Creates the Nevron Diagram "Format" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFormatToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramFormatToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramLayoutToolBarBuilder">
            <summary>
            Creates the Nevron Diagram "Layout" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramLayoutToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramLayoutToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramMailMergeToolBarBuilder">
            <summary>
            Creates the "Mail Merge" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramMailMergeToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramMailMergeToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramStandardToolBarBuilder">
            <summary>
            Creates the Nevron diagram "Standard" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramStandardToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramStandardToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramToolsToolBarBuilder">
            <summary>
            Creates the Nevron Diagram "Tools" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramToolsToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramToolsToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramViewToolBarBuilder">
            <summary>
            Creates the Nevron Diagram "View" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramViewToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramViewToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NAddBookmarkDialog">
            <summary>
            Represents the Add Bookmark dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NAddBookmarkDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NAddBookmarkDialog.BookmarkName">
            <summary>
            Gets the user specified name of the bookmark.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NAddBookmarkDialog.OnOpened">
            <summary>
            Called when the window opens. Overriden to focus the Bookmark Name text box.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NAddBookmarkDialog.NAddBookmarkDialogSchema">
            <summary>
            Schema associated with NAddBookmarkDialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeShapesDialog">
            <summary>
            Represents the "Arrange Shapes" dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.Init(Nevron.Nov.Diagram.NPage)">
            <summary>
            Initializes this dialog.
            </summary>
            <param name="activePage"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.Init(Nevron.Nov.Diagram.NPage,Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializes this dialog.
            </summary>
            <param name="activePage"></param>
            <param name="selectedLayoutSchema"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.OnClosed">
            <summary>
            Called when the window is closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.CreateLayoutContext(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NShape})">
            <summary>
            Creates a layout context for the given drawing document and list of shapes.
            </summary>
            <param name="drawingDocument"></param>
            <param name="shapes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.CreateLayoutContext(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Diagram.NPage)">
            <summary>
            Creates a layout context for the given drawing document and page.
            </summary>
            <param name="drawingDocument"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeShapesDialog.NArrangeShapesDialogSchema">
            <summary>
            Schema associated with NArrangeShapesDialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NCornerRoundingDialog">
            <summary>
            Represents the corner rounding dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCornerRoundingDialog.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCornerRoundingDialog.GetCornerRounding">
            <summary>
            Gets the corner rouding object. 
            If the Auto option is selected returns NNode.ClearValueObject otherwise returns a valid double value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NCornerRoundingDialog.NCornerRoundingDialogSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NCornerRoundingPreview">
            <summary>
            Represents the corner rounding preview/
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCornerRoundingPreview.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCornerRoundingPreview.UpdatePreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCornerRoundingPreview.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NCornerRoundingPreview.NCornerRoundingPreviewSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NEditBookmarksDialog">
            <summary>
            Represents the edit boomarks dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NEditBookmarksDialog.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NEditBookmarksDialog.Init(Nevron.Nov.Diagram.NBookmarkManager)">
            <summary>
            Initializes the edit bookmarks dialog
            </summary>
            <param name="bookmarkManager"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NEditBookmarksDialog.NEditBookmarksDialogSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.ENThemeColorType">
            <summary>
            Enumerates the theme color types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.ENThemeColorType.ThemeColor">
            <summary>
            Theme color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.ENThemeColorType.ThemeColorShade">
            <summary>
            Shade of a theme color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.ENThemeColorType.VariantColor">
            <summary>
            Variant color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.ENThemeColorType.StandardColor">
            <summary>
            Standard color.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NPageNavigator">
            <summary>
            A widget that represents the footer of a drawing view. Exposes a page navigator.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnActivePageChanged">
            <summary>
            Called when the active page has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnDocumentChanged">
            <summary>
            Called when the document has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NPageNavigator.AllowAdd">
            <summary>
            Gets/Sets whether adding of pages is allowed. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NPageNavigator.AllowRemove">
            <summary>
            Gets/Sets whether removing of pages is allowed. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NPageNavigator.OwnerDrawingView">
            <summary>
            Gets the drawing view to which this page navigator belongs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.RebuildPageButtons">
            <summary>
            Rebuilds the page navigator page buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.UpdateActivePage">
            <summary>
            Checks the button that represents the currently active page. Unchecks all others
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.UpdatePageTitle(Nevron.Nov.Diagram.NPage)">
            <summary>
            Updates the title displayed by the button for the specified page.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnPageButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a page button is clicked. This implemenation activates the respective page.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnPageButtonMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the mouse is down on a page button. This implemenation shows the page context menu.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnDeletePageMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the delete page menu item was clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnRenamePageMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the rename page menu item was clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnRenamePageWindowClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the rename page window is closed
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnDuplicatePageMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the duplicate page menu item was clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnAddButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the add button was clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnPreviousPageButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the previous page button was clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPageNavigator.OnNextPageButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the next page button was clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NPageNavigator.NPageNavigatorSchema">
            <summary>
            Schema associated with NPageNavigator.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NPageNavigator.AllowRemoveProperty">
            <summary>
            Reference to the AllowRemove property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NPresentationWindow">
            <summary>
            Represents a top level window, which hosts the drawing presentation mode view
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPresentationWindow.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPresentationWindow.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Occurs when a keyboard key is pushed down.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NPresentationWindow.OnOpened">
            <summary>
            Called when the window is open.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NPresentationWindow.NPresentationWindowSchema">
            <summary>
            Schema associated with NPresentationWindow
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder">
            <summary>
            Creates the "File" menu of the diagrap ribbon application menu.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.NewImage">
            <summary>
            Gets the "New" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.OpenImage">
            <summary>
            Gets the "Open" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.SaveImage">
            <summary>
            Gets the "Save" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.SaveAsImage">
            <summary>
            Gets the "Save As" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.ImportImage">
            <summary>
            Gets the "Import" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.ExportImage">
            <summary>
            Gets the "Export" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.PageImage">
            <summary>
            Gets the "Page" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.DocumentInfoImage">
            <summary>
            Gets the "Document Information" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.PrintImage">
            <summary>
            Gets the "Print" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.OpenDatabaseSchemaImage">
            <summary>
            Gets the "Database Schema" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.ImportFlowchartImage">
            <summary>
            Gets the "Import Flowchart" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.ImportOrgChartImage">
            <summary>
            Gets the "Import Organizational Chart" menu item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.DxfFormatImage">
            <summary>
            Gets the "GED" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.EmfFormatImage">
            <summary>
            Gets the "EMF" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.GedFormatImage">
            <summary>
            Gets the "GED" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.HtmlFormatImage">
            <summary>
            Gets the "HTML" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.RasterImageFormatImage">
            <summary>
            Gets the "Raster Image" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.PdfFormatImage">
            <summary>
            Gets the "PDF" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.ShpFormatImage">
            <summary>
            Gets the "SHP" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.SvgFormatImage">
            <summary>
            Gets the "SVG" format image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramRibbonFileMenuBuilder.VsdxFormatImage">
            <summary>
            Gets the "VSDX" format image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBar">
            <summary>
            The diah
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBar.GetOwnerRibbonWidgets">
            <summary>
            Gets the commanding widgets placed in the ribbon that owns this toolbar.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBar.NDiagramRibbonQuickAccessToolBarSchema">
            <summary>
            Schema associated with NDiagramRibbonQuickAccessToolBar.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBarBuilder">
            <summary>
            Creates the NOV diagram ribbon's quick access toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBarBuilder.CreateToolbarInstance">
            <summary>
            Creates the toolbar instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonQuickAccessToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NActionTabPageBuilder">
            <summary>
            Creates the diagram ribbon "Action" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NActionTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NActionTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NActionTabPageBuilder.GroupComposeName">
            <summary>
            The name of the "Compose" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NActionTabPageBuilder.GroupGroupName">
            <summary>
            The name of the "Group" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NActionTabPageBuilder.GroupRotateName">
            <summary>
            The name of the "Rotate" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeAlignGroupBuilder">
            <summary>
            Creates the diagram ribbon "Align" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeAlignGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeAlignGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeGridGroupBuilder">
            <summary>
            Creates the diagram ribbon "Grid" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeGridGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeGridGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeLayoutGroupBuilder">
            <summary>
            Create the diagram ribbon "Layout" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeLayoutGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeLayoutGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangePositionGroupBuilder">
            <summary>
            Creates the diagram ribbon "Position" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangePositionGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangePositionGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeSizeGroupBuilder">
            <summary>
            Creates the diagram ribbon "Size" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSizeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSizeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSizeGroupBuilder.CreateRibbonWrapFlowPanel">
            <summary>
            Creates a ribbon wrap flow panel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeSelectGroupBuilder">
            <summary>
            Creates the diagram ribbon "Select" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSelectGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSelectGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSelectGroupBuilder.CreateSelectMenu">
            <summary>
            Creates the "Select" menu drop down.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeSnapGroupBuilder">
            <summary>
            Creates the diagram ribbon "Snap" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSnapGroupBuilder.#ctor">
            <summary>
            Default constructors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSnapGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeSpacingGroupBuilder">
            <summary>
            Creates the diagram ribbon "Spacing" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSpacingGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeSpacingGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Add the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder">
            <summary>
            Creates the "Arrange" tab page of the diagram ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupAlignName">
            <summary>
            The name of the "Align" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupGridName">
            <summary>
            The name of the "Grid" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupLayoutName">
            <summary>
            The name of the "Layout" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupPositionName">
            <summary>
            The name of the "Position" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupResizeName">
            <summary>
            The name of the "Resize" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.SelectName">
            <summary>
            The name of the "Select" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupSnapName">
            <summary>
            The name of the "Snap" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupSpacingName">
            <summary>
            The name of the "Spacing" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NArrangeTabPageBuilder.GroupZOrderName">
            <summary>
            The name of the "Z-order" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NArrangeOrderGroupBuilder">
            <summary>
            Creates the diagram ribbon "Order" group of the "Arrange" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeOrderGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NArrangeOrderGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDesignPageGroupBuilder">
            <summary>
            Creates the diagram ribbon "Page" group of the "Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignPageGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignPageGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDesignThemeGroupBuilder">
            <summary>
            Creates the diagram ribbon "Page Theme" group of the "Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignThemeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignThemeGroupBuilder.CreateRibbonGroup">
            <summary>
            Creates the ribbon group. Overriden to change priority of the Small state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignThemeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDesignVariantGroupBuilder">
            <summary>
            Creates the diagram ribbon "Page Theme Variant" group of the "Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignVariantGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignVariantGroupBuilder.CreateRibbonGroup">
            <summary>
            Creates the ribbon group. Overriden to change priority of the Small state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignVariantGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDesignShapeStyleGroupBuilder">
            <summary>
            Creates the diagram ribbon "Shape Style" group of the "Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignShapeStyleGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignShapeStyleGroupBuilder.CreateRibbonGroup">
            <summary>
            Creates the ribbon group. Overriden to change priority of the Small state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignShapeStyleGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignShapeStyleGroupBuilder.CreateShapeStyleRibbonGallery(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NTablePicker,Nevron.Nov.UI.NRibbonGalleryCommandSource)">
            <summary>
            Creates the "Shape Style" ribbon gallery.
            </summary>
            <param name="icon">The icon of the gallery when in collapsed state.</param>
            <param name="commandSource"></param>
            <param name="tablePicker"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignShapeStyleGroupBuilder.CreateShapeStylePicker">
            <summary>
            Creates the "Shape Style" picker hosted in the "Shape Style" ribbon gallery.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder">
            <summary>
            Creates the diagram ribbon "Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder.GroupPageName">
            <summary>
            The name of the "Style" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder.GroupThemeName">
            <summary>
            The name of the "Page Theme" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder.GroupVariantName">
            <summary>
            The name of the "Page Theme Variant" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDesignTabPageBuilder.GroupShapeStyleName">
            <summary>
            The name of the "Shape Style" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NCollapsedStateStyleDropDown">
            <summary>
            A menu drop down for the collapsed state of a ribbon group that contains widgets
            for style and formatting and an option to copy and apply the selected style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCollapsedStateStyleDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NCollapsedStateStyleDropDown.OnPopupClosed">
            <summary>
            Called when the popup is closed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NCollapsedStateStyleDropDown.NCollapsedStateStyleDropDownSchema">
            <summary>
            Schema associated with NCollapsedStateStyleDropDown.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NHomeClipboardGroupBuilder">
            <summary>
            Creates the diagram ribbon "Clipboard" group of the "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeClipboardGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeClipboardGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NHomeShapeStyleGroupBuilder">
            <summary>
            Creates the diagram ribbon "Shape Style" group of the "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeShapeStyleGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeShapeStyleGroupBuilder.CreateRibbonGroup">
            <summary>
            Creates a ribbon group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeShapeStyleGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeShapeStyleGroupBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a split button. Overriden to accumulate the split button command sources.
            </summary>
            <typeparam name="Oxlh"></typeparam>
            <param name="image"></param>
            <param name="moreOptionsImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeShapeStyleGroupBuilder.CreateRibbonSmallButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon button that is always in small state.
            </summary>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder">
            <summary>
            Creates the diagram ribbon "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.GroupClipboardName">
            <summary>
            The name of the "Clipboard" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.GroupParagraphName">
            <summary>
            The name of the "Paragraph" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.GroupShapeStyleName">
            <summary>
            The name of the "Shape Style" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.GroupTextName">
            <summary>
            The name of the "Text" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NHomeTabPageBuilder.GroupToolsName">
            <summary>
            The name of the "Tools" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NHomeTextGroupBuilder">
            <summary>
            Creates the diagram ribbon "Text" group of the "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTextGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTextGroupBuilder.CreateRibbonGroup">
            <summary>
            Creates a ribbon group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTextGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTextGroupBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a split button. Overriden to accumulate the split button command sources.
            </summary>
            <typeparam name="Qxlh"></typeparam>
            <param name="image"></param>
            <param name="moreOptionsImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeTextGroupBuilder.CreateRibbonSmallToggleButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a ribbon toggle button in small state.
            </summary>
            <param name="smallImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NHomeToolsGroupBuilder">
            <summary>
            Creates the diagram "Tools" ribbon group of the "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeToolsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NHomeToolsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NInsertIllustrationsGroupBuilder">
            <summary>
            Creates the diagram ribbon "Illustrations" group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertIllustrationsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertIllustrationsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NInsertLinksGroupBuilder">
            <summary>
            Creates the diagram "Links" ribbon group of the "Insert" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertLinksGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertLinksGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NInsertSymbolsGroupBuilder">
            <summary>
            Creates the diagram "Symbols" ribbon group of the "Insert" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertSymbolsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertSymbolsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder">
            <summary>
            Creates the diagram ribbon "Insert" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder.GroupIllustrationsName">
            <summary>
            The name of the "Illustrations" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder.GroupLinksName">
            <summary>
            The name of the "Links" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder.GroupSymbolsName">
            <summary>
            The name of the "Symbols" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NInsertTabPageBuilder.GroupTextName">
            <summary>
            The name of the "Text" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NInsertTextGroupBuilder">
            <summary>
            Creates the diagram  "Symbols" ribbon group of the "Insert" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertTextGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NInsertTextGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NMailingsFieldsGroupBuilder">
            <summary>
            Creates the rich text "Fields" ribbon group of the "Mailings" tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsFieldsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsFieldsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NMailingsFinishGroupBuilder">
            <summary>
            Creates the rich text "Finish" ribbon group of the "Mailings" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsFinishGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsFinishGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NMailingsPreviewGroupBuilder">
            <summary>
            Creates the rich text "Preview" ribbon group of the "Mailings" tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsPreviewGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsPreviewGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsPreviewGroupBuilder.CreateRecordNavigationPanel">
            <summary>
            Creates the mail merge record navigation panel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NMailingsStartMailMergeGroupBuilder">
            <summary>
            Creates the rich text "Start Mail Merge" ribbon group of the "Mailings" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsStartMailMergeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsStartMailMergeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder">
            <summary>
            Creates the rich text "Mailings" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder.GroupFieldsName">
            <summary>
            The name of the "Fields" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder.GroupFinishName">
            <summary>
            The name of the "Finish" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder.GroupPreviewName">
            <summary>
            The name of the "Preview" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NMailingsTabPageBuilder.GroupStartMailMergeName">
            <summary>
            The name of the "Start Mail Merge" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NReviewProofingGroupBuilder">
            <summary>
            Creates the diagram ribbon "Proofing" group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NReviewProofingGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NReviewProofingGroupBuilder.TrimCommandTextElipsis">
            <summary>
            Gets whether to trim the command text elipsis. Overriden to return false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NReviewProofingGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NReviewTabPageBuilder">
            <summary>
            Creates the diagram ribbon "Review" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NReviewTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NReviewTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NReviewTabPageBuilder.GroupProofingName">
            <summary>
            The name of the "Proofing" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableAlignmentGroupBuilder">
            <summary>
            Creates the rich text "Alignment" ribbon group of the "Table" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableAlignmentGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableAlignmentGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableMergeGroupBuilder">
            <summary>
            Creates the rich text "Merge" ribbon group of the "Table" ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableMergeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableMergeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableMergeGroupBuilder.CreateRibbonCollapsiblePanel">
            <summary>
            Creates a ribbon collapsible panel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableRowsAndColumnsGroupBuilder">
            <summary>
            Creates the rich text "Rows &amp; Columns" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableRowsAndColumnsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableRowsAndColumnsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableTableGroupBuilder">
            <summary>
            Creates the rich text "Table" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTableGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTableGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableTableStyleGroupBuilder">
            <summary>
            Creates the rich text "Table Style" ribbon group of the "Table" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTableStyleGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTableStyleGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableTableStyleOptionsGroupBuilder">
            <summary>
            Creates the diagram "Table Style Options" ribbon group of the "Table" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTableStyleOptionsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTableStyleOptionsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NTableTabPageBuilder">
            <summary>
            Creates the rich text "Table" ribbon tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.GroupAlignmentAndDirectionName">
            <summary>
            The name of the "Alignment and Direction" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.GroupMergeName">
            <summary>
            The name of the "Merge" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.GroupRowsAndColumnsName">
            <summary>
            The name of the "Rows &amp; Columns" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.GroupTableStyleName">
            <summary>
            The name of the "Table Style" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.GroupTableStyleOptionsName">
            <summary>
            The name of the "Table Style Options" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NTableTabPageBuilder.GroupTableName">
            <summary>
            The name of the "Table" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NViewBookmarksGroupBuilder">
            <summary>
            Creates the diagram ribbon "Bookmarks" group of the "View" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewBookmarksGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewBookmarksGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewBookmarksGroupBuilder.CreateEditPanel">
            <summary>
            Creates an edit panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewBookmarksGroupBuilder.CreateNavigationPanel">
            <summary>
            Creates a navigation panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewBookmarksGroupBuilder.CreateAddOrEditButton(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates an add or an edit button.
            </summary>
            <param name="image"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NViewPresentationGroupBuilder">
            <summary>
            Creates the diagram ribbon "Presentation" group of the "View" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewPresentationGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewPresentationGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NViewSettingsGroupBuilder">
            <summary>
            Creates the diagram ribbon "Settings" group of the "View" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewSettingsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewSettingsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NViewShowGroupBuilder">
            <summary>
            Creates the diagram ribbon "Show" group of the "View" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewShowGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewShowGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NViewTabPageBuilder">
            <summary>
            Creates the diagram ribbon "View" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.GroupShowName">
            <summary>
            The name of the "Show" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.GroupZoomName">
            <summary>
            The name of the "Zoom" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.GroupSettingsName">
            <summary>
            The name of the "Settings" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.GroupBookmarksName">
            <summary>
            The name of the "Bookmarks" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NViewTabPageBuilder.GroupPresentationName">
            <summary>
            The name of the "Presentation" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NViewZoomGroupBuilder">
            <summary>
            Creates the diagram ribbon "Zoom" group of the "View" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewZoomGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NViewZoomGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NFamilyTreeActionGroupBuilder">
            <summary>
            Creates the diagram ribbon "Action" group of the "Family Tree" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeActionGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeActionGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NFamilyTreeArrangeGroupBuilder">
            <summary>
            Creates the diagram ribbon "Arrange" group of the "Family Tree" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeArrangeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeArrangeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NFamilyTreeSettingsGroupBuilder">
            <summary>
            Creates the diagram ribbon "Settings" group of the "Family Tree" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeSettingsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeSettingsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon items for this group.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageBuilder">
            <summary>
            Creates the Nevron Diagram ribbon's "Family Tree" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageBuilder.GroupActionName">
            <summary>
            The name of the "Action" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageBuilder.GroupArrangeName">
            <summary>
            The name of the "Arrange" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageBuilder.GroupSettingsName">
            <summary>
            The name of the "Settings" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageGroupBuilder">
            <summary>
            Creates the "Family Tree" ribbon tab page group of the diagram ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NFamilyTreeTabPageGroupBuilder.AddTabPageBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageBuilder})">
            <summary>
            Adds the tab page builders.
            </summary>
            <param name="tabPageBuilders"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramRibbonTabContextCommandSource">
            <summary>
            A command source for the diagram ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonTabContextCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonTabContextCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonTabContextCommandSource.CreateDefaultTooltipContent">
            <summary>
            Overriden to return null in order to not have tooltip inherited by all elements in the ribbon without tooltip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramRibbonTabContextCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the visibility of ribbon tab page groups.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDiagramRibbonTabContextCommandSource.NDiagramRibbonTabContextCommandSourceSchema">
            <summary>
            Schema associated with NDiagramRibbonTabContextCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramTabPageGroupBuilder">
            <summary>
            Base class for all diagram ribbon tab page group builders.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramTabPageGroupBuilder.#ctor(System.String,Nevron.Nov.UI.ENRibbonStripeColor,Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="stripeColor"></param>
            <param name="diagramExtensionSchema"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramTabPageGroupBuilder.Create">
            <summary>
            Creates the ribbon tab page group. Overriden to set the diagram extension schema
            to the Tag property of the created tab group.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NDiagramItemMeasureUpDown">
            <summary>
            Represents a measure up/down which displays a diagram item measure in the page logical unit
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramItemMeasureUpDown.#ctor(Nevron.Nov.NUnit[])">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramItemMeasureUpDown.DrawingView">
            <summary>
            Gets the drawing view monitored by the side bar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NDiagramItemMeasureUpDown.ActivePage">
            <summary>
            Gets the active page monitored by the side bar
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NDiagramItemMeasureUpDown.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to store a reference to the owner side bar panel.
            </summary>
            <param name="reparentedNode"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NDiagramItemMeasureUpDown.NDiagramItemMeasureUpDownSchema">
            <summary>
            Schema associated with NDiagramItemMeasureUpDown
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NSideBar">
            <summary>
            Represents the side bar widget of the diagram
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NSideBar.DrawingView">
            <summary>
            Gets or sets the drawing view controlled by this side bar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NSideBar.ActivePage">
            <summary>
            Gets the active page monitored by the side bar
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.AttachToDrawingView">
            <summary>
            Binds the side bar to the specified drawing view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.DetachFromDrawingView">
            <summary>
            Unbinds the side bar from the specified drawing view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.AttachToDrawingDocument">
            <summary>
            Binds the side bar to the specified document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.DetachFromDrawingDocument">
            <summary>
            Unbinds the side bar from the specified document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.AttachToActivePage">
            <summary>
            Binds the side bar to the specified document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.DetachFromActivePage">
            <summary>
            Unbinds the side bar from the specified document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.OnDrawingDocumentChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the drawing view document has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.OnActivePageChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the active page index has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.OnActivePageSelectionChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the active page has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.OnActivePageDrawingScaleChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the active drawing scale has changed
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.OnActivePageThemeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the active page theme has changed
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NSideBar.CreatePanelHeader(Nevron.Nov.Graphics.NImage,System.String)">
            <summary>
            Creates the image label pair
            </summary>
            <param name="image"></param>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NSideBar.NSideBarSchema">
            <summary>
            Schema associated with NSideBar
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NConnectorStylePreview">
            <summary>
            A widget that shows a preview of a connector style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NConnectorStylePreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NConnectorStylePreview.IsConnectorPreview">
            <summary>
            Gets whether this is a preview of a connector.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NConnectorStylePreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Paints the preview.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NConnectorStylePreview.NConnectorStylePreviewSchema">
            <summary>
            Schema associated with NConnectorStylePreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NShapeStylePicker">
            <summary>
            A picker for selecting a shape style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePicker.Nevron#Nov#Diagram#Themes#INThemeCollectionContainer#GetThemes">
            <summary>
            The NOV Drawing theme collection the picker was initialized from.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePicker.GetRowIndex(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Gets the row index of the given table picker cell.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePicker.Initialize(Nevron.Nov.Diagram.Themes.NDrawingThemeCollection,Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShape)">
            <summary>
            Initializes the table picker with the given theme info if it isn't already
            initialized with the same.
            </summary>
            <param name="themes"></param>
            <param name="themeInfo"></param>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePicker.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePicker.CreateCell(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle)">
            <summary>
            Creates a shape style picker cell.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePicker.NShapeStylePickerSchema">
            <summary>
            Schema associated with NShapeStylePicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NShapeStylePickerCell">
            <summary>
            A cell of a shape style picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePickerCell.#ctor(Nevron.Nov.Diagram.UI.NShapeStylePreview)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="preview"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePickerCell.Initialize(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle)">
            <summary>
            Initializes the cell.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePickerCell.NShapeStylePickerCellSchema">
            <summary>
            Schema associated with NShapeStylePickerCell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NShapeStylePickerRibbonGallery">
            <summary>
            A ribbon gallery that contains a shape style picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePickerRibbonGallery.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePickerRibbonGallery.#ctor(System.String,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NTablePicker)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
            <param name="icon"></param>
            <param name="tablePicker"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePickerRibbonGallery.CreatePopupTablePicker">
            <summary>
            Creates the table picker to use for the popup, which shows when the user clicks
            the drop down button of the ribbon gallery. Overriden to add labels between some
            picker rows.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePickerRibbonGallery.NShapeStylePickerRibbonGallerySchema">
            <summary>
            Schema associated with NShapeStylePickerRibbonGallery.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NShapeStylePreview">
            <summary>
            A widget that shows a preview of a shape style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NShapeStylePreview.ThemeInfo">
            <summary>
            Gets/Sets the value of the ThemeInfo child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NShapeStylePreview.Style">
            <summary>
            Gets/Sets the value of the Style child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NShapeStylePreview.Fill">
            <summary>
            Gets/Sets the value of the Fill property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NShapeStylePreview.DisabledFrameFill">
            <summary>
            Gets/Sets the fill of the disabled frame drawn around this preview when it's in disabled state.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NShapeStylePreview.Stroke">
            <summary>
            Gets/Sets the value of the Stroke property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NShapeStylePreview.IsConnectorPreview">
            <summary>
            Gets whether this is a preview of a connector.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePreview.Nevron#Nov#Diagram#INStyleableElement#GetThemeInfo">
            <summary>
            Gets the theme properties to use for styling this styleable element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePreview.Nevron#Nov#Diagram#INStyleableElement#GetShapeStyle">
            <summary>
            Gets the shape styling to apply to this styleable element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePreview.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePreview.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to render the preview.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NShapeStylePreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Paints the preview.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePreview.NShapeStylePreviewSchema">
            <summary>
            Schema associated with NShapeStylePreview.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePreview.ThemeInfoChild">
            <summary>
            Reference to the ThemeInfo child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePreview.StyleChild">
            <summary>
            Reference to the Style child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePreview.FillProperty">
            <summary>
            Reference to the Fill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePreview.DisabledFrameFillProperty">
            <summary>
            Reference to the DisabledFrameFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NShapeStylePreview.StrokeProperty">
            <summary>
            Reference to the Stroke property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeAdvancedColorPicker">
            <summary>
            Represents an advanced color picker with additional tab page for selecting a theme color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeAdvancedColorPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeAdvancedColorPicker.CreatePaletteColorsPage">
            <summary>
            Overriden to create the "Theme" tab page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeAdvancedColorPicker.CreatePaletteColorPicker">
            <summary>
            Creates the palette color picker shown in this dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeAdvancedColorPicker.NThemeAdvancedColorPickerSchema">
            <summary>
            Schema associated with NThemeAdvancedColorPicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeColorBox">
            <summary>
            A drop down edit that displays a drop down color picker for selecting a color from a palette
            filled with drawing theme colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorBox.PaletteRef">
            <summary>
            Gets/Sets the value of the PaletteRef property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorBox.Palette">
            <summary>
            Gets/Sets the theme palette this picker shows color from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorBox.Variant">
            <summary>
            Gets/Sets the zero-based index of the applied theme variant.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorBox.DrawingView">
            <summary>
            Gets/Sets the drawing view this color box shows theme colors for.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorBox.CreatePopupColorPicker">
            <summary>
            Creates the color picker that should be shown in the popup window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorBox.CreateColorDialog">
            <summary>
            Creates the color dialog shown when the "More Colors..." button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorBox.OnColorDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the color dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorBox.OnPaletteRefChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the PaletteRef property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorBox.NThemeColorBoxSchema">
            <summary>
            Schema associated with NThemeColorBox.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorBox.PaletteRefProperty">
            <summary>
            Reference to the PaletteRef property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorBox.VariantProperty">
            <summary>
            Reference to the Variant property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeColorPicker">
            <summary>
            A picker for selecting a theme color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPicker.SelectedColor">
            <summary>
            Gets/Sets the currently selected color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPicker.RowCount">
            <summary>
            Gets the current number of rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPicker.PaletteRef">
            <summary>
            Gets/Sets the value of the PaletteRef property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPicker.Palette">
            <summary>
            Gets/Sets the theme palette this picker shows colors from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPicker.Variant">
            <summary>
            Gets/Sets the zero-based index of the applied theme variant.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPicker.ShowStandardColors">
            <summary>
            Gets/Sets whether to show the Standard colors bar. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPicker.CreateLayout">
            <summary>
            Creates and configures a layout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPicker.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the element content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPicker.OnPaletteRefChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the PaletteRef property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPicker.OnVariantChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Variant property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPicker.NThemeColorPickerSchema">
            <summary>
            Schema associated with NThemeColorPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPicker.PaletteRefProperty">
            <summary>
            Reference to the PaletteRef property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPicker.VariantProperty">
            <summary>
            Reference to the Variant property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPicker.ShowStandardColorsProperty">
            <summary>
            Reference to the ShowStandardColors property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeColorPickerCell">
            <summary>
            Repesents a cell of the theme color picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.Color">
            <summary>
            Gets/Sets the color to fill this cell with.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.ColorType">
            <summary>
            Gets/Sets the type of the theme color shown in this cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.NThemeColorPickerCellSchema">
            <summary>
            Schema associated with NThemeColorPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeColorPickerCell.ColorTypeProperty">
            <summary>
            Reference to the ColorType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeInfoPreview">
            <summary>
            A widget that shows a preview of a theme variant.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeInfoPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeInfoPreview.ShowConnector">
            <summary>
            Gets/Sets the value of the ShowConnector property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeInfoPreview.ShowText">
            <summary>
            Gets/Sets the value of the ShowText property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeInfoPreview.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Paints the preview.
            </summary>
            <param name="visitor"></param>
            <param name="ca"></param>
            <param name="highDetail"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeInfoPreview.NThemeInfoPreviewSchema">
            <summary>
            Schema associated with NThemeInfoPreview.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeInfoPreview.ShowConnectorProperty">
            <summary>
            Reference to the ShowConnector property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeInfoPreview.ShowTextProperty">
            <summary>
            Reference to the ShowText property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemePicker">
            <summary>
            A picker for selecting a theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemePicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemePicker.Nevron#Nov#Diagram#Themes#INThemeCollectionContainer#GetThemes">
            <summary>
            The NOV Drawing theme collection the picker was initialized from.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemePicker.Initialize(Nevron.Nov.Diagram.Themes.NDrawingThemeCollection,System.Boolean)">
            <summary>
            Initializes the picker from the given drawing theme collection.
            </summary>
            <param name="themes">The theme collection to initialize this picker from.</param>
            <param name="includePredefined">Determines whether to add predefined NOV drawing themes, too.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemePicker.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemePicker.CreateCell(System.String,Nevron.Nov.Diagram.NThemeInfo)">
            <summary>
            Creates a theme picker cell for the given theme info.
            </summary>
            <param name="themeName"></param>
            <param name="themeInfo"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemePicker.NThemePickerSchema">
            <summary>
            Schema associated with NThemePicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemePickerCell">
            <summary>
            Represents a cell of a theme picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemePickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemePickerCell.ThemeInfo">
            <summary>
            Gets/Sets the theme info represented by this cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemePickerCell.NThemePickerCellSchema">
            <summary>
            Schema associated with NThemePickerCell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeVariantPicker">
            <summary>
            A picker for selecting a theme variant.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPicker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.UI.NThemeVariantPicker.ThemeId">
            <summary>
            Gets/Sets the ThemeId of the theme whose variants are shown by this theme variant picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPicker.Nevron#Nov#Diagram#Themes#INThemeCollectionContainer#GetThemes">
            <summary>
            The NOV Drawing theme collection the picker was initialized from.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPicker.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPicker.CreateCell(System.String,Nevron.Nov.Diagram.NThemeInfo)">
            <summary>
            Creates a theme picker cell for the given themeInfo.
            </summary>
            <param name="themeName"></param>
            <param name="themeInfo"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeVariantPicker.NThemeVariantPickerSchema">
            <summary>
            Schema associated with NThemeVariantPicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeVariantPicker.ThemeIdProperty">
            <summary>
            Reference to the ThemeId property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource">
            <summary>
            Command source for theme variant ribbon galleries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element selected style.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource.GetParameter(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Gets the parameter associated with the given cell.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource.ParametersEqual(System.Object,System.Object)">
            <summary>
            Checks whether the given parameters are equal.
            </summary>
            <param name="parameter1"></param>
            <param name="parameter2"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.UI.NThemeVariantPickerCommandSource.NThemeVariantPickerCommandSourceSchema">
            <summary>
            Schema associated with NThemeVariantPickerCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryFileSection">
            <summary>
            Represents a library section from the libraries accordion in the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.#ctor(Nevron.Nov.IO.NFile)">
            <summary>
            Creates a library file section that loads a library from the specified file, when expanded.
            </summary>
            <param name="libraryFile"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.#ctor(Nevron.Nov.Diagram.NLibrary)">
            <summary>
            Creates a library section that shows the specified library
            </summary>
            <param name="library"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.#ctor(Nevron.Nov.Diagram.NLibraryView)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="libraryView"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryFileSection.LibraryFile">
            <summary>
            Gets/Sets the file of the library.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.CanSave">
            <summary>
            Determines whether the Save command can be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.Save">
            <summary>
            Saves the library
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.SaveAs">
            <summary>
            Saves the library to an user specified file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.SaveChangesIfModified">
            <summary>
            Asks the user to save changes if the document was modified.
            </summary>
            <returns>a promise which resolves to true, if document was not modified, or was successfully saved. resolves to false if operation was aborted by user.</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.AttachToLibrary">
            <summary>
            Attaches to the current library
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.DetachFromLibrary">
            <summary>
            Detaches from the library
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.OnLibraryInformationValueChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the library information value has changed.
            </summary>
            <param name="valueChangeArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.OnLibraryInformationChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the library information object has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.OnLibraryFileChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LibraryFile property has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.OnExpandedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Expanded property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.BuildContextMenu(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a context menu for this library section.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.CreateSaveMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a Save menu item.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryFileSection.CreateSaveAsMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a SaveAs menu item.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSection.NLibraryFileSectionSchema">
            <summary>
            Schema associated with NLibraryFileSection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSection.LibraryFileProperty">
            <summary>
            Reference to the LibraryFile property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSection.MoveUpCommand">
            <summary>
            The Move Up command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryFileSection.MoveDownCommand">
            <summary>
            The Move Down command.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySearchSection">
            <summary>
            Represents a search result section from the libraries accordion in the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySearchSection.#ctor(Nevron.Nov.Diagram.NLibrarySearchParams,Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NSearchItem})">
            <summary>
            Initializer constructor
            </summary>
            <param name="searchParams"></param>
            <param name="searchResult"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySearchSection.BuildContextMenu(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creaetes a context menu for this library section.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySearchSection.OnExpandedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the expanded property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySearchSection.NLibrarySearchSectionSchema">
            <summary>
            Schema associated with NLibrarySearchResultSection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySection">
            <summary>
            Serves as base class for all sections inside the library browser.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySection.OwnerLibraryBrowser">
            <summary>
            Gets the library browser in which this library pane belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.Close">
            <summary>
            Closes this library section from the owner library browser.
            </summary>
            <returns>a promise, which resolves to true, if the specified section was successfully closed and removed from the owner library browser</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.CanMoveUp">
            <summary>
            Determines whether the can move up operation can be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.MoveUp">
            <summary>
            Moves the library up in the browser
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.CanMoveDown">
            <summary>
            Determines whether the can move down operation can be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.MoveDown">
            <summary>
            Moves the library down in the browser
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.BuildContextMenu(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creaetes a context menu for this library section.
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.CreateCloseMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a Close menu item
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.CreateCloseAllMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a Close All menu item
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.CreateMoveUpMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a move up menu item
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.CreateMoveDownMenuItem(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Creates a move down menu item
            </summary>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySection.OnExpandedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the expanded property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySection.NLibrarySectionSchema">
            <summary>
            Schema associated with NLibraryBrowserSection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NIconsLibraryItemsView">
            <summary>
            Represents the icons library items view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NIconsLibraryItemsView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NIconsLibraryItemsView.NIconsLibraryViewStyleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryItemsView">
            <summary>
            Serves as base class for the different types of views upon the library items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemsView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.OwnerLibrary">
            <summary>
            Gets the library to which this items view belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.OwnerLibraryView">
            <summary>
            Gets the library to which this items view belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.PreviewSize">
            <summary>
            Gets or sets the size of the item image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.MaxTextWidth">
            <summary>
            Gets or sets the maximum width of the items text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.MinTextWidth">
            <summary>
            Gets or sets the minimum width of the items text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.MaxTextHeight">
            <summary>
            Gets or sets the maximum height of the items text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.MinTextHeight">
            <summary>
            Gets or sets the minimum height of the items text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text within the block assigned to it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.VerticalTextAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text within the block assigned to it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.PreviewTextSpacing">
            <summary>
            Gets or sets the spacing between the image and text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.TextBelowPreview">
            <summary>
            Gets or sets whether the 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.ItemPadding">
            <summary>
            Gets or sets the padding applied to the item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemsView.ItemBorderThickness">
            <summary>
            Gets or sets the thickness of the border
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemsView.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.NLibraryItemsViewSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.PreviewSizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.MinTextWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.MaxTextWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.MinTextHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.MaxTextHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.PreviewTextSpacingProperty">
            <summary>
            Reference to the PreviewTextSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.TextBelowPreviewProperty">
            <summary>
            Reference to the TextBelowPreview property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.HorizontalTextAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.VerticalTextAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.ItemPaddingProperty">
            <summary>
            Reference to the Padding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.ItemBorderThicknessProperty">
            <summary>
            Reference to the BorderThickness property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.Preview_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.Text_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.ItemsLayout_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemsView.ItemLayout_Category">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryItemsView.NLibraryItemsViewDesigner">
            <summary>
            Designer associated with NLibraryItemsView
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemsView.NLibraryItemsViewDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NListLibraryItemsView">
            <summary>
            Represents the list library items view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NListLibraryItemsView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NListLibraryItemsView.NListLibraryViewStyleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NThumbnailsLibraryItemsView">
            <summary>
            Represents the thumbnails library items view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NThumbnailsLibraryItemsView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NThumbnailsLibraryItemsView.NThumbnailsLibraryViewStyleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrary">
            <summary>
            The NLibrary class represents a storage for reusable drawing clippings, represented by NLibraryItem instances.
            The items of a library are contained in the Items collection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.Information">
            <summary>
            Gets or sets the document information
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NLibrary.InformationChanged">
            <summary>
            Occurs when the informaiton property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.Nevron#Nov#Internal#MQSh#ViewSettings">
            <summary>
            Gets the view settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.Nevron#Nov#Internal#MQSh#SpellChecker">
            <summary>
            Gets the spellchecker for this drawing
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.Nevron#Nov#Internal#MQSh#MailMerge">
            <summary>
            Gets the mail merge
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.ViewType">
            <summary>
            Gets or sets the library view type. By default set to Icons.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.DisplayOrder">
            <summary>
            Gets or sets the order in which the library items are displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.IconsItemsView">
            <summary>
            Gets or sets the layout settings which the library uses when ViewType is set to Icons.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.ListItemsView">
            <summary>
            Gets or sets the layout settings which the library uses when ViewType is set to List.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.ThumbnailsItemsView">
            <summary>
            Gets or sets the layout settings which the library uses when ViewType is set to Thumbnails.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.Font">
            <summary>
            Gets or sets the font style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.DataObjectAdaptors">
            <summary>
            Gets or sets the collection of data object adaptors that adapt Data-Exchange content to content appropriate for this library.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.ViewSettings">
            <summary>
            Gets or sets the text view settings of the library
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.Page">
            <summary>
            Gets or sets the page settings associated with the library
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrary.OwnerLibraryView">
            <summary>
            Gets the view that displays this library
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.GetItemsView">
            <summary>
            Gets the view style settings for the current view style
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.GetItems">
            <summary>
            Gets a list of the items contained in this library. The list includes all items, including the Invisible ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.GetVisibleItems">
            <summary>
            Gets a list of the visible items contained in this library. The list includes all items, including the Invisible ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.Cut(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Cuts the specified page items.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.Copy(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Copies the specified items to the 
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.Paste">
            <summary>
            Pastes the clipbard content in this page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.DoDragDrop(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem},Nevron.Nov.Function{Nevron.Nov.UI.NDragEndedEventArgs},Nevron.Nov.Function{Nevron.Nov.UI.NQueryDragActionEventArgs})">
            <summary>
            Requests a drag and drop operation for the specified items. 
            Calls the dragEnded delegate when the operation has completed.
            Calls the queryContinueDrag delegate while the operation is performed.
            Returns whether the Drag and Drop was requested.
            </summary>
            <param name="items"></param>
            <param name="dragEnded"></param>
            <param name="queryContinueDrag"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.ShowPropertiesDialog(Nevron.Nov.UI.NWindow)">
            <summary>
            Overriden to show the properties of this library.
            </summary>
            <param name="ownerWindow"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.EnsureVisible(Nevron.Nov.Diagram.NLibraryItem)">
            <summary>
            Ensures that the specified item is visible.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to ensure that the previews child is the last child in the list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.ShowPropertiesMenuItem">
            <summary>
            Overriden to determine whether the properties menu item must be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.NLibrarySchema">
            <summary>
            Schema associated with NLibrary
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.IconsItemsViewChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.ListItemsViewChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.ThumbnailsItemsViewChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.PageChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.ViewTypeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.DisplayOrderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.InformationProperty">
            <summary>
            Reference to the Information property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.ViewSettingsProperty">
            <summary>
            Reference to ViewSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.DataObjectAdaptorsProperty">
            <summary>
            Reference to the DataObjectAdaptors property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrary.FontProperty">
            <summary>
            Reference to the Font property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrary.NLibraryDesigner">
            <summary>
            Designer for NPage.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.NLibraryDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrary.NLibraryDesigner.GetChildBrowsable(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NChild)">
            <summary>
            Overriden to hide some children from editing.
            </summary>
            <param name="node"></param>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryContextMenu">
            <summary>
            Represents a context menu factory. It is used to construct context menus for the context editable library items.
            An instance of this class can be obtained by the NLibrary.ContextMenu property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryContextMenu.OwnerLibraryView">
            <summary>
            Gets the drawing view to wwhic this builder belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryContextMenu.CreateContextWidget(Nevron.Nov.Dom.NElement)">
            <summary>
            Overriden to create the context widget for the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryContextMenu.CreateEditCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Creates the edit commands - Cut/Copy/Paste/Delete
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryContextMenu.NLibraryContextMenuSchema">
            <summary>
            Schema associated with NLibraryContextMenu.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryDocument">
            <summary>
            Represents a document that contains a NLibrary element.
            A NLibraryDocument can be viewed and edited inside a NLibraryView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryDocument.#ctor(Nevron.Nov.Diagram.NLibrary)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryDocument.NLibraryDocumentSchema">
            <summary>
            Schema associated with NLibraryDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryItem">
            <summary>
            The NLibraryItem class represents a drawing clipping, which contains one or more shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.#ctor(Nevron.Nov.Diagram.NDiagramItem,System.String,System.String)">
            <summary>
            Creates a new master that contains the specified page item.
            </summary>
            <param name="pageItem"></param>
            <param name="name"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.#ctor(Nevron.Nov.Diagram.NDiagramItem[],System.String,System.String)">
            <summary>
            Creates a new master that contains the specified page items.
            </summary>
            <param name="pageItems"></param>
            <param name="name"></param>
            <param name="tooltip"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Image">
            <summary>
            Gets or sets the image that represents this item. 
            If such is not specified, NOV Diagram will automatically generate an image for the current items view. 
            If such is specified, the image will be used for all types of items views and will be scaled to the current items view image size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Items">
            <summary>
            Gets or sets the page items contained in this library item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Visible">
            <summary>
            Gets or sets whether the library item is visible or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.X">
            <summary>
            Gets or sets the X coordinate of the page bounding box.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Y">
            <summary>
            Gets or sets the Y coordinate of the page bounding box.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Width">
            <summary>
            Gets or sets the item width
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Height">
            <summary>
            Gets or sets the item width.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Location">
            <summary>
            Gets or sets the (X,Y) coordinates of the item
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Bounds">
            <summary>
            Gets or sets the page bounding box
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.BackgroundFill">
            <summary>
            Gets or sets the background filling of the item
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Border">
            <summary>
            Gets or sets the item border
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.TextFill">
            <summary>
            Gets or sets the text fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.TextBackgroundFill">
            <summary>
            Gets or sets the text background fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.Font">
            <summary>
            Gets or sets the font style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.OwnerLibrary">
            <summary>
            Gets the library to which this item belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.OwnerLibraryView">
            <summary>
            Gets the library to which this item belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItem.OwnerLibraryItemCollection">
            <summary>
            Gets the library to which this item belongs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.GetPaintCacheMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <remarks>
            Overriden to render the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to do nothing - i.e. do not pass the rendering to the item children
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.CanTransform">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point (in local coordinates).
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.GetAbilitiesMask">
            <summary>
            Gets the item abilities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.ShowPropertiesDialog">
            <summary>
            Shows the library item properties dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.CreateImage(Nevron.Nov.Graphics.NSize,System.Double)">
            <summary>
            Gets or creates the image that represents this item
            </summary>
            <param name="imageSize"></param>
            <param name="resolution"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.OnPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint.
            </summary>
            <remarks>
            This implementation paints the box background and border.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.CreateBorderWall(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Diagram.NLibraryItemsView)">
            <summary>
            Creates the border wall of the box.
            </summary>
            <param name="visitor"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.ShowPropertiesMenuItem">
            <summary>
            Determines whether the properties menu item needs to be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the context needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.OnNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Text property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.OnVisibleChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the visible property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.NLibraryItemSchema">
            <summary>
            Schema associated with NMaster
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.ItemsChild">
            <summary>
            Reference to the Items child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.ImageProperty">
            <summary>
            Reference to the Image property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.XProperty">
            <summary>
            Reference to the XProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.YProperty">
            <summary>
            Reference to the YProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.BorderProperty">
            <summary>
            Reference to the Border property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.TextFillProperty">
            <summary>
            Reference to the TextFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.TextBackgroundFillProperty">
            <summary>
            Reference to the TextBackgroundFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItem.FontProperty">
            <summary>
            Reference to the Font property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryItem.NLibraryItemDesigner">
            <summary>
            A designer for NLibraryItem.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItem.NLibraryItemDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryItemCollection">
            <summary>
            A collection of NLibraryItem elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemCollection.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to accumulate the items according to their display order.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryItemCollection.OwnerLibrary">
            <summary>
            Gets the library to which this collection belongs to
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemCollection.GetLibraryItemsByName(System.String)">
            <summary>
            Gets library items by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryItemCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryItemCollection.NLibraryItemCollectionSchema">
            <summary>
            Schema associated with NLibraryItemCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryLayout">
            <summary>
            Represents the settings related to the page printing layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryLayout.NLibraryLayoutSchema">
            <summary>
            Schema associated with NLibraryLayout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibrarySelection">
            <summary>
            Represents the currently selected items of a page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibrarySelection.AlignmentAnchor">
            <summary>
            Gets the alignment anchor node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySelection.CanMoveSelectionAnchor(Nevron.Nov.ENBoxSide)">
            <summary>
            
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibrarySelection.MoveSelectionAnchor(Nevron.Nov.ENBoxSide)">
            <summary>
            
            </summary>
            <param name="dir"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibrarySelection.NLibrarySelectionSchema">
            <summary>
            Schema associated with NSelection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NLibraryView">
            <summary>
            A diagram view, which displays a library document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryView.Library">
            <summary>
            A shortcut property that gets or sets the library contained inside the library document displayed by this view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryView.ContextMenu">
            <summary>
            Gets/Sets the context menu builder which is responsible for creating context menus and popup-us for selected items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryView.DrawingView">
            <summary>
            Gets/Sets the drawing view associated with this library view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryView.OwnerLibraryBrowser">
            <summary>
            Gets the library browser to which this library view belongs to
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryView.ShowViewPrompt">
            <summary>
            Gets or sets whether the view prompt must be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NLibraryView.ViewPrompt">
            <summary>
            Gets or sets the view prompt text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.Nevron#Nov#Diagram#Themes#INThemeCollectionContainer#GetThemes">
            <summary>
            Gets the themes of the drawing associated with this library view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traveral to the node child
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls the library in the specified direction, with the specified number of steps.
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.MeasureContent(System.Boolean)">
            <summary>
            Measures the element content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetViewportOrigin">
            <summary>
            Gets or sets the viewport origin
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetTotalViewport">
            <summary>
            Gets the total viewport rectangle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetHScrollBar">
            <summary>
            Gets the horizontal scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetVScrollBar">
            <summary>
            Gets the vertical scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetZoomMode">
            <summary>
            Get the zoom policy which defines the way in which the viewport is scaled to the window
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetZoomFactor">
            <summary>
            Gets the viewport zoom factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.SetZoomFactor(System.Double)">
            <summary>
            
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.ComputeWindowSize(Nevron.Nov.Graphics.NRectangle,System.Boolean,System.Boolean)">
            <summary>
            Must return the size of the viewport provided that specified H and V srollbars visibility.
            </summary>
            <param name="ca"></param>
            <param name="showHScrollBar"></param>
            <param name="showVScrollBar"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetRightSideAdorner">
            <summary>
            Creates the right side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetBottomSideAdorner">
            <summary>
            Creates the bottom side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.OnRegistered">
            <summary>
            Overriden to start the refresh timer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.OnUnregistered">
            <summary>
            Overriden to stop the refresh timer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.OnParentChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node parent has changed. Raises the ParentChangedEvent.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the library commander, by adding the library command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.BuildInteractor(Nevron.Nov.UI.NInteractor)">
            <summary>
            Builds the library interactor, by adding the library tools
            </summary>
            <param name="interactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to write drop shapes here, if the library is empty and not read-only.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetDrawing">
            <summary>
            Safely gets the drawing (if any) of the drawing view associated with this library view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NLibraryView.GetDrawingActivePage">
            <summary>
            Safely gets the active page (if any) of the drawing view associated with this library view.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryView.NLibraryViewSchema">
            <summary>
            Schema associated with NLibraryView
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryView.ContextMenuProperty">
            <summary>
            Reference to the ContextMenu property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryView.ShowViewPromptProperty">
            <summary>
            Reference to the ShowDropShapesPrompt property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NLibraryView.ViewPromptProperty">
            <summary>
            Reference to the ViewPrompt property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool">
            <summary>
            The NClickSelectTool performs the click select functionality of the library
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.ClickSelectMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the tool performs click selection.
            By default set to ENMouseButtonEvent.LeftButtonDown.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.CanClickSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether click select can be performed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.ClickSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Performs a click select.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.NClickSelectToolSchema">
            <summary>
            Schema associated with NClickSelectTool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NClickSelectTool.ClickSelectMouseButtonEventProperty">
            <summary>
            Reference to the ClickSelectMouseButtonEvent property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool">
            <summary>
            The NContextMenuTool shows a context menu for the items below the mouse pointer.
            The context menu that is displayed and controlled by the NLibraryView.ContextMenu attribute.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.ContextMenuMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the context menu is shown.
            By default set to ENMouseButtonEvent.RightButtonUp
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.CanShowContextMenu(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether context menu can be shown in response to the specified mouse event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.ShowContextMenu(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Shows the context menu.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.NContextMenuToolSchema">
            <summary>
            Schema associated with NContextMenuTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NContextMenuTool.ContextMenuMouseButtonEventProperty">
            <summary>
            Reference to the ClickSelectEvent property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool">
            <summary>
            The NDragDropTargetTool class represents a tool, which is used to make the library view a drag drop target.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.OnDragOut(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Processes the drag out event 
            </summary>
            <remarks>
            Overriden to destroy the possibly created data object preview
            </remarks>
            <param name="args"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.OnDragIn(Nevron.Nov.UI.NDragOverChangeEventArgs)">
            <summary>
            Handler for the NDragDrop.DragInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.OnDragOver(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Processes the drag over event 
            </summary>
            <remarks>
            If the mouse left the view window this method will destroy the preview.
            Otherwise it will create it (if not created) and translate it.
            Then it will update the drag drop effect
            </remarks>
            <param name="args"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.OnDragDrop(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Processes the drag drop event 
            </summary>
            <remarks>
            Overriden to the drag drop data object in the document active layer
            </remarks>
            <param name="e"></param>
            <returns>true if the event was processed, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.StartMove(Nevron.Nov.UI.NDataObject)">
            <summary>
            Starts to move a preview of the objects contained in the specified data object
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.Move">
            <summary>
            Moves the preview to the current mouse position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.EndMove(System.Boolean)">
            <summary>
            Ends the preview move and optionally commits the result
            </summary>
            <param name="commit"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.DestroyPreview">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.UpdateDragDropEffect(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Updates the drag and drop effect
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.ClearHighlightItem">
            <summary>
            Clears the NStylePropertyEx.IsHighlightedPropertyEx value from the currently highlighted value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.UpdateHighlightedItem(Nevron.Nov.UI.NDragActionEventArgs)">
            <summary>
            Updates the highlighted item.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NDragDropTargetTool.NDragDropTargetToolSchema">
            <summary>
            Schema associated with NDragDropTargetTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool">
            <summary>
            The NLibraryDragTool class serves as base class for drag tools of library elements
            </summary>
            <remarks>
            Tools, which derive from this class can obtain a reference to the library hosting the tool 
            by the OwnerLibrary property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.OwnerLibraryView">
            <summary>
            Obtains a reference to the library vuew to which this tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.StartPagePos">
            <summary>
            Gets the mouse start position in page coordinates.
            Valid only when the tool is active
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.OnActivated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.OnDeactivated">
            <summary>
            Called when the tool is deactivated
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.OnAborted">
            <summary>
            Called when the tool is aborted
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.OperatesInWindowArea">
            <summary>
            Determines whether the tool operates in the library window area.
            This implementation returns true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NLibraryDragTool.NLibraryDragToolSchema">
            <summary>
            Schema associated with NLibraryDragTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NLibraryTool">
            <summary>
            The NLibraryTool class serves as base class for tools that are created for the NLibraryView widget.
            </summary>
            <remarks>
            Tools, which derive from this class can obtain a reference to the library view hosting the tool by the OwnerLibraryView property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NLibraryTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryTools.NLibraryTool.OwnerLibraryView">
            <summary>
            Gets a reference to the library to which this tool belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NLibraryTool.NLibraryToolSchema">
            <summary>
            Schema associated with NLibraryTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NMoveTool">
            <summary>
            A drawing drag tool that moves the selected page items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.LibraryTools.NMoveTool.StartMoveDistance">
            <summary>
            Gets or sets the distance after which the move starts. 
            If the user presses the left mouse button, but does not move the mouse more than this distance, the move will not be started.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event.
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.CanActivate">
            <summary>
            Determines whether the tool can activate
            </summary>
            <remarks>
            Overriden to return false if the active page selection is empty
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.OnActivated">
            <summary>
            Called when the tool was activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.OnAborted">
            <summary>
            Called when the tool was aborted. Raises the Aborted event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.DeactivationHandlesEvent">
            <summary>
            Overriden to return true, if the shape was actually moved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active
            </summary>
            <param name="cursor"></param>
            <param name="tooltip"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.MoveSelectedItems(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint,System.Boolean)">
            <summary>
            Moves the preview of the selected items to the position specified by dragPos.
            If preview is not created, it is created if the mustCreatePreview is true, or the mouse has moved a certain amount from the tool activation position.
            Finally if the preview is created, it is started with the location specified by startPos parameter.
            </summary>
            <param name="dragPos">position to move preview to (in library coordinates)</param>
            <param name="startPos">position to start preview from (in library coordinates)</param>
            <param name="mustCreatePreview"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.StartDragAndDrop">
            <summary>
            Starts drag and drop.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.OnDragEnded(Nevron.Nov.UI.NDragEndedEventArgs)">
            <summary>
            
            </summary>
            <param name="dragEndedArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.OnQueryDragAction(Nevron.Nov.UI.NQueryDragActionEventArgs)">
            <summary>
            
            </summary>
            <param name="queryDragActionArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.ClearHighlightItem">
            <summary>
            Clears the NStylePropertyEx.IsHighlightedPropertyEx value from the currently highlighted value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NMoveTool.UpdateHighlightedItem(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Updates the highlighted item.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NMoveTool.NMoveToolSchema">
            <summary>
            Schema associated with NMoveTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NMoveTool.StartMoveDistanceProperty">
            <summary>
            Reference to the StartMoveDistance property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.LibraryTools.NScrollTool">
            <summary>
            A tool, which implements mouse wheel scrolling and zooming of a NDrawing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.DoScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls in the given direction.
            </summary>
            <param name="dir"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.CanZoom">
            <summary>
            Determines whether zooming can be performed at all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.DoZoomIn">
            <summary>
            Zooms in.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.DoZoomOut">
            <summary>
            Zooms out.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.DoZoomIn(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Zooms in.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.LibraryTools.NScrollTool.DoZoomOut(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Zooms out.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.LibraryTools.NScrollTool.NScrollToolSchema">
            <summary>
            Schema associated with NScrollTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramContextMenu">
            <summary>
            Serves as base class for drawing and library context menues.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramContextMenu.ShowItemProperties">
            <summary>
            Gets or sets whether the Properties... command for the items should be displayed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramContextMenu.ShowSurfaceProperties">
            <summary>
            Gets or sets whether the Properties... command for the items should be displayed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramContextMenu.NDiagramContextMenuSchema">
            <summary>
            Schema associated with NDiagramContextMenu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramContextMenu.ShowItemPropertiesProperty">
            <summary>
            Reference to the ShowItemProperties property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramContextMenu.ShowSurfacePropertiesProperty">
            <summary>
            Reference to the ShowSurfaceProperties property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramItem">
            <summary>
            An input element subclass, that serves as base class for all essential diagram elements, such as page items and library items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDiagramItem.ProtectionChanged">
            <summary>
            Occurs when a property that affects the item protection has changed.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDiagramItem.IsSelectedChanged">
            <summary>
            Occurs when the value of the IsSelected property has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDiagramItem.BuildContextMenu">
            <summary>
            Event which occurs when the item context menu is constrcuted
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.ToString">
            <summary>
            Gets the string representation of the shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Appends custom context menu items.
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.Name">
            <summary>
            Gets or sets the name of this diagram item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.AllowDelete">
            <summary>
            Gets or sets whether this item can be deleted or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.AllowSelect">
            <summary>
            Gets or sets whether this item can be selected or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.AllowContextMenuEdit">
            <summary>
            Gets or sets whether the item is editable via a context menu (e.g. show context menu for the item).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.IsSelected">
            <summary>
            Gets whether the item is selected or not.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.IsPreviewed">
            <summary>
            Gets whether the diagram item is previewed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramItem.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.GetAbilitiesMask">
            <summary>
            Must override to return the item abilities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.GetPermissionsMask">
            <summary>
            Gets the item permissions mask or simply the mask of operations that the user can perform with the item.
            The permissions mask is calculated as the item Abilities minus the item Protection.
            Operations dealing with diagram items always check the items permissions.
            Certain diagram items may additionally drop certain permissions as they see fit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.GetProtectionMask">
            <summary>
            Gets the item protection mask, which defines the set of item abilities that is not permitted to the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.SetProtectionMask(Nevron.Nov.Diagram.ENDiagramItemOperationMask)">
            <summary>
            Sets the protection properties of this item to reflect the specified protection mask.
            </summary>
            <remarks>
            This method sets values to the protection properties of this item that are exposed. 
            For example if the you call SetProtectionMask(ENDiagramItemOperationMask.MoveX), 
            this will allow all operations to the item, except MoveX.
            </remarks>
            <param name="protectionMask"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.ShowPropertiesMenuItem">
            <summary>
            Must override to determine whether the properties menu item must be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.ShowPropertiesDialog">
            <summary>
            Must override to show the properties dialog of the item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.OnNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Name property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.OnProtectionChanged">
            <summary>
            Called when the item protection has changed.
            Raises the ProtectionChanged event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramItem.RaiseBuildContextMenu(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Raises the build context menu event
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.NDiagramItemSchema">
            <summary>
            Schema associated with NDiagramItem
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.ProtectionChangedEvent">
            <summary>
            Reference to the ProtectionChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.BuildContextMenuEvent">
            <summary>
            Reference to the ProtectionChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.AllowDeleteProperty">
            <summary>
            Reference to the AllowDelete property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.AllowSelectProperty">
            <summary>
            Reference to the AllowSelect property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.AllowContextMenuEditProperty">
            <summary>
            Reference to the AllowContextMenuEdit property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.NameProperty">
            <summary>
            Reference to the Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramItem.DiagramItemAbilities">
            <summary>
            Defines the abilities that apply to all NDiagramItem instances.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramRootElement">
            <summary>
            Base class for diagram root elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRootElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRootElement.NDiagramRootElementSchema">
            <summary>
            Reference to the NDiagramRootElementSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramSurface`3">
            <summary>
            Represents a surface for diagram items. Serves as base class for NPage and NLibrary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Diagram.NDiagramSurface`3.TransformChanged">
            <summary>
            Occurs when the page transform has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.X">
            <summary>
            Gets or sets the X coordinate of the page bounding box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Y">
            <summary>
            Gets or sets the Y coordinate of the page bounding box.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Width">
            <summary>
            Gets or sets the logical page width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Height">
            <summary>
            Gets or sets the logical page height
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Bounds">
            <summary>
            Gets or sets the surface bounding box, which is formed by the X, Y, Width and Height properties.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.BackgroundFill">
            <summary>
            Gets or sets the background filling of the surface
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Border">
            <summary>
            Gets or sets the page stroke style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.BorderThickness">
            <summary>
            Gets or sets the thickness of the border surrounding the surface.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.ViewportOriginX">
            <summary>
            Gets or sets the Origin X value.
            The Origin is the first visible point from the surface (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.ViewportOriginY">
            <summary>
            Gets or sets the Origin Y value.
            The Origin is the first visible point from the surface (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.ViewportOrigin">
            <summary>
            Gets or sets the viewport origin of the surface. The Origin is the first visible point from the surface (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.WindowOriginX">
            <summary>
            Gets or sets the Window Origin X value (in parent coordinates).
            The value of this property is automatically set by view hosting the surface.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.WindowOriginY">
            <summary>
            Gets or sets the Window Origin Y value (in parent coordinates).
            The value of this property is automatically set by view hosting the surface.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.WindowOrigin">
            <summary>
            Gets or sets the window origin of the surface
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Selection">
            <summary>
            Gets or sets the page selection, which is responsible for the management 
            of the selected items inside a page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Items">
            <summary>
            Gets or sets the items collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.Previews">
            <summary>
            Gets or sets the page previews collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurface`3.PropertiesItemText">
            <summary>
            Gets the text of the properties context menu item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Appends custom context menu items.
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <remarks>
            Overriden to render the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <remarks>
            Overriden to render focus decorator
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanTransform">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanAnchorHatches">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanAnchorShadows">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point (in local coordinates).
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetTopMostHitItem(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the top most page item hit by the specified point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetTopMostHitItem(Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Gets the top most page item hit by the specified point
            </summary>
            <param name="point"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetTopMostHitItem(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Gets the top most page item hit by the specified rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetTopMostHitItem(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Gets the top most page item hit by the specified rectangle
            </summary>
            <param name="rect"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.HitTestItems(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets all items, that are hit by the specified point (in page coordinates)
            </summary>
            <param name="point">point to test with (in page coordinates)</param>
            <returns>list of items, hit by the specified point</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.HitTestItems(Nevron.Nov.Graphics.NPoint,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Gets all items, that are hit by the specified point (in page coordinates)
            </summary>
            <param name="point">point to test with (in page coordinates)</param>
            <param name="filter"></param>
            <returns>list of items, hit by the specified point</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.HitTestItems(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Gets all items, that are hit by the specified rectangle (in page coordinates).
            </summary>
            <param name="rect">rectangle to test with (in page coordinates)</param>
            <returns>list of items, which intersect with the rectangle</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.HitTestItems(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Gets all items, that are hit by the specified rectangle (in page coordinates).
            </summary>
            <param name="rect">rectangle to test with (in page coordinates)</param>
            <param name="filter"></param>
            <returns>list of items, which intersect with the rectangle</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double,System.Double,System.Double)">
            <summary>
            Scrolls the viewport in the specified direction, with the specified amount of steps.
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
            <param name="hscrollStep"></param>
            <param name="vscrollStep"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetContentEdge">
            <summary>
            Gets the content edge (inner edge) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetContentEdge(System.Double,System.Double)">
            <summary>
            Gets the content edge (inner edge) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetPaddingEdge">
            <summary>
            Gets the padding edge (padding area) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetPaddingEdge(System.Double,System.Double)">
            <summary>
            Gets the padding edge (padding area) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetBorderEdge">
            <summary>
            Gets the border edge (border area) of the element (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetBorderEdge(System.Double,System.Double)">
            <summary>
            Gets the border edge (border area) of the element (in local coordinates),
            provided that the box had the specified width and height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.GetInsets">
            <summary>
            Gets the element insets. 
            This implemenation returns the sum of the padding and border thickness.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanCut(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Determines whether the specified nodes can be cut
            Called by the Cut command.
            </summary>
            <param name="items">nodes</param> 
            <returns>true if the specified nodes can be cut, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanCopy(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Determines whether the specified nodes can be copied.
            Called by the Copy command.
            </summary>
            <param name="items">nodes</param> 
            <returns>true if the specified nodes can be copied, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanPaste">
            <summary>
            Determines whether the current clipboard content can be pasted in this view
            Called by the Paste command.
            </summary>
            <returns>true if the current clipboard content can be pasted in this view, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CanDoDragDrop(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Determines whether the specified items can be the content of a a drag and drop operation
            </summary>
            <param name="items">items</param>
            <returns>true if the specified items can be the content of a a drag and drop operation, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.Cut(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Cuts the specified items.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.Copy(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem})">
            <summary>
            Copies the specified items to the 
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.Paste">
            <summary>
            Pastes the clipbard content in this page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.DoDragDrop(Nevron.Nov.DataStructures.NList{Nevron.Nov.Diagram.NDiagramItem},Nevron.Nov.Function{Nevron.Nov.UI.NDragEndedEventArgs},Nevron.Nov.Function{Nevron.Nov.UI.NQueryDragActionEventArgs})">
            <summary>
            Requests a drag and drop operation for the specified items. 
            Calls the funcResult delegate when the operation has completed.
            Calls the queryContinueDrag delegate while the operation is performed.
            Returns whether the Drag and Drop was requested.
            </summary>
            <param name="items"></param>
            <param name="dragEnded"></param>
            <param name="queryContinueDrag"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.ShowPropertiesDialog(Nevron.Nov.UI.NWindow)">
            <summary>
            Must override to show the properties of the surface.
            </summary>
            <param name="ownerWindow"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.OnTransformChanged">
            <summary>
            Called when the transformation from local to parent coordinates of this page has changed.
            Raises the transform changed event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the surface, which is performed before the custom painting in OnPrePaint.
            </summary>
            <remarks>
            This implementation paints the surface background and border.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the foreground of the box, which is performed after the custom painting in OnPostPaint.
            </summary>
            <remarks>
            This implementation renders the focus decorator.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.CreateBorderWall(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Creates the border wall of the box.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.ShowPropertiesMenuItem">
            <summary>
            Must override to determine whether the properties menu item must be created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.AddPropertiesMenuItem(Nevron.Nov.UI.NContextMenuBuilder,Nevron.Nov.UI.NMenu)">
            <summary>
            Adds the properties menu item.
            </summary>
            <param name="builder"></param>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.NDiagramSurfaceSchema">
            <summary>
            Schema associated with NDiagramSurface
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.ItemsChild">
            <summary>
            Reference to the Items child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.PreviewsChild">
            <summary>
            Reference to the Previews child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.TransformChangedEvent">
            <summary>
            Reference to the transform changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.BorderProperty">
            <summary>
            Reference to the Border property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.BorderThicknessProperty">
            <summary>
            Reference to the BorderThickness property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.XProperty">
            <summary>
            Reference to the XProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.YProperty">
            <summary>
            Reference to the YProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.ViewportOriginXProperty">
            <summary>
            Reference to the ViewportOriginX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.ViewportOriginYProperty">
            <summary>
            Reference to the ViewportOriginY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.WindowOriginXProperty">
            <summary>
            Reference to the WindowOriginX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.WindowOriginYProperty">
            <summary>
            Reference to the WindowOriginY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurface`3.SelectionProperty">
            <summary>
            Reference to the SelectionAnchorMode property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramSurface`3.NDiagramSurfaceDesigner">
            <summary>
            Designer for NDiagramSurface.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurface`3.NDiagramSurfaceDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramSurfaceLayout">
            <summary>
            Represents the settings related to the page printing layout.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurfaceLayout.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurfaceLayout.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing of the page layout.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurfaceLayout.VerticalSpacing">
            <summary>
            Gets or sets the vertical spacing of the page layout.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurfaceLayout.ContentPadding">
            <summary>
            Gets or sets the padding, which are applied to the content when the surface is sized to it.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurfaceLayout.NDiagramSurfaceLayoutSchema">
            <summary>
            Schema associated with NDiagramSurfaceLayout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurfaceLayout.HorizontalSpacingProperty">
            <summary>
            Reference to the HorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurfaceLayout.VerticalSpacingProperty">
            <summary>
            Reference to the VerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurfaceLayout.ContentPaddingProperty">
            <summary>
            Reference to the ContentPadding property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramSurfaceSelection">
            <summary>
            Serves as base class for selections of diagram items (page items and library items selection objects)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurfaceSelection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurfaceSelection.BatchDelete">
            <summary>
            Gets a batch for deleting the selected page items.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramSurfaceSelection.BatchReorder">
            <summary>
            Gets a batch for reordering the selected page items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurfaceSelection.GetBounds">
            <summary>
            Gets the bounds of the selection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurfaceSelection.OnSelected(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Called when the specified item has been selected. Raises the Selected event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramSurfaceSelection.OnDeselected(Nevron.Nov.Diagram.NDiagramItem)">
            <summary>
            Called when the specified item has been deselected
            </summary>
            <param name="item">item which has been deselected</param>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramSurfaceSelection.NDiagramSurfaceSelectionSchema">
            <summary>
            Schema associated with NDiagramSelection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramView`6">
            <summary>
            A document view that serves as base class for NDrawingView and NLibraryView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.HScrollBar">
            <summary>
            Gets the HScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.VScrollBar">
            <summary>
            Gets the VScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.Previews">
            <summary>
            Gets or sets the drawing previews collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.HScrollMode">
            <summary>
            Gets or sets the scroll policy, which specifies the visibility of the H scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.VScrollMode">
            <summary>
            Gets or sets the scroll policy, which specifies the visibility of the Y scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.NoScrollHAlign">
            <summary>
            Gets or sets the horizontal content control alignment, when a horizontal scrollbar is not, or must not be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.NoScrollVAlign">
            <summary>
            Gets or sets the vertical content control alignment, when a vertical scrollbar is not, or must not be displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.SmallHScrollChange">
            <summary>
            Gets or sets the small H scroll change
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramView`6.SmallVScrollChange">
            <summary>
            Gets or sets the small V scroll change
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.MeasureAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget)">
            <summary>
            Overriden to measure the HScrollBars and VScroolBars.
            </summary>
            <param name="compassDirection"></param>
            <param name="adorner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.GetHScrollMode">
            <summary>
            Gets the horizontal scrolling policy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.GetVScrollMode">
            <summary>
            Gets the vertical scrolling policy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.GetNoScrollHAlign">
            <summary>
            Gets the horizontal alignment of the viewport relative to the window in case there is no horizontal scrollbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.GetNoScrollVAlign">
            <summary>
            Gets the vertical alignment of the viewport relative to the window in case there is no horizontal scrollbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.GetHScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the HScrollbar for the viewport parameters, in case the HScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramView`6.GetVScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the VScrollbar for the viewport parameters, in case the VScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.NDiagramViewSchema">
            <summary>
            Schema associated with NDiagramView
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.HScrollBarChild">
            <summary>
            Reference to the HScrollBar child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.VScrollBarChild">
            <summary>
            Reference to the VScrollBar child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.PreviewsChild">
            <summary>
            Reference to the Previews child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.HScrollModeProperty">
            <summary>
            Reference to the HScrollMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.VScrollModeProperty">
            <summary>
            Reference to the VScrollMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.NoScrollHAlignProperty">
            <summary>
            Reference to the NoScrollHAlign property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.NoScrollVAlignProperty">
            <summary>
            Reference to the NoScrollVAlign property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.SmallHScrollChangeProperty">
            <summary>
            Reference to the SmallHScrollChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramView`6.SmallVScrollChangeProperty">
            <summary>
            Reference to the SmallVScrollChange property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPreviewCollection">
            <summary>
            A collection of visual elements. Used as an overlay in drawings, pages and libraries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPreviewCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPreviewCollection.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Overriden to skip the branch traversal in preview paint mode
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPreviewCollection.NPreviewCollectionSchema">
            <summary>
            Schema associated with NPreviewCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPagedPreview">
            <summary>
            Represents a paged preview.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPagedPreview.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPagedPreview.NPagedPreviewSchema">
            <summary>
            Schema associated with NPagedPreview.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPanAndZoomView">
            <summary>
            Represents a view for panning and zooming the content displayed by a drawing view.
            In order to be functional you need to set the DrawingView property to the view you want to pan and zoom.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.DrawingView">
            <summary>
            Gets or sets the drawing view observed by this pan and zoom view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.LeftSide">
            <summary>
            Reference to the LeftSide child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.TopSide">
            <summary>
             Reference to the TopSide child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.RightSide">
            <summary>
            Reference to the RightSide child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.BottomSide">
            <summary>
            Reference to the BottomSide child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.LeftTopCorner">
            <summary>
            Reference to the LeftTopCorner child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.RightTopCorner">
            <summary>
            Reference to the RightTopCorner child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.RightBottomCorner">
            <summary>
            Reference to the RightBottomCorner child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.LeftBottomCorner">
            <summary>
            Reference to the LeftBottomCorner child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.SideWidth">
            <summary>
            Gets or sets the width of the viewport sides
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.CornerWidth">
            <summary>
            Gets or sets the width of the viewport corners
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPanAndZoomView.BandStroke">
            <summary>
            Gets/Sets the value of the BandStroke property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint a preview of the drawing view active page.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnRegistered">
            <summary>
            Overriden to start the refresh timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnUnregistered">
            <summary>
            Overriden to stop the refresh timer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to start dragging of the viewport 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Overriden to drag the viewport 
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to end dragging of the viewport
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnLostFocus(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Overriden to abort the dragging of the view.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            Overriden to abort the dragging of the view.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.StartDragging(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when dragging of the viewport must be started
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.Drag(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.EndDragging(System.Boolean)">
            <summary>
            Called when the dragging of the viewport has ended
            </summary>
            <param name="commit"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.OnRefreshTimerTick">
            <summary>
            Called when the refresh timer ticks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.GetActivePage">
            <summary>
            Safely gets the active page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.GetDrawing">
            <summary>
            Safely gets the displayed drawing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.TryGetDrawingToLocalTransform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Tries to gets a transformation, which transforms drawing coordinates to local ones.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.TryGetPageToLocalTransform(Nevron.Nov.Graphics.NMatrix@)">
            <summary>
            Gets a transformation which transforms active page coordinates to local ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.TryGetPageViewportInLocal(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the page viewport in local coordinates 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomView.GetPageViewport">
            <summary>
            Tries to get the page viewport in page coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.NPanAndZoomViewSchema">
            <summary>
            Schema associated with NPanAndZoomView
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.LeftSideChild">
            <summary>
            Reference to the LeftSide child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.TopSideChild">
            <summary>
             Reference to the TopSide child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.RightSideChild">
            <summary>
            Reference to the RightSide child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.BottomSideChild">
            <summary>
            Reference to the BottomSide child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.LeftTopCornerChild">
            <summary>
            Reference to the LeftTopCorner child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.RightTopCornerChild">
            <summary>
            Reference to the RightTopCorner child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.RightBottomCornerChild">
            <summary>
            Reference to the RightBottomCorner child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.LeftBottomCornerChild">
            <summary>
            Reference to the LeftBottomCorner child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.SideWidthProperty">
            <summary>
            Reference to the side width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.CornerWidthProperty">
            <summary>
            Reference to the corner width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomView.BandStrokeProperty">
            <summary>
            Reference to the BandStroke property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPanAndZoomViewportCorner">
            <summary>
            Represents a corner from the pan and zoom viewport
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomViewportCorner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomViewportCorner.NPanAndZoomViewportCornerSchema">
            <summary>
            Schema associated with NPanAndZoomViewportCorner
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPanAndZoomViewportSide">
            <summary>
            Represents a side from the pan and zoom viewport
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPanAndZoomViewportSide.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NPanAndZoomViewportSide.NPanAndZoomViewportSideSchema">
            <summary>
            Schema associated with NPanAndZoomViewportSide
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NVisualAid">
            <summary>
            A simple visual element, that draws a visual aid with verbatim parameters
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAid.CanClip">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAid.GetClip">
            <summary>
            Overriden to return the aid geometry bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.NVisualAid.Visible">
            <summary>
            Gets or sets whether the aid is visible or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NVisualAid.Stroke">
            <summary>
            Gets or sets the stroke with which the aid is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NVisualAid.Fill">
            <summary>
            Gets or sets the fill with which the aid is displayed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAid.GetGeometryBounds">
            <summary>
            Must override to return the bounds of the visual aid geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAid.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the context needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVisualAid.NVisualAidSchema">
            <summary>
            Schema associated with NVisualAid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVisualAid.VisibleProperty">
            <summary>
            Reference to the Visible property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVisualAid.StrokeProperty">
            <summary>
            Reference to the Stroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVisualAid.FillProperty">
            <summary>
            Reference to the Fill property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NVisualAidCollection">
            <summary>
            A collection of page visual aids, that renders in drawing coordinates
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAidCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAidCollection.CanTransform">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAidCollection.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NVisualAidCollection.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Overriden to skip the branch traversal in preview paint mode
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NVisualAidCollection.NVisualAidCollectionSchema">
            <summary>
            Schema associated NVisualAidCollection schema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramModule">
            <summary>
            Represents the Nevron Diagram module.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramModule.Install">
            <summary>
            Installs the module.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NDiagramModule.Instance">
            <summary>
            Gets the instance of this module.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramUIThemePlugin">
            <summary>
            A theme plugin that adds rules for the Nevron diagram control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.CreateStyles(Nevron.Nov.UI.NUITheme)">
            <summary>
            Creates the style sheet rules for this theme plugin.
            </summary>
            <param name="uiTheme"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.CreateRulerStyles">
            <summary>
            Creates the styles for the rulers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.CreateLibraryStyles">
            <summary>
            Creates tehe styles for the library items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.CreateTablePickerStyles">
            <summary>
            Creates the styles for special UI widgets used by the rich text commands and dialogs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.CreatePresentationTimelineStyles">
            <summary>
            Creates the presentation timeline styles
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramUIThemePlugin.CreateAutoConnectButtonStyles">
            <summary>
            Creates the styles of the AutoConnect buttons
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramUIThemePlugin.UITheme">
            <summary>
            The theme this plugin should add rules to.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDR">
            <summary>
            Namespace class for resources used by the Nevron.Diagram assembly
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDR.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionUpdateModelBounds">
            <summary>
            Update model bounds transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionShowElements">
            <summary>
            Show elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionHideElements">
            <summary>
            Hide elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDeleteElements">
            <summary>
            Delete elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionInsertElements">
            <summary>
            Insert elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignToGrid">
            <summary>
            Align to grid transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignLefts">
            <summary>
            Align lefts transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignRights">
            <summary>
            Align rights transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignTops">
            <summary>
            Align tops transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignBottoms">
            <summary>
            Align bottoms transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignCenters">
            <summary>
            Align centers transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAlignMiddles">
            <summary>
            Align middles transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionSizeToGrid">
            <summary>
            Size to grid transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMakeSameWidth">
            <summary>
            Make same width transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMakeSameHeight">
            <summary>
            Make same height transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMakeSameSize">
            <summary>
            Make same size transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionIncreaseWidth">
            <summary>
            Increase width transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionIncreaseHeight">
            <summary>
            Increase height transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDecreaseWidth">
            <summary>
            Decrease width transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDecreaseHeight">
            <summary>
            Decrease height transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionHorizontalSpacingEqual">
            <summary>
            Make horizontal spacing equal transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionIncreaseHorizontalSpacing">
            <summary>
            Increase horizontal spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDecreaseHorizontalSpacing">
            <summary>
            Decrease horizontal spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRemoveHorizontalSpacing">
            <summary>
            Remove horizontal spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionVerticalSpacingEqual">
            <summary>
            Make vertical spacing equal transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionIncreaseVerticalSpacing">
            <summary>
            Increase vertical spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDecreaseVerticalSpacing">
            <summary>
            Decrease vertical spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRemoveVerticalSpacing">
            <summary>
            Remove vertical spacing transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCenterHorizontally">
            <summary>
            Center horizontally transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCenterVertically">
            <summary>
            Center vertically transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeStrokeStyle">
            <summary>
            Change stroke style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeShadowStyle">
            <summary>
            Change shadow style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeFillStyle">
            <summary>
            Change fill style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeTextStyle">
            <summary>
            Change text style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionBold">
            <summary>
            Make bold text transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionItalic">
            <summary>
            Make italic text transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionUnderline">
            <summary>
            Make underlined text transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionHorzTextAlignLeft">
            <summary>
            Text align left transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionHorzTextAlignRight">
            <summary>
            Text align right transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionHorzTextAlignCenter">
            <summary>
            Text align center transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionVertTextAlignTop">
            <summary>
            Text align top transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionVertTextAlignBottom">
            <summary>
            Text align bottom transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionVertTextAlignMiddle">
            <summary>
            Text align middle transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeBridgeStyle">
            <summary>
            Change bridge style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeStartArrowheadStyle">
            <summary>
            Change start arrowhead style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeEndArrowheadStyle">
            <summary>
            Change end arrowhead style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangePointStyle">
            <summary>
            Change point style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeInteractivity">
            <summary>
            Change interactivity style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeStyle">
            <summary>
            Change style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeProtection">
            <summary>
            Change protection transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeInteractionStyle">
            <summary>
            Change interaction style transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRemoveAllNodes">
            <summary>
            Change remove all nodes transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMoveElements">
            <summary>
            Move elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionEditPlug">
            <summary>
            Edit plug transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionEditPort">
            <summary>
            Edit port transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionEditPoint">
            <summary>
            Edit point transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionGroup">
            <summary>
            Group transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionUngroup">
            <summary>
            Ungroup transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCompose">
            <summary>
            Compose transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReplaceAll">
            <summary>
            Replace All
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDecompose">
            <summary>
            Decompose transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionAutoBoundsMode">
            <summary>
            AutoBoundsMode change transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDropElements">
            <summary>
            Drop nodes transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionPasteElements">
            <summary>
            Paste nodes transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReroute">
            <summary>
            Reroute routes transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRerouteAlways">
            <summary>
            Reroute Always transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRerouteWhenNeeded">
            <summary>
            Reroute Always transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRerouteNever">
            <summary>
            Reroute Always transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReflex">
            <summary>
            Reflex transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMakeLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMakePolyline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMakeOrthogonal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionModifyControlPoint">
            <summary>
            Modify control point transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReverse">
            <summary>
            Reverse transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReverseModel">
            <summary>
            Reverse node transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionPropertiesChange">
            <summary>
            Properties change transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCompositeChange">
            <summary>
            Composite change transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionInplaceEdit">
            <summary>
            Inplace edit transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionResizeShape">
            <summary>
            Resize shape transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRotateShape">
            <summary>
            Rotate shape transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCreateConnector">
            <summary>
            Create connector transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReplacePrimitive">
            <summary>
            Replace primitive transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionFlipHorizontal">
            <summary>
            Flip horizontal transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionFlipVertical">
            <summary>
            Flip vertical transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRotateLeft">
            <summary>
            Rotate left transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionRotateRight">
            <summary>
            Rotate right transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionBringForward">
            <summary>
            Bring forward transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionBringToFront">
            <summary>
            Bring to front transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionSendBackward">
            <summary>
            Send backward transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionSendToBack">
            <summary>
            Send to back transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionMergePoints">
            <summary>
            Merge points transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCut">
            <summary>
            Cut transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCopy">
            <summary>
            Copy transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionPaste">
            <summary>
            Paste transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDuplicate">
            <summary>
            Duplicate transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionReorderMasters">
            <summary>
            Reorder masters transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionScaleModel">
            <summary>
            Scale model transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCreateShapeElements">
            <summary>
            Create shape elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDestroyShapeElements">
            <summary>
            Destroy shape elements transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeRoutableConnectorType">
            <summary>
            Change routable connector type transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeStartPoint">
            <summary>
            Change start point transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionChangeEndPoint">
            <summary>
            Change end point transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionConnectPoints">
            <summary>
            Connect points transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDisconnectPoints">
            <summary>
            Disconnect points transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionDisconnectConnectedPoints">
            <summary>
            Disconnect connected points transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionSizeToText">
            <summary>
            Size to text transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionExpand">
            <summary>
            Expand transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.TransactionCollapse">
            <summary>
            Collapse transaction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDR.StyleSheetNameConnectors">
            <summary>
            Name for the default connectors style sheet.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NResources">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NResources.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_BringForward_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_BringToFront_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_ExclusiveOr_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_FlipHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_FlipVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Group_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Intersect_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_NudgeDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_NudgeLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_NudgeRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_NudgeUp_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Reflex_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Reroute_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Reverse_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_RotateLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_RotateRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_SendBackward_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_SendToBack_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Subtract_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Ungroup_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_Union_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_BringForward_BringForward_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_RotateRight_16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Action_RotateRight_20_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignBottoms_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignCenters_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignLefts_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignMiddles_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignRights_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_AlignTops_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_BoxLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_CenterInPageHorizontally_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_CenterInPageVertically_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_DecreaseHorizontalSpacing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_DecreaseVerticalSpacing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_GraphLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_IncreaseHorizontalSpacing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_IncreaseVerticalSpacing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_LayoutShapes_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_MakeHorizontalSpacingEqual_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_MakeSameHeight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_MakeSameSize_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_MakeSameWidth_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_MakeVerticalSpacingEqual_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_RemoveHorizontalSpacing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_RemoveVerticalSpacing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_SizeToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_SnapToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Arrange_TreeLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Bookmarks_AddBookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Bookmarks_Bookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Bookmarks_EditBookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Bookmarks_NextBookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Bookmarks_PreviousBookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Diagrams_FamilyTree_AddChild_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Diagrams_FamilyTree_AddParents_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Diagrams_FamilyTree_AddSpouse_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Diagrams_FamilyTree_Arrange_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Diagrams_FamilyTree_ShapeInformation_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_ControlPoint_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_Geometry_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_Group_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_Guideline_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_Page_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_Port_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Elements_Shape_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_ImportFlowchart_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_ImportOrgChart_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_OpenDatabaseSchema_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_DXF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_EMF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_GED_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_HTML_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_NDB_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_NDX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_PNG_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_SHP_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_SVG_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_VDX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_VSD_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_File_Formats_VSDX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_ApplyFormatting_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_BeginArrowhead_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_CopyFormatting_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_CornerRounding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_EndArrowhead_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_Style_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_Theme_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_Variant_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_Dark_CornerRounding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Format_Dark_Style_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryClose_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryFind_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryGallery_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryGoTo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryLarge_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryNew_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryOpen_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibraryOpen2_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibrarySave_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_LibrarySmall_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_ViewStyleIconsAndDetails_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_ViewStyleIconsAndNames_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_ViewStyleIconsOnly_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_ViewStyleList_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Library_ViewStyleThumbnails_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_EvaluationExpired_Background_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_EvaluationExpired_Calendar_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_EvaluationExpired_Close_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_EvaluationExpired_LicenseKey_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_EvaluationExpired_ShoppingCart_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_Logos_MyDrawLogo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_Logos_MyDrawLogoBig_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_Logos_MyDraw_16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_MyDraw_Logos_MyDraw_32x32_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_ArrowDown_gif">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_ArrowLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_Move_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_Rename_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_SmartTagDown_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_SmartTagLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_SmartTagRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Other_SmartTagUp_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_BottomSide_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_LeftBottomCorner_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_LeftSide_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_LeftTopCorner_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_RightBottomCorner_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_RightSide_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_RightTopCorner_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_PageShadow_TopSide_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_16x16_Arrange_Position_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_16x16_Design_ShapeStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_16x16_Design_Dark_ShapeStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_ExclusiveOr_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_FlipHorizontal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_FlipVertical_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_Group_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_Intersect_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_RotateLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_RotateRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_Subtract_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_Ungroup_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Action_Union_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_ImportFlowchart_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_ImportOrgChart_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_OpenDatabaseSchema_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_DXF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_EMF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_GED_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_HTML_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_NDB_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_NDTX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_NDX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_PDF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_PNG_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_SHP_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_SVG_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_VDX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_VSD_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_AppMenu_Formats_VSDX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_AlignLefts_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_AlignToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_LayoutShapes_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_MakeSameSize_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_Position_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_SizeToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Arrange_SnapToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Design_ShapeStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Design_Theme_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Design_Variant_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Diagrams_FamilyTree_AddChild_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Diagrams_FamilyTree_AddParents_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Diagrams_FamilyTree_AddSpouse_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Diagrams_FamilyTree_Arrange_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Diagrams_FamilyTree_ShapeInformation_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Table_TablePortsMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_Table_TableResizeMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_DrawingSettings_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_FitToHeightZoomMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_FitToWidthZoomMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_FitZoomMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_Grid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_NormalZoomMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_Presentation_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_ZoomIn_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_ZoomOut_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Ribbon_32x32_View_Dark_Grid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Annotations16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Annotations24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Arrows16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Arrows24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Basic16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Basic24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Brainstorming16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Brainstorming24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_BusinessProcess16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_BusinessProcess24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Callout16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Callout24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Connector16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Connector24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Countries16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Countries24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Database16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Database24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_DataFlowDiagram16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_DataFlowDiagram24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_DecisionTree16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_DecisionTree24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_DecorativeShapes16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_DecorativeShapes24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_ElectricalSymbols16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_ElectricalSymbols24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FamilyTree16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FamilyTree24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FilesAndFolders16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FilesAndFolders24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Fishbone16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Fishbone24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Flag16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Flag24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FloorPlan16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FloorPlan24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Flowcharting16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Flowcharting24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FlowchartingEPC16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FlowchartingEPC24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FlowchartingSDL16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_FlowchartingSDL24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Food16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Food24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Genogram16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Genogram24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_MeasurementTriangle16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_MeasurementTriangle24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Network16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Network24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Organizational16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Organizational24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Pergel16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Pergel24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Symbol16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Symbol24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_TrafficSigns16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_TrafficSigns24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_VernierCallipers16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_VernierCallipers24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Weather16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_ShapeFactories_Weather24x24_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_SideBar_PanelResize_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Table_TablePortsMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Table_TableResizeMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Arc_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Bezier_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Connector_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_DrawingSettings_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Ellipse_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_EllipticalArc_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Line_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_LineJumps_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Nurbs_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Pan_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Pencil_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Pointer_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_PrintLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Rectangle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Routing_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Text_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_Arc_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_Bezier_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_Ellipse_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_EllipticalArc_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_Line_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_Nurbs_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_Tools_Dark_Rectangle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_AutoConnect_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Breaks_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Grid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Guidelines_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_LibraryBrowser_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Ports_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Presentation_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Rulers_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_SnapToGrid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_SnapToGuidelines_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_SnapToRulers_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Image_View_Dark_Grid_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CanMove_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_ConnectPlug_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateArc_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateArcEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateArcStart_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateArcStartEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateBezierCurve_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateCircularArc_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateClosedCurve_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateConnector_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateConnectorEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateConnectorStart_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateConnectorStartEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateCubicBezier_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateCubicBezierEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateCubicBezierStart_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateCubicBezierStartEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateCurve_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateEllipse_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateEllipticalArc_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateEllipticalArcEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateEllipticalArcStart_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateEllipticalArcStartEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateLine_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateLineEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateLineStart_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateLineStartEnd_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreatePolygon_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreatePolyline_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateRectangle_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateShape_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_CreateText_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_DisconnectPlug_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_HandClosed_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_HandOpened_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_MoveCopy_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_MovePin_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_Rotate_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.Cursor_Rotating_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NResources.String_NTestShapeCodeBehind_txt">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RBIN_countries_zip">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RBIN_documentation_zip">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RBIN_Libraries_CountryFlags_zip">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CanMove_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_ConnectPlug_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateArc_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateArcEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateArcStart_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateArcStartEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateBezierCurve_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateCircularArc_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateClosedCurve_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateConnector_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateConnectorEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateConnectorStart_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateConnectorStartEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateCubicBezier_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateCubicBezierEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateCubicBezierStart_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateCubicBezierStartEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateCurve_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateEllipse_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateEllipticalArc_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateEllipticalArcEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateEllipticalArcStart_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateEllipticalArcStartEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateLine_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateLineEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateLineStart_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateLineStartEnd_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreatePolygon_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreatePolyline_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateRectangle_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateShape_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_CreateText_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_DisconnectPlug_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_HandClosed_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_HandOpened_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_MoveCopy_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_MovePin_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_Rotate_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RCUR_Rotating_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_BringForward_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_BringToFront_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_ExclusiveOr_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_FlipHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_FlipVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Group_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Intersect_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_NudgeDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_NudgeLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_NudgeRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_NudgeUp_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Reflex_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Reroute_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Reverse_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_RotateLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_RotateRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_SendBackward_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_SendToBack_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Subtract_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Ungroup_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_Union_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_BringForward_BringForward_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_RotateRight_16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Action_RotateRight_20_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignBottoms_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignCenters_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignLefts_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignMiddles_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignRights_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_AlignTops_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_BoxLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_CenterInPageHorizontally_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_CenterInPageVertically_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_DecreaseHorizontalSpacing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_DecreaseVerticalSpacing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_GraphLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_IncreaseHorizontalSpacing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_IncreaseVerticalSpacing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_LayoutShapes_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_MakeHorizontalSpacingEqual_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_MakeSameHeight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_MakeSameSize_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_MakeSameWidth_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_MakeVerticalSpacingEqual_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_RemoveHorizontalSpacing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_RemoveVerticalSpacing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_SizeToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_SnapToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Arrange_TreeLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Bookmarks_AddBookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Bookmarks_Bookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Bookmarks_EditBookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Bookmarks_NextBookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Bookmarks_PreviousBookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Diagrams_FamilyTree_AddChild_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Diagrams_FamilyTree_AddParents_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Diagrams_FamilyTree_AddSpouse_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Diagrams_FamilyTree_Arrange_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Diagrams_FamilyTree_ShapeInformation_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_ControlPoint_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_Geometry_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_Group_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_Guideline_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_Page_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_Port_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Elements_Shape_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_ImportFlowchart_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_ImportOrgChart_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_OpenDatabaseSchema_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_DXF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_EMF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_GED_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_HTML_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_NDB_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_NDX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_PNG_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_SHP_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_SVG_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_VDX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_VSD_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_File_Formats_VSDX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_ApplyFormatting_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_BeginArrowhead_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_CopyFormatting_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_CornerRounding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_EndArrowhead_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_Style_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_Theme_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_Variant_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_Dark_CornerRounding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Format_Dark_Style_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryClose_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryFind_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryGallery_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryGoTo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryLarge_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryNew_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryOpen_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibraryOpen2_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibrarySave_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_LibrarySmall_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_ViewStyleIconsAndDetails_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_ViewStyleIconsAndNames_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_ViewStyleIconsOnly_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_ViewStyleList_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Library_ViewStyleThumbnails_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_EvaluationExpired_Background_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_EvaluationExpired_Calendar_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_EvaluationExpired_Close_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_EvaluationExpired_LicenseKey_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_EvaluationExpired_ShoppingCart_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_Logos_MyDrawLogo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_Logos_MyDrawLogoBig_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_Logos_MyDraw_16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_MyDraw_Logos_MyDraw_32x32_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_ArrowDown_gif">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_ArrowLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_Move_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_Rename_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_SmartTagDown_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_SmartTagLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_SmartTagRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Other_SmartTagUp_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_BottomSide_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_LeftBottomCorner_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_LeftSide_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_LeftTopCorner_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_RightBottomCorner_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_RightSide_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_RightTopCorner_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_PageShadow_TopSide_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_16x16_Arrange_Position_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_16x16_Design_ShapeStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_16x16_Design_Dark_ShapeStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_ExclusiveOr_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_FlipHorizontal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_FlipVertical_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_Group_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_Intersect_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_RotateLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_RotateRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_Subtract_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_Ungroup_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Action_Union_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_ImportFlowchart_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_ImportOrgChart_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_OpenDatabaseSchema_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_DXF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_EMF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_GED_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_HTML_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_NDB_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_NDTX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_NDX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_PDF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_PNG_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_SHP_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_SVG_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_VDX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_VSD_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_VSDX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_AlignLefts_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_AlignToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_LayoutShapes_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_MakeSameSize_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_Position_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_SizeToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Arrange_SnapToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Design_ShapeStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Design_Theme_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Design_Variant_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Diagrams_FamilyTree_AddChild_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Diagrams_FamilyTree_AddParents_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Diagrams_FamilyTree_AddSpouse_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Diagrams_FamilyTree_Arrange_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Diagrams_FamilyTree_ShapeInformation_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Table_TablePortsMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_Table_TableResizeMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_DrawingSettings_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_FitToHeightZoomMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_FitToWidthZoomMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_FitZoomMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_Grid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_NormalZoomMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_Presentation_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_ZoomIn_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_ZoomOut_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Ribbon_32x32_View_Dark_Grid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Annotations16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Annotations24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Arrows16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Arrows24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Basic16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Basic24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Brainstorming16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Brainstorming24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_BusinessProcess16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_BusinessProcess24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Callout16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Callout24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Connector16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Connector24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Countries16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Countries24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Database16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Database24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_DataFlowDiagram16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_DataFlowDiagram24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_DecisionTree16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_DecisionTree24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_DecorativeShapes16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_DecorativeShapes24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_ElectricalSymbols16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_ElectricalSymbols24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FamilyTree16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FamilyTree24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FilesAndFolders16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FilesAndFolders24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Fishbone16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Fishbone24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Flag16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Flag24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FloorPlan16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FloorPlan24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Flowcharting16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Flowcharting24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FlowchartingEPC16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FlowchartingEPC24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FlowchartingSDL16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_FlowchartingSDL24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Food16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Food24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Genogram16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Genogram24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_MeasurementTriangle16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_MeasurementTriangle24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Network16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Network24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Organizational16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Organizational24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Pergel16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Pergel24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Symbol16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Symbol24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_TrafficSigns16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_TrafficSigns24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_VernierCallipers16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_VernierCallipers24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Weather16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_ShapeFactories_Weather24x24_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_SideBar_PanelResize_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Table_TablePortsMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Table_TableResizeMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Arc_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Bezier_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Connector_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_DrawingSettings_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Ellipse_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_EllipticalArc_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Line_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_LineJumps_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Nurbs_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Pan_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Pencil_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Pointer_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_PrintLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Rectangle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Routing_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Text_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_Arc_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_Bezier_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_Ellipse_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_EllipticalArc_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_Line_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_Nurbs_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_Tools_Dark_Rectangle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_AutoConnect_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Breaks_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Grid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Guidelines_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_LibraryBrowser_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Ports_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Presentation_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Rulers_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_SnapToGrid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_SnapToGuidelines_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_SnapToRulers_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RIMG_View_Dark_Grid_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.RSTR_NTestShapeCodeBehind_txt">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NResources.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NResourcesData1">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NResourcesData2">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NResourcesData3">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NResourcesData4">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NResourcesData5">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Routing.ENConnectionSides">
            <summary>
            Enumerates the connection sides.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.ENConnectionSides.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.ENConnectionSides.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.ENConnectionSides.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.ENConnectionSides.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.ENConnectionSides.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Routing.NRouteEnd">
            <summary>
            Represents the start or end of a route 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Routing.NRouteEnd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteEnd.Location">
            <summary>
            The location of the route end point (in page coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteEnd.ValidDirection">
            <summary>
            Indicates whether the direction is valid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteEnd.Direction">
            <summary>
            The route end point direction (in radians in page coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteEnd.Box">
            <summary>
            The route end point box which it must escape (in page coordinates)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteEnd.ValidBox">
            <summary>
            Indicates whether the box is valid.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteEnd.EscapePoints">
            <summary>
            Vertbatim escape points (in page coordinates)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Routing.NRouteRequirements">
            <summary>
            Represents the requirements of a route
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Routing.NRouteRequirements.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteRequirements.RoutedConnector">
            <summary>
            The connector which is routed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteRequirements.Start">
            <summary>
            Route start
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Routing.NRouteRequirements.End">
            <summary>
            Route end
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory">
            <summary>
            The NBrainstormingShapesFactory class is used to produce brainstorming shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.ShapeCount">
            <summary>
            Gets the count of shapes in this shape factory
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitTodoShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the todo shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitTodoShape(Nevron.Nov.Diagram.NGroup,Nevron.Nov.Diagram.NDrawRectangle,Nevron.Nov.Diagram.NDrawRectangle)">
             <summary>
            Inits the todo shape.
             </summary>
             <param name="group"></param>
             <param name="outer"></param>
             <param name="inner"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitDoneShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the done shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitDeleteShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the delete shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitDeleteShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Inits the delete shape.
            </summary>
            <param name="shape"></param>
            <param name="points"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitNotDoneShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the not done shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitCheckShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the check shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitNotDoto(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the not todo shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitSmiley(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the smiley shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitFrowny(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the frowny shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitAngry(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the angry shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitInfo(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the info shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitTime(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the time shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitWarning(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the warning shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitIdea(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the idea shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitBullseye(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bullseye shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitBullseyeHit(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bullseye hit shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitFlag(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the flag shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitTask(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the task shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitNote(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the note shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitAttention(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the attention shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitAppointment(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the appointment shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitStar(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the star shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitFlashyStar(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the flashy star shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitHighlight(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the highlight shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitStarFlash(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the star flash shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitStopSign(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the stop sign shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitCloud(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the cloud shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitTunderCloud(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the tunder cloud shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitUrgentStamp(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the urgent stamp shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitNB(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the nota bene shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitNotpad(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the notepad shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitLights(Nevron.Nov.Diagram.NGroup,Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.UQjh)">
            <summary>
            Inits the lights shape.
            </summary>
            <param name="group"></param>
            <param name="light"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitExamine(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the examine shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPause(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the pause shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitExclamation(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the exclamation shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitQuestion(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the question shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPencil(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the pencil shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitCoin(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the coin shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitRainbow(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the rainbow shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitTrash(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the trash shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitLine(Nevron.Nov.Diagram.NGroup,System.Double,System.Double,System.Double,System.Double,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Inits the line shape.
            </summary>
            <param name="group"></param>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="matrix"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitCog(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the cog shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitCog2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the cog 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitElipse(Nevron.Nov.Diagram.NGroup,Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NFill)">
            <summary>
            Inits the elipse shape.
            </summary>
            <param name="group"></param>
            <param name="rectangle"></param>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitElipse(Nevron.Nov.Diagram.NGroup,Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NFill,Nevron.Nov.Graphics.NStroke)">
            <summary>
            Inits the elipse shape.
            </summary>
            <param name="group"></param>
            <param name="rectangle"></param>
            <param name="fill"></param>
            <param name="stroke"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitMedal(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the medal shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitMedal2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the medal 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece3(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 3 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece4(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 4 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece5(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 5 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece6(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 6 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece7(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 7 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece8(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 8 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzlePiece9(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the puzzle piece 9 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBrainstormingShapeFactory.InitPuzzle(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the puzzle shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory">
            <summary>
            Creates business process shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitBlankShapeCore(Nevron.Nov.Diagram.NGroup,Nevron.Nov.Graphics.NMatrix)">
            <summary>
            Inits the blank core shape.
            </summary>
            <param name="group"></param>
            <param name="matrix"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitActivityShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the activity shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitAndJoin(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the and join shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitAndSplit(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the and split shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitData(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the data shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitDecision(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the decision shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitHuman(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the human shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitInfo(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the info shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitMail(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the mail shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitManualActicity(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the manual activity shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitLine(Nevron.Nov.Diagram.NGroup,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inits the line shape.
            </summary>
            <param name="group"></param>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitManualActivity2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the manual activity 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitMove(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the move shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitOrJoin(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the or join shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitOrSplit(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the or split shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitOrganization(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the organization shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitPhone(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the phone shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitQuestion(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the question shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitResult(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the result shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitRole(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the role shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitRouting(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the routing shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitSplit(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the split shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitStart(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the start shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitStart2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the start 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitIntermediate(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the intermediate shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitEnd(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the end shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitTask(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the task shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitStop(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the stop shape.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitStopAccepted(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the stop accepted shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitStopRejected(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the stop shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitSubActivity(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the sub activity shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitSubGraph(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the sub graph shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitTools(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the tools shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitWarning(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the warning shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitTimer(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the timer shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitError(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the error shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitCancel(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the cancel shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitCompensation(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the compensation shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitRule(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the rule shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitLink(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the link shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitSignal(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the signal shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitTerminate(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the terminate shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitMultiple(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the multiple shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGatewayXOR1(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the gateway XOR 1 shape.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGatewayXOR2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the gateway XOR 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGatewayXOR3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the gateway XOR 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGatewayOR(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the gateway OR shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGatewayAND(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the gateway AND shape.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGatewayMerge(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the gateway merge shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitMessage(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the message shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitDataObject(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the data object shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitRepetitive(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the repetitive shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitMultipleInstances(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the multiple instances shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitAdHoc(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the ad-hoc shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitExcellent(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the excellent shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitGood(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the good shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitAverage(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the average shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitPoor(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the poor shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitUnacceptable(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the unacceptable shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBusinessProcessShapeFactory.InitDataStore(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the data store shape.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NCauseAndEffectDiagramShapesFactory">
            <summary>
            The NFishboneShapeFactory class is used to produce fishbone shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCauseAndEffectDiagramShapesFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCauseAndEffectDiagramShapesFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCauseAndEffectDiagramShapesFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCauseAndEffectDiagramShapesFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCauseAndEffectDiagramShapesFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the info for the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory">
            <summary>
            Descision tree shape factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.InitDecisionShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.InitChanceNode(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.InitEndNode(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.InitAlternativeBranch1(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.InitAlternativeBranch2(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecisionTreeShapesFactory.InitRejectedBranch(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory">
            <summary>
            Creates EPC shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the flow charting shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitAnd(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the and shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitComponent(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the component shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitEnterpriseArea(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the enterprise area shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitEvent(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the event shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitFunction(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the function shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitInformationMaterial(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the information material shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitMainProcess(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the main process shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitOr(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the or shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitOrganizationalUnit(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the organizational unit shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitProcessGroup(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the process group shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitProcessPath(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the process path shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NEPCDiagramShapesFactory.InitXor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the xor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory">
            <summary>
            Creates an organizational shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates shape at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NOrganizationChartShapeFactory.InitTeamFrame(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Team Frame shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory">
            <summary>
            Creates electrical symbol shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitBattery(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the battery shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitGround(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the ground shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitChassisGround(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the chassis ground shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitEquipotentiality(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the equipotentiality shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitEquipotentiality2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the equipotentiality 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitCapacitor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the capacitor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitCapacitor2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the capacitor 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitCapacitor3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the capacitor 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTrimmerCapacitor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the trimmer capacitor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitVariableCapacitor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the variable capacitor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitSCR(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the SCR shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitZenerDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the zener diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTunnelDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the tunnel diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitVariCap(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the vari cap shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitSchottkyDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the schottky diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitShockleyDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the shockley diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitConstantDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the constant diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitGunnDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the gunn diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDiodePath">
            <summary>
            Inits the diode path shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitLedDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the led diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPhotoDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the photho diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitLamb(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the lamb shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitSPST(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the SPST shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.IintSPDT(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the SPDT shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitBjtNpn(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bjt npn shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitBjtPnp(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bjd pnp shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitResistorUS(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Resistor US shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPotentiometerUS(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the potentiometer US shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitResistor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the resistor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPotentiometer(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the pontentiometer shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitRheostat(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the rheostat shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitThermistor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the thermistor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitLDR(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the LDR shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPresetResistor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the preset resistor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitFuse(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the fuse shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitFuse2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the fuse 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitFuse3(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the fuse 3 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitInductor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the inductor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTransformer(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the transformer shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitVacuumDiode(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the vacuum diode shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitJFetP(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the jfet p shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitJFetN(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the jfet n shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitMosfetEnhancementNChannel(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the mosfet enhancement n channel shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitMosfetEnhancementPChannel(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the mosfet enhancement p channel shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitMosfetDepletionNChannel(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the mosfet depletion n chanel shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitMosfetDepletionPChannel(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the mosfet depletion p chanel shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDarlingtonPath">
            <summary>
            Inits the darlington path shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDarlington(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the darlington shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitSziklai(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the sziklai shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitKlipSel(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the klip sel shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDiac(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the diac shape.
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTriac(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the triac shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitAerial(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the aerial shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitFrameAntenna(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the frame antena shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitLoopAntenna(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the loop antenna shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitAnd(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the and shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitOr(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the or shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitNot(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the not shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitNand(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the nand shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitNor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the nor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitXor(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the xor shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitXnor(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the xnor shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitCrystal(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the crystal shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitCBreaker(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the c breaker shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTransducer(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the transducer shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTermoCouple(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the termo couple shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitOscillator(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the oscillator shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitACSource(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the AC couple shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDCSource(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the DC source shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitLatch(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the latch shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitThermopile(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the thermopile shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitStrainGauge(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the strain gauge shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTouchPlate(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the touch plate shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitResonator2P(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the resonator 2P shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitResonator3P(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the resonator 3P shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitBridgeRectifier(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bridge rectifier shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitOpAmp(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the op amp shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitHeater(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the heater shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitMotor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the motor shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitGalvanometer(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the galvanometer shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitOscilloscope(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the oscilloscope shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitBell(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the bell shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitBuzzer(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the buzzer shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitSpeaker(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the speaker shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPhotoCell(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the photo cell shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPentode(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the pentode shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTetrode(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the tetrode shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitTriode(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the triode shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitDiode2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the diode 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitGenerator(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the generator shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitGlowtube(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the glowtube shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NElectricalSymbolShapeFactory.InitPhototube(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the phototube shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType">
            <summary>
            Enumerates the predefined shape factories.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.AnnotationShapes">
            <summary>
            Annotation shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.ArrowShapes">
            <summary>
            Arrow shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.BasicShapes">
            <summary>
            Basic shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.BrainstormingShapes">
            <summary>
            Brainstorming shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.BusinessProcessShapes">
            <summary>
            Business process shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.CalloutShapes">
            <summary>
            Callout shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.ConnectorShapes">
            <summary>
            Connector shapes factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.CountryShapes">
            <summary>
            Country shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.DatabaseShapes">
            <summary>
            Chen's Database Shapes factory
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.DecorativeShapes">
            <summary>
            Decorative Shapes factory
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.DimensioningEngineering">
            <summary>
            Dimensioning - Engineering
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.DataFlowDiagramShapes">
            <summary>
            Data flow diagram shapes factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.DrawingToolShapes">
            <summary>
            Drawing tool shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.ElectricalSymbolsShapes">
            <summary>
            Electrical symbol shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.EPCShapes">
            <summary>
            EPC shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.FamilyTreeShapes">
            <summary>
            Family tree shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.FishboneShapes">
            <summary>
            Fishbone shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.FloorPlanShapes">
            <summary>
            Floor plan shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.FlowchartingShapes">
            <summary>
            Flow charting shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.GenogramShapes">
            <summary>
            Genogram shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.NetworkShapes">
            <summary>
            Network shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.SDLShapes">
            <summary>
            SDL shape factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.SymbolShapes">
            <summary>
            Symbol shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.DecisionTreeShapes">
            <summary>
            Decision tree shapes factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.OrganizationalShapes">
            <summary>
            Organizational shapes factory.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType.UMLClassDiagramShapes">
            <summary>
            UML Class Diagram shape factory.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENArrowShape">
            <summary>
            Enumerates the predefined arrow shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.SimpleArrow">
            <summary>
            Simple Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.SimpleDoubleArrow">
            <summary>
            Simple Double Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.BentArrow">
            <summary>
            Bent Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.UTurn">
            <summary>
            U-Turn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.SharpBentArrow">
            <summary>
            Sharp Bent Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.CurvedRightArrow">
            <summary>
            Curved Right Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.CurvedLeftArrow">
            <summary>
            Curved Left Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.BlockArrow">
            <summary>
            Block Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.CircularArrow">
            <summary>
            Circular Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.QuadArrow">
            <summary>
            Quad Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.LeftRightArrow">
            <summary>
            Left Right Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.LeftRightArrowBlock">
            <summary>
            Left Right Arrow Block
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.QuadArrowBlock">
            <summary>
            Quad Arrow Block
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.ModernArrow">
            <summary>
            Modern Arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENArrowShape.MultiLine">
            <summary>
            Multi-Line
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENBasicShape">
            <summary>
            Enumerates the predefined basic shapes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Rectangle">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Square">
            <summary>
            Square.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RoundedRectangle">
            <summary>
            Rounded rectangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Triangle">
            <summary>
            Triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Diamond">
            <summary>
            Diamond.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Pentagon">
            <summary>
            Pentagon.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Hexagon">
            <summary>
            Hexagon.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Heptagon">
            <summary>
            Heptagon.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Octagon">
            <summary>
            Octagon.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Pentagram">
            <summary>
            Pentagram.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Hexagram">
            <summary>
            Hexagram.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Heptagram">
            <summary>
            Heptagram.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Octagram">
            <summary>
            Octagram.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.TwentyFourPointStar">
            <summary>
            24 Point Star.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.ThirtyTwoPointStar">
            <summary>
            Thirty Two Point Star.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RightTriangle">
            <summary>
            Right triangle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Cross">
            <summary>
            Cross
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Text">
            <summary>
            Basic text shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.ThreeDBox">
            <summary>
            Basic 3D Box shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.CurvedArrow">
            <summary>
            Curved arrow shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.ArrowBox">
            <summary>
            Arrow Box
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Concentric">
            <summary>
            Concentric
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.LeftParenthesis">
            <summary>
            Left Parenthesis
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RightParenthesis">
            <summary>
            Right Parenthesis
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.LeftBrace">
            <summary>
            Left brace
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RightBrace">
            <summary>
            Right brace
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Can">
            <summary>
            Can
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.FourPointStar">
            <summary>
            4 point star
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Chevron">
            <summary>
            Chevron
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.NoSymbol">
            <summary>
            No symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.FrameCorner">
            <summary>
            Frame corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.LShape">
            <summary>
            L shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.DiagonalStripe">
            <summary>
            Diagonal shape.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.SingleSnipCornerRectangle">
            <summary>
            Single snip corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.DoubleSnipCornerRectangle">
            <summary>
            Double snip corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.DiagonalSnipCornerRectangle">
            <summary>
            Diagonal snip corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.SingleRoundCornerRectangle">
            <summary>
            Single round corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RoundSameSideCornerRectangle">
            <summary>
            Round same side corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RoundDiagonalCornerRectangle">
            <summary>
            Round diagonal corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.SnipCornerRectangle">
            <summary>
            Snip corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.SnipAndRoundSingleCornerRectangle">
            <summary>
            Snip and round single corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.SnipAndRoundCornerRectangle">
            <summary>
            Snip and round corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.RoundConrnerRectangle">
            <summary>
            Round corner rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Frame">
            <summary>
            Frame
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.SixPointStar">
            <summary>
            Six point star.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.CenterDragCircle">
            <summary>
            Center drag circle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBasicShape.Plaque">
            <summary>
            Plaque
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape">
            <summary>
            Enumerates the predefined Brainstorming Shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Todo">
            <summary>
            To do
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Done">
            <summary>
            Done
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Delete">
            <summary>
            Delete/Cross out
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.NotDone">
            <summary>
            Not done
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Check">
            <summary>
            Check
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.NotTodo">
            <summary>
            Not to be done
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Smiley">
            <summary>
            Smiley
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Frowny">
            <summary>
            Frowny
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Angry">
            <summary>
            Angry
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Info">
            <summary>
            Information
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Idea">
            <summary>
            Idea!
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Bullseye">
            <summary>
            Bullseye/Target
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.BullseyeHit">
            <summary>
            Bullseye/Direct hit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Flag">
            <summary>
            Flag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Attention">
            <summary>
            Attention!
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Appointment">
            <summary>
            Appointment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Star">
            <summary>
            Star
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.FlashyStar">
            <summary>
            Flashy star
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Highlight">
            <summary>
            Highlight
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.StarFlash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.StopSign">
            <summary>
            Stop sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Cloud">
            <summary>
            Cloud
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.ThunderCloud">
            <summary>
            Thundercloud
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.UrgentStamp">
            <summary>
            Urgent!
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.NB">
            <summary>
            Nota Bene
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Notepad">
            <summary>
            Notepad
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.GreenLight">
            <summary>
            Green light
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.YellowLight">
            <summary>
            Yellow light
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.RedLight">
            <summary>
            Red light
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Examine">
            <summary>
            To examine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Pause">
            <summary>
            Pause/Break
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Exclamation">
            <summary>
            Exclamation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Question">
            <summary>
            Question
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Pencil">
            <summary>
            Pencil
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Rainbow">
            <summary>
            Rainbow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Trash">
            <summary>
            Trash
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Cog">
            <summary>
            Cog
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Cog2">
            <summary>
            Cog2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Medal">
            <summary>
            Medal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Medal2">
            <summary>
            Medal2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece1">
            <summary>
            Puzzle Piece 1 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece2">
            <summary>
            Puzzle Piece 2 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece3">
            <summary>
            Puzzle Piece 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece4">
            <summary>
            Puzzle Piece 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece5">
            <summary>
            Puzzle Piece 5
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece6">
            <summary>
            Puzzle Piece 6
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece7">
            <summary>
            Puzzle Piece 7
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece8">
            <summary>
            Puzzle Piece 8
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.PuzzlePiece9">
            <summary>
            Puzzle Piece 9
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBrainstormingShape.Puzzle">
            <summary>
            Puzzle
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape">
            <summary>
            Enumerates the predefined Business Process shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Blank">
            <summary>
            Blank
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Activity">
            <summary>
            Activity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.AndJoin">
            <summary>
            And Join
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.AndSplit">
            <summary>
            And Split
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Decision">
            <summary>
            Decision
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Human">
            <summary>
            Human
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Mail">
            <summary>
            Mail
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.ManualActivity">
            <summary>
            Manual Activity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.ManualActivity2">
            <summary>
            Manual Activity 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Move">
            <summary>
            Move
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.OrJoin">
            <summary>
            Or Join
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.OrSplit">
            <summary>
            Or Split
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Organization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Question">
            <summary>
            Question
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Result">
            <summary>
            Result
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Routing">
            <summary>
            Routing
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Split">
            <summary>
            Split
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Start2">
            <summary>
            Start 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Intermediate">
            <summary>
            Intermediate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.End">
            <summary>
            End
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Task">
            <summary>
            Task
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.StopAccepted">
            <summary>
            Stop Accepted
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.StopRejected">
            <summary>
            Stop Rejected
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.SubActivity">
            <summary>
            Sub Activity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.SubGraph">
            <summary>
            Sub Graph
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Tools">
            <summary>
            Tools
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Timer">
            <summary>
            Timer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Cancel">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Compensation">
            <summary>
            Compensation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Rule">
            <summary>
            Rule
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Signal">
            <summary>
            Signal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Terminate">
            <summary>
            Terminate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Multiple">
            <summary>
            Multiple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Gateway">
            <summary>
            Gateway
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.GatewayXOR1">
            <summary>
            Gateway XOR 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.GatewayXOR2">
            <summary>
            Gateway XOR 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.GatewayXOR3">
            <summary>
            Gateway XOR 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.GatewayOR">
            <summary>
            Gateway OR
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.GatewayAND">
            <summary>
            Gateway AND
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.GatewayMerge">
            <summary>
            Gateway Merge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.DataObject">
            <summary>
            Data Object
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Repetitive">
            <summary>
            Repetitive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.MultipleInstances">
            <summary>
            Multiple Instances
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.AdHoc">
            <summary>
            Ad-Hoc
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Excellent">
            <summary>
            Excellent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Good">
            <summary>
            Good
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Average">
            <summary>
            Average
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Poor">
            <summary>
            Poor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Unacceptable">
            <summary>
            Unacceptable
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.MessageFlow">
            <summary>
            Message Flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.SequenceFlow">
            <summary>
            Sequence Flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.Association">
            <summary>
            Association
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENBusinessProcessShape.DataStore">
            <summary>
            Data Store
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENCalloutShape">
            <summary>
            Enumerates the Callout Shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Box">
            <summary>
            Box callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.BoxElbow">
            <summary>
            Box elbow callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SideLine">
            <summary>
            Side line callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.MidLine">
            <summary>
            Mid line callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SideText">
            <summary>
            Side text callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.MidText">
            <summary>
            Mid text callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SideElbow">
            <summary>
            Side elbow callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.MidElbow">
            <summary>
            Mid elbow callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.MidElbowBox">
            <summary>
            Mid elbow box callout.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.CenterText">
            <summary>
            Center text callout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Bend">
            <summary>
            Bend callout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Annotation">
            <summary>
            Annotation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.BracesWithText">
            <summary>
            Braces with text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.BracketsWithText">
            <summary>
            Bracket with text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Oval">
            <summary>
            Oval.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.LineWithText">
            <summary>
            Line with text.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.PartialBracket">
            <summary>
            Partial bracket.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SideBrace">
            <summary>
            Side brace.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SideBracket">
            <summary>
            Side bracket.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SideParenthesis">
            <summary>
            Side parenhesis.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Baloon">
            <summary>
            Baloon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.RoundedBaloon">
            <summary>
            Rounded baloon.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.AngledStamp">
            <summary>
            Angled stamp.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.RoundedStamp">
            <summary>
            Rounded stamp.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.AutomaticDimension">
            <summary>
            Automatic dimension.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Tag">
            <summary>
            Tag.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.File">
            <summary>
            File.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.YellowNote">
            <summary>
            Yellow note.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.SharpStarburst">
            <summary>
            Sharp starburst.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.BluntStarburst">
            <summary>
            Blunt starburst
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.TriangleWithBendablePointer">
            <summary>
            Triangle callout with a bendable pointer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.RectangleWithBendablePointer">
            <summary>
            Rectangle callout with a bendable pointer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.HexagonWithBendablePointer">
            <summary>
            Hexagon callout with a bendable pointer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.OctagonWithBendablePointer">
            <summary>
            Octagon callout with a bendable pointer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCalloutShape.OvalWithBendablePointer">
            <summary>
            Oval callout with a bendable pointer.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENConnectorShape">
            <summary>
            Connector shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Line">
            <summary>
            A simple line connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Bezier">
            <summary>
            Bezier connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SideToTopBottom">
            <summary>
            An orthogonal connector that connects the start and end points in HV steps - horizontal, vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.TopBottomToSide">
            <summary>
            An orthogonal connector that connects the start and end points in VH steps - vertical, horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SideToSide1">
            <summary>
            An orthogonal connector that connects the start and end points in HVH steps - horizontal, vertical, horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SideToSide2">
            <summary>
            An orthogonal connector that connects the start and end points in HVHVH steps - horizontal, vertical, horizontal, vertical, horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.BottomToTop1">
            <summary>
            An orthogonal connector that connects the start and end points in VHV steps - vertical, horizontal, vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.BottomToTop2">
            <summary>
            An orthogonal connector that connects the start and end points in VHVHV steps - vertical, horizontal, vertical, horizontal, vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SquareLoop">
            <summary>
            Square loop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.AngledConnector">
            <summary>
            Angled connector.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.OneToMany">
            <summary>
            One to many.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.ControlTransfer">
            <summary>
            Control transfer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.CurveConnect1">
            <summary>
            Curve connect 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.CurveConnect2">
            <summary>
            Curve connect 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Jumper">
            <summary>
            Jumper
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.OneDOpenEnd">
            <summary>
            1-D open end.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Elbow1">
            <summary>
            Elbow 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Elbow2">
            <summary>
            Elbow 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.HollowConnect1">
            <summary>
            Hollow connect 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.HollowConnect2">
            <summary>
            Hollow connect 2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.HollowConnect3">
            <summary>
            Hollow connect 3.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Single45DegreesArrow">
            <summary>
            Solid single arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Single60DegreesArrow">
            <summary>
            Solid single 60 degrees arrow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.FancyArrow">
            <summary>
            Solid single fancy arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Double45DegreesArrow">
            <summary>
            Solid double arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Double60DegreesArrow">
            <summary>
            Solid double 60 degrees arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Tail45DegreesArrow">
            <summary>
            Solid tail arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Tail60DegreesArrow">
            <summary>
            Solid 60 degrees tail arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.FlexiArrow1">
            <summary>
            Flexi arrow 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.FlexiArrow2">
            <summary>
            Flexi arrow 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.FlexiArrow3">
            <summary>
            Flexi arrow 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.DoubleFlexiArrow">
            <summary>
            Double flexi arrow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.RoutableConnector">
            <summary>
            Routable connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SquaredDoubleTree">
            <summary>
            Squared double tree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SloppedDoubleTree">
            <summary>
            Slopped double tree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SquaredMultiTree">
            <summary>
            Squared multi tree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.SloppedMultiTree">
            <summary>
            Slopped multi tree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Star">
            <summary>
            Star
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.Bus">
            <summary>
            Bus
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENConnectorShape.CommLink">
            <summary>
            Comm link
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENCountryShape">
            <summary>
            Enumerates the country shapes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFundamentalItemsElectricalShape">
            <summary>
            Fundamental items electrical shapes
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENAnalogAndDigitalLogicElectricalShape">
            <summary>
            Analog and digital logic electrical shapes
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape">
            <summary>
            Maps and Charts electrical shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.RadioStation1">
            <summary>
            Radio Station 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.RadioStation2">
            <summary>
            Radio Station 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.PortableStation">
            <summary>
            Portable Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.MobileStation">
            <summary>
            Mobile Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.DirectionFinding">
            <summary>
            Direction finding
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.ControllingStation">
            <summary>
            Controlling Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.EndStation">
            <summary>
            End Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.RadioRelayStation">
            <summary>
            3 separate windings  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.SubscriberEquipment">
            <summary>
            Subscriber equipment  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.PassiveRelay">
            <summary>
            Passive Relay  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.SpaceStation">
            <summary>
            Space Station  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.EarthTrakingStation">
            <summary>
            Earth Traking Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.TelegraphRepeater">
            <summary>
             Telegraph Repeater
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.TelegraphRepeaterQualifiers">
            <summary>
             Telegraph Repeater Qualifiers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.TelegraphEquipment">
            <summary>
             Telegraph Equipment 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.Telephone">
            <summary>
             Telephone
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.GeneratingStation">
            <summary>
            Generating Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.ElecHeatStation">
            <summary>
            Elec/heat Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.HydroelectricStation1">
            <summary>
            Hydroelectric Station 1 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.HydroelectricStation2">
            <summary>
            Hydroelectric Station 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.HydroelectricStation3">
            <summary>
            Hydroelectric Station 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.HydroelectricStation4">
            <summary>
             Hydroelectric Station 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.ThermoelectricStation">
            <summary>
            General Thermoelectric Generating Station
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.CoalFueledStation">
            <summary>
            Coal Fueled Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.OilGasFueledStation">
            <summary>
            Oil/gas fueled station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.NuclearStation">
            <summary>
            Nuclear Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.GeothermicStation">
            <summary>
            Geothermic Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.SolarStation">
            <summary>
            Solar Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.WindStation">
            <summary>
            Wind Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.Substation">
            <summary>
            Substation 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.PrimeMover">
            <summary>
            Prime Mover 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.ConvertingStation">
            <summary>
            Converting Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.SwitchingStation">
            <summary>
            Switching Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.RectifierSubstation">
            <summary>
            Rectifier Station 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMapsAndChartsElectricalShape.PlasmaStationMHDH">
            <summary>
            Plasma Station MHDH 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols">
            <summary>
            Enumerates the qualifying symbols.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseZigzag">
            <summary>
            3-Phase Zigzag
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.FourPhase">
            <summary>
            4-Phase
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.Radiation">
            <summary>
            Radiation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.PositivePolarity">
            <summary>
            Positive Polarity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.NegativePolarity">
            <summary>
            Negative Polarity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.NeutralSymbol">
            <summary>
            Neutral Symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.MultiplePhase">
            <summary>
            Multiple Phase 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreeSeparateWindings">
            <summary>
            3 separate windings  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.TwoPhaseThreeWire">
            <summary>
            2-phase 3-wire  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.TwoPhaseFourWire">
            <summary>
            2-phase 4-wire  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseV">
            <summary>
            3-phase(V)  
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseT">
            <summary>
            3-phase(T) 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseDeltaOne">
            <summary>
            3-phase delta 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseDeltaTwo">
            <summary>
            3-phase delta 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseDeltaThree">
            <summary>
            3-phase delta 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseDeltaFour">
            <summary>
            3-phase delta 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseStar">
            <summary>
            3-phase star
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.ThreePhaseFourWire">
            <summary>
            3-phase 4-wire
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.SixPhaseDoubleStar">
            <summary>
            6-phase double star
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.SixPhaseDoubleDelta">
            <summary>
            6-phase double delta
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.SixPhaseHexagonal">
            <summary>
            6-phase hexagonal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.SixPhaseFork">
            <summary>
            6-phase fork
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.SpecialConnector">
            <summary>
            Special connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.CoaxialSymbol">
            <summary>
            Coaxial symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENQualifyingSymbols.Electret">
            <summary>
            Electret 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape">
            <summary>
            Enumerates the Maintenance Symbols
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.Amplifier">
            <summary>
            Amplifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.CompositeCircuit">
            <summary>
            Composite sircuit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.EnergizeRelaySignal">
            <summary>
            Energize relay signal 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.Feedback">
            <summary>
            Feedback
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.LinearElement">
            <summary>
            Linear slement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.ReferenceSignal">
            <summary>
            Reference signal 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.RelayCoil">
            <summary>
            Relay coil 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.RelayContacts">
            <summary>
            Relay contacts
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.SignalCode">
            <summary>
            Signal code
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.SignalGenerator">
            <summary>
            Signal generator 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.Switch">
            <summary>
            Switch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.TestSignal">
            <summary>
            Test signal 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENMaintenanceSymbolShape.TransmitterPulse">
            <summary>
            Transmitter pulse 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment">
            <summary>
            Enumerates the General Equipment 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Breaker">
            <summary>
            Breaker
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Crusher">
            <summary>
            Crusher
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Mixer">
            <summary>
             Mixer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.CycloneOne">
            <summary>
            Cyclone 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.RollCrusher">
            <summary>
            Roll Crusher
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.HammerCrusher">
            <summary>
            Hammer Crusher 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.VariousCrushersOne">
            <summary>
            Various Crusher 1 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.VariousCrushersTwo">
            <summary>
            Various Crusher 2 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.BallMill">
            <summary>
            Ball mill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.VariousMills">
            <summary>
            Various Mills 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.VariousMixers">
            <summary>
            Various mixers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Kneader">
            <summary>
            Kneader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.VariousKneaders">
            <summary>
            Various kneaders 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.DoubleBlender">
            <summary>
            Double Blender
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.FluidSeparators">
            <summary>
            Fluid Separators
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.FilterOne">
            <summary>
            Filter 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.FilterTwo">
            <summary>
            Filter 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.RotaryFilter">
            <summary>
            Rotary Filter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Screen">
            <summary>
            Screen
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Electromagnet">
            <summary>
            Electromagnet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.CycloneTwo">
            <summary>
            Cyclone2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.CentrifugeOne">
            <summary>
            Centrifuge 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.CentrifugeTwo">
            <summary>
            Centrifuge 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.BriquettingMachine">
            <summary>
            Briquetting machine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.PrillTower">
            <summary>
            Prill Tower
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Dryer">
            <summary>
            Dryer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Conveyor">
            <summary>
            Conveyor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.ConveyorWheel">
            <summary>
            Conveyor wheel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.BoomLoader">
            <summary>
            Conveyor wheel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.ScrapperConveyor">
            <summary>
            Scrapper Conveyor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.ScrewConveyor">
            <summary>
            Screw Conveyor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.ElevatorOne">
            <summary>
            Elevator 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.ElevatorTwo">
            <summary>
            Elevator 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.SkipHoist">
            <summary>
            Skip hoist
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.OverheadConveyor">
            <summary>
            Overhead conveyor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.Hoists">
            <summary>
            Hoists
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.ElectricMotor">
            <summary>
            ElectricMotor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGeneralEquipment.TankCar">
            <summary>
            Tank Truck
            </summary>
            <summary>
            Tank Car
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers">
            <summary>
            Enumerates the Equipment Heat Exchangers 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.HeatExchanger1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.Boiler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.CoolingTower1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.Condenser">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.HeatExchanger2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.ShellAndTube">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.TubeBundle1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.TubeBundle2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.KettleReboiler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.AirBlownCooler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.PlateType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.FinnedTube">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.DoublePipeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.OilBurner">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.FiredHeater">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.CoolingTower2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.CoolingTower">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.AutomaticStoker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.Refrigerators">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.EvaporativeCondenser">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.CondenserAirCooled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.OilSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.ChillingEvaporator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.AirCoolingEvaporator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.ExtractorHood">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.Autoclave">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.FanBlades">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentHeatExchangers.TrippleFanBlades">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Vessel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Tank">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Column">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Autoclave">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.TrayColumn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.ReactionVessel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.OpenTank">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Clarifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.ClosedTank">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.CoveredTank">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.StorageSphere">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Barrel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.GasCylinder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.Bag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.CarryingVessel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.TrayDashed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.TraySolid">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.WaterSurface">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.BranchFitting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.AccessPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.FlangedAccessPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentVessels.FluidContacting">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.OnlinePump">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.CentrifugalPump">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectableCompressor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectableFan1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.PossitiveDisplacement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.RotaryPump1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.RotaryPump2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.ProportioningPump">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectablePump1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectablePump2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectablePump3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectableCompressor2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectableCompressor3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.RotaryCompressor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.MotorDrivenTurbine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.CompressorTurbine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.ReciproactingPumpCompr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.ReciproactingPump2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.SelectableFan2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.AxialFlowFan1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.AxialFlowFan2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.EjectorInjector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.Spray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.FanBlades">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.TripleFanBlades">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentPumps.CentrifugalFan">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Indicator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Indicator2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.PressureGauges">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Thermometers">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.CRT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.PLC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Computer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Light">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.CRT2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.PLC2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Computer2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.DashedMidLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.SteamTraced">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.LevelMeter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Flowmeters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Converter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Venturi">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Flowemeter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Rotameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.VortexSensor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.PropellerMeter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.GenericUtility">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.OperatorBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.ANDGate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.ORGate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.NOTGate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.CorrectingElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.Diamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEquipmentIstruments.LevelMeters">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPipelines.MajorPipelineR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPipelines.MinorPipelineR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPipelines.MajorPipeline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPipelines.MajorPipelineL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPipelines.MinorPipeline">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENPipelines.MinorPipelineL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.InterfacePoint1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.InterfacePoint2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Slope">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Callout1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Callout2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Callout3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Callout4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Callout5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.Callout6">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.SixPtText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.EightPtText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.TenPtText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.SixPtTextAndLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.EightPtTextAndLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENProcessAnnotations.TenPtTextAndLine">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.GateValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.GlobeValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.CheckValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.PoweredValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ScrewDownValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.StopCheckValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.DiaphragmValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.NeedleValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ReliefValves">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.AngleValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.FloatOperated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.FlangedValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ButterflyValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.WedgeParallel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.BallValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ReliefAngle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ReducingValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.PlugValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ThreeWayPlugValve">
            <summary>
            3-way plug valve
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.MixingValve">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.CharacterPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ValveManifold">
            <summary>
            Valve Manifold
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.Reducer">
            <summary>
            Valve Manifold
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.GeneralJoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ButtWeld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.FlangedBolted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.SolderedSolvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ScrawedJoints">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.SocketwSpigot">
            <summary>
            Socket w/ Spigot
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.SleeveJoint">
            <summary>
            Sleeve Joint
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.SocketWeld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.SwivelJoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.EndCaps1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.EndCaps2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ElectricallyBonded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ElectricallyInsulated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.BurstingDisc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.FlameArrester">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.Strainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.Separator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ExhaustHead">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.OpenVent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.SyphonDrain">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.Hydrant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.DrainSilencer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.YStrainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.LiquidSealOpenClosed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.BellMouth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.Tundish">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENValvesAndFittings.ExhaustSilencer">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol">
            <summary>
            Enumerates the predefined electrical symbols shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Battery">
            <summary>
            Battery
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Ground">
            <summary>
            Ground
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.ChassisGround">
            <summary>
            Chassis ground
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Equipotentiality">
            <summary>
            Equipotentiality
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Equipotentiality2">
            <summary>
            Equipotentiality2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Capacitor">
            <summary>
            Capacitor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Capacitor2">
            <summary>
            Capacitor2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Capacitor3">
            <summary>
            Capacitor3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.TrimmerCapacitor">
            <summary>
            Trimmer capacitor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.VariableCapacitor">
            <summary>
            Variable capacitor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Diode">
            <summary>
            Diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.SCR">
            <summary>
            Silicon-controlled rectifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.ZenerDiode">
            <summary>
            Zener diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.TunnelDiode">
            <summary>
            Tunnel diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Varicap">
            <summary>
            Varicap
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.SchottkyDiode">
            <summary>
            Schottky diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.ShockleyDiode">
            <summary>
            Shockley diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.ConstantDiode">
            <summary>
            Constant current diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.GunnDiode">
            <summary>
            Gunn diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.LED">
            <summary>
            Light-emitting diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.PhotoDiode">
            <summary>
            Photo diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Lamp">
            <summary>
            Lamp
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.SPST">
            <summary>
            SPST switch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.SPDT">
            <summary>
            SPDT switch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.BJTNPN">
            <summary>
            BJT NPN
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.BJTPNP">
            <summary>
            BJT PNP
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.ResistorUS">
            <summary>
            Resistor US
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.PotentiometerUS">
            <summary>
            Potentiometer US
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Resistor">
            <summary>
            Resistor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Potentiometer">
            <summary>
            Potentiometer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Rheostat">
            <summary>
            Rheostat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Thermistor">
            <summary>
            Thermistor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.LDR">
            <summary>
            Light-dependent resistor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.PresetResistor">
            <summary>
            Preset resistor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Fuse">
            <summary>
            Fuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Fuse2">
            <summary>
            Fuse2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Fuse3">
            <summary>
            Fuse3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Inductor">
            <summary>
            Inductor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Transformer">
            <summary>
            Transformer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.VacuumDiode">
            <summary>
            Vacuum diode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.JfetP">
            <summary>
            Jfet P
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.JfetN">
            <summary>
            Jfet N
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.MosfetEnhancementNChannel">
            <summary>
            Mosfet Enhancement mode N-channel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.MosfetEnhancementPChannel">
            <summary>
            Mosfet Enhancement mode P-Channel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.MosfetDepletionPChannel">
            <summary>
            Mosfet Depletion mode P-Channel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.MosfetDepletionNChannel">
            <summary>
            Mosfet depletion mode N-Channel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.DarlingtonPair">
            <summary>
            Darlington pair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.SziklaiPair">
            <summary>
            Sziklai pair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.KlipSel">
            <summary>
            KlipSel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Diac">
            <summary>
            Diac
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Triac">
            <summary>
            Triac
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Aerial">
            <summary>
            Aerial
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.FrameAntenna">
            <summary>
            Frame antenna
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.LoopAntenna">
            <summary>
            Loop antenna
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.AND">
            <summary>
            AND
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.OR">
            <summary>
            OR
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.NOT">
            <summary>
            NOT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.NAND">
            <summary>
            NAND
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.NOR">
            <summary>
            NOR
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.XOR">
            <summary>
            XOR
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.XNOR">
            <summary>
            XNOR
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Crystal">
            <summary>
            Crystal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.CircuitBreaker">
            <summary>
            Circuit Breaker
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Transducer">
            <summary>
            Transducer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Thermocouple">
            <summary>
            Thermocouple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Oscillator">
            <summary>
            Oscillator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.ACSource">
            <summary>
            AC Source
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.DCSource">
            <summary>
            DC Source
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Latch">
            <summary>
            Latch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Thermopile">
            <summary>
            Thermopile
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.StrainGauge">
            <summary>
            Strain Gauge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Touchplate">
            <summary>
            Touchplate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Resonator2Pin">
            <summary>
            2 pin resonator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Resonator3Pin">
            <summary>
            3 pin resonator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.BridgeRectifier">
            <summary>
            Bridge rectifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.OpAmp">
            <summary>
            Op Amp
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Heater">
            <summary>
            Heater
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Motor">
            <summary>
            Motor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Galvanometer">
            <summary>
            Galvanometer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Oscilloscope">
            <summary>
            Oscilloscope
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Bell">
            <summary>
            Bell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Buzzer">
            <summary>
            Buzzer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Speaker">
            <summary>
            Speaker
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Photocell">
            <summary>
            Photocell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Pentode">
            <summary>
            Pentode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Tetrode">
            <summary>
            Tetrode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Triode">
            <summary>
            Triode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Diode2">
            <summary>
            Diode2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Generator">
            <summary>
            Generator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Glowtube">
            <summary>
            Glowtube
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.Phototube">
            <summary>
            Phototube
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENElectricalSymbol.VoltageControlledCurrentSource">
            <summary>
            Voltage controlled current source
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENEpcShape">
            <summary>
            Enumerates the EPC shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.AND">
            <summary>
            And
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.Component">
            <summary>
            Component
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.EnterpriseArea">
            <summary>
            Enterprise Area
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.Function">
            <summary>
            Function
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.InformationMaterial">
            <summary>
            Information material
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.OR">
            <summary>
            Or
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.OrganizationalUnit">
            <summary>
            Organizational unit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.MainProcess">
            <summary>
            Main process
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.ProcessGroup">
            <summary>
            Process group
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.ProcessPath">
            <summary>
            Process path
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.RoutableConnector">
            <summary>
            Routable connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENEpcShape.XOR">
            <summary>
            Xor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape">
            <summary>
            Enumerates the predefined Files and Folders shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.OpenFolder">
            <summary>
            Open Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.ClosedFolder">
            <summary>
            Closed Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.LargeFolder">
            <summary>
            Large Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.NewFile">
            <summary>
            New File
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.BlankFile">
            <summary>
            Blank File
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.ClassyFolder">
            <summary>
            Classy Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.SimpleFolder">
            <summary>
            Simple Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.SimpleEmptyFolder">
            <summary>
            Simple Empty Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.BusinessFolder">
            <summary>
            Business Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.Clipboard">
            <summary>
            Clipboard
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.ClipboardFull">
            <summary>
            Clipboard Full
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.Files">
            <summary>
            Files
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.SmoothFolder">
            <summary>
            Smooth Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.RoundedFolder">
            <summary>
            Rounded Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.FileFolder">
            <summary>
            File Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.CandyFolder">
            <summary>
            Candy Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.ShinyFolder">
            <summary>
            Shiny Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.FlatFolder">
            <summary>
            Flat Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.Binder">
            <summary>
            Binder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.Folders">
            <summary>
            Folders
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.Documents">
            <summary>
            Documents
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.Mail">
            <summary>
            Mail
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.FilledFolder">
            <summary>
            Filled Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.MailStamp">
            <summary>
            Mail Stamp
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.FileList">
            <summary>
            File List
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.SoftFolder">
            <summary>
            Soft Folder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.NoteBinder">
            <summary>
            Note Binder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFileAndFolderShape.HardBinder">
            <summary>
            Binder
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFlagShape">
            <summary>
            Enumerates the country flags.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENRadioElectricShape">
            <summary>
            Enumerates the radio electric shapes.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape">
            <summary>
            Enumerates the predefined floor plan shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.CoffeeTable">
            <summary>
            Coffee Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargeTable">
            <summary>
            Large Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.MagazinesTable">
            <summary>
            Magazines Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ConferenceTable">
            <summary>
            Conference Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ConferenceTable2">
            <summary>
            Conference Table 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ConferenceTable3">
            <summary>
            Conference Table 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargeConferenceTable">
            <summary>
            Large Conference Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RoundTable">
            <summary>
            Round Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.OvalTable">
            <summary>
            Oval Table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Chair1">
            <summary>
            Chair 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Chair2">
            <summary>
            Chair 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Chair3">
            <summary>
            Chair 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RollingChair1">
            <summary>
            Rolling Chair 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ComfyChair1">
            <summary>
            Comfy Chair 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ComfyChair2">
            <summary>
            Comfy Chair 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ComfyRollingChair">
            <summary>
            Comfy Rolling Chair 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RollingChair2">
            <summary>
            Rolling Chair 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RollingChair3">
            <summary>
            Rolling Chair 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LibraryChair">
            <summary>
            Library Chair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Armchair">
            <summary>
            Armchair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Couch1">
            <summary>
            Couch 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Couch2">
            <summary>
            Couch 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SoftCouch">
            <summary>
            Soft couch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SoftLoveseat">
            <summary>
            Soft loveseat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SoftArmchair">
            <summary>
            Soft armchair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.BusinessCouch">
            <summary>
            Business couch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.BusinessLoveseat">
            <summary>
            Business loveseat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.BusinessArmchair">
            <summary>
            Business Armchair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Loveseat1">
            <summary>
            Loveseat 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Loveseat2">
            <summary>
            Loveseat 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Bench1">
            <summary>
            Bench 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Bench2">
            <summary>
            Bench 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Bench3">
            <summary>
            Bench 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SimpleDesk">
            <summary>
            Simple Desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.DrawerDesk">
            <summary>
            Desk with drawers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.DrawerDesk2">
            <summary>
            Drawer Desk 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ReceptionDesk1">
            <summary>
            Reception Desk 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ReceptionDesk2">
            <summary>
            Reception Desk 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargeDeskWithSide">
            <summary>
            Large desk with side
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.CornerDesk">
            <summary>
            Corner desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RoundedDesk1">
            <summary>
            Rounded desk 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RoundedDesk2">
            <summary>
            Rounded desk 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RoundedDeskWithDrawers">
            <summary>
            Rounded desk with drawers
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.WavyDesk">
            <summary>
            Wavy desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.WavyDesk2">
            <summary>
            Wavy Desk 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.WavyDeskWithKeyboardDrawer">
            <summary>
            Wavy desk with keyboard drawer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.WavyDesk2WithKeyboardDrawer">
            <summary>
            Wavy desk 2 with keyboard drawer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.KidneyDesk">
            <summary>
            Kidney Desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.TripleDesk">
            <summary>
            Triple desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.OctagonDesk">
            <summary>
            Octagon Desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.DeskSystem">
            <summary>
            Desk system
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ExtendedWorkspace">
            <summary>
            Extended workspace
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.BusinessDesk">
            <summary>
            Business desk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.AirportBench">
            <summary>
            Airport Bench
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Chairdesk">
            <summary>
            Chairdesk
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.HeavyLeatherChair">
            <summary>
            Heavy Leather Chair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RoundArmchair">
            <summary>
            Round Armchair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.WoodenChair">
            <summary>
            Wooden Chair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.DirectorChair">
            <summary>
            Director Chair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Rolltop">
            <summary>
            Rolltop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.FileCabinet">
            <summary>
            File Cabinet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.FileCabinet2">
            <summary>
            File Cabinet 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Bookcase">
            <summary>
            Bookcase
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Cabinet">
            <summary>
            Cabinet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Podium">
            <summary>
            Podium
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.PodiumWithMic">
            <summary>
            Podium with mic
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.RowOfSeats">
            <summary>
            Row of seats
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.WaterCooler">
            <summary>
            Water cooler
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SmallSink1">
            <summary>
            Small sink 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SmallSink2">
            <summary>
            Small sink 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargeSink1">
            <summary>
            Large sink 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargeSink2">
            <summary>
            Large sink 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.CornerSink">
            <summary>
            Corner sink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.BathroomStall">
            <summary>
            Bathroom stall
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.BathroomStall2">
            <summary>
            Bathroom stall 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.HandicappedStall">
            <summary>
            Handicapped stall
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.HandicappedStall2">
            <summary>
            Handicapped stall 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Toilet1">
            <summary>
            Toilet 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Toilet2">
            <summary>
            Toilet 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Bidet">
            <summary>
            Bidet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SmallTub">
            <summary>
            Small tub
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargerTub">
            <summary>
            Larger tub
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.CornerTub">
            <summary>
            Corner tub
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.LargeCornerTub">
            <summary>
            Large corner tub
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SquareShower">
            <summary>
            Square shower
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SquareShower2">
            <summary>
            Square shower 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Fridge">
            <summary>
            Fridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.AmericanFridge">
            <summary>
            American Fridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Microwave">
            <summary>
            Microwave
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Stove">
            <summary>
            Stove
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SmallStove">
            <summary>
            Small Stove
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.KitchenSink">
            <summary>
            Kitchen Sink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SplitSink">
            <summary>
            Split Sink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SplitSink2">
            <summary>
            Split Sink 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Flatscreen">
            <summary>
            Flatscreen
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.FlatscreenWithStand">
            <summary>
            Flatscreen With Stand
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.CRT">
            <summary>
            CRT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.SlimCRT">
            <summary>
            Slim CRT
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.DesktopPC">
            <summary>
            Desktop PC
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Laptop">
            <summary>
            Laptop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.AllInOnePC">
            <summary>
            All In One PC
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Keyboard">
            <summary>
            Keyboard
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Mouse">
            <summary>
            Mouse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.ScrollwheelMouse">
            <summary>
            Scrollwheel Mouse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Printer">
            <summary>
            Printer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Scanner">
            <summary>
            Scanner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Copier">
            <summary>
            Copier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Projector">
            <summary>
            Projector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFloorPlanShape.Fax">
            <summary>
            Fax
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape">
            <summary>
            Enumerates the predefined flowcharting shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Process">
            <summary>
            Process
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Subprocess">
            <summary>
            Subprocess
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.StartEnd">
            <summary>
            Start/End
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Decision">
            <summary>
            Decision
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.PredefinedDocument">
            <summary>
            Predefined document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.MultiDocument">
            <summary>
            Multi document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.ExternalData">
            <summary>
            External data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.PredefinedProcess">
            <summary>
            Predefined process
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.StoredData">
            <summary>
            Stored data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.InternalStorage">
            <summary>
            Internal storage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.SequencialData">
            <summary>
            Sequencial data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.DirectData">
            <summary>
            Direct data
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.ManualInput">
            <summary>
            Manual input
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.ManualOperation">
            <summary>
            Manual operation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.ManualLoop">
            <summary>
            Manual loop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Card">
            <summary>
            Card
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.PaperTape">
            <summary>
            Paper tape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Display">
            <summary>
            Display
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Preparation">
            <summary>
            Preparation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.LoopLimit">
            <summary>
            Loop limit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Termination">
            <summary>
            Termination
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Collate">
            <summary>
            Collate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Delay">
            <summary>
            Delay
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Extract">
            <summary>
            Extract
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Merge">
            <summary>
            Merge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Or">
            <summary>
            Or 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Sort">
            <summary>
            Sort
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.SummingJunction">
            <summary>
            Summing junction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Database">
            <summary>
            Database
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.OnPageReference">
            <summary>
            On page reference
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.OffPageReference">
            <summary>
            Off page reference
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.ProcessIso9000">
            <summary>
            Process Iso 9000
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFlowchartingShape.Transport">
            <summary>
            Transport
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFoodShape">
            <summary>
            Enumerates the predefined weather shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Burger">
            <summary>
            Burger
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.IceCone">
            <summary>
            Ice Cream
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.IceStick">
            <summary>
            Ice Stick
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Cup">
            <summary>
            Cup
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Mug">
            <summary>
            Mug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Pizza">
            <summary>
            Pizza
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.PizzaSlice">
            <summary>
            Pizza Slice
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Fries">
            <summary>
            Fries
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.SoftDrink">
            <summary>
            Soft Drink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.MartiniGlass">
            <summary>
            Martini Glass
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Fork">
            <summary>
            Fork
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Knife">
            <summary>
            Knife
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Spoon">
            <summary>
            Spoon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.TallDrink">
            <summary>
            Tall Drink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.StrongDrink">
            <summary>
            Strong Drink
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Shotglass">
            <summary>
            Shotglass
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.TallShotglass">
            <summary>
            Tall Shotglass
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.HotDog">
            <summary>
            Hot Dog
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Muffin">
            <summary>
            Muffin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Cake">
            <summary>
            Cake
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Sushi">
            <summary>
            Sushi
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Croissant">
            <summary>
            Croissant
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Strawberry">
            <summary>
            Strawberry
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Apple">
            <summary>
            Apple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Pear">
            <summary>
            Pear
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Pineapple">
            <summary>
            Pineapple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Banana">
            <summary>
            Banana
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Cherries">
            <summary>
            Cherries
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Tomato">
            <summary>
            Tomato
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Eggplant">
            <summary>
            Eggplant
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.BellPepper">
            <summary>
            BellPepper
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.Carrot">
            <summary>
            Carrot
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFoodShape.ChiliPepper">
            <summary>
            ChiliPepper
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENNetworkShape">
            <summary>
            Enumerates the predefined network shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Computer">
            <summary>
            Computer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Printer">
            <summary>
            Printer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Laptop">
            <summary>
            Laptop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.PDA">
            <summary>
            Personal digital assistant
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Phone">
            <summary>
            Phone
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Storage">
            <summary>
            Storage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Hub">
            <summary>
            Hub/switch/router
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.WiFi">
            <summary>
            Wireless access point/hub/router
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Terminal">
            <summary>
            Terminal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Cell">
            <summary>
            Cell phone
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Scanner">
            <summary>
            Scanner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Fax">
            <summary>
            Fax
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Copier">
            <summary>
            Copier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Firewall">
            <summary>
            Firewall
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Projector">
            <summary>
            Projector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Digicam">
            <summary>
            Digital camera
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.DSLR">
            <summary>
            Digital single lens reflex camera
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Webcam">
            <summary>
            Webcamera
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.DVCam">
            <summary>
            Digital video camera
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.TabletPC">
            <summary>
            Tablet PC
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.UPPC">
            <summary>
            Ultra portable PC
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.MFC">
            <summary>
            Multifunctional device
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.SmartPhone">
            <summary>
            Smartphone
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.PMC">
            <summary>
            Portable media center
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.Modem">
            <summary>
            Modem
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.ExternalDrive">
            <summary>
            External drive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENNetworkShape.MP3">
            <summary>
            MP3 player
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.Relay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.RelayContacts">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SwitchDisconnector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.Fuse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SPST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SPDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.DPST">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.DPDT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.MakeContact">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.BreakContact">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TwoWayContact">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.LiquidLevelActuated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TemperatureSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.LimitSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.ProximityLimitSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.PilotLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.RelayCoil">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.MercurySwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.MercurySwitch2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.LiquidLevelActuated2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.GasFlowActuated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.FlowActuated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.PressureActuated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TemperatureActuated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SafetyInterlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.Thermostat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.CircuitBreaker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SelectorSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.ShortingSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.InertiaSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.ManualSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.PassingMakeContact">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SpringReturn2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.SpringReturn3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.LimitSwitchNO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.LimitSwitchNC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TwoPositionSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.ThreePositionSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.FourPositionSwitch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.PushbuttonMake">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.PushbuttonBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.PushbuttonTwoCircuit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TimeDelayMake">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TimeDelayBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.ChangeOverContact">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.Isolator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSwitchesAndRelaysShape.TimeDelayMake2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENSdlShape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Alternative">
            <summary>
            Alternative
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.CreateRequest">
            <summary>
            Create request
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Block">
            <summary>
            Block
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Decision1">
            <summary>
            Decision 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Decision2">
            <summary>
            Decision 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.DiskStorage">
            <summary>
            Disk storage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.DividedEvent">
            <summary>
            Divided event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.DividedProcess">
            <summary>
            Divided process
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Document">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.LineCurveConnector">
            <summary>
            Line curve connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.MessageFromUser">
            <summary>
            Message from user
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.MessageToUser">
            <summary>
            MessagetTo user
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.MultiDocument">
            <summary>
            Multi document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.OffPageReference">
            <summary>
            Off page reference
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.OnPageReference">
            <summary>
            On page reference
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.PrimitiveFromCallControl">
            <summary>
            Primitive from call control
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.PrimitiveToCallControl">
            <summary>
            Primitive to call control
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Procedure">
            <summary>
            Procedure
            </summary>		
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Process">
            <summary>
            Process
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Raise">
            <summary>
            Raise
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Return">
            <summary>
            Return
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.RoutableConnector">
            <summary>
            Routable connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Service">
            <summary>
            Service
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.TaskTimerStart">
            <summary>
            Task timer start
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.TaskTimerStop">
            <summary>
            Task timer stop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.Terminator">
            <summary>
            Terminator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSdlShape.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENSymbolShape">
            <summary>
            Enumerates the predefined symbol shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Skull">
            <summary>
            Skull
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Radioactive">
            <summary>
            Radioactive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Recycle">
            <summary>
            Recycle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Man">
            <summary>
            Man 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Woman">
            <summary>
            Woman
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Handicapped">
            <summary>
            Handicapped
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.YinYang">
            <summary>
            Yin-Yang
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Heart">
            <summary>
            Heart
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Flower">
            <summary>
            Flower
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Apple">
            <summary>
            Apple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Bowtie">
            <summary>
            Bowtie
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Male">
            <summary>
            Male symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Female">
            <summary>
            Female symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Book">
            <summary>
            Book
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.StickFigure">
            <summary>
            Stick figure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Sun">
            <summary>
            Sun
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Moon">
            <summary>
            Moon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Orb">
            <summary>
            Orb
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.SimpleOrb">
            <summary>
            SimpleOrb
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.PillButton">
            <summary>
            Pill Button
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.MainButton">
            <summary>
            Main Button
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.GlossyButton">
            <summary>
            Glossy Button
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.AquaPill">
            <summary>
            Aqua Pill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.HumanIcon">
            <summary>
            Human Icon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.HumanIcon2">
            <summary>
            Human Icon 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.HumanIcon3">
            <summary>
            Human Icon 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.HumanIcon4">
            <summary>
            Human Icon 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.MaleFigure">
            <summary>
            Male Figure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.FemaleFigure">
            <summary>
            Female Figure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.FlatFigure">
            <summary>
            Flat Figure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.NewActor">
            <summary>
            New Actor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.NewActor2">
            <summary>
            New Actor 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.NewActor3">
            <summary>
            New Actor 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.NewActor4">
            <summary>
            New Actor 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.BubbleFigure">
            <summary>
            Bubble Figure
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.RoleIcon">
            <summary>
            Role Icon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.RoleIcon2">
            <summary>
            Role Icon 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.UserIcon">
            <summary>
            User Icon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users1">
            <summary>
            Users 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users2">
            <summary>
            Users 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users3">
            <summary>
            Users 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users4">
            <summary>
            Users 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users5">
            <summary>
            Users 5
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users6">
            <summary>
            Users 6
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users7">
            <summary>
            Users 7
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENSymbolShape.Users8">
            <summary>
            Users 8
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape">
            <summary>
            Enumerates the predefined traffic signs shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoTraffic">
            <summary>
            No traffic
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoEntry">
            <summary>
            No entry
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoParking">
            <summary>
            No parking
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoParkingStop">
            <summary>
            No stopping and/or parking
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.SpeedLimit">
            <summary>
            Speed limit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoLeftTurn">
            <summary>
            No left turn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoRightTurn">
            <summary>
            No right turn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.KeepDirection">
            <summary>
            Keep direction
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.GiveWay">
            <summary>
            Yield/Give way
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.Highway">
            <summary>
            Highway
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.DeadEnd">
            <summary>
            Dead end street
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.OneWay">
            <summary>
            One way street
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.RailCrossing">
            <summary>
            Rail crossing ahead
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.ParkingSign">
            <summary>
            Parking
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.ParkingTimeSign">
            <summary>
            Parking with timer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.StopSign">
            <summary>
            Stop!
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.EURouteSign">
            <summary>
            European route sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.IntersectionSign">
            <summary>
            Intersection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.TrafficLightAhead">
            <summary>
            Traffic light ahead
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.RoadNarrowsOne">
            <summary>
            One lane narrows
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.RoadNarrows">
            <summary>
            Road narrows
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.UnevenRoad">
            <summary>
            Uneven road
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.DoubleCurve">
            <summary>
            Attention, turns ahead
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.AttentionSign">
            <summary>
            Attention!
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.HeightLimit">
            <summary>
            Height limit
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoUTurn">
            <summary>
            No U-turn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.Recommended">
            <summary>
            Recommended (speed)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.AttentionPeds">
            <summary>
            Attention, pedestrians
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.AttentionRoundway">
            <summary>
            Roundway
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.TurnAhead">
            <summary>
            Turn ahead
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoOvertake">
            <summary>
            No overtaking
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.NoTruckOvertake">
            <summary>
            No overtaking for trucks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.CautionSlippery">
            <summary>
            Caution, slippery road
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.EndLimits">
            <summary>
            End of limits
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.SteepHill">
            <summary>
            Steep hill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.Tunnel">
            <summary>
            Tunnel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.FallingRocks">
            <summary>
            Attention, falling rocks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.Avion">
            <summary>
            Low flying aircraft
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.TwoWayTraffic">
            <summary>
            Two way traffic
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.RiverBank">
            <summary>
            Quayside/Riverbank
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.WindSign">
            <summary>
            High winds
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.RightWay">
            <summary>
            Right of way
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.EndRightWay">
            <summary>
            End right of way
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.RoadWork">
            <summary>
            Attention, roadworks ahead
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USCaution">
            <summary>
            US caution sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USInterstate">
            <summary>
            US interstate sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USRoad">
            <summary>
            US road/route sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USSpeedLimit">
            <summary>
            US speed limit sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USTrafficLight">
            <summary>
            US traffic light sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USTwoWayTraffic">
            <summary>
            US two way traffic sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USRoadWork">
            <summary>
            US road work sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USSlipperyRoad">
            <summary>
            US slippery road sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USPedestrian">
            <summary>
            US pedestrian sign
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTrafficSignShape.USFallingRocks">
            <summary>
            US falling rocks sign
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENWeatherShape">
            <summary>
            Enumerates the predefined weather shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Sunny">
            <summary>
            Sunny
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.ClearNight">
            <summary>
            Clear Night
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.SunnyHot">
            <summary>
            Sunny Hot
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Cloudy">
            <summary>
            Cloudy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.MostlyCloudy">
            <summary>
            Partly Cloudy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.MostlyCloudyNight">
            <summary>
            Mostly Cloudy Night
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.PartlyCloudy">
            <summary>
            Partly Cloudy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.PartlyCloudyNight">
            <summary>
            Partly Cloudy Night
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Rainy">
            <summary>
            Rainy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Downfall">
            <summary>
            Downfall
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.MixedRainSnow">
            <summary>
            Mixed Rain Snow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Snow">
            <summary>
            Snow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Blizzard">
            <summary>
            Blizzard
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Foggy">
            <summary>
            Foggy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.CloudyFoggy">
            <summary>
            Cloudy and Foggy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Storm">
            <summary>
            Storm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.TStorm">
            <summary>
            T-Storm
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Haze">
            <summary>
            Haze
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.NightHaze">
            <summary>
            Night Haze
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Tornado">
            <summary>
            Tornado
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Windy">
            <summary>
            Windy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Hurricane">
            <summary>
            Hurricane
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.WeatherVane">
            <summary>
            Weather Vane
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.Umbrella">
            <summary>
            Umbrella
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.SingleDrop">
            <summary>
            Single Drop
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENWeatherShape.SingleFlake">
            <summary>
            Single Flake
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENAnnotationShape">
            <summary>
            Enumerates the annotation shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.FiveRuledColumn">
            <summary>
            5 ruled column
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.InfoLine">
            <summary>
            Info line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.BreakLine">
            <summary>
            Break line
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Section1">
            <summary>
            Section 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Section2">
            <summary>
            Section 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Section3">
            <summary>
            Section 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferencePlaneSite">
            <summary>
            Reference plane (site)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferencePlane1">
            <summary>
            Reference plane 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferencePlane2">
            <summary>
            Reference plane 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Benchmark">
            <summary>
            Benchmark
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Datum">
            <summary>
            Datum
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.Ceiling">
            <summary>
            Ceiling
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.NorthArrow1">
            <summary>
            North arrow 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.NorthArrow2">
            <summary>
            North arrow 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.NorthArrow3">
            <summary>
            North arrow 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.NorthArrow4">
            <summary>
            North arrow 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.NorthArrow5">
            <summary>
            North arrow 5
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.RevisionCloud">
            <summary>
            Revision cloud
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ScaleSymbol">
            <summary>
            Scale symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.NoteSymbol">
            <summary>
            Note symbol
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceTriangle">
            <summary>
            Reference triangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceRectangle">
            <summary>
            Reference rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceHexagon">
            <summary>
            Reference hexagon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceOval">
            <summary>
            Reference oval
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceCircle">
            <summary>
            Reference circle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceCallout1">
            <summary>
            Reference callout 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENAnnotationShape.ReferenceCallout2">
            <summary>
            Reference callout 2
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENGenogramShape">
            <summary>
            Enumerates the genogram shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.UnknownGender">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Pet">
            <summary>
            Pet.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Pregnancy">
            <summary>
            Pregnancy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Marriage">
            <summary>
            Marriage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Engagement">
            <summary>
            Engagement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.EngagementAndSeparation">
            <summary>
            Engagement and separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.EngagementAndCohabitation">
            <summary>
            Engagement and cohabitation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Commited">
            <summary>
            Commited
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.CasualRelationship">
            <summary>
            Casual relationship
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.CasualRelationshipAndSeparation">
            <summary>
            Casual relationship and separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.TemporaryRelationship">
            <summary>
            Temporary relationship
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.LoveAffair">
            <summary>
            Love affair
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.SeparationInFact">
            <summary>
            Separation in fact.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.LegalSeparation">
            <summary>
            Legal separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.LegalCohabitaion">
            <summary>
            Legal cohabitaion
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.LegalCohabitaionAndSeparation">
            <summary>
            Legal cohabitaion and separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Cohabitaion">
            <summary>
            Cohabitaion
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.NonSentimentalCohabitaion">
            <summary>
            Non-sentimental cohabitaion
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.NonSentimentalCohabitaionAndSeparation">
            <summary>
            Non-sentimental cohabitaion and separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.CohabitaionAndSeparation">
            <summary>
            Cohabitaion and separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.CohabitaionAndLegalSeparation">
            <summary>
            Cohabitaion and legal separation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Divorce">
            <summary>
            Divorce
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Nullity">
            <summary>
            Nullity
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Indifferent">
            <summary>
            Indifferent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Distant">
            <summary>
            Distant
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Harmony">
            <summary>
            Harmony
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Friendship">
            <summary>
            Friendship
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Discord">
            <summary>
            Discord
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Hate">
            <summary>
            Hate
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Fused">
            <summary>
            Fused
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Cutoff">
            <summary>
            Cutoff
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Love">
            <summary>
            Love
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.InLove">
            <summary>
            In Love
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.FocusedOn">
            <summary>
            Focused On
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Fan">
            <summary>
            Fan
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Limerence">
            <summary>
            Limerence
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Neglect">
            <summary>
            Neglect
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Manipulative">
            <summary>
            Manipulative
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Controlling">
            <summary>
            Controlling
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Hostile">
            <summary>
            Hostile
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.DistantHostile">
            <summary>
            Distant - Hostile
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Violence">
            <summary>
            Violence
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.DistantViolence">
            <summary>
            Distant - Violence
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Abuse">
            <summary>
            Abuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.PhisicalAbuse">
            <summary>
            Phisical abuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.EmotionalAbuse">
            <summary>
            Emotional abuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.CloseHostile">
            <summary>
            Close - Hosile
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.FusedHostile">
            <summary>
            Fused - Hostile
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.CloseViolence">
            <summary>
            Close - Violence
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.FusedViolence">
            <summary>
            Fused - Violence
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.SexualAbuse">
            <summary>
            Sexual Abuse
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.BestFriends">
            <summary>
            BestFriends
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENGenogramShape.Distrust">
            <summary>
            Distrust
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFamilyTreeShape">
            <summary>
            Enumerates the family tree shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFamilyTreeShape.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFamilyTreeShape.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFamilyTreeShape.Relationship">
            <summary>
            Relationship.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENDatabaseShape">
            <summary>
            Enumerates the database shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.ChenEntity">
            <summary>
            Chen entity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.ChenRelationship">
            <summary>
            Chen relationship.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.ChenAttribute">
            <summary>
            Chen attribute.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.ChenConnector">
            <summary>
            Chen connector.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.IDEF1XEntity">
            <summary>
            IDEF1X entity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.IDEF1XRelationship">
            <summary>
            IDEF relationship.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.CrowsFootEntity">
            <summary>
            Crows foot entity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDatabaseShape.CrowsFootRelationship">
            <summary>
            Crows foot relationship.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape">
            <summary>
            Enumerates UML class diagram shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape.Package">
            <summary>
            Package
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape.Interface">
            <summary>
            Interface
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape.Enumerator">
            <summary>
            Enum
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape.Association">
            <summary>
            Association
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENUMLClassDiagramShape.Inheritance">
            <summary>
            Inheritance
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes">
            <summary>
            Drawing tool shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.CircleDiameter">
            <summary>
            Circle diameter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.CircleRadius">
            <summary>
            Circle radius
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.Circle3Points">
            <summary>
            Circle 3 points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.Arc3Points">
            <summary>
            Arc 3 points
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.Circles">
            <summary>
            Circles
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.SectorGraphical">
            <summary>
            Sector-graphical
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.ArcGraphical">
            <summary>
            Arc-graphical
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.CircleTangents">
            <summary>
            Circle tangents
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.SectorNumeric">
            <summary>
            Sector numeric
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.ArcNumeric">
            <summary>
            Arc numeric
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.ArcTangents">
            <summary>
            Arc tangents
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.LineWithExtensions">
            <summary>
            Line with extensions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.CircleTangent">
            <summary>
            Circle tangent
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.OppositeTangent">
            <summary>
            Opposite tangent.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.PerpendicularAngle">
            <summary>
            Perpendicular angle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.PerpendicularLines">
            <summary>
            Perpendicular lines
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.TriangleFree">
            <summary>
            Triangle free
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.RightTriangle">
            <summary>
            Right triangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.RightTriangle2">
            <summary>
            Right triangle 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.TriangleBase">
            <summary>
            Triangle base
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.DiagonalRectangle">
            <summary>
            Diagonal rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.RoundedRectangle">
            <summary>
            Rounded rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.ChamferedRectangle">
            <summary>
            Chamfered rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.ChamferedCorner">
            <summary>
            Chamfered corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.MultigonEdge">
            <summary>
            Multigon edge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDrawingToolShapes.MultigonCenter">
            <summary>
            Multigon center
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes">
            <summary>
            Enumerates the dimensioning engineering shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.HorizontalBaseline">
            <summary>
            Horizontal baseline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.VerticalBaseline">
            <summary>
            Vertical baseline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.HorizontalOutside">
            <summary>
            Horizontal outside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.VerticalOutside">
            <summary>
            Vertical outside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AlignedOutEven">
            <summary>
            Aligned out even
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AlignedOutUneven">
            <summary>
            Aligned out uneven
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AlignedEven">
            <summary>
            Aligned even
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AlignedUneven">
            <summary>
            Aligned uneven
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.ArcRadius">
            <summary>
            Arc radius
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.RadiusOutside">
            <summary>
            Radius outside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.Radius">
            <summary>
            Radius
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.Diameter">
            <summary>
            Diameter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.DiameterOutside">
            <summary>
            Diameter outside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AngleCenter">
            <summary>
            Angle center
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AngleUneven">
            <summary>
            Angle uneven
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AngleEven">
            <summary>
            Angle even
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.AngleOutside">
            <summary>
            Angle outside
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.OrdinateHorizontal">
            <summary>
            Ordinate horizontal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.OrdinateVertical">
            <summary>
            Ordinate vertical
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.OrdinateHorizontalMultiple">
            <summary>
            Ordinate horizontal multiple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.OrdinateVerticalMultiple">
            <summary>
            Ordinate vertical multiple
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.Centerline">
            <summary>
            Centerline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDimensioningEngineeringShapes.RoomMeasure">
            <summary>
            Room measure
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes">
            <summary>
            Enumerates the data flow diagram shapes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.StartState">
            <summary>
            Start state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.StopState1">
            <summary>
            Stop state 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.StopState2">
            <summary>
            Stop state 2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.Entity1">
            <summary>
            Entity 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.Entity2">
            <summary>
            Entity 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.ExternalIteractor">
            <summary>
            External entity.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.Process1">
            <summary>
            Process 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.Process2">
            <summary>
            Process 2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.OvalProcess">
            <summary>
            Oval process
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.DataStore1">
            <summary>
            Data store 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.DataStore2">
            <summary>
            Data store 2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.DataStore3">
            <summary>
            Data store 3.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.CenterToCenterFlow">
            <summary>
            Center to center flow.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDataFlowDiagramShapes.LoopOnCenter">
            <summary>
            Loop on Center
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes">
            <summary>
            Enumerates the decorative shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.FoldedCorner">
            <summary>
            Folded corner
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.SmilingFace">
            <summary>
            Smiling face
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.Heart">
            <summary>
            Heart
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.LightningBolt">
            <summary>
            Lightning bolt
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.Sun">
            <summary>
            Sun
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.Moon">
            <summary>
            Moon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.Cloud">
            <summary>
            Cloud
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.UpRibbon">
            <summary>
            Up ribbon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.DownRibbon">
            <summary>
            Down ribbon
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.VerticalScroll">
            <summary>
            Vertical scroll
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.HorizontalScroll">
            <summary>
            Horizontal scroll
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.Wave">
            <summary>
            Wave
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecorativeShapes.DoubleWave">
            <summary>
            Double wave
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENFishboneShape">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.Effect">
            <summary>
            Effect
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.Category1">
            <summary>
            Category 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.Category2">
            <summary>
            Category 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.PrimaryCause1">
            <summary>
            Primary cause 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.PrimaryCause2">
            <summary>
            Primary cause 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.SecondaryCause1">
            <summary>
            Secondary cause 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.SecondaryCause2">
            <summary>
            Secondary cause 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.SecondaryCause3">
            <summary>
            Secondary cause 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.SecondaryCause4">
            <summary>
            Secondary cause 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.SecondaryCause5">
            <summary>
            Secondary cause 5
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENFishboneShape.SecondaryCause6">
            <summary>
            Secondary cause 6
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape">
            <summary>
            Available decision tree shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape.DecisionNode">
            <summary>
            Decision node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape.ChanceNode">
            <summary>
            Chance node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape.EndNode">
            <summary>
            End node
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape.AlternativeBranch1">
            <summary>
            Alternative branch 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape.AlternativeBranch2">
            <summary>
            Alternative branch 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENDecisionTreeShape.RejectedBranch">
            <summary>
            Rejected branch
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape">
            <summary>
            Organizational shapes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.Executive">
            <summary>
            Executive
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.Manager">
            <summary>
            Manager
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.Assistant">
            <summary>
            Assistant
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.Consultant">
            <summary>
            Consultant
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.Vacancy">
            <summary>
            Vacancy
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrganizationalShape.TeamFrame">
            <summary>
            TeamFrame
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D.NoneOpposite">
            <summary>
            None opposite.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D.Horizontal">
            <summary>
            Horizontal.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D.Vertical">
            <summary>
            Vertical.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D.VerticalOpposite">
            <summary>
            Vertical opposite.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENOrientationLine1D.HorizontalOpposite">
            <summary>
            Horizontal opposite.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.FrequencyBand">
            <summary>
            Frequency band
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.FrequencySpectrumElement">
            <summary>
            Frequency Spectrum Element
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.ConnectingStage">
            <summary>
            Connecting Stage 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.MarkingStage">
            <summary>
            Marking Stage 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.SwitchingStage">
            <summary>
             Switching stage 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.SwitchingEquipment1">
            <summary>
             Switching Equipment 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.SwitchingEquipment2">
            <summary>
             Switching Equipment2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.MagneticType">
            <summary>
             MagneticType 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.MovingCoilType">
            <summary>
             Moving coil type 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.MovingIronType">
            <summary>
             Moving coil type 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.StereoType">
            <summary>
             Moving coil type 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.DiscType">
            <summary>
             Disc type 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.TapeFilmType">
            <summary>
             Tape/Film type 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.DrumType">
            <summary>
             Drum type 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Reproducing">
            <summary>
             Reproducing 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.RecordingReproducing">
            <summary>
             Recording / Reproducing 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Erasing">
            <summary>
             Erasing
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.TransducerHead">
            <summary>
             Transducer Head
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.AmplifiedCircuit">
            <summary>
             Amplified Circuit 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.PulseModulation">
            <summary>
             Pulse Modulation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Changer">
            <summary>
             Changer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Filter">
            <summary>
             Filter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.TerminatingSets">
            <summary>
             Terminating Sets 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Networks">
            <summary>
            Networks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Modulator">
            <summary>
            Modulator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.RecorderReproducer">
            <summary>
            Recorder / Reproducer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.Concentrating">
            <summary>
            Concentrating
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTelecomSwitchAndPeripheralEquip.GuidedLightTransmitter">
            <summary>
            Guided light transmitter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings">
            <summary>
             Transformers And Windings
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.OnePhaseInductionVoltReg">
            <summary>
            1-phase induction volt. reg.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.TriplexInductionVoltReg">
            <summary>
            Triplex induction volt. reg.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.InductionVoltageRegulator">
            <summary>
            Induction voltage regulator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.CurrentTransformer1">
            <summary>
            CurrentTransformer1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.AdjustableTransformer">
            <summary>
            Adjustable Transformer 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.CurrentTransformer2">
            <summary>
            Current Transformer2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.CurrentTransformer3">
            <summary>
            Current Transformer3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.PotentialTransformer">
            <summary>
            Potential Transformer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.PotTrans3Windings">
            <summary>
            Pot. Trans. 3 Windings
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.OutdoorMeteringDevice">
            <summary>
            Outdoor Metering Device
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.LinearCoupler">
            <summary>
             Linear Coupler 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.Transformer">
            <summary>
            Transformer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.MagneticCore">
            <summary>
            Magnetic Core
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.Inductor">
            <summary>
            Inductor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.Choke">
            <summary>
            Choke
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.Variometer">
            <summary>
            Variometer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.CoaxialChoke">
            <summary>
            Coaxial Choke 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.Transductor">
            <summary>
            Transductor 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.SaturatingTransformer">
            <summary>
            Saturating Transformer 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.Transformer2">
            <summary>
            Transformer 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransformersAndWindings.PotentialTransformer2">
            <summary>
            Potential Transformer 2
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors">
            <summary>
            Enumerates terminals and connectors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.Adapter">
            <summary>
            Adapter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.CircuitTerminal">
            <summary>
            Circuit Terminal
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.MFContact">
            <summary>
            M/F contact
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.MFContact2">
            <summary>
            M/F contact2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.TerminalBoard">
            <summary>
            Terminal Board 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.CabelTermination">
            <summary>
            Cabel Termination
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.TwoConductorJack">
            <summary>
            2-conductor jack
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.ThreeConductorJack">
            <summary>
            3-conductor jack
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.TwoConductorPlug">
            <summary>
            2-conductor plug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.ThreeConductorPlug">
            <summary>
            3-conductor plug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.NormalledJack">
            <summary>
            Normalled jack
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.CoaxialOutsideConductor">
            <summary>
            Coaxial outside conductor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.CoaxialCenterConductor">
            <summary>
            Coaxial center conductor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.LargeDconnector">
            <summary>
            Large D connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.SmallDConnector">
            <summary>
            Small D connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.CHeaderConnector">
            <summary>
            C header connector
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.ACOut">
            <summary>
            AC Out
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.ShieldedJackPlug">
            <summary>
            Shielded Jack/Plug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.CoaxialJackPlug">
            <summary>
            Coaxial Jack/Plug
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM2Conductor1">
            <summary>
            F/M 2-conductor 1 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM2Conductor2">
            <summary>
            F/M 2-conductor 2
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM2Conductor3">
            <summary>
            F/M 2-conductor 3
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM3Conductor1">
            <summary>
            F/M 3-conductor 1
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM3Conductor2">
            <summary>
            F/M 3-conductor 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM3Conductor3">
            <summary>
            F/M 3-conductor 3
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM3Conductor4">
            <summary>
            F/M 3-conductor 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTerminalsAndConnectors.FM3Conductor5">
            <summary>
            F/M 3-conductor 5
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths">
            <summary>
            Enumerates the transmission paths.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.BusWidth">
            <summary>
            Bus Width
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.StraightBus">
            <summary>
            Straight bus
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.LineConcentrator">
            <summary>
            Line concentrator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.CableGroup">
            <summary>
            Cable group
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.LeadGroup">
            <summary>
            Lead group
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.OvergroundEnclosure">
            <summary>
            Lead group
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.OpticalFiber">
            <summary>
            Optical fiber 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.Terminal">
            <summary>
            Terminal 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.TerminalThreePhase">
            <summary>
            Terminal 3-phase
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.TestPoint">
            <summary>
            Test point
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.LineCable">
            <summary>
            Line/cable
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.AnticreepageDevice">
            <summary>
            Anticreepage device 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.TransmissionPath">
            <summary>
            Transmission path
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.DirectionOfFlow">
            <summary>
            Direction of flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.ElbowBus1">
            <summary>
            Elbow bus 1 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.ElbowBus2">
            <summary>
            Elbow bus 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.TwoLineBus">
            <summary>
            2-Line Bus
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.ThreeLineBus">
            <summary>
            3-Line Bus
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.FourLineBus">
            <summary>
            4-Line Bus
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.EightLineBus">
            <summary>
            8-Line Bus
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.TwoLineBusElbow">
            <summary>
            2-Line Bus elbow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.ThreeLineBusElbow">
            <summary>
            3-Line Bus elbow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.FourLineBusElbow">
            <summary>
            4-Line Bus elbow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENTransmissionPaths.EightLineBusElbow">
            <summary>
            8-Line Bus elbow
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies">
            <summary>
            Enumerates the composite assemblies.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Amplifier">
            <summary>
            Amplifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Rectifier">
            <summary>
            Rectifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.OneWayRepeater">
            <summary>
            One Way Repeater
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.TwoWayRepeater">
            <summary>
            Two Way Repeater
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.BridgeRectifier">
            <summary>
            Bridge Rectifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Demodulator">
            <summary>
            Demodulator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.MagneticAmplifier">
            <summary>
            Magnetic amplifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.NegativeImpendanceBothWayAmplifier">
            <summary>
            Negative impendance both-way amp
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.AmplifierWithBypass">
            <summary>
            Amplifier with bypass
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.AmplifierExternalDCControl">
            <summary>
            Amplifier external DC control
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.ControlledRectifier">
            <summary>
            Controlled rectifier
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.TwoWayRepeaterBypass">
            <summary>
            2-way repeater bypass
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.TwoWayRepeaterFourWire">
            <summary>
            2-way repeater 4-wire
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.NetworkLowVoltage">
            <summary>
            Network low voltage
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.PhaseShifter">
            <summary>
            Phase shifter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Chopper">
            <summary>
            Chopper
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Gyro">
            <summary>
            Gyro
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Gyro2">
            <summary>
            Gyro2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.PositionIndicatorSynchro">
            <summary>
            Position indicator synchro
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.PositionIndicatorInductor">
            <summary>
            Position indicator inductor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.PositionTransmitterDesynn">
            <summary>
            Position Transmitter Desynn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.PositionTransmitterInductor">
            <summary>
            Position Transmitter Inductor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.FireExtActuator">
            <summary>
            Fire ext. actuator
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.FireExtDouble">
            <summary>
            Fire ext. double
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.Converter">
            <summary>
            Converter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.RectifierBridge">
            <summary>
            Rectifier Bridge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.HeatSource">
            <summary>
            Heat source
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENCompositeAssemblies.ProximitySensor">
            <summary>
            Proximity Sensor 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents">
            <summary>
            Enumerates integrated circuit components.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourXBuilidngBlockComplete">
            <summary>
            4X Builidng block - complete
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.NegativeLogicDot">
            <summary>
            Negative logic dot
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.MUX4">
            <summary>
            MUX4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourBitCounter">
            <summary>
            4-bit counter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourBitDAConverter">
            <summary>
            4-bit d/a converter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourBitRegister">
            <summary>
            4-bit register
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourXBuilidngBlockTop">
            <summary>
            4X Builidng Block-top
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourXBuilidngBlockBase">
            <summary>
            4X Builidng Block-base
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.Board">
            <summary>
            Board
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourXBuilidngBlockMiddle">
            <summary>
            4X Builidng Block-middle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.HorizontalExtension">
            <summary>
            Horizontal extension
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.OneXBuilidngBlockTop">
            <summary>
            1X Builidng block-top
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.OneXBuilidngBlockBase">
            <summary>
            1X Builidng block-base
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.VerticalExtension">
            <summary>
            Vertical extension
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.OneXBuildingBlockMiddle">
            <summary>
            1X Builidng block-middle
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.OneXBuildingBlockComplete">
            <summary>
            1X Builidng block-complete
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.SwitchPoint">
            <summary>
            Switch Point
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.Ground">
            <summary>
            Ground
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.Driver">
            <summary>
            Driver
            </summary> 
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.FourBitADConverter">
            <summary>
            4-bit a/d converter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.EightBitADConverter">
            <summary>
            8-bit a/d converter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.EightBitDAConverter">
            <summary>
            8-bit d/a converter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.EightBitRegister">
            <summary>
            8-bit register
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.MUX2">
            <summary>
            MUX 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.MUX8">
            <summary>
            MUX 8
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.EightBitCounter">
            <summary>
            8-bit counter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.AnalogSwitch2">
            <summary>
            Analog Switch 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.PreloadCounter4">
            <summary>
            Preload counter 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.PreloadCounter8">
            <summary>
            Preload counter 8
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.AnalogSwitch4">
            <summary>
            Analog Switch 4
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.TwoFourDecoder">
            <summary>
            2-4 decoder 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.ThreeEightDecoder">
            <summary>
            3-8 decoder 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.OneShot">
            <summary>
            One Shot 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.VoltageConverter">
            <summary>
            Voltage Converter
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENIntegratedCircuitComponents.PWM">
            <summary>
            PWM
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions">
            <summary>
            Enumerates the rotating equip and mech functions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.RotatingMachine">
            <summary>
            Rotating machine
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Armature">
            <summary>
            Armature
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Brush">
            <summary>
            Brush
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.PermanentMagnet">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.WindingConnections">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Synchro">
            <summary>
            Synchro
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Brake">
            <summary>
            Brake
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Gearing">
            <summary>
            Gearing
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Rotation">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Clutch">
            <summary>
            Clutch
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Clutch2">
            <summary>
            Clutch 2
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.DelayedAction">
            <summary>
             Delayed Action
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.ManualControl">
            <summary>
             Manual Control
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.BlockingDevice">
            <summary>
             Blocking Device 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.LatchingDevice">
            <summary>
             Latching Device 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.MechanicalInterlock">
            <summary>
             Mechanical interlock 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.AutomaticReturn">
            <summary>
             Automatic return
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Shapes.ENRotatingEquipAndMechFunctions.Detent">
            <summary>
             Detent
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory">
            <summary>
            The NFloorPlanShapesFactory class is used to produce floor plan shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the floor plan shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFloorPlanShapeFactory.GetRollTopBounds">
            <summary>
            Gets roll top bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory">
            <summary>
            The NFlowchartShapeFactory class is used to produce flowcharting shapes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the flow charting shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitProcess(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the process shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitSubprocess(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the subprocess shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitStartEnd(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the Start/End shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitDecision(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the decision shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitDocument(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the document shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitPredefinedDocument(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the predefined document shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitMultiDocument(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the multi document shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitData(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the data shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitExternalData(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the external data shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitPredefinedProcess(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the predefined process shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitStoredData(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the stored data shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitInternalStorage(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the internal storage shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitSequencialData(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the sequencial data shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitDirectData(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the direct data shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitManualInput(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the manual input shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitManualOperation(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the manual operation shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitCard(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the card shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitPaperTape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the paper tape shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitDisplay(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the display shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitPreparation(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the preparation shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitLoopLimit(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the loop limit shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitTermination(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the termination shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitCollate(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the collate shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitDelay(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the delay shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitExtract(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the extract shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitMerge(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the merge shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitOr(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the or shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitSort(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the sort shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitSummingJunction(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the summing junction shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitDatabase(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the database shapes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitOnPageReference(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the on page reference shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitOffPageReference(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the off page reference shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitProcessIso9000(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the process Iso9000 shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitTransport(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates the transport Iso9000 shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFlowchartShapeFactory.InitManualLoop(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits manual loop.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory">
            <summary>
            Creates SDL shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the flow charting shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitAlternative(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the alternative shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitBlock(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the block shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitCreateRequest(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the create request shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitDecision1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the decision 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitDecision2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the decision shape 2
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitDiskStorage(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the disk storage shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitDocument(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Inits the document shape.
            </summary>
            <param name="shape"></param>
            <param name="showPorts"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitDividedEvent(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the divided event shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitDividedProcess(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the divided process shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitHandle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init handles shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitLineCurveConnector(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the line curve connector shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitMessageFromUser(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the message from user shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitMessageToUser(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the message to user shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitMultiDocument(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the multy document shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitOffPageReference(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits off page reference shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitOnPageReference(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the on page reference shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitPrimitiveFromCallControl(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the primitive from call control shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitPrimitiveToCallControl(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the primitive to call control shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitRaise(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits raise shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitReturn(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the return shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitSave(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the save shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitService(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits services shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitTaskTimerStart(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitTaskTimerStop(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitTerminator(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the terminator shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitState(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the wait shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitProcedure(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Procedure shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSDLDiagramShapeFactory.InitProcess(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the process shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory">
            <summary>
            The NAnnotationsShapeFactory class is used to produce annotation shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the annotation shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>shape info instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitText(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitFiveRuledColumn(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the five ruled column shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitInfoLine(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the info line shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitBreakLine(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the break line shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitSection1(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the Section 1 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitSection2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the Section 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitSection3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the Section 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferencePlaneSite(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the reference plane site.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferencePlane1(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the reference plane 1 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferencePlane2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the reference plane 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitBenchmark(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the benchmark shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitLevel(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the level shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitDatum(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Iints the datum shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitCeiling(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the ceiling shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitNorthArrow1(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the north arrow 1 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitNorthArrow2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the north arrow 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitNorthArrow3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the north arrow 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitNorthArrow4(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits north arrow 4 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitNorthArrow5(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits north arrow 5 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitRevisionCloud(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the revision cloud shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitScaleSymbol(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits scale symbol shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitNoteSymbol(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits note symbol shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceTriangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits reference triangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits reference rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceHexagon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits reference hexagon shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceOval(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits reference oval shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceCircle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the reference circle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceCallout1(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the reference callout 1 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NAnnotationShapeFactory.InitReferenceCallout2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the reference callout 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory">
            <summary>
            The NArrowShapeFactory class is used to produce arrow shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the shape info for the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitSimpleArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the simple arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitSimpleDoubleArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the simple double arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitBentArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the bent arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitUTurn(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the U-turn shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitSharpBentArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the sharp bent arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitCurvedRightArrow(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the curved right arrow shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitCurvedLeftArrow(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the curved left arrow shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitBlockArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the block arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitCircularArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circular arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitQuadArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the quad arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitLeftRightArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the left right arrow shape. 
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitLeftRightArrowBlock(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the left right arrow block shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitQuadArrowBlock(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the quad arrow block shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitModernArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the modern arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NArrowShapeFactory.InitMultiLine(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the multiline shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory">
            <summary>
            The NBasicShapeFactory class is used to produce basic shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.CreateTextShape(System.String)">
            <summary>
            Creates a text shape with the specified text.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the basic shape at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSquare(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the square shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitEllipse(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the ellipse shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitCircle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circle shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRoundedRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rounded rectangle shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitTriangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the triangle shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitDiamond(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the diamond shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitPentagon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the pentagon shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitHexagon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the hexagon shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitHeptagon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the heptagon shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitOctagon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the octagon shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitNGram(Nevron.Nov.Diagram.NShape,System.Int32,System.String)">
            <summary>
            Inits the star shape.
            </summary>
            <param name="shape"></param>
            <param name="vertexCount">Numner of edges</param>
            <param name="heightFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRightTriangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the right triangle shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitCross(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the cross shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitText(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.Init3DBox(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the 3DBox shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitCurvedArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the curved arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitArrowBox(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the arrow box shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitConcentric(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the concentric shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitLeftParenthesis(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the left parenthesis shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRightParenthesis(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the right parenthesis shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitLeftBrace(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the left brace shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRightBrace(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the right brace shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitCan(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the can group.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitFourPointStar(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the four point star shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitChevron(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the chevron shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitNoSymbol(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the no symbol shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitFrameCorner(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the frame corner shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitLShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the L shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitDiagonalShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the diagonal shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSingleSnipCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the single snip corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitDoubleSnipCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the double snip corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitDiagonalSnipCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the diagonal snip corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSingleRoundCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the single round corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRoundSameSideCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the round same side corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRoundDiagonalCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the round diagonal corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSnipCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the snip corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSnipAndRoundSingleCornerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the snip and round single corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSnipAndRoundConrnerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the snip and round corner rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitRoundConrnerRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the round corner rectangle.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitFrame(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the frame shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitSixPointStar(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the six point star shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitCenterDragCircle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the center drag circle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NBasicShapeFactory.InitPlaque(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the plaque shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory">
            <summary>
            The NCalloutShapesFactory class is used to produce callout shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the info for the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBoxShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the box shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBaloon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the baloon shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitRoundedBaloon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rounded baloon shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBoxElbowShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the box elbow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideLine1DShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side line shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideLineShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side line shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidLine1dShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle line 1D shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidLineShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle line shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideText1dShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideTextShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidText1dShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidTextShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideElbow1dShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side elbow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideElbowShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side elbow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidElbowShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle elbow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidElbowBShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle elbow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitMidElbowBoxShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the middle elbow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitCenterTextShapeOrg(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the center text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitCenterTextShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the center text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.Init1dBendShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the bend callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBendShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the bend callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitAnnotationShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the annotation shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBracesWithTextShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the braces with text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBracketsWithText(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the brackets with text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitOvalShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the oval callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitRectangleShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitLineWithTextShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the line with text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitPartialBracketTextShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the partial bracket text shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideBraceShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side brace shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideBracket(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side bracket shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSideParenthesis(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side parenthesis shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitAutomaticDimension(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the automatic dimension shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitTag(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the tag shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitFile(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the file shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitYellowNote(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the yellow note shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitSharpStarburst(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the sharp starburst shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitBluntStarburst(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the blunt starburst shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitAngledStamp(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the angled stamp shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitRoundedStamp(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rounded stamp shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitTriangleWithBendablePointerShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the triangle with a bendable pointer callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitRectangleWithBendablePointerShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rectangle with a bendable pointer callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitHexagonWithBendablePointerShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the hexagon with a bendable pointer callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitOctagonWithBendablePointerShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the octagon with a bendable pointer callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCalloutShapeFactory.InitOvalWithBendablePointerShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the oval with a bendable pointer callout shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory">
            <summary>
            Creates connector shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.CreateSideToSide(System.Double)">
            <summary>
            Creates a side to side connector (HVH) that is intended to connect the sides of shapes. 
            If offset is 0, the connector V segment is positioned in the middle, 
            otherwise it is offset on right (if offset is positive) or offset to the left (if offset is negative).
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the connector shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitLine(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the line shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitBezier(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Inits the bezier shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSideToTopBottom(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits a side-to-top/bottom shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitTopBottomToSide(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits a top/bottom-to-side shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSideToSide1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side-to-side 1 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSideToSide2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the side-to-side 2 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitBottomToTop1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the bottom-to-top 1 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitBottomToTop2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the bottom-to-top 2 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSquareLoop(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the square loop shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitAngledConnector(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the angled connector shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitOneToMany(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the one to many shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSingle45DegreesArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the single arrow shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSingle60DegreesArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits single arrow shape with 60 degree arrow.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSingleFancyArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the single fancy arrrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitDouble45DegreesArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the double arrow shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitDouble60DegreesArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the double 60 degrees arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitTail45DegreesArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the tail 45 degrees arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitTail60DegreesArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init tail 60 degrees arrow.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitFlexiArrow1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the flexi arrow 1 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitFlexiArrow2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the flexi arrow 2 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitFlexiArrow3(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the flexi arrow 3 shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitDoubleFlexiArrow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the double flexi arrow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSquaredDoubleTree(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the squared double tree shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSloppedDoubleTree(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the slopped double tree shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSquaredMultiTree(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the squared multi tree shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitSloppedMultiTree(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the slopped multi tree shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitStar(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init star shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitBus(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init bus shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitCommLink(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init comm-link shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.Init1DOpenEnd(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the 1-D open end shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitElbow1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the elbow 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitElbow2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the elbow 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitHollowConnect1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the hollow connect 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitHollowConnect2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the hollow connect 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitHollowConnect3(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the hollow connect 3 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitControlTransfer(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the control tranfer shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitCurveConnect1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the curve connect 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitCurveConnect2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the curve connect 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NConnectorShapeFactory.InitJumper(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the jumper shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory">
            <summary>
            A factory that creates decorative shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the database shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitFoldedCorner(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the folded corner shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitSmilingFace(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the smiling fase shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitHeart(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the heart shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitLightningBolt(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the lightning bolt shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitSun(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Sun shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitMoon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Moon shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitCloud(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Cloud shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitUpRibbon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the Up ribbon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitDownRibbon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the Down ribbon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitCurvedUpRibbon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the curved up ribbon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.CurvedDownRibbon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the curved down ribbon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitVerticalScroll(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the vertical scroll shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitHorizontalScroll(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the horizontal scroll shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitWave(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the wave shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDecorativeShapeFactory.InitDoubleWave(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the double wave shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory">
            <summary>
            Dimensioning engineerging shape factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates a shape.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates shape info.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitHorizontalBaseline(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the horizontal baseline shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitVerticalBaseline(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the vertical baseline shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitOutsideShapes(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Inits the horizontal outside shape.
            </summary>
            <param name="shape"></param>
            <param name="horizontal"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitInsideShapes(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Inits the horizontal shape.
            </summary>
            <param name="shape"></param>
            <param name="horizontal"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitAlignedEvenShapes(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Inits the aligned out even shape.
            </summary>
            <param name="shape"></param>
            <param name="isOut"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitAlignedUnevenShapes(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Inits the aligned out uneven shape.
            </summary>
            <param name="shape"></param>
            <param name="isOut"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitArcRadiusShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Arc radius shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitRadiusOutsideShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the radius outside shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitRadiusShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the radius shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitDiameterShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the diameter shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitDiameterOutsideShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitAngleCenterShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the angle center shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitAngleUnevenShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the angle uneven shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitAngleEvenShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the angle even shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitAngleOutsideShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitOrdinateHorizontalShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the ordinate horizontal shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitOrdinateVerticalShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the ordinate vertical shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitOrdinateMultipleShape(Nevron.Nov.Diagram.NGroup,System.Boolean)">
            <summary>
            Inits the ordinate multiple shapes.
            </summary>
            <param name="group"></param>
            <param name="horizontal"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitCenterlineShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Centerline shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDimensioningEngineeringShapeFactory.InitRoomMeasureShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the room measure shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory">
            <summary>
            The NDrawingToolShapeFactory class is used to produce drawing tools shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates a shape.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the shape info for the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircleDiameter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circle-diameter shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircleRadius(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circle-radius shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircle3Points(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circle from 3 points shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitArc3Points(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits arc from 3 points shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircles(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits circles shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitSectorGraphical(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the sector - graphical shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitArcGraphical(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the arc - graphical shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircleTangents(Nevron.Nov.Diagram.NShape)">
            <summary>
            Intis the circle tangents shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitSectorNumeric(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the sector - numeric shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitArcNumeric(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the arc - numeric shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitArcTangents(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the art tangents shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitLineWithExtensions(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the line with extensions shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitCircleTangent(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the circle tangent shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitOppositeTangent(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the opposite tangent shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitPerpendicularAngle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the perpendicular - angle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitPerpendicularLines(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the perpendicular lines shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitTriangleFree(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the triangle - free shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitRightTriangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the right triangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitTriangleBase(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the triangle base shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitRightTriangle2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the right triangle 2 shape. 
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitDiagonalRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the diagonal rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitRoundedRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rounded rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitChamferedRectangle(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the chamfered rectangle shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitChamferedCorner(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the chamfered corner.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitMultigonEdge(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the multigon edge shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDrawingToolShapeFactory.InitMultigonCenter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the multigon center shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NCountryShapeFactory">
            <summary>
            Creates world countries shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCountryShapeFactory.#ctor">
            <summary>
            Constructors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCountryShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCountryShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCountryShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NCountryShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the shape info for the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory">
            <summary>
            The NNetworkShapeFactory class is used to produce network shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitCell(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the cell shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitComputer(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the computer shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitCopier(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the copier shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitDigicam(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the digicam shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitDSLR(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the DSLR shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitDVCam(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the DVCam shapes.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitExternalDrive(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the external drive shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitFax(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the fax shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitFirewall(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the firewall shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitHub(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the hub shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitLaptop(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the laptop shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitMFC(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the MFC shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitModem(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the modem shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitMP3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the MP3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitPDA(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the PDA shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitPhone(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the phone shpes.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitPMC(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the PMC shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitPrinter(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the printer shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitProjector(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the projector shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitScanner(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the scanner shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitServer(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the server shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitSmartPhone(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the smart phone shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitStorage(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the storage shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitTabletPC(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the tablet PC shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitTerminal(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the terminal shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitUPPC(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the UPPC shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitWebcam(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the webcam shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NNetworkShapeFactory.InitWiFi(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the WiFi shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NPredefinedShapeFactory`1">
            <summary>
            Represents a predefined shape factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NPredefinedShapeFactory`1.#ctor(Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="predefinedShapeFactory"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NPredefinedShapeFactory`1.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NPredefinedShapeFactory`1.ShapeCount">
            <summary>
            Gets the number of shapes in this factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NPredefinedShapeFactory`1.CreateShape(`0)">
            <summary>
            Creates a shape of the given type.
            </summary>
            <param name="shapeType"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NShapeFactory">
            <summary>
            Servers as base class for all predefined shape factories. 
            A shape factory is used to create shapes from a specific application domain (i.e. basis shapes, flowcharting shapes, floorplan shapes etc.)
            A shape factory can also be used to create a library.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates a new instance of the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateLibrary">
            <summary>
            Creates a new library, which contians a library item for each shape which the factory can produce
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.SaveToFile(System.String)">
            <summary>
            Creates a library from this shape factory and saves it to the specified library file.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.SaveToFile(System.String,Nevron.Nov.Diagram.Formats.NLibraryFormat,Nevron.Nov.Diagram.Formats.NLibrarySaveSettings)">
            <summary>
            Creates a library from this shape factory and saves it to the specified library file.
            </summary>
            <param name="file"></param>
            <param name="format"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateLibraryItem(System.Int32)">
            <summary>
            Creates a library item for the shape at the specified index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.GetShapeInfo(System.Int32)">
            <summary>
            Obtains information about the shape at the specified index
            </summary>
            <param name="index">index of the shape</param>
            <returns>shape info</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.GetShapeNames">
            <summary>
            Gets the names of the shapes inside this shape factory
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeFactory.ShapeCount">
            <summary>
            Gets the number of shapes this factory can create.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeFactory.DefaultSize">
            <summary>
            Gets or sets the default shapes size
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeFactory.Name">
            <summary>
            Gets or sets the name of this shape factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the shape info for the shape at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.SetModelBounds(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets the bounds of the specified shape.
            </summary>
            <param name="shape"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.GetModelBounds(System.Int32)">
            <summary>
            Gets the modeling bounds for a shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.OnShapeCreated(System.Int32,Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the shape at the specified index has been created
            </summary>
            <param name="index"></param>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.ScaleShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Shapes.NShapeInfo)">
            <summary>
            Scales the shape to the default size of the shape factory.
            </summary>
            <param name="shape"></param>
            <param name="info"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateSidesPorts(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates sides ports for the specifies shape
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateRelativePorts(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates ports with the specified relative locations.
            </summary>
            <param name="shape"></param>
            <param name="relativeLocations"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateCenterPort(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Creates a center port.
            </summary>
            <param name="shape"></param>
            <param name="center"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateCenterAndSidesPorts(Nevron.Nov.Diagram.NShape)">
            <summary>
            Creates center and sides ports for the specified shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateCenterAndRelativePorts(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates center and relative ports.
            </summary>
            <param name="shape">shape</param>
            <param name="vertices">vertices for which to generate ports</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateCenterAndRelativePorts(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NPoint[])">
            <summary>
            Creates center and relative ports.
            </summary>
            <param name="shape">shape</param>
            <param name="center">center of shape</param>
            <param name="vertices">vertices for which to generate ports</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateSidePort(System.String,Nevron.Nov.ENBoxSide)">
            <summary>
            Creates a side port.
            </summary>
            <param name="name"></param>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateRelativePort(System.String,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Creates a relative port.
            </summary>
            <param name="name"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.SetShapeBoundsRectangle(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Sets shape bounds rectangle.
            </summary>
            <param name="shape"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.SetShapeBoundsRectangle(Nevron.Nov.Diagram.NShape,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets shape bounds rectangle.
            </summary>
            <param name="shape"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.GetScaledRect(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Gets scaled rectangle.
            </summary>
            <param name="boundsRect">Initial bounds of the shape</param>
            <param name="scaledBoundsRect">Scaled bounds of the shape</param>
            <param name="rect">Original rectangle</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.Style1DShape(Nevron.Nov.Diagram.NShape,System.Boolean)">
            <summary>
            Styles the shape as a connector.
            </summary>
            <param name="shape"></param>
            <param name="isConnector"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateImageMap(System.Byte[])">
            <summary>
            Creates an image map from the files inside the specified zip stream
            </summary>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreateImageMap(System.IO.MemoryStream)">
            <summary>
            Creates an image map from the files inside the specified zip stream
            </summary>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.Init2DShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NColor,Nevron.Nov.Diagram.NGeometryCommand,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a 2D shape.
            </summary>
            <param name="shape"></param>
            <param name="fillColor"></param>
            <param name="command"></param>
            <param name="borderSize"></param>
            <param name="graphPart"></param>
            <param name="routeThrough"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.Init2DShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NColor,Nevron.Nov.Diagram.NGeometryCommand,System.Int32)">
            <summary>
            Initializes a 2D shape.
            </summary>
            <param name="shape"></param>
            <param name="fillColor"></param>
            <param name="command"></param>
            <param name="borderSize"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.Init2DShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NColor,Nevron.Nov.Diagram.NGeometryCommand,System.Int32,System.Boolean)">
            <summary>
            Initializes a 2D shape.
            </summary>
            <param name="shape"></param>
            <param name="fillColor"></param>
            <param name="command"></param>
            <param name="borderSize"></param>
            <param name="routeThrough"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.Init2DShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.NGeometryCommand,System.Int32)">
            <summary>
            Initializes a 2D shape.
            </summary>
            <param name="shape"></param>
            <param name="command"></param>
            <param name="borderSize"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeFactory.CreatePredefined(Nevron.Nov.Diagram.Shapes.ENPredefinedShapeFactoryType)">
            <summary>
            Creates a predefined shape factory of the given type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NShapeInfo">
            <summary>
            The NShapeInfo class is used to encapsulate the additional information about a shape, 
            which can be created by a shape factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NShapeInfo.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeInfo.Name">
            <summary>
            Gets or sets the shape name (also used as master name).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeInfo.Prompt">
            <summary>
            Gets or sets the shape prompt (used when the shape is wrapped in a master).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeInfo.UsesDefaultSize">
            <summary>
            Gets or sets whether the shape uses the default size of the factory.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeInfo.PreserveAspectRatio">
            <summary>
            Gets or sets whether the original aspect ratio of the shape must be preserved, 
            when the shape is scaled to fit the default factory size (valid only if the UsesDefaultSize property is true).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Shapes.NShapeInfo.OrientationLine1D">
            <summary>
            Gets or sets whether 1D shapes use the LeftTop-RightBottom diagonal, 
            the TopCenter-BottomCenter line or the LelfCenter-RightCenter line. By default None.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory">
            <summary>
            The NSymbolShapesFactory class is used to produce symbol shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.UpdateModelBounds(Nevron.Nov.Diagram.NShape,Nevron.Nov.Diagram.Shapes.ENSymbolShape)">
            <summary>
            Updates model bounds.
            </summary>
            <param name="shape"></param>
            <param name="symbolShape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitFemaleFigure(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the female figure shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitMaleFigure(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the male figure shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates shape info.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitApple(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the apple shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitAquaPill(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the aqua pill shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitBook(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the book shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitBowtie(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bowtie shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitBubbleFigure(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the bubble figure shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitFemale(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the female shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitFlatFigure(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the flat figure shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitFlower(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the flower shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitGlossyButton(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the glossy button shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitHandicapped(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the handicapped shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitHeart(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the heart shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitHumanIcon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the human icon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitHumanIcon2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the human icon 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitHumanIcon3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the human icon 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitHumanIcon4(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the human icon 4 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitMainButton(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the main button shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitMale(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the male shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitMan(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the man shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitMoon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the moon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitNewActor(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the new actor shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitNewActor2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the new actor 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitNewActor3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the new actor 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitNewActor4(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the new actor 4 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitOrb(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the orb shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitPillButton(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the pill button shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitRadioactive(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the radioactive shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitRecycle(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the recycle shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitRoleIcon(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the role icon shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitRoleIcon2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the role icon 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitSimpleOrb(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the simple orb shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitSkull(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the skull shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitStickFigure(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the stick figure shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitSun(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the sun shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUserIcon(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the user icon shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers1(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 1 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers4(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 4 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers5(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 5 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers6(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 6 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers7(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 7 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitUsers8(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the users 8 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitWoman(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the woman shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NSymbolShapeFactory.InitYinYang(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the yin yang shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory">
            <summary>
            Creates shapes for family tree diagrams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory.CreateLibraryItem(System.Int32)">
            <summary>
            Creates the library item for the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NFamilyTreeShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates shape info.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory">
            <summary>
            Creates shapes for genogram diagrams.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.GetLargeImage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.GetSmallImage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitSingleLineEmotionalShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NStroke,System.Boolean)">
            <summary>
            Inits single line emotional shape.
            </summary>
            <param name="shape"></param>
            <param name="stroke"></param>
            <param name="addTextBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitSingleLineWithGapEmotionalShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NStroke,System.String)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="stroke"></param>
            <param name="gap"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitDoubleLineEmotionalShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NStroke,System.Boolean)">
            <summary>
            Inits double line emotional shape.
            </summary>
            <param name="shape"></param>
            <param name="stroke"></param>
            <param name="addTextBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitTripleLineEmotionalShape(Nevron.Nov.Diagram.NShape,Nevron.Nov.Graphics.NStroke,System.Boolean)">
            <summary>
            Inits tripple line emotional shape.
            </summary>
            <param name="shape"></param>
            <param name="stroke"></param>
            <param name="addTextBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitCutoffShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitLoveShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits love shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitInLoveShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitFocusedOnShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitFanShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits tha fan shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitLimerenceShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the limerence shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitNeglectShape(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the neglected shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitManipulativeShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the manipulative shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.InitControllingShape(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the controlling shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.CreateZigZagShape(System.Int32,System.Int32,Nevron.Nov.Graphics.NStroke)">
            <summary>
            Inits the zig-zag shape.
            </summary>
            <param name="height"></param>
            <param name="frequency"></param>
            <param name="stroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NGenogramShapeFactory.CreateZigZagShape(System.Int32,System.Int32,Nevron.Nov.Graphics.NStroke,Nevron.Nov.Diagram.ENGenogramEmotionalLineType)">
            <summary>
            Inits the zig-zag shape.
            </summary>
            <param name="height"></param>
            <param name="frequency"></param>
            <param name="stroke"></param>
            <param name="lineTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory">
            <summary>
            Creates database shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the database shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDatabaseShapeFactory.InitChenRelationship(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the Chen relationship shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory">
            <summary>
            The NDataFlowDiagramShapesFactory class is used to produce Data Flow Diagram shapes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.CreateShape(System.Int32)">
            <summary>
            Creates a shape.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Creates the shape info for the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitState(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the state shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitStates(Nevron.Nov.Diagram.NGroup,System.Boolean)">
            <summary>
            Inits the State Start and State Stop shapes.
            </summary>
            <param name="group"></param>
            <param name="isStart"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitStopState2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init the stop state 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitEntity1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the entity 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitEntity2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the entity 2 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitExternalIteractor(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the external entity shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitProcess1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init the process 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitProcess2(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Init the process 2 shape
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitOvalProcess(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init the oval process shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitObject(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the object shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitDataStore1(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the data store 1 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitDataStore2(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the data store 2 shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitDataStore3(Nevron.Nov.Diagram.NGroup)">
            <summary>
            Inits the data store 3 shape.
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitCenterToCenterFlow(Nevron.Nov.Diagram.NShape)">
            <summary>
            Inits the data flow shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NDataFlowDiagramShapesFactory.InitLoopOnCenter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Init the loop on center shape.
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory">
            <summary>
            UML class diagram shape factory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.CreateShape(System.Int32)">
            <summary>
            Creates the shape at the specified index.
            </summary>
            <param name="index">shape index</param>
            <returns>new shape instance</returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.GetSmallImage">
            <summary>
            Gets the small image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.GetLargeImage">
            <summary>
            Gets the large image that represents this factory in the library browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.CreateShapeInfo(System.Int32)">
            <summary>
            Overriden to create the shape info for the database shape at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.InitAssociationShape(Nevron.Nov.Diagram.NRoutableConnector)">
            <summary>
            
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Shapes.NUMLClassDiagramShapeFactory.InitInheritance(Nevron.Nov.Diagram.NGroup)">
            <summary>
            
            </summary>
            <param name="group"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeArrowhead">
            <summary>
            Represents a theme arrowhead style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeArrowhead.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeArrowhead.#ctor(Nevron.Nov.Diagram.ENArrowheadShape,Nevron.Nov.Graphics.NSize)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="endShape"></param>
            <param name="endSize"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeArrowhead.#ctor(Nevron.Nov.Diagram.ENArrowheadShape,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="endShape"></param>
            <param name="endWidth"></param>
            <param name="endHeight"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeArrowhead.BeginShape">
            <summary>
            Gets/Sets the shape of the begin arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeArrowhead.BeginWidth">
            <summary>
            Gets/Sets the width of the begin arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeArrowhead.BeginHeight">
            <summary>
            Gets/Sets the height of the begin arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeArrowhead.EndShape">
            <summary>
            Gets/Sets the shape of the end arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeArrowhead.EndWidth">
            <summary>
            Gets/Sets the width of the end arrowhead.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeArrowhead.EndHeight">
            <summary>
            Gets/Sets the height of the end arrowhead.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeArrowhead.ToArrowhead(Nevron.Nov.Diagram.ENArrowheadType)">
            <summary>
            Create a NOV arrowhead from this theme arrowhead style.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.NThemeArrowheadSchema">
            <summary>
            Schema associated with NThemeArrowhead.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.BeginShapeProperty">
            <summary>
            Reference to the BeginShape property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.BeginWidthProperty">
            <summary>
            Reference to the BeginWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.BeginHeightProperty">
            <summary>
            Reference to the BeginHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.EndShapeProperty">
            <summary>
            Reference to the EndShape property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.EndWidthProperty">
            <summary>
            Reference to the EndWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowhead.EndHeightProperty">
            <summary>
            Reference to the EndHeight property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeArrowheadCollection">
            <summary>
            A collection of theme arrowhead styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeArrowheadCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeArrowheadCollection.NThemeArrowheadCollectionSchema">
            <summary>
            Schema associated with NThemeArrowheadCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeColorInfo">
            <summary>
            Base class for all theme color infos
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorInfo.GetColor(Nevron.Nov.Diagram.Themes.NThemeColorPalette,System.Int32)">
            <summary>
            Gets the color for the given palette and variant.
            </summary>
            <param name="palette"></param>
            <param name="variant"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorInfo.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes this object.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorInfo.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes this object.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo">
            <summary>
            Represents the theme palette color info.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.#ctor(Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.#ctor(Nevron.Nov.Diagram.Themes.ENThemeColorName,System.Single)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="brightnessFactor">Must be between -1 and 1. Negative values produce darker colors. 0 means unmodified color.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.Name">
            <summary>
            Gets the color name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.BrightnessFactor">
            <summary>
            Gets the brightness factor. It's between -1 and 1. Negative values produce darker colors. 0 means unmodified color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes this object.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes this object.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.GetColor(Nevron.Nov.Diagram.Themes.NThemeColorPalette,System.Int32)">
            <summary>
            Gets the color for the given palette and variant.
            </summary>
            <param name="palette"></param>
            <param name="variant"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.Equals(System.Object)">
            <summary>
            Gets whether this color info is equal to the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemePaletteColorInfo.GetHashCode">
            <summary>
            Gets the hash code of this color info.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo">
            <summary>
            Represents the theme variant color info.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="colorIndex">The variant color index. Should be between 0 and 6.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.ColorIndex">
            <summary>
            Gets the variant color index. It is usually between 0 and 6.
            See the "Diagram DOM > Drawings > Themes > Theme Based Shapes" documentation topic for more information.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.Deserialize(Nevron.Nov.Serialization.NDomDeserializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Deserializes this object.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.Serialize(Nevron.Nov.Serialization.NDomSerializationContext,Nevron.Nov.Serialization.NPropertyBag)">
            <summary>
            Serializes this object.
            </summary>
            <param name="context"></param>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.GetColor(Nevron.Nov.Diagram.Themes.NThemeColorPalette,System.Int32)">
            <summary>
            Gets the color from the given palette and for the specified variant.
            </summary>
            <param name="palette"></param>
            <param name="variantIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.Equals(System.Object)">
            <summary>
            Gets whether this color info is equal to the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantColorInfo.GetHashCode">
            <summary>
            Gets the hash code of this color info.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NDynamicThemeColor">
            <summary>
            A theme color that depends on a color from the theme color palette.
            </summary>
            <remarks>
            When the Name of the dynamic theme color is set to VariantColor, the scheme color uses the theme info
            and shape style related properties of their owner INStyleableElement to get a color from the
            proper variant palette.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.#ctor(Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="themeColorName">The theme color name, for example Dark1, Accent2, etc.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.Name">
            <summary>
            Gets/Sets the theme color name of this scheme color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.Tint">
            <summary>
            Gets/Sets the tint of the color. Must be from 0 to 1. Larger values result in lighter colors.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.Shade">
            <summary>
            Gets/Sets the shade of the color. Must be from 0 to 1. Larger values result in darker colors.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.SaturationModifier">
            <summary>
            Gets/Sets the saturation modifier factor of the color. Can be any value. Larger values result in more saturated colors.
            By default set to 1, which means 100% saturation (i.e. the original color). 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.LuminanceModifier">
            <summary>
            Gets/Sets the luminance modifier factor of the color. Can be any value.  Larger values result in lighter colors.
            By default set to 1, which means 100% lumininace (i.e. the originanl color).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.Alpha">
            <summary>
            Gets/Sets the alpha of the color. Must be from 0 to 1. 0 means a completely transparent color and
            1 means a completely opaque color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.ToColor(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Converts this theme color to NColor.
            </summary>
            <param name="styleableElement">The styleable element this theme color is used in,
            for example a shape or a style preview.</param>
            <returns>The color equivalent of this theme color or NColor.Empty
            if a color equivalent couldn't be determined.</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.NDynamicThemeColorSchema">
            <summary>
            Schema associated with NDynamicThemeColor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.NameProperty">
            <summary>
            Reference to the Name property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.TintProperty">
            <summary>
            Reference to the Tint property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.ShadeProperty">
            <summary>
            Reference to the Shade property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.SaturationModifierProperty">
            <summary>
            Reference to the SaturationModifier property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.LuminanceModifierProperty">
            <summary>
            Reference to the LuminanceModifier property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.AlphaProperty">
            <summary>
            Reference to the Alpha property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.CreateTintShade(Nevron.Nov.Diagram.Themes.ENThemeColorName,System.Single,System.Single)">
            <summary>
            Creates a dynamic theme color with the given tint and shade.
            </summary>
            <param name="colorName"></param>
            <param name="tint"></param>
            <param name="shade"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.CreateSatLum(Nevron.Nov.Diagram.Themes.ENThemeColorName,System.Single,System.Single)">
            <summary>
            Creates a dynamic theme color with the given saturation and luminance modifier factors.
            </summary>
            <param name="colorName"></param>
            <param name="saturationModifier"></param>
            <param name="luminanceModifier"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDynamicThemeColor.CreateAlpha(Nevron.Nov.Diagram.Themes.ENThemeColorName,System.Single)">
            <summary>
            Creates a dynamic theme color with the given alpha modifier factor.
            </summary>
            <param name="colorName"></param>
            <param name="alpha">Alpha of the color. Must be from 0 to 1. 0 means a completely transparent color and
            1 means a completely opaque color.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NStaticThemeColor">
            <summary>
            A theme color that always has the same NColor equivalent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NStaticThemeColor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NStaticThemeColor.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="color"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NStaticThemeColor.Color">
            <summary>
            Gets/Sets the color value of this static theme color.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NStaticThemeColor.ToColor(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Converts this theme color to an NColor instance.
            </summary>
            <param name="styleableElement">Not used for static theme colors.</param>
            <returns>The color equivalent of this theme color or NColor.Empty
            if a color equivalent couldn't be determined.</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NStaticThemeColor.NStaticThemeColorSchema">
            <summary>
            Schema associated with NStaticThemeColor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NStaticThemeColor.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeColor">
            <summary>
            Base class for all theme colors. Theme colors are typically used in theme fill and stroke styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColor.ToColor(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Converts this theme color to an NColor instance.
            </summary>
            <param name="styleableElement">The styleable element this theme color is used in,
            for example a shape or a style preview.</param>
            <returns>The color equivalent of this theme color or NColor.Empty
            if a color equivalent couldn't be determined.</returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColor.NThemeColorSchema">
            <summary>
            Schema associated with NThemeColor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeColorPalette">
            <summary>
            Represents the color palette of a drawing theme. Contains a collection of primary colors for the theme,
            as well as a collection of colors for each of the theme variants.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorPalette.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Dark1">
            <summary>
            Gets/Sets the value of the Dark1 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Light1">
            <summary>
            Gets/Sets the value of the Light1 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Dark2">
            <summary>
            Gets/Sets the value of the Dark2 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Light2">
            <summary>
            Gets/Sets the value of the Light2 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent1">
            <summary>
            Gets/Sets the value of the Accent1 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent2">
            <summary>
            Gets/Sets the value of the Accent2 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent3">
            <summary>
            Gets/Sets the value of the Accent3 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent4">
            <summary>
            Gets/Sets the value of the Accent4 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent5">
            <summary>
            Gets/Sets the value of the Accent5 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent6">
            <summary>
            Gets/Sets the value of the Accent6 property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Hyperlink">
            <summary>
            Gets/Sets the value of the Hyperlink property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.FollowedHyperlink">
            <summary>
            Gets/Sets the value of the FollowedHyperlink property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Background">
            <summary>
            Gets/Sets the value of the Background property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Variants">
            <summary>
            Gets/Sets the variants of this palette.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorPalette.GetPaletteColor(Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Gets the color referenced by the given parameters.
            </summary>
            <param name="colorName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorPalette.GetVariantColor(System.Int32,System.Int32)">
            <summary>
            Gets the color defined by the given variant and color indexes.
            </summary>
            <param name="variantIndex"></param>
            <param name="colorIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.NThemeColorPaletteSchema">
            <summary>
            Schema associated with NThemeColorPalette.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Dark1Property">
            <summary>
            Reference to the Dark1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Light1Property">
            <summary>
            Reference to the Light1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Dark2Property">
            <summary>
            Reference to the Dark2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Light2Property">
            <summary>
            Reference to the Light2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent1Property">
            <summary>
            Reference to the Accent1 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent2Property">
            <summary>
            Reference to the Accent2 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent3Property">
            <summary>
            Reference to the Accent3 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent4Property">
            <summary>
            Reference to the Accent4 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent5Property">
            <summary>
            Reference to the Accent5 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.Accent6Property">
            <summary>
            Reference to the Accent6 property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.HyperlinkProperty">
            <summary>
            Reference to the Hyperlink property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.FollowedHyperlinkProperty">
            <summary>
            Reference to the FollowedHyperlink property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.BackgroundProperty">
            <summary>
            Reference to the Background property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorPalette.VariantsProperty">
            <summary>
            Reference to the Variants property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NVariantColorPalette">
            <summary>
            Represents a variant color palette, which is a palette that contains 7 colors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.#ctor(Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <param name="color3"></param>
            <param name="color4"></param>
            <param name="color5"></param>
            <param name="color6"></param>
            <param name="color7"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NVariantColorPalette.Count">
            <summary>
            Gets the number of colors in this palette.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NVariantColorPalette.Nevron#Nov#DataStructures#INIndexedSet{Nevron#Nov#Graphics#NColor}#Item(System.Int32)">
            <summary>
            Gets the color at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NVariantColorPalette.Item(System.Int32)">
            <summary>
            Gets/Sets the color at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.IndexOf(Nevron.Nov.Graphics.NColor)">
            <summary>
            Returns the index of the given color in this collection or -1 if such color is not found.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.CopyTo(Nevron.Nov.Graphics.NColor[],System.Int32)">
            <summary>
            Copies all colors of this collection to the given array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.ToArray">
            <summary>
            Converts this set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.Contains(Nevron.Nov.Graphics.NColor)">
            <summary>
            Checks whether this palette contains the given color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.GetIterator">
            <summary>
            Gets an iterator that iterates throw the items in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPalette.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the items in a reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NVariantColorPalette.NVariantColorPaletteSchema">
            <summary>
            Schema associated with NVariantColorPalette.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NVariantColorPalette.ColorsProperty">
            <summary>
            Reference to the Colors property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NVariantColorPaletteCollection">
            <summary>
            A collection of theme variant color palettes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPaletteCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NVariantColorPaletteCollection.#ctor(Nevron.Nov.Diagram.Themes.NVariantColorPalette,Nevron.Nov.Diagram.Themes.NVariantColorPalette,Nevron.Nov.Diagram.Themes.NVariantColorPalette,Nevron.Nov.Diagram.Themes.NVariantColorPalette)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="palette1"></param>
            <param name="palette2"></param>
            <param name="palette3"></param>
            <param name="palette4"></param>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NVariantColorPaletteCollection.NVariantColorPaletteCollectionSchema">
            <summary>
            Schema associated with NVariantColorPaletteCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.ENThemeColorName">
            <summary>
            Enumerates the theme color names.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Dark1">
            <summary>
            Dark1 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Light1">
            <summary>
            Light1 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Dark2">
            <summary>
            Dark2 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Light2">
            <summary>
            Light2 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Accent1">
            <summary>
            Accent1 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Accent2">
            <summary>
            Accent2 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Accent3">
            <summary>
            Accent3 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Accent4">
            <summary>
            Accent4 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Accent5">
            <summary>
            Accent5 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Accent6">
            <summary>
            Accent6 color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Hyperlink">
            <summary>
            Hyperlink color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.FollowedHyperlink">
            <summary>
            Followed hyperlink color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Background">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.ENThemeColorName.Variant">
            <summary>
            A color from a variant palette.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeGradientStop">
            <summary>
            Represents a gradient stop used in theme gradient definitions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeGradientStop.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeGradientStop.#ctor(System.Single,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a theme gradient stop with a static theme color.
            </summary>
            <param name="position">The position of the gradient stop. Must be in the closed range from 0 to 1.</param>
            <param name="color">The color of the gradient stop.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeGradientStop.#ctor(System.Single,Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Creates a theme gradient stop with a dynamic theme color.
            </summary>
            <param name="position">The position of the gradient stop. Must be in the closed range from 0 to 1.</param>
            <param name="colorName">The name of the dynamic theme color of the gradient stop.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeGradientStop.#ctor(System.Single,Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="position">The position of the gradient stop. Must be in the closed range from 0 to 1.</param>
            <param name="themeColor">The color of the gradient stop.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeGradientStop.Position">
            <summary>
            Gets/Sets the position of the gradient stop. Should be in the closed range from 0 to 1.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeGradientStop.Color">
            <summary>
            Gets/Sets the color of the gradient stop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeGradientStop.NThemeGradientStopSchema">
            <summary>
            Schema associated with NThemeGradientStop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeGradientStop.PositionProperty">
            <summary>
            Reference to the Position property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeGradientStop.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeGradientStopCollection">
            <summary>
            Represents a collection of gradient points.
            </summary>	
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeGradientStopCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeGradientStopCollection.NThemeGradientStopCollectionSchema">
            <summary>
            Schema associated with NThemeGradientStopCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill">
            <summary>
            Represents a theme linear gradient fill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.#ctor(Nevron.Nov.NAngle,Nevron.Nov.Diagram.Themes.NThemeGradientStop[])">
            <summary>
            Creates a theme linear gradient fill with the given axis angle and gradient stops.
            </summary>
            <param name="angle">Angle of rotation of the gradient axis.</param>
            <param name="gradientStops">Gradient stops.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.Angle">
            <summary>
            Gets/Sets the angle of rotation of the gradient axis.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.GradientStops">
            <summary>
            Gets/Sets the gradient stops of this theme linear gradient.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.ToFill(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Creates a fill from this theme fill.
            </summary>
            <param name="styleableElement"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.NThemeLinearGradientFillSchema">
            <summary>
            Schema associated with NThemeLinearGradientFill.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.AngleProperty">
            <summary>
            Reference to the Angle property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeLinearGradientFill.GradientStopsProperty">
            <summary>
            Reference to the GradientStops property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeColorFill">
            <summary>
            Represents a theme color fill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorFill.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a theme color fill with a static theme color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorFill.#ctor(Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Creates a theme color fill with a dynamic theme color.
            </summary>
            <param name="colorName"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorFill.#ctor(Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Creates a theme color fill with the given theme color.
            </summary>
            <param name="themeColor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeColorFill.Color">
            <summary>
            Gets/Sets the color of this theme fill.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeColorFill.ToFill(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Creates a fill from this theme fill.
            </summary>
            <param name="styleableElement"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorFill.NThemeColorFillSchema">
            <summary>
            Schema associated with NThemeColorFill.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeColorFill.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeFill">
            <summary>
            Base class for all theme fills.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFill.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFill.ToFill(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Converts this theme fill to an NFill instance.
            </summary>
            <param name="styleableElement">The styleable element this theme fill is used in,
            for example a shape or a style preview.</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFill.NThemeFillSchema">
            <summary>
            Schema associated with NThemeFill.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeFillCollection">
            <summary>
            Represents a collection of fill styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFillCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFillCollection.NThemeFillCollectionSchema">
            <summary>
            Schema associated with NThemeFillCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeFont">
            <summary>
            Represents a theme font.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="themeColorName"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="themeColor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="style"></param>
            <param name="themeColorName"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="style"></param>
            <param name="themeColor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(System.String,Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(System.String,Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="style"></param>
            <param name="themeColor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFont.#ctor(System.String,System.Double,Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <param name="style"></param>
            <param name="themeColor"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeFont.Name">
            <summary>
            Gets/Sets the name of the font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeFont.Size">
            <summary>
            Gets/Sets the size of the font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeFont.Style">
            <summary>
            Gets/Sets the style of the font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeFont.Color">
            <summary>
            Gets/Sets the color of the font.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFont.NThemeFontSchema">
            <summary>
            Schema associated with NThemeFont.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFont.NameProperty">
            <summary>
            Reference to the Name property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFont.SizeProperty">
            <summary>
            Reference to the Size property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFont.StyleProperty">
            <summary>
            Reference to the Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFont.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeFontCollection">
            <summary>
            A collection of theme fonts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeFontCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeFontCollection.NThemeFontCollectionSchema">
            <summary>
            Schema associated with NThemeFontCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.INThemeCollectionContainer">
            <summary>
            Implemented by class that contain a collection of drawing themes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.INThemeCollectionContainer.GetThemes">
            <summary>
            Gets the themes of this theme collection container.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NDrawingTheme">
            <summary>
            Represents a NOV diagram drawing theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingTheme.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingTheme.#ctor(System.Int32,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="themeId"></param>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDrawingTheme.ColorPalette">
            <summary>
            Gets/Sets the color palette of this theme.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDrawingTheme.VariantStyles">
            <summary>
            Gets/Sets the variant styles collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDrawingTheme.ShapeStyle">
            <summary>
            Gets/Sets the style for shapes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDrawingTheme.ConnectorStyle">
            <summary>
            Gets/Sets the style for connectors.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDrawingTheme.ThemeId">
            <summary>
            Gets/Sets the ID of the theme.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NDrawingTheme.Name">
            <summary>
            Gets/Sets the name of the theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingTheme.Validate">
            <summary>
            Validates this theme by checking whether all necessary theme components are properly set.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.NDrawingThemeSchema">
            <summary>
            Schema associated with NDrawingTheme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.ColorPaletteChild">
            <summary>
            Reference to the ColorPalette child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.VariantStylesChild">
            <summary>
            Reference to the VariantStyles child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.ShapeStyleChild">
            <summary>
            Reference to the ShapeStyle child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.ConnectorStyleChild">
            <summary>
            Reference to the ConnectorStyle child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.NameProperty">
            <summary>
            Reference to the Name property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.ThemeIdProperty">
            <summary>
            Reference to the ThemeId property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingTheme.TryGetTheme(System.Int32,Nevron.Nov.Diagram.Themes.NDrawingTheme@)">
            <summary>
            Tries to get the theme with the given theme id and returns true on success.
            </summary>
            <param name="themeId"></param>
            <param name="theme"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.MyDrawNature">
            <summary>
            The MyDraw Nature theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.Office">
            <summary>
            The Office theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.Linear">
            <summary>
            The Liner theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.Zephyr">
            <summary>
            The Zephyr theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.Simple">
            <summary>
            The simple theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.Sequence">
            <summary>
            The Sequence theme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingTheme.Facet">
            <summary>
            The Facet theme.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection">
            <summary>
            A collection of drawing themes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.TryGetTheme(System.Int32,Nevron.Nov.Diagram.Themes.NDrawingTheme@)">
            <summary>
            Tries to get the theme with the given theme id and returns true on success.
            </summary>
            <param name="themeId"></param>
            <param name="theme"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.TryGetThemeFill(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle,System.Boolean,Nevron.Nov.Diagram.Themes.NThemeFill@)">
            <summary>
            Tries to get the theme fill for the given theme info and shape style.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
            <param name="connector"></param>
            <param name="themeFill"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.TryGetThemeStroke(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle,System.Boolean,Nevron.Nov.Diagram.Themes.NThemeStroke@)">
            <summary>
            Tries to get the theme stroke for the given theme info and shape style.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
            <param name="connector"></param>
            <param name="themeStroke"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.TryGetThemeFontStyle(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle,System.Boolean,Nevron.Nov.Diagram.Themes.NThemeFont@)">
            <summary>
            Tries to get the theme font style for the given theme info and shape style.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
            <param name="connector"></param>
            <param name="themeFont"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.TryGetThemeArrowhead(Nevron.Nov.Diagram.NThemeInfo,Nevron.Nov.Diagram.NShapeStyle,System.Boolean,Nevron.Nov.Diagram.Themes.NThemeArrowhead@)">
            <summary>
            Tries to get the theme arrowhead for the given theme info and shape style.
            </summary>
            <param name="themeInfo"></param>
            <param name="shapeStyle"></param>
            <param name="connector"></param>
            <param name="themeArrowhead"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.NDrawingThemeCollectionSchema">
            <summary>
            Schema associated with NDrawingThemeCollection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NDrawingThemeCollection.Instance">
            <summary>
            The drawing theme collection instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeConnectorStyle">
            <summary>
            Contains connector style for a theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeConnectorStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeConnectorStyle.ArrowheadStyles">
            <summary>
            Gets/Sets the arrowhead styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeConnectorStyle.ValidateAgainst(Nevron.Nov.Diagram.Themes.NThemeShapeStyle)">
            <summary>
            Validates this theme shape style against the given one by checking whether
            this theme shape style has the same number of styles as the given one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeConnectorStyle.NThemeConnectorStyleSchema">
            <summary>
            Schema associated with NThemeConnectorStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeConnectorStyle.ArrowheadStylesChild">
            <summary>
            Reference to the ArrowheadStyles child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeEntry`1">
            <summary>
            Base class for all theme entries like theme colors, theme fill styles, theme stroke styles, etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeEntry`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeEntry`1.#ctor(`0)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeEntry`1.Value">
            <summary>
            Gets/Sets the value of this theme entry.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeEntry`1.NThemeEntrySchema">
            <summary>
            Schema associated with NThemeEntry.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeEntry`1.ValueProperty">
            <summary>
            Reference to the Value property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeShapeStyle">
            <summary>
            Contains shape styles for a theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.FillStyles">
            <summary>
            Gets/Sets the FillStyles child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.StrokeStyles">
            <summary>
            Gets/Sets the StrokeStyles child.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.FontStyles">
            <summary>
            Gets/Sets the FontStyles child.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.ValidateAgainst(Nevron.Nov.Diagram.Themes.NThemeShapeStyle)">
            <summary>
            Validates this theme shape style against the given one by checking whether
            this theme shape style has the same number of styles as the given one.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.NThemeShapeStyleSchema">
            <summary>
            Schema associated with NThemeShapeStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.FillStylesChild">
            <summary>
            Reference to the FillStyles child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.StrokeStylesChild">
            <summary>
            Reference to the StrokeStyles child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeShapeStyle.FontStylesChild">
            <summary>
            Reference to the FontStyles child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeStroke">
            <summary>
            Represents a theme stroke style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a stroke with a static theme color.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Creates a stroke with a dynamic theme color.
            </summary>
            <param name="themeColorName"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Creates a stroke with the given theme color.
            </summary>
            <param name="themeColor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(System.Double,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a stroke with a static theme color.
            </summary>
            <param name="width"></param>
            <param name="color"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(System.Double,Nevron.Nov.Diagram.Themes.ENThemeColorName)">
            <summary>
            Creates a stroke with a dynamic theme color.
            </summary>
            <param name="width"></param>
            <param name="themeColorName"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(System.Double,Nevron.Nov.Diagram.Themes.NThemeColor)">
            <summary>
            Creates a stroke with the given theme color.
            </summary>
            <param name="width"></param>
            <param name="themeColor"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(System.Double,Nevron.Nov.Diagram.Themes.ENThemeColorName,Nevron.Nov.Graphics.ENLineCap)">
            <summary>
            Creates a stroke with the given theme color.
            </summary>
            <param name="width"></param>
            <param name="colorName">A dynamic theme color name.</param>
            <param name="cap">The start and end line cap.</param>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.#ctor(System.Double,Nevron.Nov.Diagram.Themes.NThemeColor,Nevron.Nov.Graphics.ENLineCap)">
            <summary>
            Creates a stroke with the given theme color.
            </summary>
            <param name="width"></param>
            <param name="themeColor"></param>
            <param name="cap">The start and end line cap.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeStroke.Width">
            <summary>
            Gets/Sets the stroke width (in DIPs).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeStroke.Color">
            <summary>
            Gets/Sets the stroke theme color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeStroke.DashStyle">
            <summary>
            Gets/Sets the stroke dash style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeStroke.StartCap">
            <summary>
            Gets/Sets the stroke start cap.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeStroke.EndCap">
            <summary>
            Gets/Sets the value of the EndCap property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStroke.ToStroke(Nevron.Nov.Diagram.INStyleableElement)">
            <summary>
            Converts this theme stroke to an NStroke instance.
            </summary>
            <param name="styleableElement">The styleable element this theme color is used in,
            for example a shape or a style preview.</param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStroke.NThemeStrokeSchema">
            <summary>
            Schema associated with NThemeStroke.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStroke.WidthProperty">
            <summary>
            Reference to the Width property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStroke.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStroke.DashStyleProperty">
            <summary>
            Reference to the DashStyle property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStroke.StartCapProperty">
            <summary>
            Reference to the StartCap property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStroke.EndCapProperty">
            <summary>
            Reference to the EndCap property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeStrokeCollection">
            <summary>
            Repsesents a collection of stroke styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeStrokeCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeStrokeCollection.NThemeStrokeStyleCollectionSchema">
            <summary>
            Schema associated with NThemeStrokeStyleCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeVariantStyle">
            <summary>
            Represents a theme variant style, which is a collection of theme variant style entries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeVariantStyle.NThemeVariantStyleSchema">
            <summary>
            Schema associated with NThemeVariantStyle.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeVariantStyleCollection">
            <summary>
            A collection of theme variant styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantStyleCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeVariantStyleCollection.NThemeVariantStyleCollectionSchema">
            <summary>
            Schema associated with NThemeVariantStyleCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry">
            <summary>
            Contains information about the fill, stroke and text style of a theme variant
            for a specific style index.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fillStyleIndex">The zero-based fill style index.</param>
            <param name="strokeStyleIndex">The zero-based stroke style index.</param>
            <param name="fontStyleIndex">The zero-based font style index.</param>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.FillStyleIndex">
            <summary>
            Gets/Sets the zero-based fill style index of this variation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.StrokeStyleIndex">
            <summary>
            Gets/Sets the zero-based stroke style index of this variation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.FontStyleIndex">
            <summary>
            Gets/Sets the zero-based font style index of this variation.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.NThemeVariantStyleEntrySchema">
            <summary>
            Schema associated with NThemeVariantStyleEntry.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.FillStyleIndexProperty">
            <summary>
            Reference to the FillStyleIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.StrokeStyleIndexProperty">
            <summary>
            Reference to the StrokeStyleIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.Themes.NThemeVariantStyleEntry.FontStyleIndexProperty">
            <summary>
            Reference to the FontStyleIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.INStyleableElement">
            <summary>
            Interface implemented by elements subject to styling through drawing themes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.INStyleableElement.GetThemeInfo">
            <summary>
            Gets the theme properties to use for styling this styleable element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.INStyleableElement.GetShapeStyle">
            <summary>
            Gets the shape styling to apply to this styleable element.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Diagram.NRuleBasedDrawingTheme">
            <summary>
            Represents a rule-based drawing theme.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.GetThemeType">
            <summary>
            Overriden to return the "UI" string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.CreateTheme">
            <summary>
            Overriden to call the protected virtual methods that create the styles for the different UI elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.CreateTextStyles">
            <summary>
            Creates the text styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.CreateGeometryStyles">
            <summary>
            Creates the geometry styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.CreateConnectorStyles">
            <summary>
            Creates the geometry styles for connectors.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.DefaultGeometryFillColor">
            <summary>
            Geometry fill color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.DefaultGeometryStrokeColor">
            <summary>
            Geometry stroke color.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.Shape2DState">
            <summary>
            Shape2D state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.Shape1DState">
            <summary>
            Shape1D state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.ConnectorState">
            <summary>
            Connector state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.FemalePersonState">
            <summary>
            FemalePerson state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.InShapeContext">
            <summary>
            InShape context.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.InPersonShapeContext">
            <summary>
            InPersonShape context.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.InFamilyShapeContext">
            <summary>
            InFamilyShape context.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.NRuleBasedDrawingThemeSchema">
            <summary>
            Schema associated with NRuleBasedDrawingTheme.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.ThemeType">
            <summary>
            The UI theme type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NRuleBasedDrawingTheme.DefaultFontSize">
            <summary>
            The default font size.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramCommandBarBuilder">
            <summary>
            Creates the Nevron Diagram command bar UI.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.AddMenuDropDownBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NMenuDropDownBuilder})">
            <summary>
            Creates the Nevron Diagram menu drop down builders.
            </summary>
            <param name="menuBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.AddToolBarBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NToolBarBuilder})">
            <summary>
            Creates the Nevron Diagram toolbar builders.
            </summary>
            <param name="toolBarBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.CreateStatusBarBuilder">
            <summary>
            Creates the Nevron Diagram status bar builders.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarActionName">
            <summary>
            The name of the "Action" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarFormatName">
            <summary>
            The name of the "Format" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarLayoutName">
            <summary>
            The name of the "Layout" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarStandardName">
            <summary>
            The name of the "Standard" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarToolsName">
            <summary>
            The name of the "Tools" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarViewName">
            <summary>
            The name of the "View" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.ToolbarMailMergeName">
            <summary>
            The name of the "Mail Merge" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuActionName">
            <summary>
            The name of the "Action" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuArrangeName">
            <summary>
            The name of the "Arrange" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuEditName">
            <summary>
            The name of the "Edit" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuFileName">
            <summary>
            The name of the "File" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuFormatName">
            <summary>
            The name of the "Format" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuInsertName">
            <summary>
            The name of the "Insert" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuToolsName">
            <summary>
            The name of the "Tools" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramCommandBarBuilder.MenuViewName">
            <summary>
            The name of the "View" menu.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NDiagramRibbonBuilder">
            <summary>
            Creates the Nevron Diagram ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateRibbon">
            <summary>
            Creates the ribbon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateRibbonWidget">
            <summary>
            Creates the ribbon widget.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateApplicationMenu">
            <summary>
            Creates the Nevron Diagram application menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateQuickAccessToolBarBuilder">
            <summary>
            Creates the Nevron Diagram quick access toolbar builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateRibbonTabContextCommandSource">
            <summary>
            Creates the ribbon tab context command source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateStatusBarBuilder">
            <summary>
            Creates the Nevron Diagram status bar builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.AddTabPageBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageBuilder})">
            <summary>
            Adds the Nevron Diagram ribbon tab page builders.
            </summary>
            <param name="tabPageBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.AddTabPageGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageGroupBuilder})">
            <summary>
            Adds the Nevron Diagram ribbon tab page group builders.
            </summary>
            <param name="tabPageGroupBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NDiagramRibbonBuilder.CreateFileMenuBuilder">
            <summary>
            Creates the application menu "File" menu builder.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.UpdateThemeColorsCommand">
            <summary>
            Reference to the UpdateThemeColors command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageActionName">
            <summary>
            The name of the "Action" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageArrangeName">
            <summary>
            The name of the "Arrange" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageDesignName">
            <summary>
            The name of the "Design" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageHomeName">
            <summary>
            The name of the "Home" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageInsertName">
            <summary>
            The name of the "Insert" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageMailingsName">
            <summary>
            The name of the "Mailings" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageReviewName">
            <summary>
            The name of the "Review" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageViewName">
            <summary>
            The name of the "View" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabPageTableName">
            <summary>
            The name of the "Table" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Diagram.NDiagramRibbonBuilder.TabGroupFamilyTreeName">
            <summary>
            The name of the "Family Tree" tab page group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Diagram.NPropertyEditorValuePair`1">
            <summary>
            Represents a pair of a property editor and its value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.#ctor(Nevron.Nov.Editors.NPropertyEditor,Nevron.Nov.Dom.NProperty)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="propertyEditor"></param>
            <param name="property"></param>
        </member>
        <member name="E:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.ValueChanged">
            <summary>
            Occurs when the value changes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.PropertyEditor">
            <summary>
            Gets the property editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.GetValue(System.Boolean@)">
            <summary>
            Gets the value 
            </summary>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.SetValue(`0)">
            <summary>
            Sets the value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.ClearValue">
            <summary>
            Clears the value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.ReadTarget(Nevron.Nov.Dom.NNode)">
            <summary>
            Sets the value of the editor from the specified node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Nevron.Nov.Diagram.NPropertyEditorValuePair`1.WriteTarget(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the value from the editor and sets it to the node
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.pEYG.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.pEYG.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.pEYG.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.pEYG.LossySaving">
            <summary>
            Gets whether this drawing format may lead to loss of information when saving.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.pEYG.OnUse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.pEYG.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="QEYG"></param>
            <param name="rEYG"></param>
            <param name="SEYG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pEYG.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="tEYG"></param>
            <param name="UEYG"></param>
            <param name="vEYG"></param>
            <param name="WEYG"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.EfYG.Extensions">
            <summary>
            Gets the extension of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.EfYG.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.EfYG.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.EfYG.CanLoad">
            <summary>
            Gets whether documents in this format can be loaded. Overriden to return false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EfYG.OnUse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EfYG.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="ffYG"></param>
            <param name="GfYG"></param>
            <param name="hfYG"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.EfYG.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="IfYG"></param>
            <param name="jfYG"></param>
            <param name="KfYG"></param>
            <param name="lfYG"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.vMfh.FileSignature">
            <summary>
            Gets the file signature of this file format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.xMfh.FileSignature">
            <summary>
            Gets the file signature of this file format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Anfh.FileSignature">
            <summary>
            Gets the file signature of this file format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.hnfh.FileSignature">
            <summary>
            Gets the file signature of this file format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Knfh.Extensions">
            <summary>
            Gets the file extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Knfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Knfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Knfh.LossySaving">
            <summary>
            Gets whether this drawing format may lead to loss of information when saving.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Knfh.CanLoad">
            <summary>
            Gets whether documents in this format can be loaded. Overriden to return true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Knfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="Mnfh"></param>
            <param name="nnfh"></param>
            <param name="Onfh"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.vnfh.Extensions">
            <summary>
            Gets the file extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.vnfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.vnfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.bOfh.Extensions">
            <summary>
            Gets the file extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.bOfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.bOfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.KOfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.KOfh.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.KOfh.Mime">
            <summary>
            Gets the mime-type of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.KOfh.CanSave">
            <summary>
            Returns true if the format can save a document to a stream.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.KOfh.OnUse">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.KOfh.LoadFromStreamCoreAsync(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="OOfh"></param>
            <param name="pOfh"></param>
            <param name="QOfh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.KOfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="rOfh"></param>
            <param name="SOfh"></param>
            <param name="tOfh"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.KOfh.SaveToStreamCoreAsync(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="UOfh"></param>
            <param name="vOfh"></param>
            <param name="WOfh"></param>
            <param name="xOfh"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.KOfh.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="YOfh"></param>
            <param name="Apfh"></param>
            <param name="bpfh"></param>
            <param name="Cpfh"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.Mpfh.OnClosed">
            <summary>
            Called when the window has been closed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dGYG.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dGYG.Extensions">
            <summary>
            Gets the extnesion of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dGYG.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dGYG.PersistencyFormat">
            <summary>
            Gets the persistency format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dGYG.DocumentFileName">
            <summary>
            Gets the document file name in the package.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.IIYG.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.IIYG.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.IIYG.Mime">
            <summary>
            Gets the mime-type of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.IIYG.PersistencyFormat">
            <summary>
            Gets the persistency format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.IIYG.DocumentFileName">
            <summary>
            Gets the document file name in the package.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.pIYG.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.pIYG.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.pIYG.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.pIYG.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="QIYG"></param>
            <param name="rIYG"></param>
            <param name="SIYG"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.WIYG.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.WIYG.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.WIYG.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.WIYG.CanLoad">
            <summary>
            Returns true if the format can load a text document from stream
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.WIYG.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="GjYG"></param>
            <param name="hjYG"></param>
            <param name="IjYG"></param>
            <param name="jjYG"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WIYG.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="KjYG"></param>
            <param name="ljYG"></param>
            <param name="MjYG"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.CanLoad">
            <summary>
            Gets whether documents in this format can be loaded.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.CanSave">
            <summary>
            Gets whether documents in this format can be saved.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.GMfh.LossySaving">
            <summary>
            Gets whether this drawing format may lead to loss of information when saving.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.GMfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="hMfh"></param>
            <param name="IMfh"></param>
            <param name="jMfh"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.GMfh.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="KMfh"></param>
            <param name="lMfh"></param>
            <param name="MMfh"></param>
            <param name="nMfh"></param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:Nevron.Nov.Internal.rMfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.rMfh.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Qrdh.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Filters the given node.
            </summary>
            <param name="Urdh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xrdh.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Filters the given node.
            </summary>
            <param name="ASdh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Itdh.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Filters the given node.
            </summary>
            <param name="ptdh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pWbh`1.ToArray">
            <summary>
            Converts this set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.CEEh.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="SfEh"></param>
            <param name="tfEh"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.Elfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Elfh.Extensions">
            <summary>
            Gets the extensions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Elfh.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Elfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Elfh.LossySaving">
            <summary>
            Gets whether this drawing format may lead to loss of information when saving.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Elfh.OnUse">
            <summary>
            Called when the format is used.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Elfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            Loads a document from from the specified stream.
            </summary>
            <param name="flfh"></param>
            <param name="Glfh"></param>
            <param name="hlfh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Elfh.SaveToStreamCore(Nevron.Nov.Diagram.NDrawingDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NDrawingSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            Saves a document to the specified stream.
            </summary>
            <param name="Ilfh"></param>
            <param name="jlfh"></param>
            <param name="Klfh"></param>
            <param name="llfh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.hdIh.ReduceCrossings">
            <summary>
            Reduces the edge crossings in the given bipartite graph and returns the
            number of crosings after the reduction.
            </summary>
            <returns>The total number of crossings after the reduction process.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lthh.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lthh.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="dvhh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lthh.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Wxhh.ToString">
            <summary>
            Returns the string representation of the grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.vAIh.ToString">
            <summary>
            Retusrns the string representation of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.lCIh.Item(System.Int32)">
            <summary>
            Indexer for the cells collection of the current row.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bSGh.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedEdgeBody)">
            <summary>
            Accumulates the force acting on the specified pair of connected vertices
            </summary>
            <param name="CSGh"></param>
            <param name="dSGh"></param>
            <param name="ESGh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.hSGh.AccumulateForce(Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody,Nevron.Nov.Diagram.Layout.NForceDirectedVertexBody)">
            <summary>
            Accumulates the force acting on the specified pair of vertices
            </summary>
            <param name="ISGh"></param>
            <param name="jSGh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MfIh.IGIh.Compare(Nevron.Nov.Internal.WEIh,Nevron.Nov.Internal.WEIh)">
            <summary>
            
            </summary>
            <param name="jGIh"></param>
            <param name="KGIh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AnIh.GetCount(System.Int32,System.Boolean)">
            <summary>
            Gets the number of values equal to the given one in the specified row.
            </summary>
            <param name="EnIh"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AnIh.SetBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the bit on the specified location to the given value and returns
            true if the bit value has been changed (that is if it has a value different
            from the given one).
            </summary>
            <param name="fnIh"></param>
            <param name="GnIh"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lQIh.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lQIh.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this feature
            </summary>
            <param name="nQIh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.jrIh.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            
            </summary>
            <param name="lrIh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.MrIh.TryGetBounds(Nevron.Nov.Graphics.NRectangle@)">
            <summary>
            Tries to get the bounds of this feature
            </summary>
            <param name="OrIh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.hCjh.ToString">
            <summary>
            Gets the string representation of this region.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.EnMh.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.EnMh.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="InMh"></param>
            <param name="jnMh"></param>
            <param name="KnMh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="lnMh"></param>
            <param name="MnMh"></param>
            <param name="nnMh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.CanTransform">
            <summary>
            Gets whether the aid can be transformed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.GetTransform">
            <summary>
            Gets the transformation of the aid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.CanClip">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.GetClip">
            <summary>
            Overriden to return the clip bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to update the reference to the page.
            </summary>
            <param name="rnMh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EnMh.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.jrph.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the trackers
            </summary>
            <param name="lrph"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.rrph.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            
            </summary>
            <param name="Srph"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xSph.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Overriden to skip the branch traversal in preview paint mode
            </summary>
            <param name="Ctph"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapePortsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the ports count or ports properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeGeometryChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeTextBlockChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeControlsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeBehaviorChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the shape behavior has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeSizeChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeProtectionChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the protection of the shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeEndPointsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapeTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to parent coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnShapePageTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to page coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.CanClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint outlines of the selected shapes.
            </summary>
            <param name="Ivph"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Etph.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the trackers, only if the box is valid
            </summary>
            <param name="jvph"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapePortsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the ports count or ports properties of the shape have changed.
            Raises the PortsChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeGeometryChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            Raises the GeometriesChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeTextBlockChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the textblock root properties or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeControlsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeBehaviorChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the shape behavior has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeSizeChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeProtectionChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the protection of the shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeEndPointsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapeTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to parent coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.UYph.OnShapePageTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to page coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.pAQh`1.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pAQh`1.GetClip">
            <summary>
            Overriden to return the bounds region of all contained trackers/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pAQh`1.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the trackers
            </summary>
            <param name="rAQh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.ldQh.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post-children custom paint.
            </summary>
            <param name="OEQh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MdOh`1.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to remove the PreviewedItemHost child (if any) from the list of display children.
            </summary>
            <param name="OdOh"></param>
            <param name="pdOh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.EEOh.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
            <remarks>
            Overriden to cache a reference to the owner preview manager
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Internal.hjQh.CanTransform">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.hjQh.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates, 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Wfth.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="AGth"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Wfth.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.MnSh.GetValuePreviewText(System.Object,System.Boolean)">
            <summary>
            Gets the value preview text.
            </summary>
            <param name="value"></param>
            <param name="nnSh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OnSh.Filter(Nevron.Nov.Diagram.NShape)">
            <summary>
            Returns true if the given shape is a family tree shape.
            </summary>
            <param name="pnSh"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.MQSh.ViewSettings">
            <summary>
            Gets the view settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.MQSh.Information">
            <summary>
            Gets the document information
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.MQSh.SpellChecker">
            <summary>
            Gets the spell checker
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.MQSh.MailMerge">
            <summary>
            Gets the mail merge
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapePortsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the ports count or ports properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeGeometryChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeTextBlockChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the textblock root properties or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeControlsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeBehaviorChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the shape behavior has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeSizeChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeProtectionChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the protection of the shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeEndPointsChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called whenever the geometries count or properties of the shape have changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapeTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to parent coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.StMh.OnShapePageTransformChanged(Nevron.Nov.Diagram.NShape)">
            <summary>
            Called when the transformation from local to page coordinates of this shape has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.jbMh.OnOpened">
            <summary>
            Called when the predefined libraries dialog has been opened
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Alrh.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Updates any references or cache related to the context of the node ancestors
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Crfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Crfh.Extensions">
            <summary>
            Gets the extension of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Crfh.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Crfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Crfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibraryLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="Erfh"></param>
            <param name="frfh"></param>
            <param name="Grfh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Crfh.SaveToStreamCore(Nevron.Nov.Diagram.NLibraryDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibrarySaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="hrfh"></param>
            <param name="Irfh"></param>
            <param name="jrfh"></param>
            <param name="Krfh"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Nevron.Nov.Internal.prfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.prfh.Extensions">
            <summary>
            Gets the extnesion of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.prfh.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.prfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.prfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibraryLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="rrfh"></param>
            <param name="Srfh"></param>
            <param name="trfh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.prfh.SaveToStreamCore(Nevron.Nov.Diagram.NLibraryDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibrarySaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="Urfh"></param>
            <param name="vrfh"></param>
            <param name="Wrfh"></param>
            <param name="xrfh"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.fSfh.Extensions">
            <summary>
            Gets the extnesion of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fSfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fSfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fSfh.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fSfh.CanLoad">
            <summary>
            Gets whether documents in this format can be loaded.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fSfh.CanSave">
            <summary>
            Gets whether documents in this format can be saved.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.fSfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibraryLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="GSfh"></param>
            <param name="hSfh"></param>
            <param name="ISfh"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.fSfh.SaveToStreamCore(Nevron.Nov.Diagram.NLibraryDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibrarySaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="jSfh"></param>
            <param name="KSfh"></param>
            <param name="lSfh"></param>
            <param name="MSfh"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Nevron.Nov.Internal.rSfh.Extensions">
            <summary>
            Gets the extnesion of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.rSfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.vSfh.Extensions">
            <summary>
            Gets the extnesion of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.vSfh.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.vSfh.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.vSfh.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.vSfh.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibraryLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="WSfh"></param>
            <param name="xSfh"></param>
            <param name="YSfh"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.vSfh.SaveToStreamCore(Nevron.Nov.Diagram.NLibraryDocument,System.IO.Stream,Nevron.Nov.Diagram.Formats.NLibrarySaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="Atfh"></param>
            <param name="btfh"></param>
            <param name="Ctfh"></param>
            <param name="dtfh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.fnph.UpdateBody2DFromObject(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Updates a 2D body from the specified object
            </summary>
            <param name="Inph"></param>
            <param name="jnph"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.fnph.TryGetBody2DProperty(System.Object,System.Int32,System.Object@)">
            <summary>
            Reads a property of a 2D body
            </summary>
            <param name="Knph"></param>
            <param name="lnph"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.fnph.UpdateObjectFromBody2D(System.Object,Nevron.Nov.Layout.NBody2D)">
            <summary>
            Updates an object from the specified 2D body
            </summary>
            <param name="Mnph"></param>
            <param name="nnph"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.pAnh.EnumType">
            <summary>
            Gets the enum type to convert
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.pAnh.TryGetOldNameToNewName(System.String,System.String@)">
            <summary>
            Translated the old name to the new name
            </summary>
            <param name="QAnh"></param>
            <param name="rAnh"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.tAnh.EnumType">
            <summary>
            Gets the enum type to convert
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.tAnh.TryGetOldNameToNewName(System.String,System.String@)">
            <summary>
            Translated the old name to the new name
            </summary>
            <param name="UAnh"></param>
            <param name="vAnh"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.xAnh.SourceType">
            <summary>
            Gets the source type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.xAnh.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.xAnh.ConvertValue(System.Object)">
            <summary>
            Converts the value from the source type to the target type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.YAnh.GetGeometryBounds">
            <summary>
            Overriden to return the bounds of the geometry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.YAnh.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the graphics path.
            </summary>
            <param name="dbnh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Gbnh.GetGeometryBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Gbnh.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="jbnh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.vQnb.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.vQnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="WQnb"></param>
            <param name="xQnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.YQnb.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.YQnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="Arnb"></param>
            <param name="brnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Krnb.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Krnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="lrnb"></param>
            <param name="Mrnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.nrnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="Ornb"></param>
            <param name="prnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Urnb.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Urnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="vrnb"></param>
            <param name="Wrnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.OnDocumentLoaded(Nevron.Nov.Diagram.NDrawingDocument,Nevron.Nov.Diagram.Formats.NDrawingFormat,Nevron.Nov.Diagram.Formats.NDrawingLoadSettings)">
            <summary>
            Called when a document has been loaded from the specified format and was loaded in the view
            </summary>
            <param name="Opnb"></param>
            <param name="ppnb"></param>
            <param name="Qpnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the MyDraw commander by adding specific MyDraw command actions.
            </summary>
            <param name="rpnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.CreateNewDocument">
            <summary>
            Creates a new document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.CloneDocument(Nevron.Nov.Diagram.NDrawingDocument)">
            <summary>
            Clones the given document. This method is called when the document is going to be saved on another thread.
            </summary>
            <param name="Spnb"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lpnb.CreateOrSelectNewDocumentAsync">
            <summary>
            Overriden to show the template selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bYnb.Create">
            <summary>
            Creates MyDraw's "File" menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bYnb.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="CYnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.nYnb.OnOpened">
            <summary>
            Called when the window is opened. Overriden to subscribe to licensing service events and
            focus the dialog so that the user can close it by pressing Esc from the keyboard.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.nYnb.OnClosed">
            <summary>
            Called when the window is closed. Overriden to unsubscribe from licensing service events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.xCOb.OnOpened">
            <summary>
            Called when the window opens. Overriden to focus the "Username" or the "Password" text box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.xCOb.OnClosed">
            <summary>
            Called when the window is closed. Overriden to unsubscribe from licensing service events.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.IhOb.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="phOb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.tKOb.HelpButtonCommand">
            <summary>
            Gets the command that should be associated with the help button of the ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.IIjh.Gjjh.Compare(Nevron.Nov.Internal.ljjh,Nevron.Nov.Internal.ljjh)">
            <summary>
            
            </summary>
            <param name="Ijjh"></param>
            <param name="jjjh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rtKh.CreateColorBox">
            <summary>
            Creates a theme color box that uses the current drawing theme
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rtKh.CreatePaletteColorPicker">
            <summary>
            Creates a theme color picker that uses the current drawing theme
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rtKh.CreateAdvancedColorPicker">
            <summary>
            Creates a theme advanced color picker that uses the current drawing theme.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.AxKh.Menu">
            <summary>
            Gets the menu shown in the popup window of this drop down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.AxKh.CreatePopupWindow">
            <summary>
            Creates the popup window of this drop down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.CxKh.OnClick">
            <summary>
            Called when the button is clicked. Overriden to prevent it from unchecking
            after a mouse click.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.xxKh.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node ancestors chain has changed.
            </summary>
            <param name="AYKh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OYKh.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Called when a key is down
            </summary>
            <param name="QYKh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.SYKh.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="OAlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.SYKh.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the presentation stops
            </summary>
            <param name="pAlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.SYKh.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the NMouse.MoveEvent event.
            </summary>
            <param name="QAlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.SYKh.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.OutEvent event.
            </summary>
            <param name="rAlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.SYKh.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.DownEvent event.
            </summary>
            <param name="SAlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Cxlh.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="dxlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Exlh.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="fxlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Gxlh.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="hxlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Ixlh.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="jxlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Ixlh.CreateMenuSplitButton(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a menu split button and associates it with the given command.
            </summary>
            <param name="Kxlh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.hYlh.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="jYlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.hYlh.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="KYlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.hYlh.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.hYlh.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the owner element core
            </summary>
            <param name="nYlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.AIlh`2.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to update a reference to the property browser.
            </summary>
            <param name="Cllh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Odlh.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Overriden to store a reference to the owner side bar.
            </summary>
            <param name="Sdlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.jMlh.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.jMlh.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the owner element core
            </summary>
            <param name="lMlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Cplh`1.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="Eplh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Cplh`1.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="fplh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.Cplh`1.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Cplh`1.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the owner element core
            </summary>
            <param name="Iplh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.hrlh`1.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            
            </summary>
            <param name="Irlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.vElh.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated
            at update timer ticks and after command execution.
            </summary>
            <param name="xElh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.vElh.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="YElh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WSlh.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element selected style.
            </summary>
            <param name="YSlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WSlh.GetParameter(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Gets the parameter associated with the given cell.
            </summary>
            <param name="Atlh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WSlh.ParametersEqual(System.Object,System.Object)">
            <summary>
            Checks whether the given parameters are equal.
            </summary>
            <param name="btlh"></param>
            <param name="Ctlh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OWlh.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="QWlh"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OWlh.GetParameter(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Gets the parameter associated with the given cell.
            </summary>
            <param name="rWlh"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OWlh.ParametersEqual(System.Object,System.Object)">
            <summary>
            Checks whether the given parameters are equal.
            </summary>
            <param name="SWlh"></param>
            <param name="tWlh"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Office.Draw.NDrawOptions">
            <summary>
            Holds the options of MyDraw.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawOptions.NDrawOptionsSchema">
            <summary>
            Schema associated with NDrawOptions.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Draw.NDrawOptions.NDrawOptionsDesigner">
            <summary>
            Designer for NDrawOptions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawOptions.NDrawOptionsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog">
            <summary>
            Represents the MyDraw store about dialog.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.ReviewUrl">
            <summary>
            Gets/Sets the URL for writing a review.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.CreateMessageLabel">
            <summary>
            Creates a message label.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.GetCustomButtonTexts">
            <summary>
            Gets the texts of the custom buttons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.OnCustomButtonClicked(System.String)">
            <summary>
            Called when a custom button is clicked.
            </summary>
            <param name="buttonText"></param>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.OnClosed">
            <summary>
            Called when the dialog is closed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.NDrawStoreAboutDialogSchema">
            <summary>
            Schema associated with NDrawStoreAboutDialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawStoreAboutDialog.ReviewUrlProperty">
            <summary>
            Reference to the ReviewUrl property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem">
            <summary>
            Represents a workspace item, which loads/saves the drawing view state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.MainSplitterOffset">
            <summary>
            Gets/Sets the value of the MainSplitterOffset property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.MainSplitterRestorePosition">
            <summary>
            Gets/Sets the value of the MainSplitterRestorePosition property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.LibraryAndPanZoomSplitterOffset">
            <summary>
            Gets/Sets the value of the LibraryAndPanZoomSplitterOffset property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.LibraryAndPanZoomSplitterRestorePosition">
            <summary>
            Gets/Sets the value of the LibraryAndPanZoomSplitterRestorePosition property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.ViewAndSideBarSplitterOffset">
            <summary>
            Gets/Sets the value of the ViewAndSideBarSplitterOffset property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.ViewAndSideBarSplitterRestorePosition">
            <summary>
            Gets/Sets the value of the ViewAndSideBarSplitterRestorePosition property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.QuickAccessToolbarCommandNames">
            <summary>
            Gets/Sets the names of the commands that should be shown in the quick access toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.NDrawingViewStateWorkspaceItemSchema">
            <summary>
            Schema associated with NDrawingViewStateWorkspaceItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.MainSplitterOffsetProperty">
            <summary>
            Reference to the LibraryBrowserSplitterOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.MainSplitterRestorePositionProperty">
            <summary>
            Reference to the MainSplitterRestorePosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.LibraryAndPanZoomSplitterOffsetProperty">
            <summary>
            Reference to the LibraryAndPanZoomSplitterOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.LibraryAndPanZoomSplitterRestorePositionProperty">
            <summary>
            Reference to the LibraryAndPanZoomSplitterRestorePosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.ViewAndSideBarSplitterOffsetProperty">
            <summary>
            Reference to the ViewAndSideBarSplitterOffset property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.ViewAndSideBarSplitterRestorePositionProperty">
            <summary>
            Reference to the ViewAndSideBarSplitterRestorePosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NDrawingViewStateWorkspaceItem.QuickAccessToolbarCommandNamesProperty">
            <summary>
            Reference to the QuickAccessToolbarCommandNames property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Draw.NSpellCheckWorkspaceItem">
            <summary>
            MyDraw's spell check workspace item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NSpellCheckWorkspaceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Draw.NSpellCheckWorkspaceItem.GetSpellChecker(Nevron.Nov.UI.INDocumentView)">
            <summary>
            Gets the spell checker of the given document view.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Office.Draw.NSpellCheckWorkspaceItem.NSpellCheckWorkspaceItemSchema">
            <summary>
            Schema associated with NSpellCheckWorkspaceItem.
            </summary>
        </member>
    </members>
</doc>
