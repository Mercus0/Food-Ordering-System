<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.Grid</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.Grid.Editors.NColumnFormatEdtior">
            <summary>
            Used as instance editor of NColumnFormat instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NColumnFormatEdtior.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NColumnFormatEdtior.CreateControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NColumnFormatEdtior.NColumnFormatEdtiorSchema">
            <summary>
            Schema associated with NColumnFormatEdtior
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Editors.NFormattingRuleCollectionEditor">
            <summary>
            Used as instance editor of NFormattingRule instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFormattingRuleCollectionEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFormattingRuleCollectionEditor.CreateControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.Editors.NFormattingRuleCollectionEditor.EditedRules">
            <summary>
            Gets the currently edited rules
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NFormattingRuleCollectionEditor.NFormattingRuleCollectionEditorSchema">
            <summary>
            Schema associated with NFormattingRuleCollectionEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Editors.NFormattingRuleEditor">
            <summary>
            Used as instance editor of NFormattingRule instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFormattingRuleEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFormattingRuleEditor.CreateControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NFormattingRuleEditor.NFormattingRuleEditorSchema">
            <summary>
            Schema associated with NFormattingRuleEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of Enum type. 
            The value control is a combo box, a list box or a radio group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor.GetOptions">
            <summary>
            Overriden to return the field names that are members of the grid associated with the edited node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor.GetWidgetForOption(Nevron.Nov.Dom.NNodeRef)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor.NColumnRefPropertyEditorSchema">
            <summary>
            Schema associated with NColumnRefPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor.ComboBoxTemplate">
            <summary>
            Combo box template
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NColumnRefPropertyEditor.ListBoxTemplate">
            <summary>
            Combo box template
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Editors.NFieldNamePropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of Enum type. 
            The value control is a combo box, a list box or a radio group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFieldNamePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFieldNamePropertyEditor.GetOptions">
            <summary>
            Overriden to return the field names that are members of the grid associated with the edited node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NFieldNamePropertyEditor.GetWidgetForOption(System.String)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NFieldNamePropertyEditor.NFieldNamePropertyEditorSchema">
            <summary>
            Schema associated with NFieldNamePropertyEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Editors.NRowValuePropertyEditor">
            <summary>
            Represents a provider for grid row values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NRowValuePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NRowValuePropertyEditor.GetValuePreviewText(System.Object,System.Boolean)">
            <summary>
            Gets the text for the node that appears in the preview
            </summary>
            <param name="value"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Editors.NRowValuePropertyEditor.CreatePreviewFactory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NRowValuePropertyEditor.NRowValuePropertyEditorSchema">
            <summary>
            Schema associated with NRowValuePropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Editors.NRowValuePropertyEditor.DefaultTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSliderDataCellEditor">
            <summary>
            Represents a numeric up/down data cell editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSliderDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSliderDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSliderDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NSliderDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderDataCellEditor.NSliderDataCellEditorSchema">
            <summary>
            Schema associated with NSliderDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataCellEditor">
            <summary>
            Serves as base class for all data cell editors that pack a value editor and a collection of buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCellEditor.OwnerColumn">
            <summary>
            Gets the column to which the editor belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCellEditor.OwnerRow">
            <summary>
            Gets the column to which the editor belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCellEditor.OwnerDataCell">
            <summary>
            Gets the data cell to which this editor belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.SetValue(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.GetValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.OnBeginEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.OnEndEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.OnCancelEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.CanCut">
            <summary>
            Determines whether the this cell can cut its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.CanCopy">
            <summary>
            Determines whether the this cell can copy its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.CanPaste">
            <summary>
            Determines whether the this cell can accept pasted content from the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.Cut">
            <summary>
            Cuts the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.Copy">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellEditor.Paste">
            <summary>
            Pastes the content from the clipboard inside the this cell.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataCellEditor.NDataCellEditorSchema">
            <summary>
            Schema associated with NDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGenericDataCellEditor`1">
            <summary>
            Serves as base class for all data cell editors that pack a value editor and a collection of buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGenericDataCellEditor`1.ValueEditor">
            <summary>
            Gets or sets the value editor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGenericDataCellEditor`1.NullLabel">
            <summary>
            Gets or sets the null label, which is displayed over the value editor, if the current value is null.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGenericDataCellEditor`1.ButtonsStack">
            <summary>
            Gets or sets the stack panel that contains the buttons of the editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.SetValue(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.GetValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.CanCut">
            <summary>
            Determines whether the this cell can cut its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.CanCopy">
            <summary>
            Determines whether the this cell can copy its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.CanPaste">
            <summary>
            Determines whether the this cell can accept pasted content from the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.Cut">
            <summary>
            Cuts the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.Copy">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.Paste">
            <summary>
            Pastes the content from the clipboard inside the this cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the editor and the buttons
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to arrange the editor and the buttons
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.CreateButtons(System.Object)">
            <summary>
            Overridable which creates the buttons of the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGenericDataCellEditor`1.OnNullButtonCheckedChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGenericDataCellEditor`1.NGenericDataCellEditorSchema">
            <summary>
            Schema associated with NDataCellEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGenericDataCellEditor`1.ValueEditorChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGenericDataCellEditor`1.NullLabelChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGenericDataCellEditor`1.ButtonsStackChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCheckBoxDataCellEditor">
            <summary>
            Represents a checkbox data cell editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCheckBoxDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCheckBoxDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCheckBoxDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NCheckBoxDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCheckBoxDataCellEditor.NCheckBoxDataCellEditorSchema">
            <summary>
            Schema associated with NCheckBoxDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NComboBoxDataCellEditor">
            <summary>
            Represents a checkbox data cell editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NComboBoxDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NComboBoxDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NComboBoxDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NComboBoxDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NComboBoxDataCellEditor.NComboBoxDataCellEditorSchema">
            <summary>
            Schema associated with NComboBoxDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDateTimeBoxDataCellEditor">
            <summary>
            Represents a datetimebox data cell editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeBoxDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeBoxDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeBoxDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeBoxDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDateTimeBoxDataCellEditor.NDateTimeBoxDataCellEditorSchema">
            <summary>
            Schema associated with NDateTimeBoxDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NNumericUpDownDataCellEditor">
            <summary>
            Represents a numeric up/down data cell editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NNumericUpDownDataCellEditor.NNumericUpDownDataCellEditorSchema">
            <summary>
            Schema associated with NNumericUpDownDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTextBoxDataCellEditor">
            <summary>
            Represents a text box data cell editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextBoxDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextBoxDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextBoxDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextBoxDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextBoxDataCellEditor.NTextBoxDataCellEditorSchema">
            <summary>
            Schema associated with NTextBoxDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColorBoxDataCellEditor">
            <summary>
            Represents a data cell editor that aggregates a NColorBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorBoxDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorBoxDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorBoxDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorBoxDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NColorBoxDataCellEditor.NColorBoxDataCellEditorSchema">
            <summary>
            Schema associated with NColorBoxDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFillSplitButtonDataCellEditor">
            <summary>
            Represents a data cell editor that aggregates a NFillSplitButton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillSplitButtonDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillSplitButtonDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillSplitButtonDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillSplitButtonDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillSplitButtonDataCellEditor.NFillSplitButtonDataCellEditorSchema">
            <summary>
            Schema associated with NFillSplitButtonDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NShadowSplitButtonDataCellEditor">
            <summary>
            Represents a data cell editor that aggregates a NShadowSplitButton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowSplitButtonDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowSplitButtonDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowSplitButtonDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowSplitButtonDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NShadowSplitButtonDataCellEditor.NShadowSplitButtonDataCellEditorSchema">
            <summary>
            Schema associated with NShadowSplitButtonDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NStrokeSplitButtonDataCellEditor">
            <summary>
            Represents a data cell editor that aggregates a NStrokeSplitButton.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeSplitButtonDataCellEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeSplitButtonDataCellEditor.OnBeginEdit">
            <summary>
            Called when editing starts
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeSplitButtonDataCellEditor.SetValueEditorValue(System.Object)">
            <summary>
            Must override to set a non-null value to the editor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeSplitButtonDataCellEditor.GetValueEditorValue">
            <summary>
            Must override to get a non-null value from the editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NStrokeSplitButtonDataCellEditor.NStrokeSplitButtonDataCellEditorSchema">
            <summary>
            Schema associated with NStrokeSplitButtonDataCellEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NNullButton">
            <summary>
            Represents the content widget for string columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNullButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NNullButton.NNullButtonSchema">
            <summary>
            Schema associated with NNullButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NNullLabel">
            <summary>
            Represents the null label.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNullLabel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NNullLabel.NNullLabelSchema">
            <summary>
            Schema associated with NNullLabel.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NNullLabel.NullText">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataCell">
            <summary>
            Represents a cell that displays and can optionally edit a row/column datasource value.
            Data cells are contained inside data rows. 
            Each data row represents a single record from the datasource and has as many data cells as there are columns in the grid.
            The content of a data cell is automatically generated by the respective column for the respective row value.
            The editor of a data cell is optionally created by columns that support editor based editing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCell.IsEditing">
            <summary>
            Gets whether the cell is currently being edited.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCell.Editor">
            <summary>
            Gets or sets the editor of the data cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCell.RowIndex">
            <summary>
            Gets the index of the row inside the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataCell.OwnerColumn">
            <summary>
            Gets the column for which this data cell was created.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.BeginEdit">
            <summary>
            Begins the editing of the cell.
            Returns true if after the call the cell is in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.CancelEdit">
            <summary>
            Cancels the editing of the cell
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.CommitEdit">
            <summary>
            Commits the editing of the cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.GetValue">
            <summary>
            Gets the value of the cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.SetValue(System.Object)">
            <summary>
            Sets the value of the cell.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.CanCut">
            <summary>
            Determines whether the this cell can cut its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.CanCopy">
            <summary>
            Determines whether the this cell can copy its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.CanPaste">
            <summary>
            Determines whether the this cell can accept pasted content from the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.Cut">
            <summary>
            Cuts the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.Copy">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.Paste">
            <summary>
            Pastes the content from the clipboard inside the this cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to arrange the editor.
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.OnIsEditingChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IsEditing property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local and/or computed value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCell.GetColumnFormat">
            <summary>
            Gets the column format associated with this 
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataCell.NDataCellSchema">
            <summary>
            Schema associated with NDataCell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataCell.EditorChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataCell.IsEditingProperty">
            <summary>
            Reference to the IsEditing property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataCellCollection">
            <summary>
            Represents a collection of data cells. The data cell collection serves as header for the NDataRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataCellCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataCellCollection.NDataCellCollectionSchema">
            <summary>
            Schema associated with NDataCellCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NBooleanCellView">
            <summary>
            Represents a cell view for boolean columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NBooleanCellView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NBooleanCellView.Value">
            <summary>
            Gets or sets the cell view value
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NBooleanCellView.NBooleanCellViewSchema">
            <summary>
            Schema associated with NBooleanCellView.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NBooleanCellView.ValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTextCellView">
            <summary>
            A shape part, which renders a text string. The text is controlled by the <see cref="P:Nevron.Nov.Grid.NTextCellView.Text"/> property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextCellView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextCellView.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextCellView.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <remarks>
            Overriden to render the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NTextCellView.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTextCellView.WrapMode">
            <summary>
            Gets / sets the text wrap mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTextCellView.FontName">
            <summary>
            The name of the used font
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTextCellView.FontSize">
            <summary>
            Gets or Sets the em size of the used font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTextCellView.FontStyle">
            <summary>
            The style of the used font
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextCellView.MeasureContent(System.Boolean)">
            <summary>
            
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextCellView.OnPaintText(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Called when the text of the text block needs to be painted
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextCellView.NTextCellViewSchema">
            <summary>
            Schema associated with NTextCellView.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextCellView.TextProperty">
            <summary>
            Reference to the Text property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextCellView.WrapModeProperty">
            <summary>
            Reference to the WrapMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextCellView.FontNameProperty">
            <summary>
            Schema associated with Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextCellView.FontSizeProperty">
            <summary>
            Schema associated with EmSize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextCellView.FontStyleProperty">
            <summary>
            Schema associated with Style property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCell">
            <summary>
            Represents a grid cell widgtet. Serves as base class for NDataCell and NSpanCell.
            The grid navigation can operate on cells and that is why each cell can be in current state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCell.Content">
            <summary>
            Gets or sets the content of the cell. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCell.IsCurrent">
            <summary>
            Gets whether the cell is current
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCell.OwnerRow">
            <summary>
            Gets the row to which this cell belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCell.OwnerGrid">
            <summary>
            Gets the grid view to which this cell belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.CanCut">
            <summary>
            Determines whether the this cell can cut its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.CanCopy">
            <summary>
            Determines whether the this cell can copy its content on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.CanPaste">
            <summary>
            Determines whether the this cell can accept pasted content from the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.Cut">
            <summary>
            Cuts the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.Copy">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.Paste">
            <summary>
            Pastes the content from the clipboard inside the this cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.CanClip">
            <summary>
            Overriden to return false, since for performance reasons we do not want 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the size of the view
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCell.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to arrange the view and the editor
            </summary>
            <param name="ca"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NCell.NCellSchema">
            <summary>
            Schema associated with NCell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCell.ContentChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCell.IsCurrentProperty">
            <summary>
            Reference to the IsCurrent property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCellCollection`1">
            <summary>
            Represents a collection of cells. Serves as base class for specific cell collections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCellCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCellCollection`1.#ctor(`0[])">
            <summary>
            Creates a cell collection with the specified cells
            </summary>
            <param name="cells"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NCellCollection`1.NCellCollectionSchema">
            <summary>
            Schema associated with NCellCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDetailsCell">
            <summary>
            Represents a span cell for a details row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsCell.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetailsCell.NDetailsCellSchema">
            <summary>
            Schema associated with NDetailsCell
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDetailsCellCollection">
            <summary>
            Represents a collection of NDetailsCell. 
            An instance of this collection serves as header for each NDetailsRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsCellCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsCellCollection.#ctor(Nevron.Nov.Grid.NDetailsCell[])">
            <summary>
            Creates a cell collection with the specified cells
            </summary>
            <param name="cells"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetailsCellCollection.NDetailsCellCollectionSchema">
            <summary>
            Schema associated with NDetailsCellCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupRowCell">
            <summary>
            Represents a span cell for a group row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCell.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupRowCell.NGroupRowCellSchema">
            <summary>
            Schema associated with NGroupRowCell
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupRowCellCollection">
            <summary>
            Represents a collection of NGroupRowCell. 
            An instance of this collection serves as header for each NGroupRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCellCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCellCollection.#ctor(Nevron.Nov.Grid.NGroupRowCell[])">
            <summary>
            Creates a cell collection with the specified cells
            </summary>
            <param name="cells"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupRowCellCollection.NGroupRowCellCollectionSchema">
            <summary>
            Schema associated with NGroupRowCellCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSpanCell">
            <summary>
            Represents a cell that is not bound to a specific row/column value and thus can span multiple columns or have a user defined layout.
            Span cells are typically dynamically generated by the grid.
            Serves as base class for NGroupRowCell, NDetailsCell and NSummaryRowCell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCell.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCell.BeginXPosition">
            <summary>
            Gets or sets the begin X position of the span cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCell.EndXPosition">
            <summary>
            Gets or sets the begin X position of the span cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCell.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCell.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCell.NSpanCellSchema">
            <summary>
            Schema associated with NSpanCell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCell.BeginXPositionChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCell.EndXPositionChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSpanCellCollection`1">
            <summary>
            Represents a collection of span cells.
            Serves as base class for NGroupRowCellCollection and NDetailsCellCollection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCellCollection`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCellCollection`1.#ctor(`0[])">
            <summary>
            Creates a cell collection with the specified cells
            </summary>
            <param name="cells"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellCollection`1.NSpanCellCollectionSchema">
            <summary>
            Schema associated with NSpanCellCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSummaryCell">
            <summary>
            Represents a span cell for a details row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryCell.#ctor(System.Object)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NSummaryCell.NSummaryCellSchema">
            <summary>
            Schema associated with NSummaryCell
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSummaryCellCollection">
            <summary>
            Represents a collection of NSummaryCell. 
            An instance of this collection serves as header for each NSummaryRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryCellCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryCellCollection.#ctor(Nevron.Nov.Grid.NSummaryCell[])">
            <summary>
            Creates a cell collection with the specified cells
            </summary>
            <param name="cells"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NSummaryCellCollection.NSummaryCellCollectionSchema">
            <summary>
            Schema associated with NSummaryCellCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSpanCellBeginXPosition">
            <summary>
            Represent the BeginXPostion of a NSpanCell.
            A reference to this element can be obtained from the NSpanCell.BeginXPosition property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCellBeginXPosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellBeginXPosition.NSpanCellBeginXPositionSchema">
            <summary>
            Schema associated with NSpanCellBeginXPosition
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSpanCellEndXPosition">
            <summary>
            Represent the EndXPostion of a NSpanCell.
            A reference to this element can be obtained from the NSpanCell.EndXPosition property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCellEndXPosition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellEndXPosition.NSpanCellEndXPositionSchema">
            <summary>
            Schema associated with NSpanCellEndXPosition
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSpanCellXPosition`1">
            <summary>
            Represent and BeginXPostion or EndXPosition of a snap cell.
            Serves as base class for NSpanCellBeginXPosition and NSpanCellEndXPosition.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCellXPosition`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCellXPosition`1.Mode">
            <summary>
            Gets or sets the position mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCellXPosition`1.Percent">
            <summary>
            Gets or sets the percent that defines a relative position along the row X range.
            Used only when Mode is set to Percent.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCellXPosition`1.ColumnRef">
            <summary>
            Gets or sets a reference to the column which defined the X position of the cell.
            Used only when Mode is set to ColumnBegin or ColumnEnd.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCellXPosition`1.Offset">
            <summary>
            Gets or sets the offset applied to the originally calculated position.
            By default set to zero.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSpanCellXPosition`1.OwnerSpanCell">
            <summary>
            Gets the span cell to which this position belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSpanCellXPosition`1.InvalidateParentArrange(System.Object)">
            <summary>
            Overriden to invalidate the arrange row to which the position belongs.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellXPosition`1.NSpanCellXPositionSchema">
            <summary>
            Schema associated with NSpanCellXPosition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellXPosition`1.ModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellXPosition`1.PercentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellXPosition`1.ColumnRefProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSpanCellXPosition`1.OffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCalculatedColumn">
            <summary>
            Serves as base class for all columns that can provide row values not directly based on the data source row values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCalculatedColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCalculatedColumn.CanEdit">
            <summary>
            Overriden to return false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCalculatedColumn.SetRowValue(System.Int32,System.Object)">
            <summary>
            Sets the column value for the specified data row.
            </summary>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NCalculatedColumn.NCalculatedColumnSchema">
            <summary>
            Schema associated with NCalculatedColumn
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomCalculatedColumn`1">
            <summary>
            Represents a calculated column that provides row values that are provided by a user handled delegate.
            This column is associated TRowValue row values type (i.e. each row value is represented by a TRowValue value).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomCalculatedColumn`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomCalculatedColumn`1.#ctor(Nevron.Nov.FunctionResult{Nevron.Nov.NNullable{`0},Nevron.Nov.Grid.NCustomCalculatedColumnGetRowValueArgs{`0}})">
            <summary>
            Initializer constructor
            </summary>
            <param name="getRowValueDelegate"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomCalculatedColumn`1.GetRowValueDelegate">
            <summary>	
            Delegate which is called when the column needs to get a row value for a specific row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomCalculatedColumn`1.GetRowValue(System.Int32)">
            <summary>
            Gets the value
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomCalculatedColumn`1.GetRowValuesType">
            <summary>
            Overriden to return the NVariant type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomCalculatedColumn`1.GetRowValuesNullable">
            <summary>
            Overriden to return false.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomCalculatedColumn`1.NCustomCalculatedColumnSchema">
            <summary>
            Schema associated with NCustomCalculatedColumn
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormulaCalculatedColumn">
            <summary>
            Represents a calculated column that provides row values based on the result of a row formula evaluation.
            This column is associated NVariant value type (i.e. each row value is represented by a NVariant value).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaCalculatedColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaCalculatedColumn.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="formula"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormulaCalculatedColumn.Formula">
            <summary>
            Gets or sets the formula associated with this column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaCalculatedColumn.GetRowValue(System.Int32)">
            <summary>
            Gets the value
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaCalculatedColumn.GetRowValuesType">
            <summary>
            Overriden to return the NVariant type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaCalculatedColumn.GetRowValuesNullable">
            <summary>
            Overriden to return false.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormulaCalculatedColumn.NFormulaCalculatedColumnSchema">
            <summary>
            Schema associated with NCalculatedColumn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormulaCalculatedColumn.FormulaProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataColumn">
            <summary>
            Represents a column that is bound to a field in the grid data source (i.e. a data bound column).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.#ctor(Nevron.Nov.Data.NDataSource,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dataSource"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.#ctor(Nevron.Nov.Data.NDataSource,System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dataSource"></param>
            <param name="fieldName"></param>
            <param name="title"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataColumn.FieldName">
            <summary>
            Gets the field name of of the data source which this column represents.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataColumn.FieldIndex">
            <summary>
            Gets the index of the field in the data source to which this column is bound to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataColumn.FieldType">
            <summary>
            Gets the type of the field in the data source to which this column is bound to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataColumn.FieldNullable">
            <summary>
            Gets whether the field to which the column is bound to is nullable.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.Bind(Nevron.Nov.Data.NDataSource,System.String)">
            <summary>
            Binds the column the data source columne with the specified name.
            This method also set the column Format and Editor to be the defaults for the field type.
            </summary>
            <param name="dataSource"></param>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.Bind(Nevron.Nov.Data.NDataSource,System.String,System.String)">
            <summary>
            Binds the column the data source columne with the specified name.
            This method also set the column Format and Editor to be the defaults for the field type.
            </summary>
            <param name="dataSource"></param>
            <param name="fieldName"></param>
            <param name="title"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.GetRowValue(System.Int32)">
            <summary>
            Gets the column value for the specified data row.
            This implementation returns the field value for the specified row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.SetRowValue(System.Int32,System.Object)">
            <summary>
            Sets the column value for the specified data row.
            This implementation sets a field value for the specified row.
            </summary>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.GetRowValuesType">
            <summary>
            Gets the data type associated with the row values for this column.
            This implementation returns the FieldType of the data source field represented by this column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.GetRowValuesNullable">
            <summary>
            Gets whether the row values associated with this column can be null.
            This implementation returns the Nullable status of the data source field represented by this column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.OnFieldNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the field name property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataColumn.NDataColumnSchema">
            <summary>
            Schema associated with NDataColumn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataColumn.FieldNameProperty">
            <summary>
            Reference to the FieldName property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataColumn.NDataColumnDesigner">
            <summary>
            Designer associated with NDataColumn.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataColumn.NDataColumnDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSliderColumnEditor">
            <summary>
            Represents a column editor that can edit numeric values via a NNumericUpDownCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSliderColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSliderColumnEditor.Minimum">
            <summary>
            Gets or sets the minimum for the progress bars created by the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSliderColumnEditor.Maximum">
            <summary>
            Gets or sets the maximum for the progress bars created by the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSliderColumnEditor.TicksPlacement">
            <summary>
            Gets or sets the way the ticks are placed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSliderColumnEditor.TicksLength">
            <summary>
            Gets or sets the length of a tick. Valid only if TicksPlacement is not set to None.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSliderColumnEditor.TicksInterval">
            <summary>
            Gets or sets the value range at which ticks are drawn.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSliderColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NTextBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.NSliderColumnEditorSchema">
            <summary>
            Schema associated with NSliderColumnEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.MinimumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.MaximumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.TicksPlacementProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.TicksIntervalProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.TicksLengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSliderColumnEditor.TicksStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnEditor">
            <summary>
            Represents a column editor that is reponsible for creating data cell editors. Serves as base class for all column editors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnEditor.OwnerColumn">
            <summary>
            Gets the column to which this editor belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Must override to creates a data cell editor
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnEditor.NColumnEditorSchema">
            <summary>
            Schema associated with NColumnEditor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnEditor.CreateDefaultForDataType(System.Type)">
            <summary>
            Creates the default column editor for the specified data type.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.NCheckBoxColumnEditor">
            <summary>
            Represents a column editor that can edit date time values with a NCheckBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCheckBoxColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCheckBoxColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NCheckBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCheckBoxColumnEditor.NCheckBoxColumnEditorSchema">
            <summary>
            Schema associated with NCheckBoxEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDateTimeBoxColumnEditor">
            <summary>
            Represents a column editor that can edit date time values with a NDateTimeBox.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeBoxColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeBoxColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NDateTimeBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDateTimeBoxColumnEditor.NDateTimeBoxColumnEditorSchema">
            <summary>
            Schema associated with NDateTimeBoxColumnEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NEnumComboBoxColumnEditor">
            <summary>
            Represents a column editor that can edit enum values with a NComboBox. This is the default editor created for Enum field types.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumComboBoxColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NEnumComboBoxColumnEditor.InsertSpacesBeforeUppersAndDigits">
            <summary>
            Gets or sets whether spaces should be inserted before upper and digit letters in the string representation of enum values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumComboBoxColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NEnumComboBoxEditorDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NEnumComboBoxColumnEditor.NEnumComboBoxColumnEditorSchema">
            <summary>
            Schema associated with NEnumComboBoxColumnEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NEnumComboBoxColumnEditor.InsertSpacesBeforeUppersAndDigitsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NNumericUpDownColumnEditor">
            <summary>
            Represents a column editor that can edit numeric values via a NNumericUpDownCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownColumnEditor.#ctor(System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="decimalPlaces"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NNumericUpDownColumnEditor.DecimalPlaces">
            <summary>
            Gets or sets the decimal places of the floating point editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericUpDownColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NNumericUpDownDataCellEditor
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NNumericUpDownColumnEditor.NNumericUpDownColumnEditorSchema">
            <summary>
            Schema associated with NNumericUpDownColumnEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NNumericUpDownColumnEditor.DecimalPlacesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTextBoxColumnEditor">
            <summary>
            Represents a column editor that can edit numeric values via a NNumericUpDownCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextBoxColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextBoxColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NTextBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextBoxColumnEditor.NTextBoxColumnEditorSchema">
            <summary>
            Schema associated with NTextBoxColumnEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColorBoxColumnEditor">
            <summary>
            Represents a column editor that can edit NColor values with a NColorBoxDataCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorBoxColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorBoxColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NCheckBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NColorBoxColumnEditor.NColorBoxColumnEditorSchema">
            <summary>
            Schema associated with NColorBoxColumnEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFillSplitButtonColumnEditor">
            <summary>
            Represents a column editor that can NFill values with a NFillSplitButtonDataCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillSplitButtonColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillSplitButtonColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NCheckBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillSplitButtonColumnEditor.NFillSplitButtonColumnEditorSchema">
            <summary>
            Schema associated with NFillSplitButtonColumnEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NShadowSplitButtonColumnEditor">
            <summary>
            Represents a column editor that can NShadow values with a NShadowSplitButtonDataCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowSplitButtonColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowSplitButtonColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NCheckBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NShadowSplitButtonColumnEditor.NShadowSplitButtonColumnEditorSchema">
            <summary>
            Schema associated with NShadowSplitButtonColumnEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NStrokeSplitButtonColumnEditor">
            <summary>
            Represents a column editor that can NStroke values with a NStrokeSplitButtonDataCellEditor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeSplitButtonColumnEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeSplitButtonColumnEditor.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Overriden to create a NCheckBoxDataCellEditor.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NStrokeSplitButtonColumnEditor.NStrokeSplitButtonColumnEditorSchema">
            <summary>
            Schema associated with NStrokeSplitButtonColumnEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFiltersEditor">
            <summary>
            Represents the filter editor that can edit all filters or just the filters applicable to a specific column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFiltersEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFiltersEditor.Initialize(Nevron.Nov.Grid.NGrid,Nevron.Nov.Grid.NColumn)">
            <summary>
            Initializes the filter editor for the specified column. 
            If selectedColumn is null, the editor is initialized to display all filters.
            </summary>
            <param name="grid"></param>
            <param name="selectedColumn"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NFiltersEditor.NFiltersEditorSchema">
            <summary>
            Schema associated with NFiltersEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NBooleanColumnFormat">
            <summary>
            Represents a column format that is by default associated with the Boolean column data type.
            Creates a NBooleanCellView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NBooleanColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NBooleanColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a NBooleanCellView that displays the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NBooleanColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NBooleanColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Center
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NBooleanColumnFormat.NBooleanColumnFormatSchema">
            <summary>
            Schema associated with NTextValueFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NBooleanColumnFormat.ValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDateTimeColumnFormat">
            <summary>
            Represents a column format that is by default associated with the DateTime column data type.
            Creates a NTextCellView that contains a formatted representation of the DateTime value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Left.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeColumnFormat.CreateDefaultValueFormat">
            <summary>
            Overriden to create the default date time value formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDateTimeColumnFormat.GetDefaultCellValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDateTimeColumnFormat.NDateTimeColumnFormatSchema">
            <summary>
            Schema associated with NDateTimeColumnFormat
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NEnumColumnFormat">
            <summary>
            Represents a column format that is by default associated with the Enum column data types.
            Creates a NTextCellView that contains a formatted representation of the Enum value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NEnumColumnFormat.InsertSpacesBeforeUppersAndDigits">
            <summary>
            Gets or sets whether spaces should be inserted before upper and digit letters in the string representation of enum values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a text cell view that contains a formatted string representation of the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.CanCopy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Determines whether the specified cell can copy its content on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.Copy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Right.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NEnumColumnFormat.NEnumColumnFormatSchema">
            <summary>
            Schema associated with NEnumColumnFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NEnumColumnFormat.InsertSpacesBeforeUppersAndDigitsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NEnumColumnFormat.NEnumColumnFormatDesigner">
            <summary>
            Designer associated with NEnumColumnFormatDesigner
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NEnumColumnFormat.NEnumColumnFormatDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NImageColumnFormat">
            <summary>
            Represents a column format that is by default associated with the NRaster, NImage and NImageSource data types.
            Creates a NTextCellView that contains a formatted representation of the Enum value.
            </summary>
            <remarks>
            The NImageColumnFormat can also show images from the following data types: 
            <list type=" bullet">
                <item>
                    <term>byte[]</term>
                    <description></description>
                </item>
                <item>
                    <term>Stream</term>
                    <description></description>
                </item>
                <item>
                    <term>NFile</term>
                    <description></description>
                </item>
                <item>
                    <term>string</term>
                    <description>threated as a file name</description>
                </item>
                <item>
                    <term>NEmbeddedResource</term>
                    <description></description>
                </item>
                <item>
                    <term>NRaster</term>
                    <description></description>
                </item>
                <item>
                    <term>NImageSource</term>
                    <description></description>
                </item>
                <item>
                    <term>NImage</term>
                    <description></description>
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NImageColumnFormat.UseFixedImageWidth">
            <summary>
            Gets or sets whether fixed image width should be used. 
            If set to true all images will have the width specified by FixedImageWidth.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NImageColumnFormat.FixedImageWidth">
            <summary>
            Gets or sets the fixed image width of the images in case UseFixedImageWidth is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NImageColumnFormat.UseFixedImageHeight">
            <summary>
            Gets or sets whether fixed image height should be used. 
            If set to true all images will have the height specified by FixedImageHeight.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NImageColumnFormat.FixedImageHeight">
            <summary>
            Gets or sets the fixed image width of the images in case UseFixedImageHeight is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NImageColumnFormat.ImageMapping">
            <summary>
            Gets or sets the fixed image width of the images in case Fixed Width is true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a NImageBox that displays the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.CanCopy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Determines whether the specified cell can copy its content on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.Copy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Center
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.CreateImageFromObject(System.Object)">
            <summary>
            Tries to creaete an image from the specified object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NImageColumnFormat.NImageColumnFormatSchema">
            <summary>
            Schema associated with NTextValueFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NImageColumnFormat.UseFixedImageWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NImageColumnFormat.FixedImageWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NImageColumnFormat.UseFixedImageHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NImageColumnFormat.FixedImageHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NImageColumnFormat.ImageMappingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NImageColumnFormat.NImageColumnFormatDesigner">
            <summary>
            Designer associated with NImageColumnFormat
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NImageColumnFormat.NImageColumnFormatDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NNumericColumnFormat">
            <summary>
            Represents a column format that is by default associated with numeric data types (Byte, Int16, Int32, UInt16, UInt32, Long, ULong, Float, Double, Decimal).
            Creates a NTextCellView that contains a formatted representation of the numeric value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericColumnFormat.CreateDefaultValueFormat">
            <summary>
            Overriden to create the default floating point value formatter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericColumnFormat.GetDefaultCellValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NNumericColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Right.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NNumericColumnFormat.NNumericColumnFormatSchema">
            <summary>
            Schema associated with NNumericColumnFormat
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NObjectColumnFormat">
            <summary>
            Represents an object column format that represents objects via their ToString() representation. 
            This is the column format created for columns for which a specific column format cannot be chosen.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NObjectColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NObjectColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Formats the default data cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NObjectColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a text cell view that contains a string representation of the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NObjectColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NObjectColumnFormat.NObjectColumnFormatSchema">
            <summary>
            Schema associated with NTextValueFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NObjectColumnFormat.ValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NStringColumnFormat">
            <summary>
            Represents a column format that is by default associated with the String column data types.
            Creates a NTextCellView that displays the string.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStringColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStringColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a text cell view that contains a formatted string representation of the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NStringColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NStringColumnFormat.CanCopy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Determines whether the specified cell can copy its content on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NStringColumnFormat.Copy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NStringColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Left.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NStringColumnFormat.NStringColumnFormatSchema">
            <summary>
            Schema associated with NStringColumnFormatSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NStringColumnFormat.ValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTextValueColumnFormat`1">
            <summary>
            Represents a column format that creates a text cell view, which contains a formatted string representation of the column value.
            The formatting is accomplished by a value formatter accessible from the ValueFormatter property. 
            Serves as base class for numeric and date time column formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a text cell view that contains a formatted string representation of the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.CanCopy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Determines whether the specified cell can copy its content on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.Copy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NTextValueColumnFormat`1.ValueFormatter">
            <summary>
            Gets or sets the formatter that is used to create a text representation of the column value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.CreateDefaultValueFormat">
            <summary>
            Must override to create the default value format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.GetDefaultCellValue">
            <summary>
            Must override to return the default cell value, which is used for default row height measurement.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextValueColumnFormat`1.NTextValueColumnFormatSchema">
            <summary>
            Schema associated with NTextValueFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextValueColumnFormat`1.ValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTextValueColumnFormat`1.NTextValueFormatDesigner">
            <summary>
            Designer associated with NTextValueFormatDesigner
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextValueColumnFormat`1.NTextValueFormatDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NVariantColumnFormat">
            <summary>
            Represents a column format that is by default associated with the NVariant data type.
            Creates a NTextCellView that contains a formatted representation of variant.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NVariantColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NVariantColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NVariantColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a text cell view that contains a formatted string representation of the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NVariantColumnFormat.CreateDefaultValueFormat">
            <summary>
            Overriden to return a NVariantValueFormatter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NVariantColumnFormat.GetDefaultCellValue">
            <summary>
            Overriden to return a variant that contains a string with letters and digits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NVariantColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Gets the automatic horizontal alignment for the specified row value.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NVariantColumnFormat.NVariantColumnFormatSchema">
            <summary>
            Schema associated with NVariantColumnFormatSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColorColumnFormat">
            <summary>
            Represents the column format associated with NDateTimeColumn
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Left.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColorColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NColorColumnFormat.NColorColumnFormatSchema">
            <summary>
            Schema associated with NColorColumnFormat
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFillColumnFormat">
            <summary>
            Represents the column format associated with NDateTimeColumn
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Left.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillColumnFormat.NFillColumnFormatSchema">
            <summary>
            Schema associated with NFillColumnFormat
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NShadowColumnFormat">
            <summary>
            Represents the column format associated with NShadow
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Left.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NShadowColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NShadowColumnFormat.NShadowColumnFormatSchema">
            <summary>
            Schema associated with NShadowColumnFormat
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NStrokeColumnFormat">
            <summary>
            Represents the column format associated with NDateTimeColumn
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Left.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NStrokeColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NStrokeColumnFormat.NStrokeColumnFormatSchema">
            <summary>
            Schema associated with NStrokeColumnFormat
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NProgressBarColumnFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NProgressBarColumnFormat.Minimum">
            <summary>
            Gets or sets the minimum for the progress bars created by the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NProgressBarColumnFormat.Maximum">
            <summary>
            Gets or sets the maximum for the progress bars created by the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NProgressBarColumnFormat.LabelStyle">
            <summary>
            Gets or sets the style of the progress bars labels. By default set to Value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NProgressBarColumnFormat.ValueFormatter">
            <summary>
            Gets or sets the value formatter that creates a string representation of the value for the clipboard Copy operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Formats the default data cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.CanCopy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Determines whether the copy operation can be performed.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.Copy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to create a NProgressBar that displays the specified value.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Overriden to return Fit.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NProgressBarColumnFormat.NProgressBarColumnFormatSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NProgressBarColumnFormat.MinimumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NProgressBarColumnFormat.MaximumProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NProgressBarColumnFormat.LabelStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NProgressBarColumnFormat.ValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NProgressBarColumnFormat.NProgressBarColumnFormatDesigner">
            <summary>
            Designer associated with NProgressBarColumnFormat
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NProgressBarColumnFormat.NProgressBarColumnFormatDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NBackgroundFillDeclaration">
            <summary>
            Represents a formatting rule declaration that applies a background fill to the data cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NBackgroundFillDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NBackgroundFillDeclaration.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Creates a fill declaration with an uniform fill
            </summary>
            <param name="uniformFill"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NBackgroundFillDeclaration.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a two color graident fill declration
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NBackgroundFillDeclaration.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a three color graident fill declration
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="begin"></param>
            <param name="middle"></param>
            <param name="end"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NBackgroundFillDeclaration.NBackgroundFillDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFillDeclaration">
            <summary>
            Represents a formatting rule declaration that applies an unform or two or three gradient color filling.
            Serves as base class for NBackgroundFillDeclaration and NTextFillDeclaration.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillDeclaration.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Creates a fill declaration with an uniform fill
            </summary>
            <param name="uniformFill"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillDeclaration.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a two color graident fill declration
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillDeclaration.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a three color graident fill declration
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="begin"></param>
            <param name="middle"></param>
            <param name="end"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.Mode">
            <summary>
            Gets or sets the mode which determines the way in which the filling is determined.
            If set to Uniform, the filling is determined by the UnformFill property.
            When set to TwoColorGradient or ThreeColorGradient, the filling is an interpolation on a color ramp that is based on two or three color gradient respectively.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.UniformFill">
            <summary>
            Gets or sets the unform filling to apply. Applicable when Mode is set to UniformFill.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.BeginColor">
            <summary>
            Gets or sets the begin color to use. Only applicable when Mode is set to TwoColorGradient or ThreeColorGradient.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.MiddleColor">
            <summary>
            Gets or sets the end color to use. Only applicable when Mode is set to ThreeColorGradient.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.EndColor">
            <summary>
            Gets or sets the end color to use. Only applicable when Mode is set to TwoColorGradient or ThreeColorGradient.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.MinimumValue">
            <summary>
            Gets or sets the minimum value that maps to BeginColor. Only applicable when Mode is set to TwoColorGradient or ThreeColorGradient.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFillDeclaration.MaximumValue">
            <summary>
            Gets or sets the maximum value that maps to EndColor. Only applicable when Mode is set to TwoColorGradient or ThreeColorGradient.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillDeclaration.CalculateFill(System.Object)">
            <summary>
            Calculates the fill to apply to the specified value
            </summary>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.NFillDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.ModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.UniformFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.BeginColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.MiddleColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.EndColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.MinimumValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFillDeclaration.MaximumValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFillDeclaration.NFillDeclarationDesigner">
            <summary>
            Designer associated with NFillDeclaration
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFillDeclaration.NFillDeclarationDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTextFillDeclaration">
            <summary>
            Represents a formatting rule declaration that applies a text fill to the data cell view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextFillDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextFillDeclaration.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Creates a fill declaration with an uniform fill
            </summary>
            <param name="uniformFill"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextFillDeclaration.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a two color graident fill declration
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTextFillDeclaration.#ctor(System.Double,System.Double,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Creates a three color graident fill declration
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="begin"></param>
            <param name="middle"></param>
            <param name="end"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTextFillDeclaration.NTextFillDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFontNameDeclaration">
            <summary>
            Represents a formatting rule declaration that applies a font name to the data cell view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFontNameDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFontNameDeclaration.FontName">
            <summary>
            Gets or sets the font name to apply.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFontNameDeclaration.NFontNameDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFontNameDeclaration.FontNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFontNameDeclaration.NFontNameDeclarationDesigner">
            <summary>
            Designer associated with NFontNameDeclaration
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFontNameDeclaration.NFontNameDeclarationDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFontSizeDeclaration">
            <summary>
            Represents a formatting rule declaration that applies a font size to the data cell view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFontSizeDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFontSizeDeclaration.FontSize">
            <summary>
            Gets or sets the font size to apply.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFontSizeDeclaration.NFontSizeDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFontSizeDeclaration.FontSizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFontSizeDeclaration.NFontSizeDeclarationDesigner">
            <summary>
            Designer associated with NFontSizeDeclaration
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFontSizeDeclaration.NFontSizeDeclarationDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFontStyleDeclaration">
            <summary>
            Represents a formatting rule declaration that applies a font style to the data cell view.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFontStyleDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFontStyleDeclaration.FontStyle">
            <summary>
            Gets or sets the font style to apply.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFontStyleDeclaration.NFontStyleDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFontStyleDeclaration.FontStyleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFontStyleDeclaration.NFontStyleDeclarationDesigner">
            <summary>
            Designer associated with NFontStyleDeclaration
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFontStyleDeclaration.NFontStyleDeclarationDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingDeclaration">
            <summary>
            Represents a formatting declaration. Serves as base class for all formatting declarations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingDeclaration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormattingDeclaration.OwnerFormattingRule">
            <summary>
            Gets the column format to which this formatting rule belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormattingDeclaration.OwnerColumn">
            <summary>
            Ges the column to which this formatting rule belongs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingDeclaration.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingDeclaration.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            Called when an element attribute has changed.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormattingDeclaration.NFormattingDeclarationSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingDeclarationCollection">
            <summary>
            Represents a collection of formatting declarations. An instance of this collection can be obtained from the NFormattingDeclaration.Declarations property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingDeclarationCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormattingDeclarationCollection.NFormattingDeclarationCollectionSchema">
            <summary>
            Schema associated with NFormattingDeclarationCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingDeclarationCollection.NFormattingDeclarationCollectionDesigner">
            <summary>
            Designer associated with NFormattingDeclarationCollection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingDeclarationCollection.NFormattingDeclarationCollectionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingDeclarationCollection.NFormattingDeclarationCollectionDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingRule">
            <summary>
            Represents a formatting rule.
            </summary>
            <remarks>
            <para>
            Filtering, Sorting and Grouping rules operate on rows. 
            That is why a grid rule associates a default data row value provider, that can dynamically provide a value for specific row.
            </para>
            <para>
            This allows you to extend the functionality of rules by simply specifying more complex data row value providers 
            - for example you can sort or group records by formulas or custom values provided by NCustomRowValue derived types.
            </para>
            <para>
            Besides extensibility this design also offers simplicity as for the common cases - group, sort, filter by column values you do not need to specify a row value provider.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRule.#ctor(Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Initializes a new rule associated with the specified row condition
            </summary>
            <param name="rowCondition"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormattingRule.OwnerColumnFormat">
            <summary>
            Gets the column format to which this formatting rule belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormattingRule.OwnerColumn">
            <summary>
            Ges the column to which this formatting rule belongs.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormattingRule.RowCondition">
            <summary>
            Gets or set the row condition that each row from the data source must match in order for the rule to apply its declarations on the data cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormattingRule.Declarations">
            <summary>
            Gets or sets the declrations associated with this rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRule.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRule.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            Called when an element attribute has changed.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormattingRule.NFormattingRuleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormattingRule.DeclarationsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormattingRule.RowConditionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingRule.NFormattingRuleDesigner">
            <summary>
            Designer associated with NFormattingRule
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRule.NFormattingRuleDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingRuleCollection">
            <summary>
            Represents a collection of formatting rules. An instance of this collection can be obtained from the NColumnFormat.FormattingRules property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormattingRuleCollection.NFormattingRuleCollectionSchema">
            <summary>
            Schema associated with NFormattingRuleCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormattingRuleCollection.NFormattingRuleCollectionDesigner">
            <summary>
            Designer associated with NFormattingRuleCollection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormattingRuleCollection.NFormattingRuleCollectionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnFormat">
            <summary>
            Represent a column format that is responsible for displaying a formatted cell view for a column data cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NColumnFormat.CreateDataCellView">
            <summary>
            Occurs when the column format needs to create a cell view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnFormat.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the data cell view relative to the data cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnFormat.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the data cell view relative to the data cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnFormat.BackgroundFill">
            <summary>
            Gets or sets the background filling of the data cells.
            When set to null, the data cells use the default background fill style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnFormat.TextFill">
            <summary>
            Gets or sets the text filling of the cell views.
            When set to null, the cells views use the default text fill style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnFormat.Font">
            <summary>
            Gets or sets the font of the cell views.
            When set to null, the cells views use the default font style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnFormat.OwnerColumn">
            <summary>
            Gets the column owning this column format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.FormatDataCell(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Formats the specified data cell to display the specified row value and returns the widget that is created as dataCell content.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Must override to create the default data cell view, which is used for default row measurement purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.CanCopy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Determines whether the specified cell can copy its content on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.Copy(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Copies the content of the specified data cell on the clipboard.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.CreateDataCellViewCore(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Creates a data cell view for the specified row value. Raises the CreateDataCellView event.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.CreateNullDataCellView(Nevron.Nov.Grid.NDataCell)">
            <summary>
            create a view for the specified dataCell null value.
            </summary>
            <param name="dataCell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Must override to create a view for the specified dataCell and non-null value.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Gets the automatic horizontal alignment for the specified dataCell and value.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.GetAutomaticVerticalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Gets the automatic vertical alignment for the specified dataCell and value.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.ApplyViewFormat(Nevron.Nov.Grid.NDataCell,Nevron.Nov.UI.NWidget,System.Object)">
            <summary>
            Formats the specified view
            </summary>
            <param name="dataCell"></param>
            <param name="view"></param>
            <param name="rowValue"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.ApplyDataCellFormat(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Formats the data cell.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.NColumnFormatSchema">
            <summary>
            Schema associated with NColumnFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.CreateDataCellViewEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.HorizontalAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.VerticalAlignmentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.BackgroundFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.TextFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.FontProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.CreateDefaultForDataType(System.Type)">
            <summary>
            Creates the default column format for the specified data type.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.Format_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.Alignment_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.BackgroundFill_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.TextFill_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.Font_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.Block_Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnFormat.ConditionalFormatting_Category">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnFormat.NColumnFormatDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnFormat.NColumnFormatDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomColumnFormat">
            <summary>
            Represents a column format that is associated with NCustomDataColumn and NCustomCaclulatedColumn instances. 
            This type of format delegates the formatting implementation to the custom column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomColumnFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomColumnFormat.FormatDefaultDataCellDelegate">
            <summary>
            Called when the default data cell needs to be formatted
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomColumnFormat.CreateValueDataCellViewDelegate">
            <summary>
            Called when a value data cell view needs to be created.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomColumnFormat.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Formats the default data cell.
            </summary>
            <param name="dataCell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomColumnFormat.CreateValueDataCellView(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Creates the value data cell view
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomColumnFormat.GetAutomaticHorizontalAlignment(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Gets the automatic horizontal alignment - in this case this returns Fit.
            </summary>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomColumnFormat.NCustomColumnFormatSchema">
            <summary>
            Schema associated with NTextValueFormat
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomColumnFormat.ValueFormatterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumn">
            <summary>
            Represents a grid column and serves as base class for all types of columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NColumn.ColumnClick">
            <summary>	
            Event, which occurs when the column is clicked by the user
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.CreateSortingRuleDelegate">
            <summary>	
            Event, which occurs when the column needs to create sorting rule for itself.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.CreateGroupingRuleDelegate">
            <summary>	
            Event, which occurs when the column needs to create grouping rule for itself.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.CreateHeaderContentDelegate">
            <summary>	
            Event, which occurs when the column needs to create header content for a column header, grouping column header etc.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.GetClip">
            <summary>
            Overriden to clip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateSortingRule">
            <summary>
            Creates a sorting rule for this column. 
            </summary>
            <remarks>
            This implementation raises the CreateColumnSortingRule event.
            If this event is not handled, it calls the CreateDefaultSortingRule protected method to create a default sorting rule.
            In all cases the created sorting rule is associated with this column.
            </remarks> 
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateGroupingRule">
            <summary>
            Creates a grouping rule for this column.
            This implementation raies the CreateColumnGroupingRule event.
            If the event is not handled by default it creates a grouping rule that groups by this column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.UpdateHeaderContent">
            <summary>
            Updates the content of the column header.
            By default the header content is a label displaying the column title and is automatically updated when the Title changes.
            You may need to call this method when you subcribe for the CreateColumnHeaderContent event and create a custom column header.
            This method is automatically called by Nevron, when the title property changes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateHeaderContent">
            <summary>
            Creates the header content.
            </summary>
            <remarks>
            This implementation tries to call the CreateColumnHeaderContentDelegate. 
            If it is not overriden, it calls the CreateDefaultHeaderContent method, which creates a label displaying the column title.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.Click">
            <summary>
            Performs a click on the column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.BestFit">
            <summary>
            Called by the NResizeColumnsTool, when the resize column splitter is double clicked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ShowFilterDialog">
            <summary>
            Shows the column filter dialog.
            Returns true if the dialog is successfully opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ShowPropertiesDialog">
            <summary>
            Shows the column properties dialog
            </summary>
            <param name="ownerWindow"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ShowFormatDialog">
            <summary>
            Shows the column format dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ShowConditionalFormattingDialog">
            <summary>
            Shows the column format dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.FormatDataCell(Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Formats the specified data cell to display the specified value. 
            </summary>
            <remarks>
            This implementation forwards the call to the FormatDataCell method of the format returned by the Format property.
            </remarks> 
            <param name="rowValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.FormatDefaultDataCell(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Creates the default data cell, which is used for default row measurement purposes.
            </summary>
            <remarks>
            This implementation forwards the call to the FormatDefaultDataCell method of the format returned by the Format property.
            </remarks> 
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CanEdit">
            <summary>
            Gets whether the column can be edited.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateDataCellEditor(Nevron.Nov.Grid.NDataCell)">
            <summary>
            Must override to creates a data cell editor which initially displays the specified value.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.GetRowValuesType">
            <summary>
            Gets the type associated with the row values for this column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.GetRowValuesNullable">
            <summary>
            Gets whether the row values associated with this column can be null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.GetRowValue(System.Int32)">
            <summary>
            Gets the column value for the specified data row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.SetRowValue(System.Int32,System.Object)">
            <summary>
            Sets the column value for the specified data row.
            </summary>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.OwnerGrid">
            <summary>
            Gets the grid view to which this column belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Header">
            <summary>
            Gets or sets the column header.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Format">
            <summary>
            Gets or sets the column format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Editor">
            <summary>
            Gets or sets the column editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.FormattingRules">
            <summary>
            Gets or sets the collection of formatting rules, that applies conditional formating to the column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Title">
            <summary>
            Gets or sets the title of the column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.FreezeMode">
            <summary>
            Gets or sets the column freeze mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.X">
            <summary>
            Gets the X coordinate of the column inside its collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Y">
            <summary>
            Gets the Y coordinate of the column inside its collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Width">
            <summary>
            Gets the Width of the column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Height">
            <summary>
            Gets the Height of the column 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.Bounds">
            <summary>
            Shortcut property that gets or sets the X, Y, Width and Height properties
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.DesiredWidth">
            <summary>
            Gets the desired Width of the column.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.DesiredHeight">
            <summary>
            Gets the desired Height of the column.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.WidthMode">
            <summary>
            Determines the mode in which the width of the column is determined. 
            By default set to Auto.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.FixedWidth">
            <summary>
            Determines the fixed width of the column, if WidthMode is set to Fixed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.WidthPercent">
            <summary>
            Determines the percent width of the column, if WidthMode is set to Percent.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.MinWidth">
            <summary>
            Gets or sets the minimal width of the column
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.OwnerCollection">
            <summary>
            Gets the collection that owns this column
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.IsFrozen">
            <summary>
            Gets whether this column is frozen.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.IsAutoCreated">
            <summary>
            Gets whether this column is automatically generated.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.SortingDirection">
            <summary>
            Gets the sorting direction of this column. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.HasFilters">
            <summary>
            Gets whether there are any filters associated with that column. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.DisplayIndex">
            <summary>
            Gets the display index of the column. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowSort">
            <summary>
            Gets or sets whether the user is allowed to sort the columns by clicking on them.
            By default set to true. 
            </summary>
            <remarks>
            Note that the the grid also takes into account the NGridView.AllowSortColumns property 
            so they both must be true in order for the user to be able to sort by the column. 
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowGroup">
            <summary>
            Gets or sets whether the user is allowed to group by the column by dragging it in the grouping panel.
            This property is applicable only when the column is inside a NTableView.
            </summary>
            <remarks>
            Note that the the grid also takes into account the NTableView.AllowGroupColumns property 
            so they both must be true in order for the user to be able to group by the column.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowFilter">
            <summary>
            Gets or sets whether the user is allowed to filter by the column content by clicking on the filter symbol.
            By default set to true. 
            </summary>
            <remarks>
            Note that the the grid also takes into account the NGridView.AllowFilterColumns property 
            so they both must be true in order for the user to be able to filter by the column. 
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowEdit">
            <summary>
            Gets or sets whether the user is allowed to edit the columns cells.
            By default set to true. 
            </summary>
            <remarks>
            Note that the grid also takes into account the NGridView.AllowEdit property 
            so they both must be true in order for the user to be able to edit a cell value for that column. 
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowResize">
            <summary>
            Gets or sets whether the user is allowed to resize the column.
            By default set to true. 
            </summary>
            <remarks>
            Note that the grid also takes into account the NGridView.AllowResizeColumns property 
            so they both must be true in order for the user to be able to resize a specific column. 
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowReorder">
            <summary>
            Gets or sets whether the user is allowed to reorder the column by dragging it.
            By default set to true. 
            </summary>
            <remarks>
            Note that the grid also takes into account the NGridView.AllowReorderColumns property 
            so they both must be true in order for the user to be able to reorder a specific column. 
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumn.AllowFormat">
            <summary>
            Gets or sets whether the user is allowed to format the column .
            By default set to true. 
            </summary>
            <remarks>
            Note that the grid also takes into account the NGridView.AllowFormatColumns property 
            so they both must be true in order for the user to be able to format a specific column. 
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ToggleSortingDirection">
            <summary>
            Toggles the sorting direction of the column. 
            If it is None, makes it Ascending.
            If is is Ascending, makes it Descending.
            If is is Descending, makes it None.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.GetCellXRange(Nevron.Nov.Grid.NRow,System.Double@,System.Double@)">
            <summary>
            Gets the cell X range
            </summary>
            <param name="row"></param>
            <param name="startX"></param>
            <param name="y"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.MeasureCore">
            <summary>
            Measures the height of the row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ArrangeCore">
            <summary>
            Arranges the row contents
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateDefaultSortingRule">
            <summary>
            Overridable for creating the default sorting rule for this column.
            This implementation returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateDefaultGroupingRule">
            <summary>
            Overridable for creating the default grouping rule for this column.
            This implementation returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.CreateDefaultHeaderContent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.OnTitleChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Title property has changed. 
            This implemenation calls the UpdateHeaderContent method.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.OnFreezeModeChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the FreezeMode property has changed. 
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.OnClick">
            <summary>
            Default handler for the column click event. 
            This implementaiton toggles the column sorting direction if it is allowed by the grid and the column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.ApplyConditionalFormatting(Nevron.Nov.Grid.NDataCell,Nevron.Nov.UI.NWidget,System.Object)">
            <summary>
            Applies to formatting rules to the specified dataCell and view.
            </summary>
            <param name="dataCell"></param>
            <param name="view"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.NColumnSchema">
            <summary>
            Schema associated with column
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.ColumnClickEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.CellClickEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.HeaderChild">
            <summary>
            Reference to the header child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.FormatChild">
            <summary>
            Reference to the format child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.EditorChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.FormattingRulesChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.TitleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.FreezeModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.XProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.YProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.WidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.HeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.DesiredWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.DesiredHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.WidthModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.FixedWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.WidthPercentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.MinWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.IsFrozenProperty">
            <summary>
            Reference to the IsFrozen property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.IsAutoCreatedProperty">
            <summary>
            Reference to the IsAutoCreated property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.SortingDirectionProperty">
            <summary>
            Reference to the SortingDirection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.HasFiltersProperty">
            <summary>
            Reference to the HasFilters property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.DisplayIndexProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowSortProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowFilterProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowGroupProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowReorderProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowEditProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowResizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumn.AllowFormatProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumn.NColumnDesigner">
            <summary>
            Designer associated with NColumn instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumn.NColumnDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnCollection">
            <summary>
            Represents a collection of column elements.
            The columns are accessible from the NGridView.Columns property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnCollection.HasPercentColumns">
            <summary>
            Gets whether the collection contains columns with WidthMode set to Percent.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnCollection.DragArrowSymbolsColor">
            <summary>
            Gets or sets the colos with which the column drag Arrow Symbols are filled.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnCollection.DragNoSymbolColor">
            <summary>
            Gets or sets the color with which the column drag NO symbol is filled.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnCollection.TopGridlineStroke">
            <summary>
            Gets or sets the stroke of the top gridline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnCollection.BottomGridlineStroke">
            <summary>
            Gets or sets the stroke of the bottom gridline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnCollection.VerticalGridlinesStroke">
            <summary>
            Gets or sets the stroke of the vertical gridlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.GetClip">
            <summary>
            Overriden to clip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.GetColumnByFieldName(System.String)">
            <summary>
            Gets the first data column that is bound to the specified field name.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.GetAllColumnsByFieldName(System.String)">
            <summary>
            Gets the first data column that is bound to the specified field name.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.GetColumnsInDisplayOrder">
            <summary>
            Gets the columns in their display order, which takes into account the column Left and Right freezing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.GetFirstDisplayOrderColumn">
            <summary>
            Gets the first column in the display order
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.GetLastDisplayOrderColumn">
            <summary>
            Gets the last column in the display order
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node. 
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.MeasureCore">
            <summary>
            Overriden to calculate the column collection width and height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.ArrangeCore">
            <summary>
            Arranges the columns
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.PaintGridlines(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the columns gridlines.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.OnHorizontalGridlinesChanged">
            <summary>
            Called when a metric of the horizontal gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.OnVerticalGridlinesChanged">
            <summary>
            Called when a metric of the vertical gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.OnXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the X property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.OnWindowXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowX property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.OnWindowWidthChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowWidth property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.NColumnCollectionSchema">
            <summary>
            Schema associated with NColumnCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.HasPercentColumnsProperty">
            <summary>
            Reference to the HasPercentColumns property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.TopGridlineStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.BottomGridlineStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.VerticalGridlinesStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.DragArrowSymbolsColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnCollection.DragNoSymbolColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnDraggingHeader">
            <summary>
            Represents the widget that is created when a column is dragged.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnDraggingHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnDraggingHeader.NColumnDraggingHeaderSchema">
            <summary>
            Schema associated with NColumnDraggingHeader
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnHeader">
            <summary>
            A content holder widget that represents a column header. 
            The content of the header is automatically updated by the column to which the header belongs.
            Additionally the header has Filter and Sorting buttons, which indicate or alter the column filtering and sorting rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.OwnerColumn">
            <summary>
            Gets the column that owns this header.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.FilterButton">
            <summary>
            Gets or sets the symbol box that represents the column filter.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.SortingButton">
            <summary>
            Gets or sets the symbol box that represents the column sorting direction.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.Spacing">
            <summary>
            Gets or sets the spacing between the content and the filter and sorting boxes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.IsPressed">
            <summary>
            Gets whether the header is currently pressed.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.ShowSortingButton">
            <summary>
            Gets or sets whether the sorting button must be shown.
            Automatically updated by Nevron depending on the allowed Column and Grid sorting.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnHeader.ShowFilterButton">
            <summary>
            Gets or sets whether the filter button must be shown.
            Automatically updated by Nevron depending on the allowed Column and Grid filtering.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test region for this widget. 
            The returned region is used in both point and region widget hit tests.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.OnShowSortingButtonChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the ShowSortingButton property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.OnShowFilterButtonChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the value of the ShowFilterButton property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.OnSortingButtonClick">
            <summary>
            Called when the sorting button is clicked. 
            This implementation toggles the sorting direction of the column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnHeader.OnFilterButtonClick">
            <summary>
            Called when the filter button is clicked.
            This implementation shows the column filter dialog.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.NColumnHeaderSchema">
            <summary>
            Schema associated with NColumnHeader.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.SortingButtonChild">
            <summary>
            Reference to the SortingButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.FilterButtonChild">
            <summary>
            Reference to the FilterButtonChild child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.IsPressedProperty">
            <summary>
            Reference to the IsPressed property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.ShowSortingButtonProperty">
            <summary>
            Reference to the ShowSortingButton property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnHeader.ShowFilterButtonProperty">
            <summary>
            Reference to the ShowFilterButton property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnClearFiltersCommandAction">
            <summary>
            Performs the clear column filters command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearFiltersCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearFiltersCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearFiltersCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearFiltersCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnClearFiltersCommandAction.NColumnClearFiltersCommandActionSchema">
            <summary>
            Schema associated with NColumnClearFiltersCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnClearGroupingCommandAction">
            <summary>
            Performs the clear column grouping command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearGroupingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearGroupingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearGroupingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearGroupingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnClearGroupingCommandAction.NColumnClearGroupingCommandActionSchema">
            <summary>
            Schema associated with NColumnClearGroupingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnClearSortingCommandAction">
            <summary>
            Performs the clear column sorting command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearSortingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearSortingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearSortingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnClearSortingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnClearSortingCommandAction.NColumnClearSortingCommandActionSchema">
            <summary>
            Schema associated with NColumnClearSortingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnConditionalFormattingCommandAction">
            <summary>
            Performs the column format command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnConditionalFormattingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnConditionalFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnConditionalFormattingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnConditionalFormattingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnConditionalFormattingCommandAction.NColumnConditionalFormattingCommandActionSchema">
            <summary>
            Schema associated with NColumnConditionalFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnFilterCommandAction">
            <summary>
            Performs the column filter command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFilterCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFilterCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFilterCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFilterCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnFilterCommandAction.NColumnFilterCommandActionSchema">
            <summary>
            Schema associated with NColumnFilterCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnFormatCommandAction">
            <summary>
            Performs the column format command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFormatCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFormatCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFormatCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnFormatCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnFormatCommandAction.NColumnFormatCommandActionSchema">
            <summary>
            Schema associated with NColumnFormatCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnGroupByCommandAction">
            <summary>
            Performs the group by column command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnGroupByCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnGroupByCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnGroupByCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnGroupByCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnGroupByCommandAction.NColumnGroupByCommandActionSchema">
            <summary>
            Schema associated with NColumnGroupByCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnPropertiesCommandAction">
            <summary>
            Performs the column properties command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnPropertiesCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnPropertiesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnPropertiesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnPropertiesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnPropertiesCommandAction.NColumnPropertiesCommandActionSchema">
            <summary>
            Schema associated with NColumnPropertiesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction">
            <summary>
            Performs the Sort Ascending or Sort Descending column actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="ascending"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.Ascending">
            <summary>
            Gets or sets whether the column must be sorted in Ascending or Descending order.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.NColumnSortingCommandActionSchema">
            <summary>
            Schema associated with NColumnSortingCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NColumnSortingCommandAction.AscendingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NCopyCommandAction">
            <summary>
            Copies the selected text to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCopyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCopyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCopyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCopyCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the copy command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NCopyCommandAction.NCopyCommandActionSchema">
            <summary>
            Schema associated with NCopyCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NCutCommandAction">
            <summary>
            Cuts the selected text to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCutCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCutCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCutCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NCutCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the cut command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NCutCommandAction.NCutCommandActionSchema">
            <summary>
            Schema associated with NCutCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NDeleteRowsCommandAction">
            <summary>
            Deletes the currently selected rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NDeleteRowsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NDeleteRowsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NDeleteRowsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NDeleteRowsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the cut command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NDeleteRowsCommandAction.NDeleteRowsCommandActionSchema">
            <summary>
            Schema associated with NDeleteRowsCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NPasteCommandAction">
            <summary>
            Pastes the clipboard content inside the current cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NPasteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NPasteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NPasteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NPasteCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the paste command.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NPasteCommandAction.NPasteCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NGridPropertiesCommandAction">
            <summary>
            Performs the grid properties command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridPropertiesCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridPropertiesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridPropertiesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridPropertiesCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NGridPropertiesCommandAction.NGridPropertiesCommandActionSchema">
            <summary>
            Schema associated with NGridPropertiesCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction">
            <summary>
            Serves as base for all grid command actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.#ctor(Nevron.Nov.Grid.ENSelectionNavigationCommand)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.Command">
            <summary>
            Gets or sets the navigation command executed by this command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Performs the command action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.NSelectionNavigationCommandActionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NSelectionNavigationCommandAction.CommandProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NGridViewCommandAction">
            <summary>
            Serves as base for all grid view command actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewCommandAction.GetGridView(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the grid view for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewCommandAction.GetGrid(Nevron.Nov.Dom.NNode)">
            <summary>
            Safely gets the grid view for the specified command target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewCommandAction.GetCurrentColumn(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.Commands.NGridViewCommandAction.IsEditAction">
            <summary>
            Returns true if this is an edit action (will modify the control content)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NGridViewCommandAction.NGridViewCommandActionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NGridViewToggleCommandAction">
            <summary>
            Serves as base for all grid view toggle command actions
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewToggleCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NGridViewToggleCommandAction.IsToggleAction">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NGridViewToggleCommandAction.NGridViewToggleCommandActionSchema">
            <summary>
            Schema associated with NGridViewToggleCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction">
            <summary>
            Represents a toggle command that toggles the visibility of the grid columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NToggleColumnsCommandAction.NToggleColumnsCommandActionSchema">
            <summary>
            Schema associated with NToggleColumnsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction">
            <summary>
            Represents a toggle command that toggles the visibility of the NTableGrid GroupingPanel.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NToggleGroupingPanelCommandAction.NToggleGroupingPanelCommandActionSchema">
            <summary>
            Schema associated with NToggleGroupingPanelCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction">
            <summary>
            Represents a toggle command that toggles the visibility of the grid row headers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Commands.NToggleRowHeadersCommandAction.NToggleRowHeadersCommandActionSchema">
            <summary>
            Schema associated with NToggleRowHeadersCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridContextMenu">
            <summary>
            Represents a context menu factory and serves as base class NTableGridContextMenuFactory and NTreeGridContextMenuFactory.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.CurrentColumn">
            <summary>
            Gets the current column for which a context menu is contructed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.ShowGridMenu">
            <summary>
            Gets or sets whether grid context menu is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.ShowColumnMenu">
            <summary>
            Gets or sets whether column context menu is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.ShowDataCellMenu">
            <summary>
            Gets or sets whether data cell context menu is displayed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.ShowRowMenu">
            <summary>
            Gets or sets whether the row menu must be shown.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.OwnerGridView">
            <summary>
            Gets the grid view owning this factory
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridContextMenu.OwnerGrid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.CanShowContextMenu(Nevron.Nov.Dom.NElement)">
            <summary>
            Determines whether the context menu can be shown for the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.CreateContextWidget(Nevron.Nov.Dom.NElement)">
            <summary>
            Overriden to create the context widget for the specified element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.BuildContextMenu(Nevron.Nov.Dom.NElement,Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Builds a context menu for the specified element.
            </summary>
            <param name="element"></param>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.BuildDataCellMenu(Nevron.Nov.Grid.NDataCell,Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Tries to build a data cell menu.
            </summary>
            <param name="dataCell"></param>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.BuildColumnMenu(Nevron.Nov.Grid.NColumn,Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Tries to build a column menu.
            </summary>
            <param name="column"></param>
            <param name="menu"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.BuildRowMenu(Nevron.Nov.Grid.NRow,Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Builds a row menu.
            </summary>
            <param name="row"></param>
            <param name="menu"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.BuildGridMenu(Nevron.Nov.UI.NMenu,Nevron.Nov.UI.NContextMenuBuilder)">
            <summary>
            Builds a menu for the grid.
            </summary>
            <param name="menu"></param>
            <param name="grid"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.AddColumnSortingCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.Grid.NColumn)">
            <summary>
            Builds the colunm Sorting commands.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.AddColumnFilteringCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.Grid.NColumn)">
            <summary>
            Adds the column filter commands
            </summary>
            <param name="menu"></param>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.AddColumnGroupingCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.Grid.NColumn)">
            <summary>
            
            </summary>
            <param name="menu"></param>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.AddColumnFormatAndPropertiesCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.Grid.NColumn)">
            <summary>
            Adds the column common commands - Filter, Format, Properties
            </summary>
            <param name="menu"></param>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridContextMenu.AddViewCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            Adds the View commands to the specified menu.
            </summary>
            <param name="menu"></param>
            <param name="column"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridContextMenu.NGridContextMenuSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridContextMenu.ShowGridMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridContextMenu.ShowColumnMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridContextMenu.ShowDataCellMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridContextMenu.ShowRowMenuProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTableGridContextMenu">
            <summary>
            Represents the context menu factory associated with the NTableGrid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridContextMenu.AddColumnGroupingCommands(Nevron.Nov.UI.NMenu,Nevron.Nov.Grid.NColumn)">
            <summary>
            
            </summary>
            <param name="menu"></param>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridContextMenu.AddViewCommands(Nevron.Nov.UI.NMenu)">
            <summary>
            
            </summary>
            <param name="menu"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGridContextMenu.NTableGridContextMenuSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeGridContextMenu">
            <summary>
            Represents the context menu factory associated with the NTreeGrid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGridContextMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGridContextMenu.NTreeGridContextMenuSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFilteringRule">
            <summary>
            Represents a grid filter rule. 
            A filter rule is a collection of row conditions that are combined with AND or OR logical operator.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRule.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.ENRowConditionOperator,System.String)">
            <summary>
            Creates a new filter rule associated with the specified column that has a comparison row condition with the specified operator and value.
            </summary>
            <param name="column"></param>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRule.#ctor(Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Creates a new filter rule associated with the specified row condition.
            </summary>
            <param name="rowCondition"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRule.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Creates a new filter rule associated with the specified column and row condition.
            </summary>
            <param name="column"></param>
            <param name="rowCondition"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRule.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NFilteringRule.RowCondition">
            <summary>
            Gets or set the row condition that each row from the data source must match in order to be displayed in a grid.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFilteringRule.NFilteringRuleSchema">
            <summary>
            Schema associated with NFilteringRule
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFilteringRule.RowConditionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFilteringRule.NFilteringRuleDesigner">
            <summary>
            Designer associated with NFilteringRule instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRule.NFilteringRuleDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFilteringRuleCollection">
            <summary>
            Represents the NGrid collection of filter rules.
            In order for a record to be displayed by the grid, the record must match all filter rules contained in this collection.
            A reference to this collection can be obtained by the NGrid.FilterRules property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFilteringRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFilteringRuleCollection.NFilteringRuleCollectionSchema">
            <summary>
            Schema associated with NFilteringRuleCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingRule">
            <summary>
            Represents a rule by which a NTableGrid groups the rows into group rows.
            Grouping rules are contained in the NTableGrid.GroupingRules collection. 
            When there are multiple rules in this collection the rows are first grouped by the first rule, then by the second and so on (multilevel grouping).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.#ctor(Nevron.Nov.Grid.NColumn)">
            <summary>
            Initializes a new rule associated with the specified column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Initializes a new rule associated with the specified column
            </summary>
            <param name="column"></param>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.#ctor(Nevron.Nov.Grid.NRowValue)">
            <summary>
            Initializes a new rule associated with the specified row value provider
            </summary>
            <param name="rowValue"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.#ctor(Nevron.Nov.Grid.NRowValue,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Initializes a new rule associated with the specified row value provider
            </summary>
            <param name="rowValue"></param>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.NRowValue,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Initializes a new rule associated with the specified column and provider
            </summary>
            <param name="column"></param>
            <param name="rowValue"></param>
            <param name="sortingDirection"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.CreateGroupingHeaderContentDelegate">
            <summary>	
            Delegate which is called when the grouping rule needs to create a grouping header content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.CreateGroupRowCellsDelegate">
            <summary>	
            Delegate which is called when the grouping rule needs to create group row cells for a group row
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.CreateHeaderSummaryRowsDelegate">
            <summary>	
            Delegate which is called when the grouping rule needs to create header summary rows for a specific group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.CreateFooterSummaryRowsDelegate">
            <summary>	
            Delegate which is called when the grouping rule needs to create footer summary rows for a specific group.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRule.SortingDirection">
            <summary>
            Gets or sets the direction in which to sort the groups
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRule.DefaultGroupRowHeight">
            <summary>
            Gets or sets the default group row height value.
            By default this property is set to Double.NaN, meaning that the grid will estimate the default row height based on a measurement of the group header. 
            It is recommended that you set this property before you bind/populate the grid with data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRule.DefaultGroupRowMeasure">
            <summary>
            Gets the element that performs the default group row height measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.ToggleSortingDirection">
            <summary>
            Toggles the sorting direction of the grouping rule
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.GetDefaultGroupRowHeight">
            <summary>
            Gets the default group row height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.CreateDefaultGroupRowHeightMeasureCells(Nevron.Nov.Grid.NGroupRow)">
            <summary>
            Creates the default group row header content.
            </summary>
            <param name="groupRow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.CreateDefaultGroupingHeaderContent">
            <summary>
            Creates the default grouping header content
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.NGroupingRuleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.DefaultGroupRowMeasureChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.SortingDirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRule.DefaultGroupRowHeightProperty">
            <summary>
            Reference to the DefaultGroupRowHeightMeasure property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.FromFormula(Nevron.Nov.Grid.NColumn,System.String)">
            <summary>
            Helper that creates a new NGroupingRule for the specified formula.
            </summary>
            <param name="column"></param>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.FromFormula(Nevron.Nov.Grid.NColumn,System.String,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Helper that creates a new NGroupingRule for the specified formula.
            </summary>
            <param name="column"></param>
            <param name="formula"></param>
            <param name="sortingDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.FromFieldName(Nevron.Nov.Grid.NColumn,System.String)">
            <summary>
            Helper that creates a new NGroupingRule for the specified field name.
            </summary>
            <param name="column"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.FromFieldName(Nevron.Nov.Grid.NColumn,System.String,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Helper that creates a new NGroupingRule for the specified field name.
            </summary>
            <param name="column"></param>
            <param name="fieldName"></param>
            <param name="sortingDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.FromColumn(Nevron.Nov.Grid.NColumn)">
            <summary>
            Helper that creates a new NGroupingRule that groups by the specified column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRule.FromColumn(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Helper that creates a new NGroupingRule that groups by the specified column
            </summary>
            <param name="column"></param>
            <param name="sortingDirection"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingRuleCollection">
            <summary>
            Represents the NTableGrid collection of grouping rules.
            When there are multiple rules in this collection the rows are first grouped by the first rule, then by the second and so on (multilevel grouping).
            A reference to this collection can be obtained by the NTableGrid.GroupingRules property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingRuleCollection.NGroupingRuleCollectionSchema">
            <summary>
            Schema associated with NGroupingRuleCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridRule`1">
            <summary>
            Serves as base class for Filtering, Sorting and Grouping rules of grids.
            </summary>
            <remarks>
            <para>
            Filtering, Sorting and Grouping rules can be associated with a grid column.
            Because Filtering, Sorting and Grouping rules operate on running row values, the column serves as default provider for a running row value.
            </para>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRule`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRule`1.#ctor(Nevron.Nov.Grid.NColumn)">
            <summary>
            Initializes a new rule associated with the specified column
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridRule`1.OwnerGrid">
            <summary>
            Gets the data view that owns this rule
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridRule`1.Column">
            <summary>
            Gets or sets the column which is associated with this rule. 
            The association of a column with a grid rule is important when you need to later discover the rules that are somehow linked with a specific column.
            The column association is automatically performed for sorting and grouping rules that are created by columns (in result to user actions).
            Also if RowValue is not specified, by default the rule will get row values from the associated column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridRule`1.ColumnRef">
            <summary>
            Gets or sets the column which is associated with this rule. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRule`1.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRule`1.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            Called when an element attribute has changed.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridRule`1.NGridRuleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridRule`1.ColumnRefProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridRule`1.NGridRuleDesigner">
            <summary>
            Designer associated with NGridRule
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRule`1.NGridRuleDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridRuleCollection`2">
            <summary>
            Represents a collection of grid rule instances. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRuleCollection`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridRuleCollection`2.OwnerGrid">
            <summary>
            Gets the data view that owns this collection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRuleCollection`2.GetRuleByColumn(Nevron.Nov.Grid.NColumn)">
            <summary>
            Gets the first rule whose Column property references the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRuleCollection`2.GetAllRulesByColumn(Nevron.Nov.Grid.NColumn)">
            <summary>
            Gets all rules that that are associated with the specified column.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRuleCollection`2.OnChanged(Nevron.Nov.Dom.NChangeData)">
            <summary>
            Called when an arbitrary mutation has occured in this node
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridRuleCollection`2.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            Called when an element attribute has changed.
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridRuleCollection`2.NGridRuleCollectionSchema">
            <summary>
            Schema associated with  NGridRuleCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowValueGridRule`1">
            <summary>
            Serves as base class for Sorting and Grouping rules of grids.
            </summary>
            <remarks>
            <para>
            Sorting and Grouping rules operate on dynamically generated row values. 
            That is why this grid rule allows the specification of a custom NRowValue, which can provide a running row value for custom Sorting and Grouping.
            </para>
            <para>
            </para>
            
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueGridRule`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueGridRule`1.#ctor(Nevron.Nov.Grid.NColumn)">
            <summary>
            Initializes a new rule associated with the specified column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueGridRule`1.#ctor(Nevron.Nov.Grid.NRowValue)">
            <summary>
            Initializes a new rule associated with the specified row value provider
            </summary>
            <param name="rowValue"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueGridRule`1.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.NRowValue)">
            <summary>
            Initializes a new rule associated with the specified column and provider
            </summary>
            <param name="column"></param>
            <param name="rowValue"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowValueGridRule`1.RowValue">
            <summary>
            Gets or sets the row value that this rule must use.
            If not specified the rule will try to use a row value provided by the associated column.
            You need to set this property only if the grid rule is not associated with a column (i.e. Column is null), 
            or want to explicitly change the row value on which the rule operates (for example sort, group or filter by formula).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowValueGridRule`1.NRowValueGridRuleSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowValueGridRule`1.RowValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowValueGridRule`1.NRowValueGridRuleDesigner">
            <summary>
            Designer associated with NGridRule
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueGridRule`1.NRowValueGridRuleDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSortingRule">
            <summary>
            Represents a grid sorting rule that sorts records in Ascending or Descending fashion.
            Sorting rules are contained in the NGrid.SortingRules collection. 
            When there are multiple rules in this collection the rows are first sorted by the first rule, then by the second and so on (multilevel sorting).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.#ctor(Nevron.Nov.Grid.NColumn)">
            <summary>
            Initializes a new rule associated with the specified column
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Initializes a new rule associated with the specified column
            </summary>
            <param name="column"></param>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.#ctor(Nevron.Nov.Grid.NRowValue,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Initializes a new rule associated with the specified row value provider
            </summary>
            <param name="rowValue"></param>
            <param name="sortingDirection"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.#ctor(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.NRowValue,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Initializes a new rule associated with the specified column and provider
            </summary>
            <param name="column"></param>
            <param name="rowValue"></param>
            <param name="sortingDirection"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NSortingRule.SortingDirection">
            <summary>
            Gets or sets  the direction in which to sort
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSortingRule.NSortingRuleSchema">
            <summary>
            Reference to the NSortingRule
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSortingRule.SortingDirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.FromFormula(Nevron.Nov.Grid.NColumn,System.String)">
            <summary>
            Helper that creates a new NSortingRule for the specified formula.
            </summary>
            <param name="column"></param>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.FromFormula(Nevron.Nov.Grid.NColumn,System.String,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Helper that creates a new NSortingRule for the specified formula.
            </summary>
            <param name="column"></param>
            <param name="formula"></param>
            <param name="sortingDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.FromFieldName(Nevron.Nov.Grid.NColumn,System.String)">
            <summary>
            Helper that creates a new NSortingRule for the specified field name.
            </summary>
            <param name="column"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.FromFieldName(Nevron.Nov.Grid.NColumn,System.String,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Helper that creates a new NSortingRule for the specified field name.
            </summary>
            <param name="column"></param>
            <param name="fieldName"></param>
            <param name="sortingDirection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.FromColumn(Nevron.Nov.Grid.NColumn)">
            <summary>
            Helper that creates a new NSortingRule that groups by the specified column
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRule.FromColumn(Nevron.Nov.Grid.NColumn,Nevron.Nov.Grid.ENSortingDirection)">
            <summary>
            Helper that creates a new NSortingRule that groups by the specified column
            </summary>
            <param name="column"></param>
            <param name="sortingDirection"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.NSortingRuleCollection">
            <summary>
            Represents the NGrid collection of sorting rules.
            When there are multiple rules in this collection the rows are first sorted by the first rule, then by the second and so on (multilevel sorting).
            A reference to this collection can be obtained by the NGrid.SortingRules property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSortingRuleCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSortingRuleCollection.NSortingRuleCollectionSchema">
            <summary>
            Reference to the NSortingRuleCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENColumnFreezeMode">
            <summary>
            Enumarates the way in which 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnFreezeMode.None">
            <summary>
            The column is not pinned.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnFreezeMode.Left">
            <summary>
            The column is pinned to the left.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnFreezeMode.Right">
            <summary>
            The column is pinned to the right.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENFillDeclarationMode">
            <summary>
            Enumerates the fill declaration modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENFillDeclarationMode.Uniform">
            <summary>
            Uses a uniform filling
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENFillDeclarationMode.TwoColorGradient">
            <summary>
            Uses a two color gradient.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENFillDeclarationMode.ThreeColorGradient">
            <summary>
            Uses a three color gradient.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENColorGradientType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColorGradientType.TwoColor">
            <summary>
            Two color gradient
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColorGradientType.ThreeColor">
            <summary>
            Threee color gradient
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENRowConditionOperator">
            <summary>
            The operators that can be used in a operator row condition.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.Equals">
            <summary>
            Returns true if the current row value is Equal to the Value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.LessThan">
            <summary>
            Returns true if the current row value is Less Than the Value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.GreaterThan">
            <summary>
            Returns true if the current row value is Greater Than the Value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.LessThanOrEqual">
            <summary>
            Returns true if the current row value is Less Than Or Equal to the Value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.GreaterThanOrEqual">
            <summary>
            Returns true if the current row value is Greater Than Or Equal to the Value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.StartsWith">
            <summary>
            Returns true if the string representation of the row value begins with the specified Value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.EndsWith">
            <summary>
            Returns true if the string representation of the row value ends with the specified value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.Contains">
            <summary>
            Returns true if the string representation of the row value contains the specified value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.ContainedIn">
            <summary>
            Returns true if the string representation of the row value is contained in the specified value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.Like">
            <summary>
            Returns true if the string representation of the row value is like the specified regular expression.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.IsEmpty">
            <summary>
            Returns true if the string representation of the row value is empty (string of zero lenght).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENRowConditionOperator.IsNull">
            <summary>
            Returns true if the the row value is null.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode.RowBeginX">
            <summary>
            The begin X position is equal to the row begin X position.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode.Percent">
            <summary>
            The begin X position is expressed as a percentage of the row width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode.ColumnBegin">
            <summary>
            The begin X position is equal to a column begin for the row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode.ColumnEnd">
            <summary>
            The begin X position is equal to a column end for the row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode.PrevCellEndX">
            <summary>
            The begin X position is equal to the previous cell EndX.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellBeginXPositionMode.AnchorToEndX">
            <summary>
            The begin X position is equal to the EndX position minus the desired width of the cell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENSpanCellEndXPositionMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellEndXPositionMode.RowEndX">
            <summary>
            The end X position is equal to the row end X position.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellEndXPositionMode.Percent">
            <summary>
            The end X position is expressed as a percentage of the row width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellEndXPositionMode.ColumnBegin">
            <summary>
            The end X position is equal to a column begin for the row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellEndXPositionMode.ColumnEnd">
            <summary>
            The end X position is equal to a column end for the row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellEndXPositionMode.NextCellBeginX">
            <summary>
            The end X position is equal to the next cell begin X position.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSpanCellEndXPositionMode.AnchorToBeginX">
            <summary>
            The end X position is equal to the BeginX position plus the desired width of the cell.
            </summary>        
        </member>
        <member name="T:Nevron.Nov.Grid.ENSortingDirection">
            <summary>
            Defines the possible sorting directions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSortingDirection.Ascending">
            <summary>
            Ascending (lesser to larger) direction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSortingDirection.Descending">
            <summary>
            Descending (larger to lesser) direction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENColumnSortingDirection">
            <summary>
            Enumerates the possible column sorting directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnSortingDirection.None">
            <summary>
            The data is not sorted by this column
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnSortingDirection.Ascending">
            <summary>
            The data is sorted by this column in ascending order.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnSortingDirection.Descending">
            <summary>
            The data is sorted by this column in descending order.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENColumnWidthMode">
            <summary>
            Enumerates the column width modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnWidthMode.Auto">
            <summary>
            The size is based on the contents of both the cells and the column header (the default)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnWidthMode.Fixed">
            <summary>
            The size is a fixed value defined by the FixedWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnWidthMode.SizeToCells">
            <summary>
            The size is based on the contents of the cells.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnWidthMode.SizeToHeader">
            <summary>
            The size is based on the contents of the column header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENColumnWidthMode.Percent">
            <summary>
            The size is a percent proportion of available space.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENGridlinesVisibility">
            <summary>
            Enumerates the possible modes for gridlines visibility
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENGridlinesVisibility.None">
            <summary>
            No gridlines are displayed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENGridlinesVisibility.Horizontal">
            <summary>
            Only horizontal gridlines are displayed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENGridlinesVisibility.Vertical">
            <summary>
            Only vertical gridlines are displayed
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENGridlinesVisibility.Both">
            <summary>
            Both horizontal and vertical gridlines are displayed.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENSelectionNavigationCommand">
            <summary>
            Enumerates the selection navigation commands.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSelectionNavigationCommand.MoveLeft">
            <summary>
            Changes the current cell to the cell that is on the left of the current one.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSelectionNavigationCommand.MoveRight">
            <summary>
            Changes the current cell to the cell that is on the right of the current one.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSelectionNavigationCommand.MoveUp">
            <summary>
            Changes the current row to prev scrollable row and tries to preserve the current cell column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSelectionNavigationCommand.MoveDown">
            <summary>
            Changes the current row to next scrollable row and tries to preserve the current cell column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSelectionNavigationCommand.MovePageUp">
            <summary>
            Changes the current row to a one page up scrollable row from the first visible row and tries to preserve the current cell column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENSelectionNavigationCommand.MovePageDown">
            <summary>
            Changes the current row to a one page down scrollable row from the last visible row and tries to preserve the current cell column.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENDataCellViewHorizontalAlignment">
            <summary>
            Enumerates the possible horizontal alignments of the data cells views inside the data cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewHorizontalAlignment.Automatic">
            <summary>
            The format uses a value specific alignment that is appropriate for the current value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewHorizontalAlignment.Left">
            <summary>
            The view is left aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewHorizontalAlignment.Center">
            <summary>
            The view is center aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewHorizontalAlignment.Right">
            <summary>
            The view is right aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewHorizontalAlignment.Fit">
            <summary>
            The view is made to fill the data cell horizontally.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.ENDataCellViewVerticalAlignment">
            <summary>
            Enumerates the possible vertical alignments of the data cells views inside the data cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewVerticalAlignment.Automatic">
            <summary>
            The format uses a value specific alignment that is appropriate for the current value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewVerticalAlignment.Top">
            <summary>
            The view is top aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewVerticalAlignment.Center">
            <summary>
            The view is middle aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewVerticalAlignment.Bottom">
            <summary>
            The view is bottom aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.ENDataCellViewVerticalAlignment.Fit">
            <summary>
            The view is made to fill the data cell vertically.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomCalculatedColumnGetRowValueArgs`1">
            <summary>
            Represents the arguments associated with NCustomCalculatedColumn.GetRowValueDelegate.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomCalculatedColumnGetRowValueArgs`1.Column">
            <summary>
            Gets the column for which the event is raised.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomCalculatedColumnGetRowValueArgs`1.RowIndex">
            <summary>
            Gets the row index for which the event is raised.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomCalculatedColumnGetRowValueArgs`1.Grid">
            <summary>
            Gets the grid to which the column belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomCalculatedColumnGetRowValueArgs`1.DataSource">
            <summary>
            Gets the data source associated with the event
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomDetailCreateWidgetArgs">
            <summary>
            Represents the arguments associated with NCustomDetail.CreateWidgetDelegate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetailCreateWidgetArgs.#ctor(Nevron.Nov.Grid.NCustomDetail,Nevron.Nov.Data.NDataSource,System.Int32)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="detail"></param>
            <param name="dataSource"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailCreateWidgetArgs.CustomDetail">
            <summary>
            Gets the custom detail for which the widget is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailCreateWidgetArgs.DataSource">
            <summary>
            Gets the data source for which the widget detail is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailCreateWidgetArgs.RowIndex">
            <summary>
            Gets the data source row index for which the widget is created.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs">
            <summary>
            Represents the arguments associated with NCustomDetailsPresenter.CreateDetailRowCellsDelegate
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs.#ctor(Nevron.Nov.Grid.NCustomDetailsPresenter,Nevron.Nov.Grid.NDetailCollection,Nevron.Nov.Data.NDataSource,System.Int32,System.Int32)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="customDetailsPresenter"></param>
            <param name="detailCollection"></param>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <param name="detailRowIndex"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs.CustomDetailPresenter">
            <summary>
            Gets the custom detail for which the widget is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs.DetailCollection">
            <summary>
            Gets the data source for which the widget detail is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs.MasterDataSource">
            <summary>
            Gets the master record data source
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs.MasterRowIndex">
            <summary>
            Gets the master record index in the master data source
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterCreateDetailRowCellsArgs.DetailRowIndex">
            <summary>
            Gets the detail row index for which data cells are created.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomDetailsPresenterGetDetailsRowCountArgs">
            <summary>
            Represents the arguments associated with NCustomDetailsPresenter.GetDetailsRowCountDelegate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetailsPresenterGetDetailsRowCountArgs.#ctor(Nevron.Nov.Grid.NCustomDetailsPresenter,Nevron.Nov.Grid.NDetailCollection)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="customDetailsPresenter"></param>
            <param name="detailCollection"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterGetDetailsRowCountArgs.CustomDetailPresenter">
            <summary>
            Gets the custom detail for which the widget is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomDetailsPresenterGetDetailsRowCountArgs.DetailCollection">
            <summary>
            Gets the data source for which the widget detail is created.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomRowConditionRowPredicateArgs">
            <summary>
            Arguments passed to the NCustomRowCondition.RowPredicateDelegate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowConditionRowPredicateArgs.Grid">
            <summary>
            Gets the grid to which the predicate belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowConditionRowPredicateArgs.DataSource">
            <summary>
            Gets the data source from which the predicate must return a value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowConditionRowPredicateArgs.Row">
            <summary>
            Gets the data source row for which to predicate must return a value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomRowValueGetRowValueArgs`1">
            <summary>
            Arguments passed to the NCustomRowValue.GetRowValueDelegate
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowValueGetRowValueArgs`1.RowValue">
            <summary>
            Gets the RowValue for which these args are used.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowValueGetRowValueArgs`1.Grid">
            <summary>
            Gets the grid to which the predicate belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowValueGetRowValueArgs`1.DataSource">
            <summary>
            Gets the data source from which the predicate must return a value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowValueGetRowValueArgs`1.Row">
            <summary>
            Gets the data source row for which to predicate must return a value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingRuleCreateGroupRowCellsArgs">
            <summary>
            Represents the arguments associated with the NGroupingRule.CreateGroupRowCellsDelegate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRuleCreateGroupRowCellsArgs.#ctor(Nevron.Nov.Grid.NTableGrid,Nevron.Nov.Grid.NGroupingRule,Nevron.Nov.Grid.NGroupRow)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="grid"></param>
            <param name="groupingRule"></param>
            <param name="groupRow"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateGroupRowCellsArgs.GroupingRule">
            <summary>
            Gets the grouping rule for which cells are created
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateGroupRowCellsArgs.GroupRow">
            <summary>
            Gets the group row for whcih cells are created
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateGroupRowCellsArgs.Grid">
            <summary>
            Gets the grid in which the group row will be added.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateGroupRowCellsArgs.DataSource">
            <summary>
            Gets the data source of the grid
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingRuleCreateSummaryRowsArgs">
            <summary>
            Represents the arguments associated with the NGroupingRule.CreateSummaryRowsDelegate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingRuleCreateSummaryRowsArgs.#ctor(Nevron.Nov.Grid.NTableGrid,Nevron.Nov.Grid.NGroupingRule,Nevron.Nov.Grid.NGroupRow)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="grid"></param>
            <param name="groupingRule"></param>
            <param name="groupRow"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateSummaryRowsArgs.GroupingRule">
            <summary>
            Gets the grouping rule for which cells are created
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateSummaryRowsArgs.GroupRow">
            <summary>
            Gets the group row for whcih cells are created
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateSummaryRowsArgs.Grid">
            <summary>
            Gets the grid in which the group row will be added.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingRuleCreateSummaryRowsArgs.DataSource">
            <summary>
            Gets the data source of the grid
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NAutoCreateColumnEventArgs">
            <summary>
            Represents the event arguments associated with NGrid.AutoCreateColumnEvent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NAutoCreateColumnEventArgs.#ctor(Nevron.Nov.Grid.NGrid,System.Int32,Nevron.Nov.Grid.NDataColumn)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="grid"></param>
            <param name="fieldIndex"></param>
            <param name="dataColumn"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NAutoCreateColumnEventArgs.Grid">
            <summary>
            Gets the grid for which a column needs to be created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NAutoCreateColumnEventArgs.FieldIndex">
            <summary>
            Gets the index of the field for which the column is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NAutoCreateColumnEventArgs.FieldInfo">
            <summary>
            Gets information about the field for which the column is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NAutoCreateColumnEventArgs.DataColumn">
            <summary>
            Gets or sets the data column that will be added to the grid columns collection.
            Setting this property cancels the event (handles it) and stops the propagation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCreateDataCellViewEventArgs">
            <summary>
            Represents the event arguments associated with NColumnFormat.CreateCellView
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.#ctor(Nevron.Nov.Grid.NColumnFormat,Nevron.Nov.Grid.NDataCell,System.Object)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="columnFormat"></param>
            <param name="dataCell"></param>
            <param name="rowValue"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.ColumnFormat">
            <summary>
            Gets the column format for which a data cell view for a data cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.Column">
            <summary>
            Gets the column for which a data cell view is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.DataCell">
            <summary>
            Gets the data cell for which a view is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.RowIndex">
            <summary>
            Gets the row index for which a view is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.RowValue">
            <summary>
            Gets the row value, which the data cell view must represent.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCreateDataCellViewEventArgs.DataCellView">
            <summary>
            Gets or sets the cell view that will be inserted in the data cell.
            Setting this property cancels the event (handles it) and stops the propagation.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCurrentCellChangedEventArgs">
            <summary>
            Represents the event arguments associated with selection current cell changes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCurrentCellChangedEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Grid.NCell,Nevron.Nov.Grid.NCell)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="newCurrentCell"></param>
            <param name="oldCurrentCell"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCurrentCellChangedEventArgs.NewCurrentCell">
            <summary>
            Gets the new current cell 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCurrentCellChangedEventArgs.OldCurrentCell">
            <summary>
            Gets the old current cell 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCurrentRowChangedEventArgs">
            <summary>
            Represents the event arguments associated with selection current row changes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCurrentRowChangedEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Grid.NRow,Nevron.Nov.Grid.NRow)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="newCurrentRow"></param>
            <param name="oldCurrentRow"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NCurrentRowChangedEventArgs.NewCurrentRow">
            <summary>
            Gets the new row current row
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCurrentRowChangedEventArgs.OldCurrentRow">
            <summary>
            Gets the old row current row
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFrozenColumnsSplitter">
            <summary>
            Represents the frozen rows splitter of a NGridView
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFrozenColumnsSplitter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFrozenColumnsSplitter.NFrozenColumnsSplitterSchema">
            <summary>
            Schema associated with NFrozenColumnsSplitter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFrozenRowsSplitter">
            <summary>
            Represents the frozen rows splitter of a NGridView
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFrozenRowsSplitter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFrozenRowsSplitter.NFrozenRowsSplitterSchema">
            <summary>
            Schema associated with NFrozenRowsSplitter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFrozenSplitter">
            <summary>
            Serves as base class for for frozen rows and columns splitters.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFrozenSplitter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFrozenSplitter.NFrozenSplitterSchema">
            <summary>
            Schema associated with NFrozenSplitter
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Formats.NGridFormat`2">
            <summary>
            The base of all grid formats.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Formats.NGridFormat`2.NevronBinary">
            <summary>
            Represents the Nevron Binary grid format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Formats.NGridFormat`2.NevronXml">
            <summary>
            Represents the Nevron XML grid format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Formats.NGridFormatRegistry`2">
            <summary>
            A document format registry for Grid Formats - such as XML and Binary grid formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Formats.NGridFormatRegistry`2.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Formats.NGridFormatRegistry`2.DefaultFormatExtension">
            <summary>
            Gets the fallback format extension of document format registry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Formats.NGridFormatRegistry`2.GetDocumentTypeName">
            <summary>
            Gets the document type name.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Formats.NGridFormatRegistry`2.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Formats.NGridLoadSettings">
            <summary>
            Settings for loading data grids
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Formats.NGridSaveSettings">
            <summary>
            Settings for saving data grids
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGrid">
            <summary>
            Represents a grid view, that is created from a NGridViewDataTemplate
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGrid.AutoCreateColumn">
            <summary>
            Occurs when an automatic column needs to be created for this grid.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGrid.FilterRulesChanged">
            <summary>
            Occurs when a change has occured in the filter rules subtree.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGrid.SortingRulesChanged">
            <summary>
            Occurs when a change has occured in the sorting rules subtree.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGrid.RowsRebuilded">
            <summary>
            Occurs when the rows of the grid has been rebuilded.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.Information">
            <summary>
            Gets or sets the document information
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGrid.InformationChanged">
            <summary>
            Occurs when the informaiton property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.Rows">
            <summary>
            Gets the collection of rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.RowHeaders">
            <summary>
            Gets the collection of row headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.Columns">
            <summary>
            Gets the collection of columns.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.FilteringRules">
            <summary>
            Gets the collection that defines the data source filtering.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.SortingRules">
            <summary>
            Gets the collection that defines the data source sorting.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.FrozenRowsSplitter">
            <summary>
            Gets the frozen rows splitter. 
            The visiblity and position of this child is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.LeftFrozenColumnsSplitter">
            <summary>
            Gets the left pinned columns splitter. 
            The visiblity and position of this child is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.RightFrozenColumnsSplitter">
            <summary>
            Gets the right pinned columns splitter. 
            The visiblity and position of this child is automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DesiredWidth">
            <summary>
            Gets the desired width of the grid, in order to be displayed withouth H scrollbar.
            By default this grid measure included the columns width and the width of the row headers.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DesiredHeight">
            <summary>
            Gets the desired height of the grid, in order to be displayed withouth V scrollbar.
            By default this grid measure included the columns width and the width of the row headers.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DesiredSize">
            <summary>
            Gets the grid desired size. This is a shortcut property that returns the DesiredWidth and DesiredHeight as size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DesiredTopAdornerHeight">
            <summary>
            Gets the desired height of the grid top adorner.
            By default this grid measure includes the columns height.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DesiredLeftAdornerWidth">
            <summary>
            Gets the desired width of the grid left adorner.
            By default this grid measure includes the row headers width.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.HScrollMode">
            <summary>
            Gets or sets the scroll mode, which specifies the visibility of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.VScrollMode">
            <summary>
            Gets or sets the scroll mode, which specifies the visibility of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.SmallHScrollChange">
            <summary>
            Gets or sets the small horizontal scroll change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.SmallVScrollChange">
            <summary>
            Gets or sets the small vertical scroll change.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.IntegralVScroll">
            <summary>
            Gets or sets whether the vertical scrolling behavior is integral.
            When set to true the vertical scrollbar will scroll on descrete items, 
            and its thumb will be sized to the count of currently visible items.
            When set to false the vertical scrollbar will work in smooth scrolling mode 
            and its thumb will be sized to the currently visible space from the items area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.IntegralHScroll">
            <summary>
            Gets or sets whether the horizontal scrolling behavior is integral.
            When set to true the horizontal scrollbar will scroll on descrete items, 
            and its thumb will be sized to the count of currently visible items.
            When set to false the horizontal scrollbar will work in smooth scrolling mode 
            and its thumb will be sized to the currently visible space from the items area.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.ViewportOriginX">
            <summary>
            Gets or sets the viewport origin X value that affects the X scrolling of the grid view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.ViewportOriginY">
            <summary>
            Gets or sets the viewport origin Y value that affects the Y scrolling of the grid view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.ViewportOrigin">
            <summary>
            Shortcut property that gets or sets the ViewportOriginX and ViewportOriginY properties
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.ViewportSize">
            <summary>
            Gets the viewport size. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DataSource">
            <summary>
            Gets or sets the data source that is bound to this grid view.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AutoCreateColumns">
            <summary>
            Gets or sets whether the grid view should automatically create columns for the data source to which it is bound.
            By default set to true, meaning that the grid will automatically create columns for the columns in the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DefaultDataRowHeight">
            <summary>
            Gets or sets the default data row height value.
            By default this property is set to Double.NaN, meaning that the grid will estimate the default row height based on the current columns. 
            It is recommended that you set this property before you bind/populate the grid with data.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.DefaultDataRowMeasure">
            <summary>
            Gets the default data row, which is used to measure the default height of data rows headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.Selection">
            <summary>
            Gets or sets the grid view selection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.FrozenRows">
            <summary>
            Gets or sets  the count of frozen rows
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.LeftFrozenColumnsEndX">
            <summary>
            Gets whether the left pinned columns end X coordinate is located.
            If equal to Double.NaN then there are no left pinned columns.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.LeftFrozenColumnsCount">
            <summary>
            Gets the count of left frozen columns.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.RightFrozenColumnsBeginX">
            <summary>
            Gets whether the right pinned columns begin X coordinate is located.
            If equal to Double.NaN then there are no right pinned columns.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.RightFrozenColumnsCount">
            <summary>
            Gets the count of right frozen columns.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.FrozenRowsEndY">
            <summary>
            Gets whether the frozen rows end Y coordinate is located.
            If equal to Double.NaN then there are no frozen rows.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowSortColumns">
            <summary>
            Gets or sets whether the user is allowed to sort the columns by clicking on them.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowFilterColumns">
            <summary>
            Gets or sets whether the user is allowed to filter the columns by clicking on filter symbol in each column header.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowReorderColumns">
            <summary>
            Gets or sets whether the user is allowed to reorder the columns by dragging them around the columns panel.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowResizeColumns">
            <summary>
            Gets or sets whether the user is allowed to resize the columns.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowBestFitColumns">
            <summary>
            Gets or sets whether the best fit columns operation is allowed to the user.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowFormatColumns">
            <summary>
            Gets or sets whether the user is allowed to format the columns.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowResizeRows">
            <summary>
            Gets or sets whether the user is allowed to resize the rows.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowBestFitRows">
            <summary>
            Gets or sets whether the best fit rows operation is allowed to the user.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowDeleteRows">
            <summary>
            Gets or sets whether the delete rows operation is allowed to the user.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AllowEdit">
            <summary>
            Gets or sets whether the user is allowed to edit cell values.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.RowBackgroundFill">
            <summary>
            Gets or sets the background of rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.SelectedRowBackgroundFill">
            <summary>
            Gets or sets the filling of the selected rows and row headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AlternatingRowBackgroundFill">
            <summary>
            Gets or sets the background of alternating rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AlternatingRows">
            <summary>
            Gets or sets whether alternativing rows should be displayed in different way.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AlternatingRowsInterval">
            <summary>
            Gets or sets the alternating rows interval
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.AlternatingRowsLength">
            <summary>
            Gets or sets the alternating rows length
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.HorizontalGridlinesStroke">
            <summary>
            Gets or sets the stroke of the horizontal gridlines.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.VerticalGridlinesStroke">
            <summary>
            Gets or sets the stroke of the vertical gridlines.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.Font">
            <summary>
            Gets or sets the font style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.TextFill">
            <summary>
            Gets or sets the text fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.LevelIndent">
            <summary>
            Gets or sets the level indent, which defines the amount by which row content is offset from 
            its header, as well as the width of the expand/collapse symbols.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.WindowX">
            <summary>
            Gets the X coordinate of the window in which this collection is visualized (in parent coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.WindowY">
            <summary>
            Gets the Y coordinate of the window in which this collection is visualized (in parent coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.WindowWidth">
            <summary>
            Gets the width of the window in which this collection is visualized.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.WindowHeight">
            <summary>
            Gets the height of the window in which this collection is visualized.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.WindowArea">
            <summary>
            Gets or sets the window rect. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.TopAdornerArrangeSlot">
            <summary>
            Gets the rectangle in grid coordinates, in which the top adorner must be arranged.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.LeftAdornerArrangeSlot">
            <summary>
            Gets the rectangle in grid coordinates, in which the top adorner must be arranged.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.OwnerGrid">
            <summary>
            Gets the grid in which this grid is embedded. Returns null if this is the root grid.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.RootGrid">
            <summary>
            Gets the root grid in the grid hierarchy.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGrid.GridLevel">
            <summary>
            Gets the level of this grid in the grid hierarchy. The root grid is at level 0. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.GetDefaultDataRowHeight">
            <summary>
            Gets the default data row height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.StartDragging">
            <summary>
            Called to inform the grid that a drag operation has started inside the grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.EndDragging">
            <summary>
            Called to inform the grid that a drag operation has ended inside the grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.EnsureVisible(Nevron.Nov.Grid.NRow)">
            <summary>
            Ensures that the specified row is visible
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.EnsureVisible(Nevron.Nov.Grid.NColumn)">
            <summary>
            Ensures that the specified column is visible
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.EnsureVisible(Nevron.Nov.Grid.NCell)">
            <summary>
            Ensures that the specified cell is visible
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.CreateFormulaFieldName(System.String)">
            <summary>
            Given a field from the grid data source, returns the name of the field you can use in grid formulas.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.PauseUpdate">
            <summary>
            Pauses the deferred updates that this grid performs. 
            This includes rows rebuilds, syncrhonization of columns and other.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ResumeUpdate">
            <summary>
            Resumes the deferred updates that this grid performs. 
            This includes rows rebuilds, syncrhonization of columns and other.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.Update">
            <summary>
            Performs any deffered updates that are otherwise performed defferly.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollRowUp">
            <summary>
            Scrolls the grid one row up.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollRowDown">
            <summary>
            Scrolls the grid one row down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollPageUp">
            <summary>
            Scrolls the grid one page up.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollPageDown">
            <summary>
            Scrolls the grid one page down.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollColumnLeft">
            <summary>
            Scrolls the grid one column to the left.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollColumnRight">
            <summary>
            Scrolls the grid one column to the right.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollPageLeft">
            <summary>
            Scrolls the grid one page to the left.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ScrollPageRight">
            <summary>
            Scrolls the grid one page to the right.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.CanDeleteRows(Nevron.Nov.DataStructures.NList{Nevron.Nov.Grid.NRow})">
            <summary>
            Determines whether the specified rows can be deleted.
            </summary>
            <remarks>
            This method checkes whether the AllowDeleteRows is true, whether the data source allows row delete and whether there are any selected rows.
            </remarks>
            <param name="rows"></param>
            <returns>true if the delete rows operation can be perfromed, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.DeleteRows(Nevron.Nov.DataStructures.NList{Nevron.Nov.Grid.NRow})">
            <summary>
            Deletes the selected rows.
            </summary>
            <returns>true if any rows were deleted from the data source</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.GetDataRow(System.Int32)">
            <summary>
            Must override to return the data row that represents the specifried row index from the data source.
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ShowPropertiesDialog">
            <summary>
            Shows the column properties dialog
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.ArrangeCore">
            <summary>
            Performs the core grid arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.MeasureCore">
            <summary>
            Performs the core grid measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnLevelIndentChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the LevelIndend property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnFrozenRowsChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the FrozenRows property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnRowSelected(Nevron.Nov.Grid.NRow)">
            <summary>
            Called when a row is selected.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnRowDeselected(Nevron.Nov.Grid.NRow)">
            <summary>
            Called when a row is deselected.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnDataSourceChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the data source has changed from the specified old one to the new one.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnDataSourceDataChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when multiple rows from the grid data source have been inserted, removed or their values have changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnDataSourceValueChanged(Nevron.Nov.Data.NDataSourceValueChangedEventArgs)">
            <summary>
            Called when a row;field value from the grid data source has changed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnDataSourceRowRemoved(Nevron.Nov.Data.NDataSourceRowChangedEventArgs)">
            <summary>
            Called when a row has been removed from the grid data source.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnDataSourceRowInserted(Nevron.Nov.Data.NDataSourceRowChangedEventArgs)">
            <summary>
            Called when a row has been inserted in the grid data source.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.Bind(Nevron.Nov.Data.NDataSource)">
            <summary>
            Rebinds the grid to the specified data source.
            </summary>
            <param name="newDataSource"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnFilterRulesChanged">
            <summary>
            Called when the filters hierachy has changed.
            Raises the FilterRulesChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnSortingRulesChanged">
            <summary>
            Called when the sorting hierachy has changed.
            Raises the SortingRulesChanged event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.CreateAutomaticColumns">
            <summary>
            Recreates the automatic columns for the current data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.CreateAutomaticColumn(System.Int32)">
            <summary>
            Creates an automatic data column for the column at the specified data source index.
            Raises the AutoCreateColumnEvent event.
            </summary>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnHorizontalGridlinesChanged">
            <summary>
            Called when a metric of the horizontal gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnVerticalGridlinesChanged">
            <summary>
            Called when a metric of the vertical gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGrid.OnRowsBackgroundChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.NGridSchema">
            <summary>
            Schema associated with NGrid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AutoCreateColumnEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.FilterRulesChangedEvent">
            <summary>
            Occurs when the filters have changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.SortingRulesChangedEvent">
            <summary>
            Occurs when the sorting have changed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RowsRebuildedEvent">
            <summary>
            Occurs when the rows have been rebuilded.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.ColumnsChild">
            <summary>
            Reference to the Columns child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RowsChild">
            <summary>
            Reference to the Rows child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RowHeadersChild">
            <summary>
            Reference to the RowHeaders child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DefaultDataRowMeasureChild">
            <summary>
            Reference to the DefaultDataRowMeasure child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.FrozenRowsSplitterChild">
            <summary>
            Reference to the FrozenRowsSplitter child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.LeftFrozenColumnsSplitterChild">
            <summary>
            Reference to the LeftFrozenColumnsSplitter child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RightFrozenColumnsSplitterChild">
            <summary>
            Reference to the LeftFrozenColumnsSplitter child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.FilteringRulesChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.SortingRulesChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DataSourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DesiredWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DesiredHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DesiredTopAdornerHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DesiredLeftAdornerWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.TopAdornerArrangeSlotProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.LeftAdornerArrangeSlotProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.WindowXProperty">
            <summary>
            Reference to the WindowX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.WindowYProperty">
            <summary>
            Reference to the WindowY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.WindowWidthProperty">
            <summary>
            Reference to the WindowWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.WindowHeightProperty">
            <summary>
            Reference to the WindowHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.SelectionProperty">
            <summary>
            Reference to the Selection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AutoCreateColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.FrozenRowsProperty">
            <summary>
            Reference to the FrozenRows property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.LeftFrozenColumnsEndXProperty">
            <summary>
            Reference to the LeftFrozenColumnsEndX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.LeftFrozenColumnsCountProperty">
            <summary>
            Reference to the LeftFrozenColumnsCount property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RightFrozenColumnsBeginXProperty">
            <summary>
            Reference to the RightFrozenColumnsBeginX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RightFrozenColumnsCountProperty">
            <summary>
            Reference to the RightFrozenColumnsCount property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.FrozenRowsEndYProperty">
            <summary>
            Reference to the FrozenRowsEndY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.DefaultDataRowHeightProperty">
            <summary>
            Reference to the DefaultDataRowHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.ViewportOriginXProperty">
            <summary>
            Reference to the ViewportOriginX property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.ViewportOriginYProperty">
            <summary>
            Reference to the ViewportOriginY property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.ViewportSizeProperty">
            <summary>
            Reference to the ViewportSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.IntegralVScrollProperty">
            <summary>
            Reference to the IntegralVScroll property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.IntegralHScrollProperty">
            <summary>
            Reference to the IntegralHScroll property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.HScrollModeProperty">
            <summary>
            Reference to the HScrollMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.VScrollModeProperty">
            <summary>
            Reference to the VScrollMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.SmallHScrollChangeProperty">
            <summary>
            Reference to the SmallHScrollChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.SmallVScrollChangeProperty">
            <summary>
            Reference to the SmallVScrollChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.RowBackgroundFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.SelectedRowBackgroundFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AlternatingRowBackgroundFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AlternatingRowsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AlternatingRowsIntervalProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AlternatingRowsLengthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.HorizontalGridlinesStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.VerticalGridlinesStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.FontProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.TextFillProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.LevelIndentProperty">
            <summary>
            Reference to the LevelIndent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowSortColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowFilterColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowReorderColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowResizeColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowBestFitColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowFormatColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowResizeRowsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowBestFitRowsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowDeleteRowsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.AllowEditProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGrid.InformationProperty">
            <summary>
            Reference to the Information property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridDocument`1">
            <summary>
            Represents a grid document and serves as base class for NTableGridDocument and NTreeGridDocument classes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDocument`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDocument`1.#ctor(`0)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridDocument`1.NGridDocumentSchema">
            <summary>
            Schema associated with NGridDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridSelection">
            <summary>
            Represents the grid view selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGridSelection.CurrentCellChanged">
            <summary>	
            Event, which occurs when the current cell has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NGridSelection.CurrentRowChanged">
            <summary>	
            Event, which occurs when the current row has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.OwnerGrid">
            <summary>
            Gets the grid view to which this selection belongs to
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.CurrentCell">
            <summary>
            Gets or set the current cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.CurrentRow">
            <summary>
            Gets or sets the current row
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.AllowCurrentCell">
            <summary>
            Gets or sets whether the selection supports and navigates with a current cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.BeginEditCellOnClick">
            <summary>
            Gets or sets whether cell editing should begin when the cell is clicked.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.BeginEditCellOnDoubleClick">
            <summary>
            Gets or sets whether cell editing should begin when the cell is double clicked.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridSelection.BeginEditCellOnBecomeCurrent">
            <summary>
            Gets or sets whether cell editing should begin when the cell becomes the current cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.ClickCell(Nevron.Nov.Grid.NCell,System.Boolean)">
            <summary>
            Called when a cell is clicked
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.ClickRowHeader(Nevron.Nov.Grid.NRowHeader)">
            <summary>
            Called when a row header is clicked
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.ClickRow(Nevron.Nov.Grid.NRow)">
            <summary>
            Called when a header is clicked
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.Clear">
            <summary>
            Clears the selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveUp">
            <summary>
            Determines whether the move up navigation command can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveDown">
            <summary>
            Determines whether the move down navigation command can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveLeft">
            <summary>
            Determines whether the move left navigation command can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveRight">
            <summary>
            Determines whether the move right navigation command can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMovePageUp">
            <summary>
            Determines whether the page up operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMovePageDown">
            <summary>
            Determines whether the page down operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveRowStart">
            <summary>
            Determines whether the row start operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveRowEnd">
            <summary>
            Determines whether the row end operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveDownLast">
            <summary>
            Determines whether the move down last operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveUpFirst">
            <summary>
            Determines whether the move up first operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveLeftEdit">
            <summary>
            Determines whether the move left edit operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveRightEdit">
            <summary>
            Determines whether the move right edit operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveFirstCell">
            <summary>
            Determines whether the move first cell operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveLastCell">
            <summary>
            Determines whether the move last cell operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.CanMoveDownEdit">
            <summary>
            Determines whether the move down edit operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveUp">
            <summary>
            Changes the current row to prev navigable row and tries to preserve the current cell column.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveDown">
            <summary>
            Changes the current row to next navigable row and tries to preserve the current cell column.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveLeft">
            <summary>
            Changes the current cell to the cell that is on the left of the current one.
            If there is no current cell tries to collapse the current row.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveRight">
            <summary>
            Changes the current cell to the cell that is on the right of the current one.
            If there is no current cell tries to expand the current row.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MovePageUp">
            <summary>
            Moves the current/selected row to a row that is one page up.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MovePageDown">
            <summary>
            Moves the current/selected row to a row that is one page down.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveRowStart">
            <summary>
            Moves the current cell to the first cell in the row.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveRowEnd">
            <summary>
            Moves the current cell to the last cell in the row.
            </summary>
            <returns>returns true if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveDownLast">
            <summary>
            Moves the current cell down to the last navigable cell in the current column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveUpFirst">
            <summary>
            Moves the current cell up to the first navigable cell in the current column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveLeftEdit">
            <summary>
            Same as the move left command, except that it also begins editing of the new current cell, if the previous one was in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveRightEdit">
            <summary>
            Same as the move right command, except that it also begins editing of the new current cell, if the previous one was in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveFirstCell">
            <summary>
            Moves the current cell to the first navigable cell in the grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveLastCell">
            <summary>
            Moves the current cell to the last navigable cell in the grid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.MoveDownEdit">
            <summary>
            Moves the current cell to the navigable cell below it in the grid.
            If the current cell was edited, starts editing of the new current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.TryCurrentCellBeginEdit">
            <summary>
            Tries to begin the editing of the current cell.
            </summary>
            <returns>true, if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.TryCurrentCellCancelEdit">
            <summary>
            Tries to cancel the editing of the current cell.
            </summary>
            <returns>true, if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.TryCurrentCellCommitEdit">
            <summary>
            Tries to commit the editing of the current cell.
            </summary>
            <returns>true, if any action was performed</returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.OnCurrentCellChanged(Nevron.Nov.Grid.NCell,Nevron.Nov.Grid.NCell)">
            <summary>
            Called when the current cell has changed.
            </summary>
            <param name="newCell"></param>
            <param name="oldCell"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.OnCurrentRowChanged(Nevron.Nov.Grid.NRow,Nevron.Nov.Grid.NRow)">
            <summary>
            Called when the current row has changed.
            </summary>
            <param name="newCurrentRow"></param>
            <param name="oldCurrentRow"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.OnSelected(Nevron.Nov.Grid.NRow)">
            <summary>
            Called when the specified row has been selected. Raises the Selected event
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.OnDeselected(Nevron.Nov.Grid.NRow)">
            <summary>
            Called when the specified row has been deselected. Raises the Deselected event.
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridSelection.OnAllowCurrentCellChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the AllowCurrentCell property value has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.NGridSelectionSchema">
            <summary>
            Schema associated with NSelection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.CurrentCellChangedEvent">
            <summary>
            CurrentCellChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.CurrentRowChangedEvent">
            <summary>
            CurrentRowChanged event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.AllowCurrentCellProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.BeginEditCellOnClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.BeginEditCellOnDoubleClickProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridSelection.BeginEditCellOnBecomeCurrentProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridView`3">
            <summary>
            Represents a grid view. Serves as base class for NTableGridView and NTreeGridView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridView`3.Nevron#Nov#Grid#INGridView#Grid">
            <summary>
            Gets the grid embedded this view (untyped access)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridView`3.Nevron#Nov#Grid#INGridView#ContextMenu">
            <summary>
            Ges the grid context menu factory
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridView`3.HScrollBar">
            <summary>
            Gets the HScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridView`3.VScrollBar">
            <summary>
            Gets the VScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridView`3.Grid">
            <summary>
            Gets the grid embedded in this view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridView`3.ContextMenu">
            <summary>
            Gets or sets the factory that produces context menus for this view
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.ComputeWindowSize(Nevron.Nov.Graphics.NRectangle,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ca"></param>
            <param name="showHScrollBar"></param>
            <param name="showVScrcollBar"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetVScrollBar">
            <summary>
            Gets the vertical scroll bar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetVScrollMode">
            <summary>
            Overriden to return the VScrollBarMode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetHScrollBar">
            <summary>
            Overriden to return the HScrollBar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetHScrollMode">
            <summary>
            Overriden to return the HScrollBarMode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetNoScrollHAlign">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetNoScrollVAlign">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetTotalViewport">
            <summary>
            Overriden to return a viewport that has the width of the columns and the height of the rows.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetViewportOrigin">
            <summary>
            Overriden to return the ViewportOrigin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to set the ViewportOrigin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetZoomFactor">
            <summary>
            Overriden to return 1.0d
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.SetZoomFactor(System.Double)">
            <summary>
            Throws an exception since the grid view does not support zooming
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetZoomMode">
            <summary>
            Overriden to return ENZoomMode.Normal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetRightSideAdorner">
            <summary>
            Creates the right side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetBottomSideAdorner">
            <summary>
            Creates the bottom side adorner
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.MeasureAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget)">
            <summary>
            Measures the adorner at the specified location
            </summary>
            <param name="position"></param>
            <param name="adorner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.ArrangeAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget,Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the adorner at the specified location
            </summary>
            <param name="position"></param>
            <param name="adorner"></param>
            <param name="slot"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the grid desired size
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content and the scrollbars
            </summary>
            <param name="ca"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetHScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the HScrollbar for the viewport parameters, in case the HScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.OnHScrollBarScroll(Nevron.Nov.UI.NScrollEventArgs)">
            <summary>
            Called when the VScrollbar is scrolled. Updates the viewport origin from the scrollbar value.
            Overriden to provide support for the integral vertical scrolling of the list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.GetVScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the VScrollbar for the viewport parameters, in case the VScrollBar is visible.
            Overriden to provide support for the integral vertical scrolling of the list box
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.OnVScrollBarScroll(Nevron.Nov.UI.NScrollEventArgs)">
            <summary>
            Called when the VScrollbar is scrolled. Updates the viewport origin from the scrollbar value.
            Overriden to provide support for the integral vertical scrolling of the list box
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.OnDocumentChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the document property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the data grid commander, by adding the grid view command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.BuildInteractor(Nevron.Nov.UI.NInteractor)">
            <summary>
            Builds the data grid interactor, by adding the grid view tools
            </summary>
            <param name="interactor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridView`3.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridView`3.NGridViewSchema">
            <summary>
            Schema associated with NGridView.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridView`3.HScrollBarChild">
            <summary>
            Reference to the HScrollBar child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridView`3.VScrollBarChild">
            <summary>
            Reference to the VScrollBar child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridView`3.ContextMenuProperty">
            <summary>
            Reference to the ContextMenu property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomDetailsPresenter">
            <summary>
            Represents a details presenter that presents the row details in a single row, that contains a tab control, if multiple details are present.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetailsPresenter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomDetailsPresenter.GetDetailsRowCountDelegate">
            <summary>
            Delegate for getting the count of detail rows
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomDetailsPresenter.CreateDetailRowCellsDelegate">
            <summary>
            Delegate for creating the details cells for a specific details row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetailsPresenter.GetDetailsRowCount(Nevron.Nov.Grid.NDetailCollection)">
            <summary>
            Given the details that need to be presented, returns the count of detail rows that are needed.
            Overriden to return 1, as the NCustomDetailsPresenter tries to embed all details into a single tab control placed in a single details row.
            </summary>
            <param name="detailCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetailsPresenter.CreateDetailsRowCells(Nevron.Nov.Data.NDataSource,System.Int32,Nevron.Nov.Grid.NDetailCollection,System.Int32)">
            <summary>
            
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <param name="details"></param>
            <param name="detailRowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomDetailsPresenter.NCustomDetailsPresenterSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDetailsPresenter">
            <summary>
            Represents a factory for a data bound widget that must represent a specific row detail.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsPresenter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsPresenter.GetDetailsRowCount(Nevron.Nov.Grid.NDetailCollection)">
            <summary>
            Given the details that need to be presented, returns the count of detail rows that are needed.
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsPresenter.CreateDetailsRowCells(Nevron.Nov.Data.NDataSource,System.Int32,Nevron.Nov.Grid.NDetailCollection,System.Int32)">
            <summary>
            Creates the details ceklks that needs to be integrated in the specified detail row.
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRow"></param>
            <param name="details"></param>
            <param name="detailRowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetailsPresenter.NDetailsPresenterSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTabDetailsPresenter">
            <summary>
            Represents a details presenter that presents the row details in a single row, that contains a tab control, if multiple details are present.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTabDetailsPresenter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTabDetailsPresenter.GetDetailsRowCount(Nevron.Nov.Grid.NDetailCollection)">
            <summary>
            Given the details that need to be presented, returns the count of detail rows that are needed.
            Overriden to return 1, as the NTabDetailsPresenter tries to embed all details into a single tab control placed in a single details row.
            </summary>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTabDetailsPresenter.CreateDetailsRowCells(Nevron.Nov.Data.NDataSource,System.Int32,Nevron.Nov.Grid.NDetailCollection,System.Int32)">
            <summary>
            Creates the details widget that needs to be integrated in the specified detail row.
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <param name="details"></param>
            <param name="detailRowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NTabDetailsPresenter.NTabDetailsPresenterSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomDetail">
            <summary>
            Represents a detail from the master details. Serves as base class for all types of details.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetail.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomDetail.CreateWidgetDelegate">
            <summary>	
            Event, which occurs when the column needs to create sorting rule for itself.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomDetail.CreateWidget(Nevron.Nov.Data.NDataSource,System.Int32)">
            <summary>
            Creates a widget for the specified master data source row index.
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomDetail.NCustomDetailSchema">
            <summary>
            Schema associated with NCustomDetail
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomDetail.CreateDetailWidgetEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataSourceDetail">
            <summary>
            Represents a detail that is extracted from a data source. Serves as base class for all data bound details.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataSourceDetail.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataSourceDetail.MasterBinding">
            <summary>
            Gets or sets the way in which the records from the details data source are bound (related) to the master record.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataSourceDetail.DataSource">
            <summary>
            Gets or sets the data source from which this row detail must extract data.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataSourceDetail.GetDetailDataSource(Nevron.Nov.Data.NDataSource,System.Int32)">
            <summary>
            Gets the data source that represents only the records from the DataSource that relate (are bound to) the the specified master row.
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataSourceDetail.NDataSourceDetailSchema">
            <summary>
            Schema associated with NDataSourceDetail
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataSourceDetail.MasterBindingChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataSourceDetail.DataSourceProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDetail">
            <summary>
            Represents a detail from the master details. Serves as base class for all types of details.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetail.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDetail.Title">
            <summary>
            Gets or sets the title associated with this detail. 
            The title of the detail appears in the tab header for that detail if the master details are presented as tabs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetail.CreateWidget(Nevron.Nov.Data.NDataSource,System.Int32)">
            <summary>
            Creates a widget for the specified row index.
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetail.NDetailSchema">
            <summary>
            Schema associated with NDetail
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetail.TitleProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDetailCollection">
            <summary>
            Represents a collection of hierarchical grid levels.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetailCollection.NDetailCollectionSchema">
            <summary>
            Schema associated with NDetailCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridDetail`4">
            <summary>
            Represents a data source detail, that creates a detail grid view. 
            Serves as base class for NTableGridDetail and NTreeGridDetail.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDetail`4.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridDetail`4.GridView">
            <summary>
            Gets or sets the grid view a cloning of which this grid details template creates.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDetail`4.CreateWidget(Nevron.Nov.Data.NDataSource,System.Int32)">
            <summary>
            Creates a grid that displays detail records from the detail data source
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <param name="masterBinding"></param>
            <param name="detailDataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDetail`4.OnTemplateGridSubtreeChanged(Nevron.Nov.Dom.NNodeSubtreeChangeMonitor,Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a change occurs in the template subtree.
            </summary>
            <param name="monitor"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDetail`4.OnInstanceGridSubtreeChanged(Nevron.Nov.Dom.NNodeSubtreeChangeMonitor,Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when a change occurs in any of the instances subtrees .
            </summary>
            <param name="monitor"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridDetail`4.DuplicateChange(`0,`0,Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Duplicates a change that occurs in source grid to the specified target grid.
            </summary>
            <param name="targetGrid"></param>
            <param name="sourceGrid"></param>
            <param name="sourceChange"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridDetail`4.NGridDetailSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridDetail`4.GridViewChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTableGridDetail">
            <summary>
            Represents a table grid detail
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridDetail.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGridDetail.NTableGridDetailSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeGridDetail">
            <summary>
            Represents a tree grid detail
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGridDetail.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGridDetail.NTreeGridDetailSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NMasterBinding">
            <summary>
            Represents the binding (relation) between a master row and the rows that match in a details data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NMasterBinding.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NMasterBinding.GetDetailsRecordset(Nevron.Nov.Data.NDataSource,System.Int32,Nevron.Nov.Data.NDataSource)">
            <summary>
            Gets the recordset from the details data source that are bound to the specfied row in the master data source.
            </summary>
            <param name="masterDataSource"></param>
            <param name="masterRowIndex"></param>
            <param name="detailsDataSource"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NMasterBinding.NMasterBindingSchema">
            <summary>
            Schema assoicated with NMasterBinding
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRelation">
            <summary>
            Represents a pair of field names, often belonging to two different data sources, that represents a data relation between these data sources (tables).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelation.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRelation.SourceFieldName">
            <summary>
            Gets or sets the field name from the source data source on which to bind
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRelation.TargetFieldName">
            <summary>
            Gets or sets the field name from the target data source on which to bind
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRelation.NRelationSchema">
            <summary>
            Schema assoicated with NRelation
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRelation.SourceFieldNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRelation.TargetFieldNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRelationCollection">
            <summary>
            Represents a collection of NRelation instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelationCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelationCollection.GetFieldIndices(Nevron.Nov.Data.NDataSource,Nevron.Nov.Data.NDataSource,System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the field indices for the specified source and target data sources.
            Throws an exception if any of the relations fields is not present in the respective data source.
            </summary>
            <param name="sourceDataSource"></param>
            <param name="targetDataSource"></param>
            <param name="sourceIndices"></param>
            <param name="targetIndices"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NRelationCollection.NRelationCollectionSchema">
            <summary>
            Schema associated with NRelationCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRelationMasterBinding">
            <summary>
            Represents a master binding that binds the details data source by matching specific fields in the master and details data sources.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelationMasterBinding.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelationMasterBinding.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRelationMasterBinding.Relations">
            <summary>
            Gets or sets the colleciton of relations that must match the records displayed for the details data source.
            For each relation in the collection the SourceFieldName must be valid for the Master data source and the TargetFieldName must be valid for the Details data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRelationMasterBinding.GetDetailsRecordset(Nevron.Nov.Data.NDataSource,System.Int32,Nevron.Nov.Data.NDataSource)">
            <summary>
            Gets the recordset from the details data source that relates to the specfied row in the master data source.
            </summary>
            <param name="masterDS"></param>
            <param name="masterRow"></param>
            <param name="detailsDS"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NRelationMasterBinding.NRelationMasterBindingSchema">
            <summary>
            Schema associted with NFieldMasterBindingSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRelationMasterBinding.RelationsChild">
            <summary>
            Reference to the Relations child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NMasterDetails">
            <summary>
            Represents the details that can be displayed for each record data row in a table grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NMasterDetails.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NMasterDetails.Details">
            <summary>
            Gets or sets the details associated with this master.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NMasterDetails.DetailsPresenter">
            <summary>
            Gets or sets the details presenter, which controls the way in which details widgets are distributed in details rows.
            If not specified, by default each detail is displayed by a distinct row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NMasterDetails.NMasterDetailsSchema">
            <summary>
            Schema associated with NHierarchicalGridLevel
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NMasterDetails.DetailsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NMasterDetails.DetailsPresenterChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTableGrid">
            <summary>
            Represents a tabular view of a data source that allows for its filtering, sorting and grouping.
            An instance of the NTableGrid is typically obtained from the Grid property of the NTableGridView class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NTableGrid.GroupingRulesChanged">
            <summary>
            Occurs when a change has occured in the grouping rules subtree.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTableGrid.GroupingRules">
            <summary>
            Gets the collection that defines the data source grouping.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTableGrid.AllowGroupColumns">
            <summary>
            Gets or sets whether the user is allowed to group by the columns by dragging them to the grouping panel.
            By default this value is true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTableGrid.GroupingPanel">
            <summary>
            Gets the grouping panel that this table grid uses.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTableGrid.MasterDetails">
            <summary>
            Gets or sets the master details associated with this grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGrid.GetDataRow(System.Int32)">
            <summary>
            Return the record data row that represents the specifried row index from the data source.
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGrid.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGrid.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGrid.OnGroupingRulesChanged">
            <summary>
            Called when a change occurs in the grouping rules subtree.
            Raises the GroupingRulesChanged event.
            </summary>
            <param name="node"></param>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGrid.NTableGridSchema">
            <summary>
            Schema associated with NTableGrid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGrid.GroupingRulesChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGrid.GroupingRulesChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGrid.MasterDetailsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGrid.AllowGroupColumnsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTableGrid.NTableGridDesigner">
            <summary>
            Designer associated with NTableGrid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGrid.NTableGridDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTableGridDocument">
            <summary>
            Represents a document that contains a NGrid element.
            A NTableGridDocument can be viewed and edited inside a NGridView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridDocument.#ctor(Nevron.Nov.Grid.NTableGrid)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGridDocument.NTableGridDocumentSchema">
            <summary>
            Schema associated with NTableGridDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTableGridView">
            <summary>
            Represents a view for a table grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTableGridView.GroupingPanel">
            <summary>
            Gets or sets the column grouping panel
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridView.GetTopSideAdorner">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridView.MeasureAdorner(Nevron.Nov.Graphics.ENCompassDirection,Nevron.Nov.UI.NWidget)">
            <summary>
            
            </summary>
            <param name="compassDirection"></param>
            <param name="adorner"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridView.BuildInteractor(Nevron.Nov.UI.NInteractor)">
            <summary>
            Builds the data grid interactor, by adding the grid view tools
            </summary>
            <param name="interactor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTableGridView.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the data grid commander, by adding the grid view command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGridView.NTableGridViewSchema">
            <summary>
            Schema associated with NTableGridView
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTableGridView.GroupingPanelChild">
            <summary>
            Reference to the TopPanel child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeGrid">
            <summary>
            Represents a hierarchical view of a data source that allows for its filtering and sorting.
            An instance of the NTreeGrid is typically obtained from the Grid property of the NTreeGridView class.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="E:Nevron.Nov.Grid.NTreeGrid.ServiceFieldNameChanged">
            <summary>
            Occurs when the IdFieldName or ParentIdFieldName properties have changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTreeGrid.IdFieldName">
            <summary>
            Gets or sets the Id field. This is a service field name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTreeGrid.ParentIdFieldName">
            <summary>
            Gets or sets the parent Id field name. This is a service field name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NTreeGrid.CreateColumnsForServiceFieldNames">
            <summary>
            Gets or sets the list tree view can create fields for the IdFieldName and ParentIdFieldName fields from the data source.
            By default set to false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.OnIdFieldNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IdColumn property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.OnParendIdFieldNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ParentIdColumn property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.OnServiceFieldNameChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IdFieldName or ParentIdFieldName properties have changed.
            Raises the ServiceFieldNameChangedEvent event.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.CreateAutomaticColumn(System.Int32)">
            <summary>
            Overriden to check for service fields and whether the creation of service fields is allowed.
            </summary>
            <param name="dataSource"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.GetDataRow(System.Int32)">
            <summary>
            Return the tree data row that represents the specifried row index from the data source.
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGrid.NTreeGridSchema">
            <summary>
            Schema associated with NTreeGrid
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGrid.ServiceFieldNameChangedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGrid.IdFieldNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGrid.ParentIdFieldNameProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGrid.CreateColumnsForServiceFieldNamesProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeGrid.NTreeGridDesigner">
            <summary>
            Designer associated with NTableGrid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGrid.NTreeGridDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeGridDocument">
            <summary>
            Represents a document that contains a NGrid element.
            A NTreeGridDocument can be viewed and edited inside a NGridView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGridDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGridDocument.#ctor(Nevron.Nov.Grid.NTreeGrid)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGridDocument.NTreeGridDocumentSchema">
            <summary>
            Schema associated with NTreeGridDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeGridView">
            <summary>
            Represents a view for a tree grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeGridView.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeGridView.NTreeGridViewSchema">
            <summary>
            Schema associated with NTreeGridView
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingHeader">
            <summary>
            Represents a grouping header. A grouping header is automatically created for each grouping rule inside the table view grouping panel.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingHeader.SortingButton">
            <summary>
            Gets or sets the SortingButton child that indicates the sorting direction of the grouping.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingHeader.RemoveButton">
            <summary>
            Gets or sets the RemoveButton child that removes the grouping rule when clicked.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingHeader.Spacing">
            <summary>
            Gets or sets the spacing between the symbol and the content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingHeader.SortingDirection">
            <summary>
            Gets the sorting direction of the column grouping.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingHeader.GroupingRule">
            <summary>
            Gets the gruoping rule associated with this grouping header.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingHeader.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingHeader.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to layout the content.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingHeader.OnSortingButtonClick">
            <summary>
            Called when the sorting button is clicked. 
            This implementation toggles the sorting direction of the grouping rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingHeader.OnRemoveButtonClick">
            <summary>
            Called when the remove button is clicked. 
            This implementation removes the grouping rule represented by this header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.NGroupingHeaderSchema">
            <summary>
            Schema associated with NGroupingHeader.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.SortingButtonChild">
            <summary>
            Reference to the SortingButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.RemoveButtonChild">
            <summary>
            Reference to the RemoveButton child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.SpacingProperty">
            <summary>
            Reference to the Spacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.IsPressedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.SortingDirectionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeader.GroupingRuleRefProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingHeaderCollection">
            <summary>
            Represents a collection of column grouping headers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingHeaderCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingHeaderCollection.NGroupingHeaderCollectionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupingPanel">
            <summary>
            Represents the grouping panel on which the user can drag and drop columns to perform grouping.
            The grouping panel is automatically syncrhonized with the table view grouping rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingPanel.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the element to the provided list.  This
            implementation accumulates the children of this this element, which are NVisual
            instances and the grouping headers.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingPanel.Prompt">
            <summary>
            Gets or sets the promp widget which prompts the user to drag and drop columns on the panel.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingPanel.GroupingHeaders">
            <summary>
            Gets or sets the collection of column grouping headers. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingPanel.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal spacing between the grouping headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingPanel.VerticalOffset">
            <summary>
            Gets or sets the vertical offset by which headers of lower grouping levels are offset from the previous level vertically.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupingPanel.ConnectorsStroke">
            <summary>
            Gets or sets the grouping headers connectors stroke
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingPanel.MeasureContent(System.Boolean)">
            <summary>
            Overriden to measure the content of the grouping panel
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingPanel.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to arrange the content of the grouping panel
            </summary>
            <param name="contentArea"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingPanel.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to draw the lines.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupingPanel.PaintGroupingHeaderConnectors(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the connector lines that join the grouping headers.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingPanel.NGroupingPanelSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingPanel.PromptChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingPanel.GroupingHeadersChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingPanel.HorizontalSpacingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingPanel.VerticalOffsetProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupingPanel.ConnectorsStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.INGridView">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.INGridView.Grid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.INGridView.ContextMenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.INGridView.ReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.INGridView.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.INGridView.HScrollBar">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.INGridView.VScrollBar">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NHeaderCollectionBase`1">
            <summary>
            Represents the collection of the row headers. 
            The grid view automatically populate this collection with T instances for the realized rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.Contains(`0)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.Add(`0)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.ToArray">
            <summary>
            Converts this set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.X">
            <summary>
            Gets the X coordinate of the zero local coordinate inside the grid coordinate system.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.Y">
            <summary>
            Gets the Y coordinate of the zero local coordinate inside the grid coordinate system.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.Width">
            <summary>
            Gets the Width of this collection.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.Height">
            <summary>
            Gets the Height of this collection.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.DesiredWidth">
            <summary>
            Gets or sets the desired width of this collection.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowX">
            <summary>
            Gets the X coordinate of the window in which this collection is visualized (in grid coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowY">
            <summary>
            Gets the Y coordinate of the window in which this collection is visualized (in grid coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowWidth">
            <summary>
            Gets the width of the window in which this collection is visualized.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowHeight">
            <summary>
            Gets the height of the window in which this collection is visualized.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowArea">
            <summary>
            Gets the window area in which this collection is visualized (in grid coordinates).
            This is a shortcut property that gets the WindowX, WindowY, WindowWidth and WindowHeight properties as NRectangle.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.Visible">
            <summary>
            Gets or sets whether the row headers are visible or not. By default true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHeaderCollectionBase`1.OwnerGrid">
            <summary>
            Gets the grid view to which this collection belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <param name="unit"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests the node by region
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            Returns true if the Visible property is set to false.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.MeasureCore">
            <summary>
            Overriden to calculate the column collection width and height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.ArrangeCore">
            <summary>
            Arranges the columns
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the X property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnYChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Y property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnWidthChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Width property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Height property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnWindowXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowX property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnWindowYChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowY property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnWindowWidthChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowWidth property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnWindowHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowHeight property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnVisibleChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Visible property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnHorizontalGridlinesChanged">
            <summary>
            Called when a metric of the horizontal gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.OnVerticalGridlinesChanged">
            <summary>
            Called when a metric of the vertical gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test region for this widget. 
            The returned region is used in both point and region widget hit tests.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHeaderCollectionBase`1.PaintGridlines(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the header gridlines
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.NHeaderCollectionBaseSchema">
            <summary>
            Schema associated with NHeaderCollectionBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.XProperty">
            <summary>
            Reference to the X property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.YProperty">
            <summary>
            Reference to the Y property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.WidthProperty">
            <summary>
            Reference to the Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.DesiredWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowXProperty">
            <summary>
            Reference to the WindowX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowYProperty">
            <summary>
            Reference to the WindowY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowWidthProperty">
            <summary>
            Reference to the WindowWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.WindowHeightProperty">
            <summary>
            Reference to the WindowHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHeaderCollectionBase`1.VisibleProperty">
            <summary>
            Reference to the Visible property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NAndGroupRowCondition">
            <summary>
            Represents a composite row condition that performs a logical AND between the contained conditions.
            In order for the AND condition to match a row, all contained conditions must match.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NAndGroupRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NAndGroupRowCondition.#ctor(Nevron.Nov.Grid.NRowCondition[])">
            <summary>
            Creates a new AND composite condition that contains the specified conditions
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NAndGroupRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NAndGroupRowCondition.NAndGroupRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupRowCondition">
            <summary>
            Represents a row condition that is assembled from other row conditions.
            The result of a composite row condition is the logical AND or OR from the contained conditions result.
            Serves as base class for NAndGroupRowCondition and NOrGroupRowCondition.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.#ctor(Nevron.Nov.Grid.NRowCondition[])">
            <summary>
            Creates a new composite condition that contains the specified conditions
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupRowCondition.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupRowCondition.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.Contains(Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.IndexOf(Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.Insert(System.Int32,Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.Add(Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.Remove(Nevron.Nov.Grid.NRowCondition)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.CopyTo(Nevron.Nov.Grid.NRowCondition[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.ToArray">
            <summary>
            Converts this set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupRowCondition.NCompositeRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupRowCondition.NCompositeRowConditionDesigner">
            <summary>
            Designer associated with NGroupRowCondition instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.NCompositeRowConditionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRowCondition.NCompositeRowConditionDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.NOrGroupRowCondition">
            <summary>
            Represents a composite row condition that performs a logical OR between the contained conditions.
            In order for the OR condition to match a row, at least one contained conditions must match.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NOrGroupRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NOrGroupRowCondition.#ctor(Nevron.Nov.Grid.NRowCondition[])">
            <summary>
            Creates a new AND composite condition that contains the specified conditions
            </summary>
            <param name="conditions"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NOrGroupRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NOrGroupRowCondition.NOrGroupRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFalseRowCondition">
            <summary>
            Represents a constant False row condition.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFalseRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFalseRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFalseRowCondition.NFalseRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTrueRowCondition">
            <summary>
            Represents a constant True row condition.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTrueRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTrueRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NTrueRowCondition.NTrueRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowCondition">
            <summary>
            Represents a row condition. Serves as base class for all row conditions.
            Row conditions are used in filter rules as well as conditional formatting.
            Each row condition can be Inverted which has the meaning of logical NOT.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCondition.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="inverted"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCondition.Inverted">
            <summary>
            Gets or sets whether the condition is inverted (has the meaning of NOT).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCondition.NRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCondition.InvertedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowCondition.NRowConditionDesigner">
            <summary>
            Designer associated with NRowCondition instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCondition.NRowConditionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCondition.NRowConditionDesigner.GetCompatibleTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomRowCondition">
            <summary>
            Represents a row condition that filters rows according to a user defined predicate delegate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowCondition.#ctor(Nevron.Nov.FunctionResult{System.Boolean,Nevron.Nov.Grid.NCustomRowConditionRowPredicateArgs},System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowPredicate">delegate for getting a boolean value for a row from the grid</param>
            /// <param name="description"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomRowCondition.RowPredicateDelegate">
            <summary>
            Delegate for getting a boolean value for a specific grid data source row. It is mandatory to handle this delegate.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowCondition.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomRowCondition.NCustomRowConditionSchema">
            <summary>
            Schema associated with NCustomRowCondition
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomRowCondition.DescriptionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormulaRowCondition">
            <summary>
            Represents a row condition that filters rows according to the result of a row formula.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowCondition.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="formula"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowCondition.#ctor(System.String,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="formula"></param>
            <param name="inverted"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormulaRowCondition.Formula">
            <summary>
            Gets or sets the row condition formula.
            In order for a record to match, this formula must evaluate to true for the that record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormulaRowCondition.NFormulaRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormulaRowCondition.FormulaProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NOperatorRowCondition">
            <summary>
            Represents a row condition that makes a comparison (Equal, NotEqual, LessThan, GreaterThan, LessThanOrEqualTo, GreaterThanOrEqualTo) between the current row value and a user specified value.
            The user specified value is specified as a string, that needs to be parsable according to the type of value provided for the row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NOperatorRowCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NOperatorRowCondition.#ctor(Nevron.Nov.Grid.ENRowConditionOperator,System.String)">
            <summary>
            Creates a new comparsion row condition that uses the context default row value and performs the specified comparison operator against the specified value.
            </summary>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NOperatorRowCondition.#ctor(Nevron.Nov.Grid.NRowValue,Nevron.Nov.Grid.ENRowConditionOperator,System.String)">
            <summary>
            Creates a new comparsion row condition that uses the specified row value and performs the specified comparison operator against the specified value.
            </summary>
            <param name="rowValue"></param>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NOperatorRowCondition.#ctor(Nevron.Nov.Grid.NRowValue,Nevron.Nov.Grid.ENRowConditionOperator,System.String,System.Boolean)">
            <summary>
            Creates a new comparsion row condition that uses the specified row value and performs the specified comparison operator against the specified value.
            </summary>
            <param name="rowValue"></param>
            <param name="op"></param>
            <param name="value"></param>
            <param name="matchCase"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NOperatorRowCondition.Operator">
            <summary>
            Gets or sets  the filter operator to apply.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NOperatorRowCondition.Value">
            <summary>
            Gets or sets  the filter value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NOperatorRowCondition.MatchCase">
            <summary>
            Gets or sets whether the string match operation is performed in case sensitive or case insensitive manner.
            By default true. Only has effects when Operator is equal to StartsWith, EndsWith, Contains, ContainedIn and Like.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NOperatorRowCondition.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NOperatorRowCondition.NOperatorRowConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NOperatorRowCondition.OperatorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NOperatorRowCondition.ValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NOperatorRowCondition.MatchCaseProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NOperatorRowCondition.NOperatorRowConditionDesigner">
            <summary>
            Designer associated with NOperatorRowCondition
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NOperatorRowCondition.NOperatorRowConditionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowValueCondition">
            <summary>
            Represents a row condition that filters rows by a row provided value. 
            The value is provided by an optional NRowValue attribe accessible from the RowValue property. 
            If a row value is not specified, the condition uses the default row value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueCondition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueCondition.#ctor(Nevron.Nov.Grid.NRowValue)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowValue"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueCondition.#ctor(Nevron.Nov.Grid.NRowValue,System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowValue"></param>
            <param name="inverted"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowValueCondition.RowValue">
            <summary>
            Gets or sets the row value that this condition must use.
            If not specified the condtion will try to use a a default row value for the condition.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowValueCondition.NRowValueConditionSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowValueCondition.RowValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowValueCondition.NRowValueConditionDesigner">
            <summary>
            Designer associated with NRowValueCondition
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValueCondition.NRowValueConditionDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowHeader">
            <summary>
            A symbol button that represents a row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeader.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeader.Row">
            <summary>
            Gets the row that this header represents
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeader.IsCurrent">
            <summary>
            Gets whether the row header represents the row that is 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeader.IsSelected">
            <summary>
            Gets whether this row is selected.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeader.IsFrozen">
            <summary>
            Gets whether this row is frozen.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeader.IsEditing">
            <summary>
            Gets whether this row is editing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeader.OwnerGrid">
            <summary>
            Gets the grid view to which this cell belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeader.NRowHeaderSchema">
            <summary>
            Schema associated with NRowHeader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeader.IsCurrentProperty">
            <summary>
            Reference to the IsCurrent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeader.IsSelectedProperty">
            <summary>
            Reference to the IsSelected property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeader.IsFrozenProperty">
            <summary>
            Reference to the IsFrozen property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeader.IsEditingProperty">
            <summary>
            Reference to the IsEditing property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowHeaderCollection">
            <summary>
            Represents the collection of the row headers. 
            The grid view automatically populates this collection with NRowHeader instances for the realized rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeaderCollection.ShowRowNumbers">
            <summary>
            Gets or sets whether row numbers should be displayed on data row headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeaderCollection.ShowRowSymbol">
            <summary>
            Gets or sets whether the current indicator symbol must be displayed on row headers.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeaderCollection.LeftGridlineStroke">
            <summary>
            Gets or sets the stroke of the left gridline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeaderCollection.RightGridlineStroke">
            <summary>
            Gets or sets the stroke of the right gridline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowHeaderCollection.HorizontalGridlinesStroke">
            <summary>
            Gets or sets the stroke of the horizontal gridlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.GetClip">
            <summary>
            Overriden to clip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.MeasureCore">
            <summary>
            Overriden to calculate the column collection width and height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.ArrangeCore">
            <summary>
            Arranges the columns
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the X property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnVisibleChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Visible property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnShowRowNumbersChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowRowNumbers property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnShowRowSymbolChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the ShowRowSymbol property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnHorizontalGridlinesChanged">
            <summary>
            Called when a metric of the horizontal gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnVerticalGridlinesChanged">
            <summary>
            Called when a metric of the vertical gridlines has changed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnRegistered">
            <summary>
            Called when the element is registered in a document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.PaintGridlines(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.CreateRowHeader(Nevron.Nov.Grid.NRow)">
            <summary>
            Creates the row header
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.UpdateRowHeaderContent(Nevron.Nov.Grid.NRowHeader)">
            <summary>
            Updates the content of the row header
            </summary>
            <param name="rowHeader"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowHeaderCollection.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Overriden to detach the header from the row.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeaderCollection.NRowHeaderCollectionSchema">
            <summary>
            Schema associated with NRowHeaderCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeaderCollection.ShowRowNumbersProperty">
            <summary>
            Reference to the ShowRowNumbers property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeaderCollection.ShowRowSymbolProperty">
            <summary>
            Reference to the ShowRowSymbol property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeaderCollection.LeftGridlineStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeaderCollection.RightGridlineStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowHeaderCollection.HorizontalGridlinesStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDataRow">
            <summary>
            Represents a hierarchical row, that displays a single record from the datasource. 
            Serves as base class for NRecordDataRow and NTreeDataRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataRow.RowIndex">
            <summary>
            Gets the index of the row in the data source that this data row represents.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDataRow.Cells">
            <summary>
            Gets or sets the collection of data cells. 
            It is automatically created and populated with data cells when the data cells are loaded.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.GetValue(Nevron.Nov.Grid.NColumn)">
            <summary>
            Gets the data row value for the specified column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.GetValue(System.Int32)">
            <summary>
            Gets the data row value for the specified column.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.SetValue(Nevron.Nov.Grid.NColumn,System.Object)">
            <summary>
            Sets the data row value for the specified column.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.SetValue(System.Int32,System.Object)">
            <summary>
            Sets the data row value for the specified column.
            </summary>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.GetCellCount">
            <summary>
            Gets the count of cells in this row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.GetCellAt(System.Int32)">
            <summary>
            Gets the cell at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.GetDefaultHeaderHeight">
            <summary>
            Measures the data row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.MeasureHeaderHeight">
            <summary>
            Overriden to measure the data cells
            </summary>
            <param name="ownerGridView"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.ArrangeHeader(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Overriden to arrange the data cells.
            </summary>
            <param name="startX"></param>
            <param name="endX"></param>
            <param name="y"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.RealizeCells">
            <summary>
            Loads the row content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.VirtualizeCells">
            <summary>
            Unloads the row content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDataRow.AccumulateHeaderDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to accumulate the cells inside the Cells collection.
            </summary>
            <param name="list"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataRow.NDataRowSchema">
            <summary>
            Schema associated with NDataRow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataRow.CellsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDataRow.RowIndexProperty">
            <summary>
            Reference to the the RowIndex property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDefaultDataRowMeasure">
            <summary>
            Represents the default data row measure element. 
            Its purpose is to measure the default height of data rows which are not already realized.
            A reference to this class can be obtained from the NGrid.DefaultDataRowHeightMeasure property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultDataRowMeasure.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDefaultDataRowMeasure.NDefaultDataRowMeasureSchema">
            <summary>
            Schema associated with NDefaultDataRowMeasure.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRecordDataRow">
            <summary>
            Represents a record data row that is used to represent a single record from the datasource.
            The expandable content of a record data row is a set of details rows that are dynamically created by the grid.
            Record data rows are automatically created for each record shown by the NTableGrid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRecordDataRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRecordDataRow.CreateContent">
            <summary>
            Creates the row content
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRecordDataRow.NRecordDataRowSchema">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NTreeDataRow">
            <summary>
            Represents a data row that is used to represent a single record from the data set and can contain child tree data rows.
            The expandable content of a tree data row is a collection of other tree data rows.
            Tree data rows are automatically created for each record shown by the NTreeGrid. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeDataRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NTreeDataRow.CreateContent">
            <summary>
            Creates the row content
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NTreeDataRow.NRecordDataRowSchema">
            <summary>
            Schema associated with NRecordDataRow
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDetailsRow">
            <summary>
            Represents a details row, which is automatically created for each details row of a NRecordDataRow.
            The header of each details row is a NDetailsCellCollection (collection of NDetailsCell).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDetailsRow.Cells">
            <summary>
            Gets or sets the collection of details row cells.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.GetCellCount">
            <summary>
            Gets the count of cells in this row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.GetCellAt(System.Int32)">
            <summary>
            Gets the cell at the specified inde.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.RealizeCells">
            <summary>
            Realizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.VirtualizeCells">
            <summary>
            Virtualizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.AccumulateHeaderDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the header elements for painting
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.GetDefaultHeaderHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.MeasureHeaderHeight">
            <summary>
            Overriden to measure the header desired height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NDetailsRow.ArrangeHeader(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Arranges the group row header
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetailsRow.NDetailsRowSchema">
            <summary>
            Schema associated with NDetailsRow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDetailsRow.CellsChild">
            <summary>
            Reference to the header child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDefaultGroupRowMeasure">
            <summary>
            Represents the default group row measure element. 
            Its purpose is to measure the default height of group rows which are not already realized.
            A reference to this class can be obtained from the NGroupingRule.DefaultGroupRowHeightMeasure property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultGroupRowMeasure.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDefaultGroupRowMeasure.NDefaultGroupRowMeasureSchema">
            <summary>
            Schema associated with NDefaultGroupRowMeasure.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGroupRow">
            <summary>
            Represents a grid group row, which is created for child data groups.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupRow.Cells">
            <summary>
            Gets or sets the collection of group row cells.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupRow.Recordset">
            <summary>
            Gets the recordset associated with this group row. 
            It identifies the records from the data source that are descendants of this group.
            Valid only when the group row is created in bound mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupRow.GroupValue">
            <summary>
            Gets the group value associated with this group row. 
            The grouping rule that created this group row has produced this value for all records contained in this group recordset.
            Valid only when the group row is created in bound mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGroupRow.GroupingRule">
            <summary>
            Gets the group rule that produced with this group row. 
            Valid only when the group row is created in bound mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.GetCellCount">
            <summary>
            Gets the count of cells in this row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.GetCellAt(System.Int32)">
            <summary>
            Gets the cell at the specified inde.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.RealizeCells">
            <summary>
            Realizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.VirtualizeCells">
            <summary>
            Virtualizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.CreateContent">
            <summary>
            Creates the row content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.AccumulateHeaderDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to accumulate the cells inside the Cells collection.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.GetDefaultHeaderHeight">
            <summary>
            Measures the group row header default height
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.MeasureHeaderHeight">
            <summary>
            Overriden to measure the header desired height
            </summary>
            <param name="ownerGridView"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.ArrangeHeader(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Arranges the group row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGroupRow.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupRow.NGroupRowSchema">
            <summary>
            Schema associated with NGroupRow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NGroupRow.CellsChild">
            <summary>
            Reference to the header child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NChildRowCollection">
            <summary>
            Represents a collection of rows that resides in a grid group row.
            The data cells collection is a member of the NDataRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NChildRowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NChildRowCollection.ArrangeCore">
            <summary>
            Arranges the rows in a vertical stack.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NChildRowCollection.ShowGridlineBeforeFirstRow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NChildRowCollection.NGroupRowCollectionSchema">
            <summary>
            Tries to get the range of visible rows for the specified Y range (in row collection coordinates)
            </summary>
            <param name="paintVisitor"></param>
            <param name="first"></param>
            <param name="last"></param>
            <param name="children"></param>
            <returns></returns>
            <summary>
            Schema associated with NChildRowCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NDefaultRowMeasure`2">
            <summary>
            Represents an element that performs the default measurement of different row heights.
            Serves as base class for NDefaultGroupRowMeasure and NDefaultDataRowMeasure.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultRowMeasure`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDefaultRowMeasure`2.Nevron#Nov#Dom#INMeasureElement#IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDefaultRowMeasure`2.Nevron#Nov#Dom#INMeasureElement#IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultRowMeasure`2.Nevron#Nov#Dom#INMeasureElement#InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultRowMeasure`2.Nevron#Nov#Dom#INMeasureElement#ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultRowMeasure`2.Nevron#Nov#Dom#INMeasureElementParent#InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="KdWG"></param>
            <param name="ldWG"></param>
            <param name="MdWG"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultRowMeasure`2.Nevron#Nov#Dom#INArrangeElementParent#InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="ndWG"></param>
            <param name="OdWG"></param>
            <param name="pdWG"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NDefaultRowMeasure`2.Cells">
            <summary>
            Gets the cells that need to be measured.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NDefaultRowMeasure`2.DefaultHeight">
            <summary>
            Gets the default height of the cells contained in this measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NDefaultRowMeasure`2.OnDefaultHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the default height has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NDefaultRowMeasure`2.NDefaultRowMeasureSchema">
            <summary>
            Schema associated with NDefaultRowMeasure.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDefaultRowMeasure`2.CellsChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NDefaultRowMeasure`2.DefaultHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NHierarchicalRow">
            <summary>
            Represents a hierachical row, the content of which are other rows.
            Serves as base class for NGroupRow and NDataRow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NHierarchicalRow.Rows">
            <summary>
            Gets or sets the row child rows. 
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.RealizeContentYRange(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.VirtualizeContent(System.Boolean)">
            <summary>
            Virtualizes the row content
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.AccumulateContentDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the content for painting
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.GetChildRows">
            <summary>
            Overriden to return the Rows child.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.DestroyContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.MeasureContent">
            <summary>
            Measures the row content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NHierarchicalRow.ArrangeContent(System.Double)">
            <summary>
            Arranges the row content
            </summary>
            <param name="y"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NHierarchicalRow.NHierarchicalRowSchema">
            <summary>
            Schema associated with NHierarchicalRow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NHierarchicalRow.RowsChild">
            <summary>
            Reference to the rows child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRow">
            <summary>
            Represents a row of the grid. Serves as base class for all types of rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsCurrent">
            <summary>
            Gets whether this is the current row.
            Automatically updated by Nevron. Use the NGridView.Selection methods to change the current row and cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsSelected">
            <summary>
            Gets whether this row is selected.
            Automatically updated by Nevron. Use the NGridView.Selection methods to select and deselect rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsRealized">
            <summary>
            Gets whether this row is realized (e.g. loaded with content).
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsFrozen">
            <summary>
            Gets whether this row is frozen (e.g. non-scrollable).
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsEditing">
            <summary>
            Gets whether this row is editing.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsContentCreated">
            <summary>
            Gets whether this row content is created.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.IsExpanded">
            <summary>
            Gets whether the row is expanded or not. By default false.
            Automatically updated by Nevron. Use the Expand() and Collapse() methods to expand/collapse the row, if it CanExpand.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.CanExpand">
            <summary>
            Gets whether the row can be expanded.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.BackgroundFill">
            <summary>
            Gets or sets the background fill of the row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.Y">
            <summary>
            Gets the Y coordinate of the row inside its collection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.Height">
            <summary>
            Gets the Height of the row including its details content. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.FixedHeaderHeight">
            <summary>
            Gets or sets the fixed height of the row header. 
            The default value of this property is Double.NaN, which means that the row sizes to fit its content if realized.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.DesiredHeaderHeight">
            <summary>
            Gets the desired header height of the row.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.ExpandCollapseSymbolBox">
            <summary>
            Gets the expand-collapse symbol of the row.
            It is automatically created/destroyed when the row is realized/virtualized
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.OwnerGrid">
            <summary>
            Gets the grid view to which this cell belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.OwnerCollection">
            <summary>
            Gets the collection in which this row resides
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.ParentRow">
            <summary>
            Gets the row owning this row. Returns null if the row does not have a parent row (i.e. is a root row).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.RootRow">
            <summary>
            Gets the root row owning this row. Returns this row if the row does not have a parent row, otherwise returns the parent row root row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.Level">
            <summary>
            Gets the level of this row in the hierarchy.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRow.RowHeader">
            <summary>
            Tries to get the row header. A valid instance is only returned when the row is realized and the row headers are visible.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetHeaderTop">
            <summary>
            Gets the Y coordinate in the row header top (in row collection coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetHeaderBottom">
            <summary>
            Gets the Y coordinate of the row header bottom (in row collection coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetHeaderTopInRootRows">
            <summary>
            Gets the Y coordinate in the row header top (in root rows coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetHeaderBottomInRootRows">
            <summary>
            Gets the Y coordinate of the row header bottom (in root rows coordinates)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetHeaderHeight">
            <summary>
            Gets the header height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetNextNavigationRow">
            <summary>
            Gets the next navigation row
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetPrevNavigationRow">
            <summary>
            Gets the prev navigation row
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetFirstNavigationRow">
            <summary>
            Gets the first navigation row that resides in this row subtree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetLastNavigationRow">
            <summary>
            Gets the last navigation row that resides in this row subtree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.EnsureContentCreated">
            <summary>
            Ensures that the content of the row is created (e.g. the row is realized)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.EnsureContentDestroyed">
            <summary>
            Ensures that the content of the row is destroyed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetCellCount">
            <summary>
            Gets the count of cells in this row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetCellAt(System.Int32)">
            <summary>
            Gets the cell at the specified inde.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.Expand">
            <summary>
            Expands the row, if it is collapsed and is expandable. 
            Returns true if after the operation the row is expanded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.Collapse(System.Boolean)">
            <summary>
            Collapses the row, if it is expanded. Optionally destroys the content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.ToggleExpanded">
            <summary>
            Toggles the expanded state of the row, if possible
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.Realize">
            <summary>
            Realizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.Virtualize(System.Boolean)">
            <summary>
            Virtualizes the row (e.g. unloads its header and content). Returns whether the row has been successfully virtualized.
            </summary>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.CanVirtualize">
            <summary>
            Determines whether the row can be virtualized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.MeasureCore">
            <summary>
            Measures the height of the row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.ArrangeCore">
            <summary>
            Arranges the row contents
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetDefaultHeaderHeight">
            <summary>
            Must override to measure the default header height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.MeasureHeaderHeight">
            <summary>
            
            </summary>
            <param name="ownerGridView"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.ArrangeHeader(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="height"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.MeasureContent">
            <summary>
            Must override to measure the row content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.ArrangeContent(System.Double)">
            <summary>
            Arranges the content of the row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnIsCurrentChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IsCurrent property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnIsSelectedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IsSelected property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnIsFrozenChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IsFrozen property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnIsEditingChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IsEditing property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnIsExpandedChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the IsExpanded property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnDesiredHeaderHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnFixedHeaderHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.RealizeCore">
            <summary>
            Realizes the row style and content, but does not realize its children and details, which are subject to Y range virtualization.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.VirtualizeCore(System.Boolean)">
            <summary>
            Virtualized the the row style and content and also virtualizes it children rows and details.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.RealizeCells">
            <summary>
            Realizes the row cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.VirtualizeCells">
            <summary>
            Virtualized the row cells.
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.RealizeContentYRange(System.Double,System.Double)">
            <summary>
            Realizes the content of the row than falls in the specified Y range.
            </summary>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.VirtualizeContent(System.Boolean)">
            <summary>
            Virtualizes the row content
            </summary>
            <param name="force"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnRealized">
            <summary>
            Called when the row has been successfully realized
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnVirtualized">
            <summary>
            Called when the row has been successfully virtualized
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.AccumulateHeaderDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the header elements for painting
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.AccumulateContentDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the content for painting
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetChildRows">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.CreateContent">
            <summary>
            Creates the row content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.DestroyContent">
            <summary>
            Destroys the row content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRow.GetVisibleScrollableRowsCount(System.Double,System.Double)">
            <summary>
            Gets the count of visible rows contained inside the specified Y range (in row coordinates).
            If the row is expanded, this method delegates to contained rows GetVisibleRowsCount method.
            If the row is not expanded, this method return 0.
            </summary>
            <param name="top"></param>
            <param name="bottom"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.NRowSchema">
            <summary>
            Schema associated with NRow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.ExpandCollapseSymbolBoxChild">
            <summary>
            Reference to the symbol child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsCurrentProperty">
            <summary>
            Reference to the IsCurrent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsSelectedProperty">
            <summary>
            Reference to the IsSelected property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsRealizedProperty">
            <summary>
            Reference to the IsRealized property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsFrozenProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsExpandedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsEditingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.IsContentCreatedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.CanExpandProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.FixedHeaderHeightProperty">
            <summary>
            Reference to the HeaderHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.DesiredHeaderHeightProperty">
            <summary>
            Reference to the DesiredHeaderHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRow.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowCollection">
            <summary>
            Represents the root coolection of rows. Accessible from the NGridView.Rows property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollection.X">
            <summary>
            Gets the X coordinate of this collection inside the parent coordinate system.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollection.WindowX">
            <summary>
            Gets the X coordinate of the window in which this collection is visualized (in parent coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollection.WindowY">
            <summary>
            Gets the Y coordinate of the window in which this collection is visualized (in parent coordinates)
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollection.WindowWidth">
            <summary>
            Gets the width of the window in which this collection is visualized.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollection.WindowHeight">
            <summary>
            Gets the height of the window in which this collection is visualized.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollection.WindowArea">
            <summary>
            Gets the window area. 
            This is a shortcut property that gets the WindowX, WindowY, WindowWidth and WindowHeight properties as NRectangle.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <param name="unit"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.GetClip">
            <summary>
            Overriden to clip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnYChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Y property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the X property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnWindowWidthChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowWidth property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnWindowHeightChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowHeight property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnWindowXChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowX property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.OnWindowYChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the WindowY property has changed
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.ArrangeCore">
            <summary>
            Arranges the row collection and pools this collection for realization.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollection.ShowGridlineBeforeFirstRow">
            <summary>
            Determnes whether a gridline is shown before the first row
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollection.NRowCollectionSchema">
            <summary>
            Schema associated with NRowCollection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollection.XProperty">
            <summary>
            Reference to the X property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollection.WindowXProperty">
            <summary>
            Reference to the WindowX property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollection.WindowYProperty">
            <summary>
            Reference to the WindowY property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollection.WindowWidthProperty">
            <summary>
            Reference to the WindowWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollection.WindowHeightProperty">
            <summary>
            Reference to the WindowHeight property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowCollectionBase">
            <summary>
            Represents a collection of NRow instances. Servers as base class for NRowCollection (root rows collection) and NChildRowCollection classes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.GetIterator">
            <summary>
            Gets an iterator that iterates through the children in forward order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.GetReverseIterator">
            <summary>
            Gets an iterator that iterates throw the child elements in reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.Count">
            <summary>
            Gets the count of elements in this collection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.Contains(Nevron.Nov.Grid.NRow)">
            <summary>
            Queries whether this collection contains the specified element at least once
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.IndexOf(Nevron.Nov.Grid.NRow)">
            <summary>
            Returns the index of the specified item inside this collection.
            Returns -1 if the item is not contained in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.Insert(System.Int32,Nevron.Nov.Grid.NRow)">
            <summary>
            Inserts the item at the specified index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.Clear">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.Add(Nevron.Nov.Grid.NRow)">
            <summary>
            Adds (appends) the item at the end of the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.Remove(Nevron.Nov.Grid.NRow)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">item to remove</param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.CopyTo(Nevron.Nov.Grid.NRow[],System.Int32)">
            <summary>
            Copies all items of this set to the specified array, starting from the specified array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.ToArray">
            <summary>
            Converts this set to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant measure elements that consider this element as measure parent, and want to inform it to invalidate it's measure.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Called by child or descendant arrange elements that consider this element as arrange parent, and want to inform it to invalidate it's arrange.
            </summary>
            <param name="arrangeChild"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.Y">
            <summary>
            Gets the Y coordinate of this collection inside the parent coordinate system.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.Height">
            <summary>
            Gets the Height of all rows in this collection.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.ContainsExpandableRows">
            <summary>
            Gets whether this collection contains expandable rows.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowCollectionBase.OwnerGrid">
            <summary>
            Gets the grid view to which this cell belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Overriden to ensure that the previews child is the last child in the list.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            Called to propagate the display traversal to the specified child node.
            </summary>
            <param name="visitor"></param>
            <param name="child"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre children paint.
            </summary>
            <remarks>
            Overriden to render the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <remarks>
            Overriden to render focus decorator
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.CanTransform">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates
            </summary>
            <param name="unit"></param>
            <param name="dpi"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.MeasureCore">
            <summary>
            Measures the height of the of the collection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.ArrangeCore">
            <summary>
            Arranges the rows in a vertical stack.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.ShowGridlineBeforeFirstRow">
            <summary>
            Determnes whether a gridline is shown before the first row
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the collection background painting
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowCollectionBase.OnPaintForeground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the collection foreground painting
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollectionBase.NRowCollectionBaseSchema">
            <summary>
            Schema associated with NRowCollectionBase
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollectionBase.YProperty">
            <summary>
            Reference to the Y property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollectionBase.HeightProperty">
            <summary>
            Reference to the Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowCollectionBase.ContainsExpandableRowsProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowExpandCollapseSymbolBox">
            <summary>
            Represents the row expand collapse symbol box.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowExpandCollapseSymbolBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowExpandCollapseSymbolBox.NRowExpandCollapseSymbolBoxSchema">
            <summary>
            Schema associated with NRowExpandCollapseSymbolBox.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NSummaryRow">
            <summary>
            Represents a details row, which is automatically created for each details row of a NRecordDataRow.
            The header of each details row is a NSummaryCellCollection (collection of NSummaryCell).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NSummaryRow.Cells">
            <summary>
            Gets or sets the collection of details row cells.
            Automatically updated by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.GetCellCount">
            <summary>
            Gets the count of cells in this row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.GetCellAt(System.Int32)">
            <summary>
            Gets the cell at the specified inde.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.RealizeCells">
            <summary>
            Realizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.VirtualizeCells">
            <summary>
            Virtualizes the row header
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.AccumulateHeaderDisplayChildren(Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the header elements for painting
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.GetDefaultHeaderHeight">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.MeasureHeaderHeight">
            <summary>
            Overriden to measure the header desired height
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NSummaryRow.ArrangeHeader(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Arranges the group row header
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSummaryRow.NSummaryRowSchema">
            <summary>
            Schema associated with NSummaryRow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NSummaryRow.CellsChild">
            <summary>
            Reference to the header child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnRowValue">
            <summary>
            Represents a provider for row values that obtains row values from a specific grid column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnRowValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnRowValue.#ctor(Nevron.Nov.Grid.NColumn)">
            <summary>
            Initializer constructor
            </summary>
            <param name="column"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NColumnRowValue.Column">
            <summary>
            Gets or sets the column from which to get row values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnRowValue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnRowValue.NColumnRowValueSchema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NColumnRowValue.ColumnRefProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NColumnRowValue.NColumnRowValueDesigner">
            <summary>
            Designer associated with NColumnRowValue
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NColumnRowValue.NColumnRowValueDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NCustomRowValue`1">
            <summary>
            Represents a provider for row values that obtains row values by calling an protected overridable functions that by default call delegates of the custom row value provider.
            </summary>
            <typeparam name="TRowValue">type of row values returned</typeparam>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowValue`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowValue`1.#ctor(Nevron.Nov.FunctionResult{Nevron.Nov.NNullable{`0},Nevron.Nov.Grid.NCustomRowValueGetRowValueArgs{`0}},System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="getRowValue">delegate for getting a row value from the grid</param>
            <param name="description"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomRowValue`1.GetRowValueDelegate">
            <summary>
            Delegate for getting a row value. It is mandatory to handle this delegate.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NCustomRowValue`1.Description">
            <summary>
            Gets or sets the description associated with this row value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowValue`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NCustomRowValue`1.GetRowValue(Nevron.Nov.Grid.NGrid,System.Int32)">
            <summary>
            Gets a row value for the specified grid
            </summary>
            <param name="grid"></param>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomRowValue`1.NCustomRowValueSchema">
            <summary>
            Schema associated with NCustomRowValue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NCustomRowValue`1.DescriptionProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFieldRowValue">
            <summary>
            Represents a provider for row values that obtains row values from a specific data source field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFieldRowValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFieldRowValue.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NFieldRowValue.FieldName">
            <summary>
            Gets or sets the field name from which to get row values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFieldRowValue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFieldRowValue.NFieldRowValueSchema">
            <summary>
            Schema associated with NFieldRowValue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFieldRowValue.FieldNameProperty">
            <summary>
            Reference to FieldName property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFieldRowValue.NFieldRowValueDesigner">
            <summary>
            Designer associated with NFieldRowValue
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFieldRowValue.NFieldRowValueDesigner.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NFormulaRowValue">
            <summary>
            Represents a provider for row values that obtains row values from a specific data source field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowValue.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="formula"></param>
        </member>
        <member name="P:Nevron.Nov.Grid.NFormulaRowValue.Formula">
            <summary>
            Gets or sets the row formula which must be evaluated for each row to produce a row value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NFormulaRowValue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormulaRowValue.NFormulaRowValueSchema">
            <summary>
            Schema associated with NFormulaRowValue
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NFormulaRowValue.FormulaProperty">
            <summary>
            Reference to Forumala property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowValue">
            <summary>
            Represents a provider for grid row values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NRowValue.OwnerGrid">
            <summary>
            Gets the grid to which this row value provider belongs.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NRowValue.NRowValueSchema">
            <summary>
            Schema associated with NRowValue
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NRowValue.NRowValueDesigner">
            <summary>
            Designer associated with NRowValue instances.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValue.NRowValueDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValue.NRowValueDesigner.GetCompatibleTypes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValue.FromFormula(System.String)">
            <summary>
            Helper that creates a new NFormulaRowValue
            </summary>
            <param name="formula"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValue.FromFieldName(System.String)">
            <summary>
            Helper that creates a new NFieldRowValue
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.NRowValue.FromColumn(Nevron.Nov.Grid.NColumn)">
            <summary>
            Helper that creates a new NColumnRowValue
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool">
            <summary>
            The NClickAndDragColumnHeadersTool performs the clicking and dragging of column headers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.OnActivated">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.OnDeactivated">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.OnAborted">
            <summary>
            Overriden to call the CancelDragging method of the dragged handle and reset the reference to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when not active.
            </summary>
            <param name="args"></param>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.OperatesInWindowArea">
            <summary>
            Overriden to return false.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.NClickAndDragColumnHeadersToolSchema">
            <summary>
            Schema associated with NClickAndDragColumnHeadersTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.ENDragColumnAction">
            <summary>
            Defines the possible drag actions taken by this tool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.ENDragColumnAction.None">
            <summary>
            No action is taken
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.ENDragColumnAction.Group">
            <summary>
            The column creates a grouping which is inserted at a specific index in the grouping collection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragColumnHeadersTool.ENDragColumnAction.Reorder">
            <summary>
            The dragged column is inserted at a new index in the column collection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool">
            <summary>
            The NClickAndDragGroupingHeadersTool performs the clicking and dragging of grouping headers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.OnActivated">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.OnDeactivated">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.OnAborted">
            <summary>
            Overriden to call the CancelDragging method of the dragged handle and reset the reference to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when active.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and tooltip that the tool requests when not active.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.OperatesInWindowArea">
            <summary>
            Overriden to return false.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.NClickAndDragGroupingHeadersToolSchema">
            <summary>
            Schema associated with NClickAndDragGroupingHeadersTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.ENDragGroupingAction">
            <summary>
            Defines the possible actions taken in response to dragging and dropping a grouping.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.ENDragGroupingAction.None">
            <summary>
            No action is taken
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.ENDragGroupingAction.Remove">
            <summary>
            The dragged grouping is removed from the grouping collection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickAndDragGroupingHeadersTool.ENDragGroupingAction.Reorder">
            <summary>
            The dragged grouping is inserted at a new index in the grouping collection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NClickEditTool">
            <summary>
            The NClickSelectTool performs the click select functionality of the grid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickEditTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickEditTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickEditTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="P:Nevron.Nov.Grid.Tools.NClickEditTool.ClickMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the tool performs click selection.
            By default set to ENMouseButtonEvent.LeftButtonDown.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickEditTool.CanClickSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether click select can be performed
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NClickEditTool.ClickSelect(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Performs a click select
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickEditTool.NClickEditToolSchema">
            <summary>
            Schema associated with NClickSelectTool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NClickEditTool.ClickMouseButtonEventProperty">
            <summary>
            Reference to the ClickSelectEvent property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NContextMenuTool">
            <summary>
            The NContextMenuTool shows a context menu for the items below the mouse pointer.
            The context menu that is displayed is controlled by the GridView.ContextMenu attribute.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NContextMenuTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NContextMenuTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select, if it can be performed
            </summary>
            <param name="args"></param> 
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NContextMenuTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Processes the mouse down event. Overriden to perform click select if it can be performed and 
            perform drill down select if it can be performed.
            </summary>
            <param name="args"></param> 
        </member>
        <member name="P:Nevron.Nov.Grid.Tools.NContextMenuTool.ContextMenuMouseButtonEvent">
            <summary>
            Gets or sets the mouse button event on which the context menu is shown.
            By default set to ENMouseButtonEvent.RightButtonUp
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NContextMenuTool.CanShowContextMenu(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether context menu can be shown in response to the specified mouse event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NContextMenuTool.ShowContextMenu(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Shows the context menu
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NContextMenuTool.DetermineContextMenuElement(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NContextMenuTool.NContextMenuToolSchema">
            <summary>
            Schema associated with NContextMenuTool
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NContextMenuTool.ContextMenuMouseButtonEventProperty">
            <summary>
            Reference to the ClickSelectEvent property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NGridViewDragTool">
            <summary>
            The NGridViewDragTool class serves as base class for drag tools of grid view elements
            </summary>
            <remarks>
            Tools, which derive from this class can obtain a reference to the grid view hosting the tool 
            by the OwnerGridView property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Tools.NGridViewDragTool.OwnerGridView">
            <summary>
            Obtains a reference to the grid view vuew to which this tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Tools.NGridViewDragTool.OwnerGrid">
            <summary>
            Obtains a reference to the grid view vuew to which this tool belongs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Determines whether the tool can activate itself in response to a mouse args event
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.OnActivated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.OnDeactivated">
            <summary>
            Called when the tool is deactivated
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.OnAborted">
            <summary>
            Called when the tool is aborted
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.UpdateCursorAndTooltip">
            <summary>
            Requests cursor and tooltip depending on the tool state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridViewDragTool.OperatesInWindowArea">
            <summary>
            Determines whether the tool operates in the grid view window area.
            This implementation returns true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NGridViewDragTool.NGridViewDragToolSchema">
            <summary>
            Schema associated with NGridViewDragTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NGridTool">
            <summary>
            The NGridTool class serves as base class for tools that are created for the NGridView widget.
            </summary>
            <remarks>
            Tools, which derive from this class can obtain a reference to the data grid view hosting the tool by the OwnerGridView property.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NGridTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Tools.NGridTool.OwnerGridView">
            <summary>
            Obtains a reference to the grid view to which this tool belongs
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.Tools.NGridTool.OwnerGrid">
            <summary>
            Obtains a reference to the grid view vuew to which this tool belongs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NGridTool.NGridToolSchema">
            <summary>
            Schema associated with NGridTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NResizeColumnsTool">
            <summary>
            The NResizeColumnsTool performs the resizing of the columns.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.OnActivated">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.OnDeactivated">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.OnAborted">
            <summary>
            Overriden to call the CancelDragging method of the dragged handle and reset the reference to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeColumnsTool.OperatesInWindowArea">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NResizeColumnsTool.NResizeColumnsToolSchema">
            <summary>
            Schema associated with NResizeColumnsTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NResizeRowsTool">
            <summary>
            The NResizeRowsTool performs the resizing of the rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Processes the mouse move event
            </summary>
            <remarks>
            Overriden to call the Drag handle method if the tool is active.
            If the tool is not active it will try to obtain the last hit handle and request its cursor and tooltip.
            </remarks>
            <param name="args">mouse event arguments</param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.OnActivated">
            <summary>
            Activates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.OnDeactivated">
            <summary>
            Deactivates the tool
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.OnAborted">
            <summary>
            Overriden to call the CancelDragging method of the dragged handle and reset the reference to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NResizeRowsTool.OperatesInWindowArea">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NResizeRowsTool.NResizeRowsToolSchema">
            <summary>
            Schema associated with NResizeRowsTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NScrollAndZoomTool">
            <summary>
            A tool, which implements mouse wheel scrolling and zooming of a NGridView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.DoScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            
            </summary>
            <param name="dir"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.DoZoomIn">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.DoZoomOut">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.DoZoomIn(Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.DoZoomOut(Nevron.Nov.Graphics.NPoint)">
            <summary>
            
            </summary>
            <param name="pin"></param>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NScrollAndZoomTool.NScrollAndZoomToolSchema">
            <summary>
            Schema associated with NScrollAndZoomTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.Tools.NSelectionNavigationTool">
            <summary>
            The NSelectionNavigationTool performs selection navigation commands (Move Left, Right, Top, Bottom, PageUp and PageDown)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyUp">
            <summary>
            Called when the UP key is pressed.
            If Ctrl is pressed, moves the current cell to the first scrollable cell in the current column.
            Otherwise moves the current row to the previous navigatable row and tries to preserve the current cell column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyDown">
            <summary>
            Called when the DOWN key is pressed.
            If Ctrl is pressed, moves the current cell down to the last navigatable cell in the current column.
            Otherwise moves the current row to next navigatable row and tries to preserve the current cell column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyLeft">
            <summary>
            Called when the LEFT key is pressed.
            If Ctrl is pressed, moves the current cell to the first cell in the row.
            Otherwise moves the current cell to the cell that is on the left of the current one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyRight">
            <summary>
            Called when the RIGHT key is pressed.
            If Ctrl is pressed, moves the current cell down to the last navigatable cell in the current column.
            Otherwise moves the current cell to the cell that is on the right of the current one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyPageUp">
            <summary>
            Called when the PAGEUP key is pressed.
            Moves the current/selected row to a row that is one page up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyPageDown">
            <summary>
            Called when the PAGEDOWN key is pressed.
            Moves the current/selected row to a row that is one page down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyHome">
            <summary>
            Called when the HOME key is pressed.
            If Ctrl is pressed, moves the current cell to the first navigatable cell in the grid.
            Otherwise moves the current cell to the first cell in the row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyEnd">
            <summary>
            Called when the END key is pressed.
            If Ctrl is pressed, Moves the current cell to the last navigatable cell in the grid.
            Otherwise moves the current cell down to the last navigatable cell in the current column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyF2">
            <summary>
            Called when the F2 key is pressed.
            Tries to begin editing on the current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyTab">
            <summary>
            Called when the TAB key is pressed.
            If SHIFT is pressed, move the current cell to the left.
            Otherwise, move the current cell to the right.
            In both cases begins editing of the new current cell, if the previous one was in edit mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyEnter">
            <summary>
            Called when the ENTER key is pressed.
            If Ctrl is pressed, tries to commit editing of the current cell.
            Otherwise, commits the editing of the current cell and begins editing of the cell below it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.OnKeyEscape">
            <summary>
            Called when the ESC key is pressed.
            Tries to cancel the editing of the current cell.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.Tools.NSelectionNavigationTool.NSelectionNavigationToolSchema">
            <summary>
            Schema associated with NSelectionNavigationTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridModule">
            <summary>
            Represents the Nevron Grid module.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridModule.Install">
            <summary>
            Installs the module.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NGridModule.Instance">
            <summary>
            Gets the instance of this module.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NGridUIThemePlugin">
            <summary>
            A theme plugin that adds rules for the Nevron diagram control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateStyles(Nevron.Nov.UI.NUITheme)">
            <summary>
            Creates the style sheet rules for this theme plugin.
            </summary>
            <param name="uiTheme"></param>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateGridStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateDataCellStyles">
            <summary>
            Creates the styles for the rulers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateRowHeaderStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateRowStyles">
            <summary>
            Creates the row styles
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreaterColumnsStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateColumnHeaderStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateColumnDraggingHeaderStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateFrozenSplitterStyles">
            <summary>
            Creates the styles of the frozen splitters
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateCellViewStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateCellEditorStyles">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateGroupingPanelStyle">
            <summary>
            Styles the NGroupingPanel
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateGroupingHeaderStyles">
            <summary>
            Styles the NGroupingHeader
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NGridUIThemePlugin.CreateCheckBoxCheckedSymbol(Nevron.Nov.Graphics.NColor)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Grid.NGridUIThemePlugin.UITheme">
            <summary>
            The theme this plugin should add rules to.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NResources">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Grid.NResources.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_ClearFilter_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_ClearSorting_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_ConditionalFormatting_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_Filter_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_FormatCells_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_GroupBy_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_SortAscending_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_Column_SortDescending_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_View_Columns_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_View_GroupingPanel_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Image_View_RowHeaders_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Cursor_CreateBezierCurve_cur">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Grid.NResources.Cursor_CreateCircularArc_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RBIN_documentation_zip">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RCUR_CreateBezierCurve_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RCUR_CreateCircularArc_cur">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_ClearFilter_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_ClearSorting_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_ConditionalFormatting_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_Filter_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_FormatCells_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_GroupBy_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_SortAscending_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_Column_SortDescending_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_View_Columns_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_View_GroupingPanel_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.RIMG_View_RowHeaders_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Grid.NResources.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Grid.NResourcesData1">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.SOWG.GetHashCode">
            <summary>
            Gets the hash code of this item.
            Note: Must be called only for groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.SOWG.Equals(System.Object)">
            <summary>
            Gets whether the items are equal.
            Note: Must be called only for groups.
            </summary>
            <param name="xOWG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bhxG.Compare(System.Int32,System.Int32)">
            <summary>
            Comparers rows a and b
            </summary>
            <param name="fhxG"></param>
            <param name="GhxG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bhxG.Compare(Nevron.Nov.Internal.jpWG,Nevron.Nov.Internal.jpWG)">
            <summary>
            Comparers tree data members a and b
            </summary>
            <param name="hhxG"></param>
            <param name="IhxG"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.ntWG`2.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.ntWG`2.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.ntWG`2.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.ntWG`2.OnUse">
            <summary>
            Called when the format is used
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.ntWG`2.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Grid.Formats.NGridLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="StWG"></param>
            <param name="ttWG"></param>
            <param name="UtWG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.ntWG`2.SaveToStreamCore(`0,System.IO.Stream,Nevron.Nov.Grid.Formats.NGridSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="vtWG"></param>
            <param name="WtWG"></param>
            <param name="xtWG"></param>
            <param name="YtWG"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.dUWG`2.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dUWG`2.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.dUWG`2.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.dUWG`2.OnUse">
            <summary>
            Called when the format is used
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.dUWG`2.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Grid.Formats.NGridLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="fUWG"></param>
            <param name="GUWG"></param>
            <param name="hUWG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.dUWG`2.SaveToStreamCore(`0,System.IO.Stream,Nevron.Nov.Grid.Formats.NGridSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="IUWG"></param>
            <param name="jUWG"></param>
            <param name="KUWG"></param>
            <param name="lUWG"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.nrvG.Nevron#Nov#Formulas#INVariableProvider#GetVariableIndex(System.String)">
            <summary>
            Gets a variable index for the specified string (used during parsing).  Returns
            -1 if the specified string is not a valid variable name.
            </summary>
            <param name="WrvG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.nrvG.Nevron#Nov#Formulas#INVariableProvider#GetVariableValue(System.Int32)">
            <summary>
            Gets the variable value by a previously provided the variable index (used
            during evaluation).  Throws an exception if the specified index is not valid.
            </summary>
            <param name="xrvG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.nrvG.Nevron#Nov#Formulas#INVariableProvider#CanSetVariableValue(System.Int32)">
            <summary>
            Determines whether the variable value for the specified index can be set.
            </summary>
            <param name="YrvG"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.nrvG.Nevron#Nov#Formulas#INVariableProvider#SetVariableValue(System.Int32,Nevron.Nov.NVariant)">
            <summary>
            Sets the value of the specified variable.
            </summary>
            <param name="ASvG"></param>
            <param name="var"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OIxG.AccumulateMonitoredNodeAggregatedNodes(Nevron.Nov.Dom.NNode,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode})">
            <summary>
            
            </summary>
            <param name="pIxG"></param>
            <param name="QIxG"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OIxG.AccumulateMonitoredNodeChildren(Nevron.Nov.Dom.NNode,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NNode})">
            <summary>
            
            </summary>
            <param name="rIxG"></param>
            <param name="SIxG"></param>
        </member>
    </members>
</doc>
