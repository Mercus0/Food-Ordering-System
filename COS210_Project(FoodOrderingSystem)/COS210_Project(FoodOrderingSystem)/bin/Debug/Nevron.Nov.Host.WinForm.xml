<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.Host.WinForm</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.Windows.Forms.NNovVerbEditor">
            <summary>
            An editor for NOV verbs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovVerbEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the WinForm edit style.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovVerbEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the widget.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value">The widget to edit.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NNovWidgetEditor">
            <summary>
            Shows a NOV widget editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovWidgetEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the WinForm edit style.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovWidgetEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the widget.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value">The widget to edit.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NHostWinFormLoadAssemblyType">
            <summary>
            Dummy type used to explicitly load the Nevron.Nov.Host.WinForm assembly
            </summary>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NNovControlHostDesigner">
            <summary>
            A WinForms NOV contol host designer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovControlHostDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovControlHostDesigner.Verbs">
            <summary>
            Gets the verbs of this designer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovControlHostDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            Overriden to remove the "Widget" property from the designer property grid
            if the NOV widget has a custom design time state.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovControlHostDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            Overriden to modify the metadata for some properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovControlHostDesigner.PreFilterEvents(System.Collections.IDictionary)">
            <summary>
            Overriden to remove all but the Nevron related events.
            </summary>
            <param name="events"></param>
        </member>
        <member name="F:Nevron.Nov.Windows.Forms.NNovControlHostDesigner.NevronCategory">
            <summary>
            The name of category for Nevron control events.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NNovControlHost`1">
            <summary>
            A System.Windows.Forms.Control that contains a NOV widget of a certain type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovControlHost`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NNovWidgetHost`1">
            <summary>
            A System.Windows.Forms.Control that contains a NOV widget of a certain type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovWidgetHost`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovWidgetHost`1.#ctor(`0)">
            <summary>
            Creates a new NNovControl that hosts the specified widget.
            </summary>
            <param name="widget"></param>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovWidgetHost`1.#ctor(`0,System.Windows.Forms.DockStyle)">
            <summary>
            Creates a new NNovControl that hosts the specified widget.
            </summary>
            <param name="widget"></param>
            <param name="dockStyle"></param>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovWidgetHost`1.Widget">
            <summary>
            Gets/Sets the NOV widget contained by this host.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovWidgetHost`1.DesignTimeState">
            <summary>
            Gets/Sets the design time state of the editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovWidgetHost`1.UpdateDesignTimeState">
            <summary>
            Updates the design time state of the control.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NNovChildWindowHost">
            <summary>
            A System.Windows.Forms.Control which can contain a NOV NChildWindow.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovChildWindowHost.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovChildWindowHost.#ctor(System.Windows.Forms.DockStyle)">
            <summary>
            Initializer constructor
            </summary>
            <param name="dockStyle"></param>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Dispose(System.Boolean)">
            <summary>
            Disposes this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.AutoSize">
            <summary>
            Gets or sets whether the control must be automatically sized to its content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Dock">
            <summary>
            Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Anchor">
            <summary>
            Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent. 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Padding">
            <summary>
            Gets the space, in pixels, that is specified by default between controls. This property returns zero padding, since the host does not use this property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.BackColor">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.BackgroundImage">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.BackgroundImageLayout">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.CausesValidation">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.ContextMenu">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.ContextMenuStrip">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Cursor">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Enabled">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Focused">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Font">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.ForeColor">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.ImeMode">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Margin">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.RightToLeft">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Text">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.UseWaitCursor">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.Visible">
            <summary>
            Not used by NOV controls.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovChildWindowHost.GetPreferredSize(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="proposedSize"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Windows.Forms.NNovChildWindowHost.DefaultSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovChildWindowHost.OnParentChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Nevron.Nov.Windows.Forms.NNovApplicationInstaller">
             <summary>
             The Windows Forms Application installer.
             Make sure to call its Install() method in your Windows Forms application Main()
             function prior to using Nevron Open Vision Products. For example:
             <code>
             static class Program
             {
                 [STAThread]
                 static void Main()
                 {
                     NNovApplicationInstaller.Install();
            
                     Application.EnableVisualStyles();
                     Application.SetCompatibleTextRenderingDefault(false);
                     Application.Run(new Form1());
                 }
             }
             </code>
             </summary>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovApplicationInstaller.Install(Nevron.Nov.NModule[])">
            <summary>
            Installs the services needed for Windows Forms applications.
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:Nevron.Nov.Windows.Forms.NNovApplicationInstaller.InstallServer(Nevron.Nov.NModule[])">
            <summary>
            Installs the services needed for a WPF application server.
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OlOb`1.OnLoad(System.EventArgs)">
            <summary>
            Called when the form is first loaded.
            </summary>
            <param name="QlOb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OlOb`1.OnShown(System.EventArgs)">
            <summary>
            Called after the form has been shown.
            </summary>
            <param name="rlOb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OlOb`1.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the form is about to be closed.
            </summary>
            <param name="SlOb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OlOb`1.OnLocationChanged(System.EventArgs)">
            <summary>
            Called when the location of the form has changed.
            </summary>
            <param name="tlOb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.QtKI.NativeDecodeImageData(System.Byte[],Nevron.Nov.Graphics.NImageFormat)">
            <summary>
            Decodes the specified image data, using GDI+ image decoders.
            </summary>
            <param name="rtKI">Encoded image data.</param>
            <param name="StKI">The format of the data in the byte array - not used, because GDI+ performs its own format recognition.</param>
            <returns>Returns a raster that contains the decoded image data. Returns null if the decoding was not successful.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.QtKI.NativeEncodeBitmap(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Encodes a raster into BMP image format, using the GDI+ image encoder.
            </summary>
            <param name="ttKI">The raster to be encoded.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.QtKI.NativeEncodePng(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NPngEncoderSettings)">
            <summary>
            Encodes a raster into PNG image format, using the GDI+ image encoder.
            </summary>
            <param name="UtKI">The raster to be encoded.</param>
            <param name="vtKI">PNG encoder settings.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.QtKI.NativeEncodeJpg(Nevron.Nov.Graphics.NRaster,Nevron.Nov.Graphics.NJpegEncoderSettings)">
            <summary>
            Encodes a raster into JPEG image format, using the GDI+ image encoder.
            </summary>
            <param name="WtKI">The raster to be encoded.</param>
            <param name="xtKI">JPEG encoder settings.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.QtKI.NativeEncodeTiff(Nevron.Nov.Graphics.NRaster)">
            <summary>
            Encodes a raster into TIFF image format, using the image encoding capabilities of the underlying platform.
            Must be implemented in the image service of a platform host.
            </summary>
            <param name="YtKI">The raster to be encoded.</param>
            <returns>A byte array containing the encoded image data. Returns null if the encoding fails.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.Dispose(System.Boolean)">
            <summary>
            Disposes this surface
            </summary>
            <param name="hxKI"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overriden to return true
            </summary>
            <param name="IxKI"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.IsInputChar(System.Char)">
            <summary>
            Overriden to return true
            </summary>
            <param name="jxKI"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.OnHandleCreated(System.EventArgs)">
            <summary>
            Called when the native window handle is created.
            </summary>
            <param name="KxKI"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.OnHandleDestroyed(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="lxKI"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Overriden to request a repaint of the surface
            </summary>
            <param name="MxKI"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WWKI`1.OnDpiChangedBeforeParent(System.EventArgs)">
            <summary>
            Called when the DPI has changed, and the parent was not yet notified about it
            </summary>
            <param name="nxKI"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OAlI.Nevron#Nov#Dom#INEventHandler#Invoke(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the measure of the child window has changed.
            </summary>
            <param name="QAlI"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Office.NSplashScreenForm">
            <summary>
            Represents a splash screen form.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NSplashScreenForm.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NSplashScreenForm.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            Overriden to size the form to the specified image.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NWinWindowState">
            <summary>
            WinForms form state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NWinWindowState.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NWinWindowState.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="form"></param>
        </member>
        <member name="P:Nevron.Nov.Office.NWinWindowState.StartPosition">
            <summary>
            The start position of the form.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NWinWindowState.FormBounds">
            <summary>
            The bounds of the form.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NWinWindowState.WindowState">
            <summary>
            The window state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NWinWindowState.ApplyToWindow(System.Windows.Forms.Form)">
            <summary>
            Applies the state to a window.
            </summary>
            <param name="form"></param>
        </member>
        <member name="F:Nevron.Nov.Office.NWinWindowState.NWinWindowStateSchema">
            <summary>
            Schema associated with NWinWindowState.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NWinWindowState.StartPositionProperty">
            <summary>
            Reference to the StartPosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NWinWindowState.FormBoundsProperty">
            <summary>
            Reference to the FormBounds property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NWinWindowState.WindowStateProperty">
            <summary>
            Reference to the WindowState property.
            </summary>
        </member>
    </members>
</doc>
