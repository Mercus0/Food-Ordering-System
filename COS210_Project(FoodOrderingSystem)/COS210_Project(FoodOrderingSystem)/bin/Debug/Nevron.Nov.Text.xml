<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nevron.Nov.Text</name>
    </assembly>
    <members>
        <member name="T:Nevron.Nov.Text.Formats.Docx.NDocxSaveSettings">
            <summary>
            Contains a set of settings to use when saving a DOCX document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.Docx.NDocxSaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Docx.NDocxSaveSettings.CompressionLevel">
            <summary>
            Gets/Sets the compression level to apply when creating the DOCX file/stream.
            By default set to BestCompression.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.Epub.NEpubSaveSettings">
            <summary>
            Contains a set of settings to use when saving an electronic publication (EPUB).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.Epub.NEpubSaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Epub.NEpubSaveSettings.CompressionLevel">
            <summary>
            Gets/Sets the compression level to apply when creating the EPUB file/stream.
            By default set to BestCompression.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.Html.NHtmlSaveSettings">
            <summary>
            Holds the settings for saving of HTML documents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.Html.NHtmlSaveSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Html.NHtmlSaveSettings.EmbedImages">
            <summary>
            Specifies whether to embed images as Base64 strings in the generated
            HTML documents or not. By default set to true.
            </summary>
            <remarks>
            If this property is set to false, images will be generated in the same folder
            as the generated HTML files. Note that for some platforms like Silverlight
            this is not possible due to security reasons.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Html.NHtmlSaveSettings.InlineStyles">
            <summary>
            Determines whether to inline the CSS styles in "style" attributes or to create and
            use CSS classes. By default set to false, which means that the HTML exporter will
            create and use CSS classes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Html.NHtmlSaveSettings.MinifyHtml">
            <summary>
            Determines whether to minify the resulting HTML by not adding any new lines or tabulations.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Html.NHtmlSaveSettings.DocumentType">
            <summary>
            Specifies the document type of the generated HTML document.
            By default set to HTML 5 doctype.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.Html.NHtmlLoadSettings">
            <summary>
            Holds the settings for loading of HTML documents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.Html.NHtmlLoadSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.Html.NHtmlLoadSettings.ResourceLoader">
            <summary>
            Gets/Sets the resource loader to use for resolving of URIs and
            loading of resource data.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.NImageTextFormat">
            <summary>
            Base class for image text formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NImageTextFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NImageTextFormat.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NImageTextFormat.CanSave">
            <summary>
            Returns true if the format can save a text document to a stream
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NImageTextFormat.OnUse">
            <summary>
            Called when the format is used
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NImageTextFormat.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="loadSettings"></param>
            <param name="progress"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NImageTextFormat.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="document"></param>
            <param name="stream"></param>
            <param name="saveSettings"></param>
            <param name="progress"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.NTextFormat">
            <summary>
            The base of all text formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NTextFormat.OnDocumentLoaded(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            Overriden to validate the document integrity
            </summary>
            <param name="document"></param>
            <param name="loadSettings"></param>
            <param name="progress"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.NevronBinary">
            <summary>
            Represents the Nevron Binary text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.NevronXml">
            <summary>
            Represents the Nevron XML text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.Docx">
            <summary>
            Represents the Microsoft Word (DOCX) text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.Epub">
            <summary>
            Represents the Electronic Publication (EPUB) text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.Html">
            <summary>
            Represents the HTML text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.Pdf">
            <summary>
            Represents the PDF text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.Rtf">
            <summary>
            Represents the RTF text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormat.Txt">
            <summary>
            Represents the TXT text format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.NTextFormatRegistry">
            <summary>
            A document format registry for Text Formats - such as RTF, HTML, DOCX, TXT etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NTextFormatRegistry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Formats.NTextFormatRegistry.DefaultFormatExtension">
            <summary>
            Gets the fallback format extension of document format registry.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NTextFormatRegistry.GetDocumentTypeName">
            <summary>
            Gets the document type name.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Formats.NTextFormatRegistry.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.NTextLoadSettings">
            <summary>
            This class holds the settings that are used when loading documents in different text formats.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Formats.NTextLoadSettings.ValidateTextIntegrity">
            <summary>
            Whether text integrity should be validated, once the document is loaded
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Formats.NTextSaveSettings">
            <summary>
            This class holds the settings that are used when saving documents to different text formats.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NTextSaveSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Formats.NTextSaveSettings.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="writeUnicodeByteOrderMark"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Formats.NTextSaveSettings.WriteUnicodeByteOrderMark">
            <summary>
            Gets or sets whether to write the Unicode Byte Order Mark (BOM)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NAccessDataSourceFormat">
            <summary>
            Data source format for Access databases.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NAccessDataSourceFormat.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NAccessDataSourceFormat.Name">
            <summary>
            Gets the name of the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NAccessDataSourceFormat.Extensions">
            <summary>
            Gets the file extensions of files this data source can load data from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NAccessDataSourceFormat.Mime">
            <summary>
            Gets the mime type of this data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NAccessDataSourceFormat.LoadFromFile(System.String,Nevron.Nov.Text.Data.NDataSourceLoadSettings)">
            <summary>
            Creates a data source connection from the specified file name.
            </summary>
            <param name="fileName"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NAccessDataSourceFormat.GenerateConnectionString(System.String)">
            <summary>
            Generates a connection string that should be used to connect to the given Access database.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NCsvDataSourceFormat">
            <summary>
            Data source format for text files that contain comma separated values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSourceFormat.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NCsvDataSourceFormat.Name">
            <summary>
            Gets the name of the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NCsvDataSourceFormat.Extensions">
            <summary>
            Gets the file extensions of files this data source can load data from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NCsvDataSourceFormat.Mime">
            <summary>
            Gets the mime type of this data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSourceFormat.LoadFromFile(System.String,Nevron.Nov.Text.Data.NDataSourceLoadSettings)">
            <summary>
            Creates a data source connection from the specified file name.
            </summary>
            <param name="fileName"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSourceFormat.LoadFromStream(System.IO.Stream,Nevron.Nov.Text.Data.NDataSourceLoadSettings)">
            <summary>
            Loads a data source from the given stream.
            </summary>
            <param name="stream"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSourceFormat.GetTableName(System.String)">
            <summary>
            Gets a data table name from the given file name.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NDataSourceFormat">
            <summary>
            Represents a data source format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceFormat.Name">
            <summary>
            Gets the name of the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceFormat.Extensions">
            <summary>
            Gets the file extensions of files this data source can load data from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceFormat.Mime">
            <summary>
            Gets the mime type of this data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.LoadFromFile(System.String,Nevron.Nov.Text.Data.NDataSourceLoadSettings)">
            <summary>
            Loads a data source from the given file using the specified settings.
            </summary>
            <param name="fileName"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.GenerateSelectQuery(System.String)">
            <summary>
            Generates a select query that select all columns and rows from the table with the given name.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.Match(System.String)">
            <summary>
            Checks whether a data source of this format can be stored in a file with the given extension.
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.ParseSelectQuery(System.String,System.String@,System.String[]@)">
            <summary>
            Obtains the column names and the table name from the given SELECT query.
            Throws an exception on error.
            </summary>
            <param name="selectQuery">The SELECT query to parse. Cannot be null and should be a valid SELECT query.</param>
            <param name="tableName">The determined table name.</param>
            <param name="columnNames">The names of the columns that take part in the SELECT query or null
            if all columns should be used.</param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.Register(Nevron.Nov.Text.Data.NDataSourceFormat)">
            <summary>
            Registers the given data source format.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.Unregister(Nevron.Nov.Text.Data.NDataSourceFormat)">
            <summary>
            Unregisters the given data source format.
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceFormat.GetFromFileName(System.String)">
            <summary>
            Gets the data source format for the given file name. Returns null if an appropriate
            data source format for the given file name is not found.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceFormat.Access">
            <summary>
            A reference to the Access data source format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceFormat.Excel">
            <summary>
            A reference to the Excel data source format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceFormat.Csv">
            <summary>
            A reference to the CSV data source format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NDataSourceLoadSettings">
            <summary>
            A class that contains settings used when loading a data source from a file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceLoadSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceLoadSettings.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
            <param name="query"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDataSourceLoadSettings.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionString"></param>
            <param name="query"></param>
            <param name="headerRow"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceLoadSettings.ConnectionString">
            <summary>
            Represents a connection string.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceLoadSettings.Query">
            <summary>
            Represents a query string.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDataSourceLoadSettings.HeaderRow">
            <summary>
            Indicates whether the first row of data contains the names of the columns for data source
            format that support this (e.g. Excel, CSV).
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NExcelDataSourceFormat">
            <summary>
            Data source format for Excel files.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSourceFormat.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NExcelDataSourceFormat.Name">
            <summary>
            Gets the name of the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NExcelDataSourceFormat.Extensions">
            <summary>
            Gets the file extensions of files this data source can load data from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NExcelDataSourceFormat.Mime">
            <summary>
            Gets the mime type of this data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSourceFormat.LoadFromFile(System.String,Nevron.Nov.Text.Data.NDataSourceLoadSettings)">
            <summary>
            Creates a data source connection from the specified file name.
            </summary>
            <param name="fileName"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSourceFormat.LoadFromStream(System.IO.Stream,Nevron.Nov.Text.Data.NDataSourceLoadSettings)">
            <summary>
            Loads a data source from the given stream.
            </summary>
            <param name="stream"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSourceFormat.GenerateConnectionString(System.String,System.Boolean)">
            <summary>
            Generates a connection string that should be used to connect to the given Excel database.
            </summary>
            <param name="fileName">The full name of the Excel file.</param>
            <param name="headerRow">Specifies whether the first row of data contains the column names.</param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NDBMailMergeDataSource">
            <summary>
            Represents a database mail merge data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDBMailMergeDataSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDBMailMergeDataSource.#ctor(Nevron.Nov.Data.ENDbConnectionType,System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="connectionType"></param>
            <param name="connectionString"></param>
            <param name="query"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDBMailMergeDataSource.ConnectionType">
            <summary>
            Gets or sets the connection type associated with this connection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDBMailMergeDataSource.ConnectionString">
            <summary>
            Gets or sets the connection string associated with this connection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NDBMailMergeDataSource.Query">
            <summary>
            Gets/Sets the select query
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDBMailMergeDataSource.LoadDataTable">
            <summary>
            Loads a data source from the given select query.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NDBMailMergeDataSource.NDBMailMergeDataSourceSchema">
            <summary>
            Schema associated with NOdbcDataSourceSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NDBMailMergeDataSource.ConnectionTypeProperty">
            <summary>
            Reference to the ConnectionType property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NDBMailMergeDataSource.ConnectionStringProperty">
            <summary>
            Reference to the ConnectionString property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NDBMailMergeDataSource.QueryProperty">
            <summary>
            Reference to the Query property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NDBMailMergeDataSource.NSqlDataSourceDesigner">
            <summary>
            Designer for NPageGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDBMailMergeDataSource.NSqlDataSourceDesigner.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NDBMailMergeDataSource.NSqlDataSourceDesigner.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NMemoryMailMergeDataSource">
            <summary>
            Represents an in memory data table data source provider.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NMemoryMailMergeDataSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NMemoryMailMergeDataSource.#ctor(Nevron.Nov.Data.NDataTable)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NMemoryMailMergeDataSource.LoadDataTable">
            <summary>
            Loads a data table from this source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NMemoryMailMergeDataSource.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NMemoryMailMergeDataSource.NMemoryMailMergeDataSourceSchema">
            <summary>
            Schema associated with NMemoryMailMergeDataSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NCsvDataSource">
            <summary>
            Data source format for text files that contain comma separated values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSource.#ctor(Nevron.Nov.NUri)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSource.#ctor(Nevron.Nov.NUri,System.Boolean,System.String[])">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fileUri"></param>
            <param name="headerRow"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSource.LoadDataTable">
            <summary>
            Loads a data source from the given stream using the specified query.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NCsvDataSource.NCsvDataSourceSchema">
            <summary>
            Schema associated with NCsvDataSource
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NCsvDataSource.NCsvDataSourceDesigner">
            <summary>
            Designer for NPageGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSource.NCsvDataSourceDesigner.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NCsvDataSource.NCsvDataSourceDesigner.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NExcelDataSource">
            <summary>
            Data source from Excel (xls or xlsx) files.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSource.#ctor">
            <summary>
            Deafault constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSource.#ctor(Nevron.Nov.NUri,System.String,System.Boolean,System.String[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fileUri"></param>
            <param name="sheetName"></param>
            <param name="headerRow"></param>
            <param name="columnNames"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NExcelDataSource.SheetName">
            <summary>
            Gets or sets the sheet name to import from the specified excel files
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NExcelDataSource.Range">
            <summary>
            Gets or sets the range of values to read from the specified excel sheet
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSource.LoadDataTable">
            <summary>
            Loads the data table of this data source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSource.LoadDataSet">
            <summary>
            Loads the data set.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NExcelDataSource.NExcelDataSourceSchema">
            <summary>
            Schema associated with NExcelDataSource
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NExcelDataSource.SheetNameProperty">
            <summary>
            Reference to the SheetName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NExcelDataSource.RangeProperty">
            <summary>
            Reference to the Range property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NExcelDataSource.NExcelDataSourceDesigner">
            <summary>
            Designer for NPageGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSource.NExcelDataSourceDesigner.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NExcelDataSource.NExcelDataSourceDesigner.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Data.NUriDataSource">
            <summary>
            Base class for all URI based data sources.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NUriDataSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NUriDataSource.#ctor(Nevron.Nov.NUri)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fileUri"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NUriDataSource.#ctor(Nevron.Nov.NUri,System.Boolean,System.String[])">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fileUri"></param>
            <param name="firstRowHasColumnNames"></param>
            <param name="columnNames"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NUriDataSource.FileUri">
            <summary>
            Gets or sets the file URI associated with this data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NUriDataSource.ColumnNames">
            <summary>
            Gets or sets the column names to import from the specified file.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Data.NUriDataSource.FirstRowHasColumnNames">
            <summary>
            Gets or sets whether the first row has column names.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NUriDataSource.ProcessDataTable(Nevron.Nov.Data.NDataTable)">
            <summary>
            Processes the data table.
            </summary>
            <param name="dataTable"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Data.NUriDataSource.GetFile">
            <summary>
            Gets the file for the URI of this data source.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.m_FirstRowHasColumnNames">
            <summary>
            Indicates whether the first row has column names.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.m_ColumnNames">
            <summary>
            The column names to import.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.m_FileUri">
            <summary>
            The file URI associated with this data source.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.NUriDataSourceSchema">
            <summary>
            Schema associated with NUriDataSource
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.FileUriProperty">
            <summary>
            Reference to the file Uri property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.ColumnNamesProperty">
            <summary>
            Reference to the column names property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Data.NUriDataSource.FirstRowHasColumnNamesProperty">
            <summary>
            Reference to the FirstRowHasColumnNames property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextLoadAssemblyType">
            <summary>
            Dummy type used to explicitly load the Nevron.Nov.Text assembly
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextLoadAssemblyType.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextModule">
            <summary>
            Represents the Nevron Text module.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextModule.Install">
            <summary>
            Installs the module.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextModule.Instance">
            <summary>
            Gets the instance of this module.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NResources">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NResources.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_BackgroundFill_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseBottomMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseBottomPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseLeftMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseLeftPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseRightMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseRightPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseTopMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_DecreaseTopPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_GroupBlocks_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseBottomMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseBottomPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseLeftMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseLeftPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseRightMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseRightPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseTopMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_IncreaseTopPadding_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_UngroupBlocks_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_Dark_IncreaseLeftMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Blocks_Dark_IncreaseRightMargin_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_Bullets_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_Decimal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_LowerAlpha_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_LowerRoman_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_NoBullets_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_UpperAlpha_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Bullets_UpperRoman_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_Body_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_Footer_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_GoTo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_Header_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_RemoveBookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_RemoveHyperlink_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_Section_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_ShowMarks_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Edit_Dark_ShowMarks_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Flow_FlowLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Flow_FlowNormal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Flow_FlowRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Format_Document_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Format_GroupBlock_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Format_Image_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Format_Paragraph_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Format_TextStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Bookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Break_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Date_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Field_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Hyperlink_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_PageCount_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_PageNumber_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Symbol_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Insert_Time_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Layout_Normal_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Layout_Print_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Layout_Web_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_GreetingLine_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_HighlightMergeFields_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_InsertMergeField_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_MatchFields_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_MergeAndSave_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_MergeAndSend_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_PreviewResults_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_MailMerge_SelectRecipients_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Other_NevronWriterLogo_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Other_NevronWriter_16x16_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Other_NevronWriter_32x32_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Paragraph_DecreaseFirstLineIndent_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Paragraph_IncreaseFirstLineIndent_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_References_DeleteTOC_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_References_EditTOC_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_References_InsertTOC_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_References_UpdateTOC_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_ColumnBreak_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_Continuous_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_EvenPage_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_NextPage_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_OddPage_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_PageBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_PageLayout_PageSize_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_Table_ColumnWidthMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_Table_Select_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_View_ZoomTo100_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_View_ZoomToPage_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_View_ZoomToPageWidth_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_16x16_View_ZoomToTwoPages_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_DOCX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_EPUB_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_HTML_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_NTB_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_NTX_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_PDF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_RTF_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_AppMenu_Formats_TXT_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Home_TextStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Bookmark_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Date_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Field_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Hyperlink_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_PageBreak_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_PageCount_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_PageNumber_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Symbol_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Table_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Insert_Time_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_GreetingLine_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_HighlightMergeFields_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_InsertMergeField_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_MatchFields_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_MergeAndSave_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_MergeAndSend_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Mailings_SelectRecipients_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_PageLayout_PageBackground_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_PageLayout_PageBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_PageLayout_Section_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_References_InsertTOC_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Review_Language_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Review_SpellCheck_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Review_WordCount_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_ColumnWidthMode_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_DeleteTable_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_EditTable_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_InsertColumnLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_InsertColumnRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_InsertRowAbove_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_InsertRowBelow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_Select_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_Table_TableStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_View_NormalLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_View_PrintLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Ribbon_32x32_View_WebLayout_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_SpellCheck_SpellCheck_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_SpellCheck_SpellCheckHatch_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentBottomCenter_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentBottomLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentBottomRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentMiddleCenter_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentMiddleLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentMiddleRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentTopCenter_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentTopLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellAlignmentTopRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellMerge_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellSplit_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellTextDirectionLeftToRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellTextDirectionRightToLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_CellTextDirectionTopToBottom_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_DecreaseCellColSpan_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_DecreaseCellRowSpan_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_DeleteColumn_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_DeleteRow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_DeleteTable_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_EditCell_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_EditColumn_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_EditRow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_EditTable_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_IncreaseCellColSpan_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_IncreaseCellRowSpan_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_InsertColumnLeft_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_InsertColumnRight_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_InsertRowAbove_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_InsertRowBelow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_MergeCells_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_SelectTable_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_SelectTableCell_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_SelectTableColumn_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_SelectTableRow_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_SplitCellHorizontally_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_SplitCellVertically_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Table_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_TableStyle_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_TableStyleOptions_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_AllBorders_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_BottomBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_InsideBorders_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_InsideHorizontalBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_InsideVerticalBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_LeftBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_NoBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_OutsideBorders_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_RightBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Table_Borders_TopBorder_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Test_Test_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Tools_Language_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_Tools_WordCount_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_View_HRuler_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_View_VRuler_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_WrapMode_WrapModeAfter_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_WrapMode_WrapModeBefore_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_WrapMode_WrapModeInline_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_WrapMode_WrapModeNone_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_WrapMode_WrapModeParallel_png">
            <summary></summary>
        </member>
        <member name="P:Nevron.Nov.Text.NResources.Image_WrapMode_WrapModeThrough_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RBIN_documentation_zip">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RBIN_Dictionaries_en_US_oxt">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_BackgroundFill_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseBottomMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseBottomPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseLeftMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseLeftPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseRightMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseRightPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseTopMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_DecreaseTopPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_GroupBlocks_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseBottomMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseBottomPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseLeftMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseLeftPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseRightMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseRightPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseTopMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_IncreaseTopPadding_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_UngroupBlocks_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_Dark_IncreaseLeftMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Blocks_Dark_IncreaseRightMargin_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_Bullets_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_Decimal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_LowerAlpha_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_LowerRoman_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_NoBullets_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_UpperAlpha_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Bullets_UpperRoman_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_Body_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_Footer_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_GoTo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_Header_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_RemoveBookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_RemoveHyperlink_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_Section_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_ShowMarks_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Edit_Dark_ShowMarks_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Flow_FlowLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Flow_FlowNormal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Flow_FlowRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Format_Document_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Format_GroupBlock_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Format_Image_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Format_Paragraph_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Format_TextStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Bookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Break_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Date_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Field_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Hyperlink_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_PageCount_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_PageNumber_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Symbol_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Insert_Time_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Layout_Normal_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Layout_Print_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Layout_Web_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_GreetingLine_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_HighlightMergeFields_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_InsertMergeField_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_MatchFields_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_MergeAndSave_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_MergeAndSend_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_PreviewResults_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_MailMerge_SelectRecipients_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Other_NevronWriterLogo_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Other_NevronWriter_16x16_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Other_NevronWriter_32x32_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Paragraph_DecreaseFirstLineIndent_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Paragraph_IncreaseFirstLineIndent_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_References_DeleteTOC_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_References_EditTOC_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_References_InsertTOC_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_References_UpdateTOC_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_ColumnBreak_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_Continuous_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_EvenPage_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_NextPage_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_OddPage_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_PageBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_PageLayout_PageSize_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_Table_ColumnWidthMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_Table_Select_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_View_ZoomTo100_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_View_ZoomToPage_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_View_ZoomToPageWidth_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_16x16_View_ZoomToTwoPages_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_DOCX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_EPUB_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_HTML_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_NTB_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_NTX_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_PDF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_RTF_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_AppMenu_Formats_TXT_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Home_TextStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Bookmark_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Date_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Field_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Hyperlink_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_PageBreak_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_PageCount_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_PageNumber_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Symbol_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Table_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Insert_Time_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_GreetingLine_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_HighlightMergeFields_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_InsertMergeField_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_MatchFields_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_MergeAndSave_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_MergeAndSend_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Mailings_SelectRecipients_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_PageLayout_PageBackground_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_PageLayout_PageBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_PageLayout_Section_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_References_InsertTOC_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Review_Language_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Review_SpellCheck_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Review_WordCount_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_ColumnWidthMode_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_DeleteTable_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_EditTable_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_InsertColumnLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_InsertColumnRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_InsertRowAbove_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_InsertRowBelow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_Select_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_Table_TableStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_View_NormalLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_View_PrintLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Ribbon_32x32_View_WebLayout_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_SpellCheck_SpellCheck_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_SpellCheck_SpellCheckHatch_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentBottomCenter_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentBottomLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentBottomRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentMiddleCenter_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentMiddleLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentMiddleRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentTopCenter_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentTopLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellAlignmentTopRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellMerge_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellSplit_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellTextDirectionLeftToRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellTextDirectionRightToLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_CellTextDirectionTopToBottom_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_DecreaseCellColSpan_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_DecreaseCellRowSpan_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_DeleteColumn_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_DeleteRow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_DeleteTable_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_EditCell_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_EditColumn_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_EditRow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_EditTable_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_IncreaseCellColSpan_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_IncreaseCellRowSpan_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_InsertColumnLeft_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_InsertColumnRight_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_InsertRowAbove_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_InsertRowBelow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_MergeCells_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_SelectTable_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_SelectTableCell_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_SelectTableColumn_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_SelectTableRow_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_SplitCellHorizontally_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_SplitCellVertically_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Table_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_TableStyle_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_TableStyleOptions_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_AllBorders_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_BottomBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_InsideBorders_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_InsideHorizontalBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_InsideVerticalBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_LeftBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_NoBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_OutsideBorders_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_RightBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Table_Borders_TopBorder_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Test_Test_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Tools_Language_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_Tools_WordCount_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_View_HRuler_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_View_VRuler_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_WrapMode_WrapModeAfter_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_WrapMode_WrapModeBefore_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_WrapMode_WrapModeInline_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_WrapMode_WrapModeNone_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_WrapMode_WrapModeParallel_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.RIMG_WrapMode_WrapModeThrough_png">
            <summary></summary>
        </member>
        <member name="F:Nevron.Nov.Text.NResources.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NResourcesData1">
            <summary>
            DO NOT MODIFY MANUALLY. Automatically generated by NResourceMaker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NBlockBackgroundFillCommandAction">
            <summary>
            Applies background fill to currently selected blocks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBlockBackgroundFillCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBlockBackgroundFillCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBlockBackgroundFillCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NBlockBackgroundFillCommandAction.NBlockBackgroundFillCommandActionSchema">
            <summary>
            Schema associated with NBlockBackgroundFillCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NBorderAndThicknessCommandAction">
            <summary>
            Commmand action for modifying a border and its thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBorderAndThicknessCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBorderAndThicknessCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBorderAndThicknessCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NBorderAndThicknessCommandAction.NBorderAndThicknessCommandActionSchema">
            <summary>
            Schema associated with NBorderAndThicknessCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDecreaseIndentCommandAction">
            <summary>
            Applies block background fill to currently selected blocks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseIndentCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseIndentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseIndentCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDecreaseIndentCommandAction.NDecreaseIndentCommandActionSchema">
            <summary>
            Schema associated with NFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditGroupBlockCommandAction">
            <summary>
            Edits the currently selected group block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditGroupBlockCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditGroupBlockCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditGroupBlockCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditGroupBlockCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditGroupBlockCommandAction.NEditGroupBlockCommandActionSchema">
            <summary>
            Schema associated with NEditGroupBlockCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NGroupBlocksCommandAction">
            <summary>
            Groups the currently selected blocks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NGroupBlocksCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NGroupBlocksCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NGroupBlocksCommandAction.NGroupBlocksCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NIncreaseIndentCommandAction">
            <summary>
            Applies block background fill to currently selected blocks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseIndentCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseIndentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NIncreaseIndentCommandAction.NIncreaseIndentCommandActionSchema">
            <summary>
            Schema associated with NFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction">
            <summary>
            Modifies the block margin for the specified block side
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction.#ctor(Nevron.Nov.Text.ENBlockSide)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction.#ctor(Nevron.Nov.Text.ENBlockSide,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
            <param name="step"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction.GetBlockMargins(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the given block's margins edited by this command action.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockMarginsCommandAction.NModifyBlockMarginsCommandActionSchema">
            <summary>
            Schema associated with NModifyBlockMarginsCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction">
            <summary>
            Base for modify block margins and padding actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.#ctor(Nevron.Nov.Text.ENBlockSide)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.#ctor(Nevron.Nov.Text.ENBlockSide,System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.BlockSide">
            <summary>
            Gets or sets the block side
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.Step">
            <summary>
            Gets or sets the step (negative values mean decrease margin)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.MaxValue">
            <summary>
            Gets or sets max value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.GetBlockMargins(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the given block's margins edited by this command action.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.m_BlockSide">
            <summary>
            The block side to modify.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.m_Step">
            <summary>
            The modification step.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.m_MaxValue">
            <summary>
            The maximum allowed value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.NModifyBlockOffsetsCommandActionSchema">
            <summary>
            Schema associated with NModifyBlockOffsetsCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.BlockSideProperty">
            <summary>
            Reference to the BlockSide property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.StepProperty">
            <summary>
            Reference to the Step property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockOffsetsCommandAction.MaxValueProperty">
            <summary>
            Reference to the MaxValue property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction">
            <summary>
            Modifies the block padding for the specified block side
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction.#ctor(Nevron.Nov.Text.ENBlockSide)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction.#ctor(Nevron.Nov.Text.ENBlockSide,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
            <param name="step"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction.GetBlockMargins(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the given block's margins edited by this command action.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyBlockPaddingCommandAction.NModifyBlockPaddingCommandActionSchema">
            <summary>
            Schema associated with NModifyBlockPaddingCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction">
            <summary>
            Toggles block float mode (normal, left and right)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.#ctor(Nevron.Nov.Text.ENFloatMode)">
            <summary>
            Initializer ctor
            </summary>
            <param name="floatMode"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.#ctor(Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.FloatMode">
            <summary>
            Gets or sets the block float mode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.NToggleBlockFontModeCommandActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleBlockFloatModeCommandAction.FloatModeProperty">
            <summary>
            Schema associated with Name property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NUngroupBlocksCommandAction">
            <summary>
            Ungroups the currently selected blocks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUngroupBlocksCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUngroupBlocksCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUngroupBlocksCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NUngroupBlocksCommandAction.NUngroupBlocksCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction">
            <summary>
            Applies bullet formatting to the currently selected range
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.#ctor(Nevron.Nov.Text.ENBulletListTemplateType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="bulletType"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.BulletType">
            <summary>
            Gets or sets the bullet type
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.NBulletFormattingCommandActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NBulletFormattingCommandAction.BulletTypeProperty">
            <summary>
            Schema associated with Name property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NBulletsAndNumberingCommandAction">
            <summary>
            Modifies the bullets and numbering style of the selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBulletsAndNumberingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NBulletsAndNumberingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NBulletsAndNumberingCommandAction.NBulletsAndNumberingCommandActionSchema">
            <summary>
            Schema associated with NBulletsAndNumberingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NClearBulletFormattingCommandAction">
            <summary>
            Clears bullet formatting from the currently selected range
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NClearBulletFormattingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NClearBulletFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NClearBulletFormattingCommandAction.NClearBulletFormattingCommandActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditBulletListCommandAction">
            <summary>
            Edits the currently selected bullet list item
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBulletListCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBulletListCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBulletListCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBulletListCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditBulletListCommandAction.NEditBulletListCommandActionSchema">
            <summary>
            Schema associated with NEditBulletListCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditDocumentAction">
            <summary>
            Creates the properties of a rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditDocumentAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditDocumentAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditDocumentAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditDocumentAction.NEditDocumentActionSchema">
            <summary>
            Schema associated with NEditDocumentAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditDocumentInfoAction">
            <summary>
            Modifies the document information of a rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditDocumentInfoAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditDocumentInfoAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditDocumentInfoAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditDocumentInfoAction.NEditDocumentInfoActionSchema">
            <summary>
            Schema associated with NEditDocumentInfoAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NCopyCommandAction">
            <summary>
            Copies the currently selected text in the clipboard.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCopyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCopyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCopyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NCopyCommandAction.NCopyCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NCopyHyperlinkCommandAction">
            <summary>
            Copies the URL of the currently selected hyperlink to the clipboard.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCopyHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCopyHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NCopyHyperlinkCommandAction.NCopyHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NCopyHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NCutCommandAction">
            <summary>
            Cuts the selected text to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCutCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCutCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCutCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NCutCommandAction.NCutCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDeleteCommandAction">
            <summary>
            Deletes the selected text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDeleteCommandAction.NDeleteCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDumpHistoryCommandAction">
            <summary>
            Dumps the current history
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDumpHistoryCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDumpHistoryCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDumpHistoryCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDumpHistoryCommandAction.NDumpHistoryCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditBookmarkCommandAction">
            <summary>
            Edits a bookmark inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBookmarkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditBookmarkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditBookmarkCommandAction.NEditBookmarkCommandActionSchema">
            <summary>
            Schema associated with NEditBookmarkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditFieldCommandAction">
            <summary>
            Edits a field inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditFieldCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditFieldCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditFieldCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the edit field dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditFieldCommandAction.NEditFieldCommandActionSchema">
            <summary>
            Schema associated with NEditFieldCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditHyperlinkCommandAction">
            <summary>
            Edits a hyperlink inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditHyperlinkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditHyperlinkCommandAction.NEditHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NEditHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NFindCommandAction">
            <summary>
            The find command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFindCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFindCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFindCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFindCommandAction.CreateDialog(Nevron.Nov.Text.INRichTextView,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a dialog window.
            </summary>
            <param name="richText"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NFindCommandAction.NFindCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NGotoCommandAction">
            <summary>
            The go to command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NGotoCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NGotoCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NGotoCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NGotoCommandAction.NGotoCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertOrEditHyperlinkCommandAction">
            <summary>
            Inserts or edits a hyperlink inline. This command action is only present for the
            Ctrl + K keyboard shortcut to work for both inserting and editing of hyperlink inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertOrEditHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertOrEditHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertOrEditHyperlinkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertOrEditHyperlinkCommandAction.NInsertOrEditHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NInsertOrEditHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NPasteCommandAction">
            <summary>
            Pastes the text in the clipboard to the currentl position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPasteCommandAction.NPasteCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NPasteSpecialCommandAction">
            <summary>
            Pastes the text in the clipboard to the current position.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteSpecialCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteSpecialCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteSpecialCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the command is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPasteSpecialCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPasteSpecialCommandAction.NPasteSpecialCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NRemoveBookmarkCommandAction">
            <summary>
            Converts a bookmark inline to a text inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NRemoveBookmarkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NRemoveBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NRemoveBookmarkCommandAction.NRemoveBookmarkCommandActionSchema">
            <summary>
            Schema associated with NRemoveBookmarkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NRemoveHyperlinkCommandAction">
            <summary>
            Converts a hyperlink inline to a text inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NRemoveHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NRemoveHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NRemoveHyperlinkCommandAction.NRemoveHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NRemoveHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NReplaceCommandAction">
            <summary>
            The replace command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NReplaceCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NReplaceCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NReplaceCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NReplaceCommandAction.CreateDialog(Nevron.Nov.Text.INRichTextView,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates a dialog window for specifying this command action's settings.
            </summary>
            <param name="richTextView"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NReplaceCommandAction.NReplaceCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectAllCommandAction">
            <summary>
            Selects the whole text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectAllCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectAllCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectAllCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectAllCommandAction.NSelectAllCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectBookmarkCommandAction">
            <summary>
            Selects a the whole text of a bookmark.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectBookmarkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectBookmarkCommandAction.NSelectBookmarkCommandActionSchema">
            <summary>
            Schema associated with NSelectBookmarkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectHyperlinkCommandAction">
            <summary>
            Selects a the whole text of a hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectHyperlinkCommandAction.NSelectHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NSelectHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction">
            <summary>
            Toggles the current editing target (header, footer or body)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.#ctor(Nevron.Nov.Text.ENEditTargetType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="editTarget"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.EditTarget">
            <summary>
            Gets or sets the edit target
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.NToggleEditTargetCommandActionSchema">
            <summary>
            Schema associated with NFontStyleCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleEditTargetCommandAction.EditTargetProperty">
            <summary>
            Reference to the FontStyle property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleOvertypeCommandAction">
            <summary>
            Deletes the selected text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleOvertypeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleOvertypeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleOvertypeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleOvertypeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleOvertypeCommandAction.NToggleOvertypeCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NUpdateFieldCommandAction">
            <summary>
            Updtes all currently selected fields
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUpdateFieldCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUpdateFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUpdateFieldCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NUpdateFieldCommandAction.NUpdateFieldCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NNewCommandAction">
            <summary>
            Creates a new document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NNewCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NNewCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NNewCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NNewCommandAction.NNewCommandActionSchema">
            <summary>
            Schema associated with NNewCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NOpenCommandAction">
            <summary>
            Opens a document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenCommandAction.GetFormats">
            <summary>
            Gets the formats to show in the file dialog. The default implementation returns null,
            which means that all supported formats will be shown.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NOpenCommandAction.NOpenCommandActionSchema">
            <summary>
            Schema associated with NOpenCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NOpenUrlCommandAction">
            <summary>
            Opens an URL.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenUrlCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenUrlCommandAction.GetCommand">
            <summary>
            Overriden to return the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOpenUrlCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NOpenUrlCommandAction.NOpenUrlCommandActionSchema">
            <summary>
            Schema associated with NOpenUrlCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NPrintCommandAction">
            <summary>
            Prints the text document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPrintCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPrintCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPrintCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPrintCommandAction.NPrintCommandActionSchema">
            <summary>
            Schema associated with NPrintCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSaveAsCommandAction">
            <summary>
            Shows a File Save dialog and saves a rich text document to the selected file.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveAsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveAsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveAsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveAsCommandAction.GetFormats">
            <summary>
            Gets the formats to show in the file dialog. The default implementation returns null,
            which means that all supported formats will be shown.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSaveAsCommandAction.NSaveAsCommandActionSchema">
            <summary>
            Schema associated with NSaveAsCommandAction. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSaveCommandAction">
            <summary>
            Saves a document to a file. If the document has never been saved a File Save dialog for
            choosing a file is shown.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSaveCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSaveCommandAction.NSaveCommandActionSchema">
            <summary>
            Schema associated with NSaveCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEdit1DBarcodeCommandAction">
            <summary>
            Inserts a linear barcode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEdit1DBarcodeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEdit1DBarcodeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEdit1DBarcodeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEdit1DBarcodeCommandAction.NEdit1DBarcodeCommandActionSchema">
            <summary>
            Schema associated with NEdit1DBarcodeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEdit2DBarcodeCommandAction">
            <summary>
            Edits a 2D barcode widget inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEdit2DBarcodeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEdit2DBarcodeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEdit2DBarcodeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEdit2DBarcodeCommandAction.NEdit2DBarcodeCommandActionSchema">
            <summary>
            Schema associated with NEdit2DBarcodeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditImageCommandAction">
            <summary>
            Edits the currently selected image inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditImageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditImageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditImageCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditImageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditImageCommandAction.NEditImageCommandActionSchema">
            <summary>
            Schema associated with NEditImageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditStylesCommandAction">
            <summary>
            Edits the styles of a rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditStylesCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditStylesCommandAction.#ctor(Nevron.Nov.Text.ENRichTextStyleType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="styleTypes"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NEditStylesCommandAction.StyleTypes">
            <summary>
            Gets/Sets the value of the StyleTypes property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditStylesCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditStylesCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditStylesCommandAction.NEditStylesCommandActionSchema">
            <summary>
            Schema associated with NEditStylesCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditStylesCommandAction.StyleTypesProperty">
            <summary>
            Reference to the StyleTypes property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction">
            <summary>
            Changes the character spacing of the currently selected text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="increaseFontSize"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction.IncreaseCharacterSpacing">
            <summary>
            Gets or sets whether to increase the font size
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction.NChangeCharacterSpacingCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NChangeCharacterSpacingCommandAction.IncreaseCharacterSpacingProperty">
            <summary>
            Reference to the increase font size property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction">
            <summary>
            Changes the font size of the currently selected text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="increaseFontSize"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction.IncreaseFontSize">
            <summary>
            Gets or sets whether to increase the font size
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction.NChangeFontSizeCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NChangeFontSizeCommandAction.IncreaseFontSizeProperty">
            <summary>
            Reference to the increase font size property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction">
            <summary>
            Changes the word spacing of the currently selected text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor
            </summary>
            <param name="increaseFontSize"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction.IncreaseWordSpacing">
            <summary>
            Gets or sets whether to increase the font size
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction.NChangeWordSpacingCommandActionSchema">
            <summary>
            Schema associated with NGeometryFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NChangeWordSpacingCommandAction.IncreaseWordSpacingProperty">
            <summary>
            Reference to the increase font size property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NClearFormattingCommandAction">
            <summary>
            Clears the text formatting
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NClearFormattingCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NClearFormattingCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NClearFormattingCommandAction.NClearFormattingCommandActionSchema">
            <summary>
            Schema associated with NClearFormattingCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NFontFamilyCommandAction">
            <summary>
            Applies font family to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFontFamilyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFontFamilyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFontFamilyCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NFontFamilyCommandAction.NFontFamilyCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NFontSizeCommandAction">
            <summary>
            Applies font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFontSizeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFontSizeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NFontSizeCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NFontSizeCommandAction.NFontSizeCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTextFillCommandAction">
            <summary>
            Applies fill (background or foreground) to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextFillCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextFillCommandAction.#ctor(Nevron.Nov.Text.ENTextFillType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="textFillType"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextFillCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTextFillCommandAction.NTextFillCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTextStrokeCommandAction">
            <summary>
            Applies Stroke to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextStrokeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextStrokeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTextStrokeCommandAction.NTextStrokeCommandActionSchema">
            <summary>
            Schema associated with NStrokeCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTextStyleCommandAction">
            <summary>
            Applies a text style to the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextStyleCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextStyleCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command.
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTextStyleCommandAction.NTextStyleCommandActionSchema">
            <summary>
            Schema associated with NTextStyleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction">
            <summary>
            Toggles the font style (bold, italic, underline etc) of the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.#ctor(Nevron.Nov.Graphics.ENBaseline)">
            <summary>
            Initializer constructor
            </summary>
            <param name="BaseLine"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.BaseLine">
            <summary>
            Gets or sets the paragraph text alignment 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.NToggleBaseLineCommandActionSchema">
            <summary>
            Schema associated with NBaseLineCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleBaselineCommandAction.BaseLineProperty">
            <summary>
            Reference to the BaseLine property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction">
            <summary>
            Toggles the font style (bold, italic, underline etc) of the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.#ctor(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fontStyle"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.FontStyle">
            <summary>
            Gets or sets the paragraph text alignment 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.NToggleFontStyleCommandActionSchema">
            <summary>
            Schema associated with NFontStyleCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleFontStyleCommandAction.FontStyleProperty">
            <summary>
            Reference to the FontStyle property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NHeaderFooterInsertAction">
            <summary>
            Base for command actions that work on the header / footer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHeaderFooterInsertAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHeaderFooterInsertAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NHeaderFooterInsertAction.NHeaderFooterInsertActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsert1DBarcodeCommandAction">
            <summary>
            Inserts a linear barcode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsert1DBarcodeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsert1DBarcodeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsert1DBarcodeCommandAction.NInsert1DBarcodeCommandActionSchema">
            <summary>
            Schema associated with NInsert1DBarcodeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsert2DBarcodeCommandAction">
            <summary>
            Inserts a 2D barcode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsert2DBarcodeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsert2DBarcodeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsert2DBarcodeCommandAction.NInsert2DBarcodeCommandActionSchema">
            <summary>
            Schema associated with NInsert2DBarcodeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertBookmarkCommandAction">
            <summary>
            Inserts a bookmark inline at the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBookmarkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBookmarkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBookmarkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertBookmarkCommandAction.NInsertBookmarkCommandActionSchema">
            <summary>
            Schema associated with NInsertBookmarkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertBreakCommandAction">
            <summary>
            Inserts a break inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.#ctor(Nevron.Nov.Text.ENBreakType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="breakType">The break type to insert.</param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.ShowDialog">
            <summary>
            Gets/Sets whether this command action should show a dialog for selecting a break to insert
            or should insert the break of the BreakType property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.BreakType">
            <summary>
            Gets/Sets the break type to insert. Valid only if the ShowDialog property is set to false.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called  when the insert table dialog is closed
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.NInsertBreakCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.ShowDialogProperty">
            <summary>
            Reference to the ShowDialog property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertBreakCommandAction.BreakTypeProperty">
            <summary>
            Reference to the BreakType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertDateCommandAction">
            <summary>
            Inserts the current date.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertDateCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertDateCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertDateCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertDateCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called  when the insert table dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertDateCommandAction.NInsertDateCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertFieldCommandAction">
            <summary>
            Inserts a new field inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertFieldCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertFieldCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertFieldCommandAction.NInsertFieldCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertHyperlinkCommandAction">
            <summary>
            Inserts a hyperlink inline at the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertHyperlinkCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertHyperlinkCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertHyperlinkCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertHyperlinkCommandAction.NInsertHyperlinkCommandActionSchema">
            <summary>
            Schema associated with NInsertHyperlinkCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertImageCommandAction">
            <summary>
            Inserts an image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertImageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertImageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertImageCommandAction.GetFormats">
            <summary>
            Gets the image formats to show in this dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertImageCommandAction.NInsertImageCommandActionSchema">
            <summary>
            Schema associated with NInsertImageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertPageCountCommandAction">
            <summary>
            Inserts the page count on the current page header or footer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertPageCountCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertPageCountCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertPageCountCommandAction.NInsertPageCountCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertPageNumberCommandAction">
            <summary>
            Inserts the page number on the current page header or footer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertPageNumberCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertPageNumberCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertPageNumberCommandAction.NInsertPageNumberCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertSymbolCharacterCommandAction">
            <summary>
            Inserts a symbol character.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertSymbolCharacterCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertSymbolCharacterCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertSymbolCharacterCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes this command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertSymbolCharacterCommandAction.NInsertSymbolCharacterCommandActionSchema">
            <summary>
            Schema associated with NInsertSymbolCharacterCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTimeCommandAction">
            <summary>
            Inserts the current time.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTimeCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTimeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTimeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTimeCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the insert time dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTimeCommandAction.NInsertTimeCommandActionSchema">
            <summary>
            Schema associated with NInsertTimeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleTextLayoutAction">
            <summary>
            Toggles text layout (normal, print, web).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.#ctor(Nevron.Nov.Text.ENTextLayout)">
            <summary>
            Initializer ctor
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.#ctor(Nevron.Nov.Text.Commands.NToggleTextLayoutAction)">
            <summary>
            Copy constructor
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.Layout">
            <summary>
            Gets or sets the text layout
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.NToggleTextLayoutActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleTextLayoutAction.LayoutProperty">
            <summary>
            Reference to the Layout property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMoveToFirstRecordCommandAction">
            <summary>
            Moves the current mail merge record to the first record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToFirstRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToFirstRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToFirstRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToFirstRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMoveToFirstRecordCommandAction.NMoveToFirstRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToFirstRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMoveToLastRecordCommandAction">
            <summary>
            Moves the current mail merge record to the last record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToLastRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToLastRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToLastRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToLastRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMoveToLastRecordCommandAction.NMoveToLastRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToLastRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMoveToNextRecordCommandAction">
            <summary>
            Moves the current mail merge record to the record after the current one
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToNextRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToNextRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToNextRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToNextRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMoveToNextRecordCommandAction.NMoveToNextRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToNextRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMoveToPrevioustRecordCommandAction">
            <summary>
            Moves the current mail merge record to the record preceding the current one
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToPrevioustRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToPrevioustRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToPrevioustRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToPrevioustRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMoveToPrevioustRecordCommandAction.NMoveToPrevioustRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToPrevioustRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction">
            <summary>
            Moves the current mail merge record to the first record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMoveToRecordCommandAction.NMoveToRecordCommandActionSchema">
            <summary>
            Schema associated with NMoveToRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NNavigateToRecordCommandAction">
            <summary>
            Base class for all actions that navigate to a mail merge data source record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NNavigateToRecordCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NNavigateToRecordCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NNavigateToRecordCommandAction.NNavigateToRecordCommandActionSchema">
            <summary>
            Schema associated with NNavigateToRecordCommandActionSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction">
            <summary>
            Highlights all mail merge fields in a rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NHighlightMergeFieldsCommandAction.NHighlightMergeFieldsCommandActionSchema">
            <summary>
            Schema associated with NHighlightMergeFieldsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertGreetingLineCommandAction">
            <summary>
            Inserts a greeting line mail merge field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertGreetingLineCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertGreetingLineCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertGreetingLineCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertGreetingLineCommandAction.NInsertGreetingLineCommandActionSchema">
            <summary>
            Schema associated with NInsertGreetingLineCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertMergeFieldCommandAction">
            <summary>
            Inserts a mail merge field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertMergeFieldCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertMergeFieldCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertMergeFieldCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertMergeFieldCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertMergeFieldCommandAction.NInsertMergeFieldCommandActionSchema">
            <summary>
            Schema associated with NInsertMergeFieldCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMatchFieldsCommandAction">
            <summary>
            Lets the user select the data field column mapping.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMatchFieldsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMatchFieldsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMatchFieldsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMatchFieldsCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the match fields dialog is closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMatchFieldsCommandAction.NMatchFieldsCommandActionSchema">
            <summary>
            Schema associated with NMatchFieldsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMergeAndSaveCommandAction">
            <summary>
            Creates a document for each record in the mail merge data source, merges all such
            documents to one large document and shows a "Save As" dialog for saving it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMergeAndSaveCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMergeAndSaveCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMergeAndSaveCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMergeAndSaveCommandAction.NSaveMergedDocumentCommandActionSchema">
            <summary>
            Schema associated with NSaveMergedDocumentCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectRecipientsCommandAction">
            <summary>
            Shows a dilog for selecting a mail merge data source (e.g. an Access database).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectRecipientsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectRecipientsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectRecipientsCommandAction.NSelectRecipientsCommandActionSchema">
            <summary>
            Schema associated with NSelectRecipientsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction">
            <summary>
            Generates a preview of the currently selected mail merge data record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTogglePreviewMailMergeCommandAction.NTogglePreviewMailMergeCommandActionSchema">
            <summary>
            Schema associated with NTogglePreviewMailMergeCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NShowHideRibbonTabGroupsCommandAction">
            <summary>
            A command action that shows/hides the rich text ribbon's tab page groups.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NShowHideRibbonTabGroupsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NShowHideRibbonTabGroupsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NShowHideRibbonTabGroupsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action. Overriden to do nothing.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NShowHideRibbonTabGroupsCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the active parameter which is then used by the command source to update tab page group visibility.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NShowHideRibbonTabGroupsCommandAction.NShowHideRibbonTabGroupsCommandActionSchema">
            <summary>
            Schema associated with NShowHideRibbonTabGroupsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NStyleCommandAction">
            <summary>
            Base class for all rich text style command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NStyleCommandAction.NStyleCommandActionSchema">
            <summary>
            Schema associated with NStyleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTextCommandAction">
            <summary>
            Base for all command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextCommandAction.SelectionMode(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns the current edit root selection mode
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextCommandAction.GetRichTextView(Nevron.Nov.Dom.NNode)">
            <summary>
            Get the rich text element from target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTextCommandAction.NTextCommandActionSchema">
            <summary>
            Schema associated with NTextCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTextDialogCommandAction">
            <summary>
            Base for all command actions that show a dialog window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextDialogCommandAction.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextDialogCommandAction.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NWindow)">
            <summary>
            Creates a dialog window that hosts the editor of the specified node and
            subscribes to the close event of the window.
            </summary>
            <param name="node"></param>
            <param name="ownerWindow"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextDialogCommandAction.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTextDialogCommandAction.NTextDialogCommandActionSchema">
            <summary>
            Schema associated with NTextDialogCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTextToggleCommandAction">
            <summary>
            Serves as base for all drawing toggle command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextToggleCommandAction.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTextToggleCommandAction.IsToggleAction">
            <summary>
            Overriden to return true.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTextToggleCommandAction.NTextToggleCommandActionSchema">
            <summary>
            Schema associated with NTextToggleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditParagraphCommandAction">
            <summary>
            Edits the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditParagraphCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditParagraphCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditParagraphCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditParagraphCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditParagraphCommandAction.NEditParagraphCommandActionSchema">
            <summary>
            Schema associated with NEditParagraphCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NLineGapFactorCommandAction">
            <summary>
            Applies line gap factor to the currently selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NLineGapFactorCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NLineGapFactorCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NLineGapFactorCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NLineGapFactorCommandAction.NLineSpacingCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction">
            <summary>
            Modifys the paragraph first line indent.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="step"></param>
            <param name="maxValue"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.Step">
            <summary>
            Gets or sets the step (negative values mean decrease margin)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.MaxValue">
            <summary>
            Gets or sets max value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.m_Step">
            <summary>
            The modification step.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.m_MaxValue">
            <summary>
            The maximum allowed value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.NModifyParagraphFirstLineIndentCommandActionSchema">
            <summary>
            Schema associated with NModifyParagraphFirstLineIndentCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.StepProperty">
            <summary>
            Reference to the Step property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyParagraphFirstLineIndentCommandAction.MaxValueProperty">
            <summary>
            Reference to the MaxValue property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NParagraphAlignmentCommandAction">
            <summary>
            Toggles the alignment of a paragraph. Used in the mini toolbar of the rich text context menu
            for a menu drop down to toggle paragraph alignment.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NParagraphAlignmentCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NParagraphAlignmentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NParagraphAlignmentCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NParagraphAlignmentCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Updates the command source.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NParagraphAlignmentCommandAction.NParagraphAlignmentCommandActionSchema">
            <summary>
            Schema associated with NParagraphAlignmentCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction">
            <summary>
            Applies horizontal alignment to the currently selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.#ctor(Nevron.Nov.Text.ENAlign)">
            <summary>
            Initializer constructor
            </summary>
            <param name="paragraphAlignment"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.ParagraphAlignment">
            <summary>
            Gets or sets the paragraph text alignment 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.NParagraphAlignmentCommandActionSchema">
            <summary>
            Schema associated with NParagraphAlignmentCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleParagraphAlignmentCommandAction.ParagraphAlignmentProperty">
            <summary>
            Schema associated with Name property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDeleteTableOfContentsCommandAction">
            <summary>
            Deletes the currently selected table of contents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableOfContentsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableOfContentsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableOfContentsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDeleteTableOfContentsCommandAction.NDeleteTableOfContentsCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableOfContentsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditTableOfContentsCommandAction">
            <summary>
            Edits the properties of a table of contents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableOfContentsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableOfContentsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableOfContentsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditTableOfContentsCommandAction.NEditTableOfContentsCommandActionSchema">
            <summary>
            Schema associated with NEditTableOfContentsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTableOfContentsCommandAction">
            <summary>
            Inserts a table of contents block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableOfContentsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableOfContentsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableOfContentsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTableOfContentsCommandAction.NInsertTableOfContentsCommandActionSchema">
            <summary>
            Schema associated with NInsertTableOfContentsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NUpdateTableOfContentsCommandAction">
            <summary>
            Updates a table of contents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUpdateTableOfContentsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUpdateTableOfContentsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NUpdateTableOfContentsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether this command action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NUpdateTableOfContentsCommandAction.NUpdateTableOfContentsCommandActionSchema">
            <summary>
            Schema associated with NUpdateTableOfContentsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditSectionCommandAction">
            <summary>
            Represents a command action that edits the currently selected section
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditSectionCommandAction.NEditSectionCommandActionSchema">
            <summary>
            Schema associated with NEditSectionCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditSectionPageCommandAction">
            <summary>
            Represents a command action that edits the currently selected section.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionPageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionPageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionPageCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditSectionPageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditSectionPageCommandAction.NEditSectionPageCommandActionSchema">
            <summary>
            Schema associated with NEditSectionPageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NPageBackgroundCommandAction">
            <summary>
            Represents a command action that changes the background of the current page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBackgroundCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBackgroundCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBackgroundCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBackgroundCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPageBackgroundCommandAction.NPageBackgroundCommandActionSchema">
            <summary>
            Schema associated with NPageBackgroundCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NPageBorderCommandAction">
            <summary>
            Edits the border of a page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBorderCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBorderCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBorderCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageBorderCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPageBorderCommandAction.NPageBorderCommandActionSchema">
            <summary>
            Schema associated with NPageBorderCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSectionColumnCountCommandAction">
            <summary>
            Changes the column count of the currently selected sections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSectionColumnCountCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSectionColumnCountCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSectionColumnCountCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSectionColumnCountCommandAction.NSectionColumnCountCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleSpellCheckAction">
            <summary>
            Toggles spell checking enabled state
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleSpellCheckAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleSpellCheckAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleSpellCheckAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleSpellCheckAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleSpellCheckAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleSpellCheckAction.NToggleMarksVisibilityActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction">
            <summary>
            Indicates the column number the caret is on in the current line.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction.ColumnFormat">
            <summary>
            Gets / sets the format string used to format the column number on the status bar
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction.GetStatusObject(Nevron.Nov.Text.NRichTextView,System.Object@)">
            <summary>
            
            </summary>
            <param name="richText"></param>
            <param name="statusObject"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction.NColumnNumberStatusBarCommandActionSchema">
            <summary>
            Schema associated with NColumnNumberStatusBarCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NColumnNumberStatusBarCommandAction.ColumnFormatProperty">
            <summary>
            Reference to the page format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction">
            <summary>
            Indicates the line number the caret is on in the current page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction.LineFormat">
            <summary>
            Gets/Sets the format string used to format the line number on the status bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction.GetStatusObject(Nevron.Nov.Text.NRichTextView,System.Object@)">
            <summary>
            
            </summary>
            <param name="richText"></param>
            <param name="statusObject"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction.NLineNumberStatusBarCommandActionSchema">
            <summary>
            Schema associated with NLineNumberStatusBarCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NLineNumberStatusBarCommandAction.LineFormatProperty">
            <summary>
            Reference to the page format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NOvertypeModeStatusBarCommandAction">
            <summary>
            Indicates the type mode (Insert or Overtype)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOvertypeModeStatusBarCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOvertypeModeStatusBarCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NOvertypeModeStatusBarCommandAction.GetStatusObject(Nevron.Nov.Text.NRichTextView,System.Object@)">
            <summary>
            Gets the object, which should be shown in the status bar.
            </summary>
            <param name="richText"></param>
            <param name="statusObject"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NOvertypeModeStatusBarCommandAction.NOvertypeModeStatusBarCommandActionSchema">
            <summary>
            Schema associated with NOvertypeModeStatusBarCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction">
            <summary>
            Indicates the current page number and the total number of pages of the current rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction.PageFormat">
            <summary>
            Gets / sets the format string used to format the page number and count on the status bar
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction.GetStatusObject(Nevron.Nov.Text.NRichTextView,System.Object@)">
            <summary>
            Gets the object, which should be shown in the status bar.
            </summary>
            <param name="richText"></param>
            <param name="statusObject"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction.NPageNumberStatusBarCommandActionSchema">
            <summary>
            Schema associated with NPageNumberStatusBarCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NPageNumberStatusBarCommandAction.PageFormatProperty">
            <summary>
            Reference to the page format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NStatusBarCommandAction">
            <summary>
            Base for all status bar command actions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NStatusBarCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NStatusBarCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NStatusBarCommandAction.GetStatusObject(Nevron.Nov.Text.NRichTextView,System.Object@)">
            <summary>
            Gets the status object for the given rich text view.
            </summary>
            <param name="richText"></param>
            <param name="statusObject"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NStatusBarCommandAction.NStatusBarCommandActionSchema">
            <summary>
            Schema associated with NStatusBarCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NCellBackgroundFillCommandAction">
            <summary>
            Applies background fill to currently selected table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCellBackgroundFillCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCellBackgroundFillCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCellBackgroundFillCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NCellBackgroundFillCommandAction.NCellBackgroundFillCommandActionSchema">
            <summary>
            Schema associated with NCellBackgroundFillCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NCellBorderAndThicknessCommandAction">
            <summary>
            Edits cell border and thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCellBorderAndThicknessCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCellBorderAndThicknessCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NCellBorderAndThicknessCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NCellBorderAndThicknessCommandAction.NCellBorderAndThicknessCommandActionSchema">
            <summary>
            Schema associated with NCellBorderAndThicknessCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDecreaseCellColSpanCommandAction">
            <summary>
            Decreases the current cell column span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseCellColSpanCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseCellColSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseCellColSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDecreaseCellColSpanCommandAction.NDecreaseCellColSpanCommandActionSchema">
            <summary>
            Schema associated with NDecreaseCellColSpanCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDecreaseCellRowSpanCommandAction">
            <summary>
            Decreases the current cell row span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseCellRowSpanCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseCellRowSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDecreaseCellRowSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDecreaseCellRowSpanCommandAction.NDecreaseCellRowSpanCommandActionSchema">
            <summary>
            Schema associated with NDecreaseCellRowSpanCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NIncreaseCellColSpanCommandAction">
            <summary>
            Increases the current cell column span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseCellColSpanCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseCellColSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseCellColSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NIncreaseCellColSpanCommandAction.NIncreaseCellColSpanCommandActionSchema">
            <summary>
            Schema associated with NIncreaseCellColSpanCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction">
            <summary>
            Increases the current cell row span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction.#ctor">
            <summary>
            Default NBatchTextCommandAction
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction.NIncreaseCellRowSpanCommandActionSchema">
            <summary>
            Schema associated with NIncreaseCellRowSpanCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction.RowSpanProperty">
            <summary>
            Schema associated with RowSpan property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NIncreaseCellRowSpanCommandAction.DecreaseProperty">
            <summary>
            Schema associated with RowSpan property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NMergeCellsCommandAction">
            <summary>
            Merges the cells in the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMergeCellsCommandAction.#ctor">
            <summary>
            Default NBatchTextCommandAction
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMergeCellsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NMergeCellsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NMergeCellsCommandAction.NMergeCellsCommandActionSchema">
            <summary>
            Schema associated with NMergeCellsCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NModifyTableCellCommandAction">
            <summary>
            Modifies a table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyTableCellCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyTableCellCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyTableCellCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NModifyTableCellCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NModifyTableCellCommandAction.NModifyTableCellCommandActionSchema">
            <summary>
            Schema associated with NModifyTableCellCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectCellCommandAction">
            <summary>
            An action that selects a table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectCellCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectCellCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectCellCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectCellCommandAction.NSelectCellCommandActionSchema">
            <summary>
            Schema associated with NSelectCellCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSplitCellHorizontallyCommandAction">
            <summary>
            Splits the cell in the current selection horizontally
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSplitCellHorizontallyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSplitCellHorizontallyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSplitCellHorizontallyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSplitCellHorizontallyCommandAction.NSplitCellHorizontallyCommandActionSchema">
            <summary>
            Schema associated with NSplitCellHorizontallyCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSplitCellVerticallyCommandAction">
            <summary>
            Splits the cell in the current selection vertically
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSplitCellVerticallyCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSplitCellVerticallyCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSplitCellVerticallyCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSplitCellVerticallyCommandAction.NSplitCellVerticallyCommandActionSchema">
            <summary>
            Schema associated with NSplitCellVerticallyCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction">
            <summary>
            Aligns the content of a cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.#ctor(Nevron.Nov.ENContentAlignment)">
            <summary>
            Creates a cell alignment command action that applies the given alignment
            to the content of table cells.
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.ContentAlignment">
            <summary>
            Gets or sets the value of the ContentAlignment property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this command action is checked.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.NToggleCellAlignmentCommandActionSchema">
            <summary>
            Schema associated with NToggleCellAlignmentCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleCellAlignmentCommandAction.ContentAlignmentProperty">
            <summary>
            Reference to the ContentAlignment property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleCellTextDirectionCommandAction">
            <summary>
            Aligns the content of a cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellTextDirectionCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellTextDirectionCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellTextDirectionCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleCellTextDirectionCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleCellTextDirectionCommandAction.NToggleCellTextDirectionCommandActionSchema">
            <summary>
            Schema associated with NToggleCellTextDirectionCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDeleteTableColumnsCommandAction">
            <summary>
            Deletes the currently selected table columns
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableColumnsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableColumnsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableColumnsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDeleteTableColumnsCommandAction.NDeleteTableColumnsCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableColumnCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditTableColumnCommandAction">
            <summary>
            Edits a table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableColumnCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableColumnCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableColumnCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableColumnCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditTableColumnCommandAction.NEditTableColumnCommandActionSchema">
            <summary>
            Schema associated with NEditTableColumnCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTableColumnLeftCommandAction">
            <summary>
            Inserts a new table column on the left side of the current table column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableColumnLeftCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableColumnLeftCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableColumnLeftCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTableColumnLeftCommandAction.NInsertTableColumnLeftCommandActionSchema">
            <summary>
            Schema associated with NInsertColumnCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTableColumnRightCommandAction">
            <summary>
            Inserts a new table column on the right side of the current table column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableColumnRightCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableColumnRightCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableColumnRightCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTableColumnRightCommandAction.NInsertTableColumnRightCommandActionSchema">
            <summary>
            Schema associated with NInsertColumnCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectTableColumnCommandAction">
            <summary>
            An action that selects a table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableColumnCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableColumnCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableColumnCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectTableColumnCommandAction.NSelectTableColumnCommandActionSchema">
            <summary>
            Schema associated with NSelectTableColumnCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDeleteTableCommandAction">
            <summary>
            Deletes the currently selected table
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDeleteTableCommandAction.NDeleteTableCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditTableCommandAction">
            <summary>
            Edits the currently selected table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditTableCommandAction.NEditTableCommandActionSchema">
            <summary>
            Schema associated with NEditTableCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTableCommandAction">
            <summary>
            Inserts a new table at the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTableCommandAction.NInsertTableCommandActionSchema">
            <summary>
            Schema associated with NInsertTableCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectTableCommandAction">
            <summary>
            An action that selects a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableCommandAction.GetCommand">
            <summary>
            Returns the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectTableCommandAction.NSelectTableCommandActionSchema">
            <summary>
            Schema associated with NSelectTableCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction">
            <summary>
            Sets table column width mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.#ctor(Nevron.Nov.Text.ENColumnWidthMode)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnWidthMode"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.ColumnWidthMode">
            <summary>
            Gets or sets the value of the ColumnWidthMode property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether this action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.NTableColumnWidthModeCommandActionSchema">
            <summary>
            Schema associated with NTableColumnWidthModeCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTableColumnWidthModeCommandAction.ColumnWidthModeProperty">
            <summary>
            Reference to the ColumnWidthMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NTableStyleCommandAction">
            <summary>
            Applies a table style to the currently selected table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableStyleCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableStyleCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableStyleCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NTableStyleCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NTableStyleCommandAction.NTableStyleCommandActionSchema">
            <summary>
            Schema associated with NTableStyleCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NDeleteTableRowsCommandAction">
            <summary>
            Deletes the currently selected table rows
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableRowsCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableRowsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NDeleteTableRowsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NDeleteTableRowsCommandAction.NDeleteTableRowCommandActionSchema">
            <summary>
            Schema associated with NDeleteTableRowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditTableRowCommandAction">
            <summary>
            Edits a table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableRowCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableRowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableRowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditTableRowCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditTableRowCommandAction.NEditTableRowCommandActionSchema">
            <summary>
            Schema associated with NEditTableRowCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTableRowAboveCommandAction">
            <summary>
            Inserts a table row above the currently selected table row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableRowAboveCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableRowAboveCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableRowAboveCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTableRowAboveCommandAction.NInsertTableRowAboveCommandActionSchema">
            <summary>
            Schema associated with NInsertRowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NInsertTableRowBelowCommandAction">
            <summary>
            Inserts a table row below the currently selected table row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableRowBelowCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableRowBelowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NInsertTableRowBelowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NInsertTableRowBelowCommandAction.NInsertTableRowBelowCommandActionSchema">
            <summary>
            Schema associated with NInsertRowCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSelectTableRowCommandAction">
            <summary>
            An action that selects a table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableRowCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableRowCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSelectTableRowCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns true if the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSelectTableRowCommandAction.NSelectTableRowCommandActionSchema">
            <summary>
            Schema associated with NSelectTableRowCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NProofingLanguageCommandAction">
            <summary>
            The proofing language command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NProofingLanguageCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NProofingLanguageCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NProofingLanguageCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NProofingLanguageCommandAction.NProofingLanguageCommandActionSchema">
            <summary>
            Schema associated with NProofingLanguageCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NWordCountCommandAction">
            <summary>
            Counts the words in a rich text document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NWordCountCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NWordCountCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NWordCountCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NWordCountCommandAction.NWordCountCommandActionSchema">
            <summary>
            Schema associated with NWordCountCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleHRulerCommandAction">
            <summary>
            Toggles the HRuler
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleHRulerCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleHRulerCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleHRulerCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleHRulerCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleHRulerCommandAction.NToggleHRulerCommandActionSchema">
            <summary>
            Schema associated with NToggleHRulerCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleVRulerCommandAction">
            <summary>
            Toggles the VRuler
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleVRulerCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleVRulerCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleVRulerCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleVRulerCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleVRulerCommandAction.NToggleVRulerCommandActionSchema">
            <summary>
            Schema associated with NToggleVRulerCommandAction
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NZoomCommandAction">
            <summary>
            Zooms the text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomCommandAction.#ctor(Nevron.Nov.Text.ENZoomCommandMode)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="zoomMode"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NZoomCommandAction.ZoomMode">
            <summary>
            Gets/Sets the value of the ZoomMode property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether this action should be enabled for the given target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NZoomCommandAction.NZoomCommandActionSchema">
            <summary>
            Schema associated with NZoomCommandAction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NZoomCommandAction.ZoomModeProperty">
            <summary>
            Reference to the ZoomMode property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NZoomInCommandAction">
            <summary>
            Zooms in the text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomInCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomInCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomInCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NZoomInCommandAction.NZoomInCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NZoomOutCommandAction">
            <summary>
            Zooms out the text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomOutCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomOutCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NZoomOutCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NZoomOutCommandAction.NZoomOutCommandActionSchema">
            <summary>
            Schema associated with NZoomOutCommandActionSchema 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction">
            <summary>
            Toggles block float mode (normal, left and right)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction.#ctor">
            <summary>
            Initializer ctor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NToggleMarksVisibilityAction.NToggleMarksVisibilityActionSchema">
            <summary>
            Schema associated with NParagraphAlignCheckButtonCommand 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NEditShapeBlockCommandAction">
            <summary>
            Edits the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditShapeBlockCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditShapeBlockCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditShapeBlockCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NEditShapeBlockCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NEditShapeBlockCommandAction.NEditShapeBlockCommandActionSchema">
            <summary>
            Schema associated with NEditShapeBlockCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction">
            <summary>
            Applies font family to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="anchorToFlow"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.AnchorToFlow">
            <summary>
            Gets or sets whether to anchor the block to flow or page
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.NSetTextAnchorCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSetTextAnchorCommandAction.AnchorToFlowProperty">
            <summary>
            Reference to the AnchorToFlow property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Commands.NSetWrapCommandAction">
            <summary>
            Applies font family to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetWrapCommandAction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetWrapCommandAction.#ctor(Nevron.Nov.Text.ENWrapModeCommand)">
            <summary>
            Initializer constructor
            </summary>
            <param name="wrapMode"></param>
        </member>
        <member name="P:Nevron.Nov.Text.Commands.NSetWrapCommandAction.WrapMode">
            <summary>
            Gets or sets the wrap mode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetWrapCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Commands.NSetWrapCommandAction.IsChecked(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is checked
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSetWrapCommandAction.NSetWrapCommandActionSchema">
            <summary>
            Schema associated with NChangeFillCommandAction 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Commands.NSetWrapCommandAction.WrapModeProperty">
            <summary>
            Reference to the wrap mode property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableStyleOptionsCommandAction">
            <summary>
            Edits table style options.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleOptionsCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleOptionsCommandAction.GetCommand">
            <summary>
            Gets the command associated with this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleOptionsCommandAction.IsEnabled(Nevron.Nov.Dom.NNode)">
            <summary>
            Returns whether the action is enabled.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleOptionsCommandAction.OnUpdateCommandSource(Nevron.Nov.Dom.NNode,Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Called by the commander when an update command source event for this action command
            has been received by it.
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleOptionsCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyleOptionsCommandAction.NTableStyleOptionsCommandActionSchema">
            <summary>
            Schema associated with NTableStyleOptionsCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyBlockBackgroundFillBatch">
            <summary>
            Applies block background fill to the currently selected root blocks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyBlockBackgroundFillBatch.#ctor(Nevron.Nov.Graphics.NFill)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="backgroungFill"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyBlockBackgroundFillBatch.ProcessBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Processes the block.
            </summary>
            <param name="block"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NApplyBlockBackgroundFillBatch.m_BackgroundFill">
            <summary>
            The background fill to apply.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyBlockFloatModeBatch">
            <summary>
            Applies block float mode to the currently selected blocks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyBlockFloatModeBatch.#ctor(Nevron.Nov.Text.ENFloatMode)">
            <summary>
            Initializer constructor
            </summary>
            <param name="floatMode"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyBlockFloatModeBatch.ProcessBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Processes the block.
            </summary>
            <param name="block"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NApplyBlockFloatModeBatch.m_FloatMode">
            <summary>
            The float mode to apply.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlockBatch">
            <summary>
            Base class for all batches that modify the currently selected blocks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockBatch.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockBatch.ProcessBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Processes the block.
            </summary>
            <param name="block"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NEditGroupBlockBatch">
            <summary>
            Edits the currently selected group block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditGroupBlockBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditGroupBlockBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NModifyBlockMarginBatch">
            <summary>
            Modifies the currently selected block margins by a given amount
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockMarginBatch.#ctor(Nevron.Nov.Text.ENBlockSide,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
            <param name="step"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockMarginBatch.#ctor(Nevron.Nov.Text.ENBlockSide,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="blockSide"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockMarginBatch.GetBlockMargins(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the margins for the specified block
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockMarginBatch.SetBlockMargins(Nevron.Nov.Text.NBlock,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets the margins to the specified block
            </summary>
            <param name="block"></param>
            <param name="margins"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NModifyBlockOffsetBatch">
            <summary>
            Base for all batches that modify block margins and padding.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockOffsetBatch.#ctor(System.String,Nevron.Nov.Text.ENBlockSide,System.Double,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="blockSide"></param>
            <param name="step"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockOffsetBatch.#ctor(System.String,Nevron.Nov.Text.ENBlockSide,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="blockSide"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockOffsetBatch.ProcessBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Processes the block.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockOffsetBatch.GetBlockMargins(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the margins for the specified block.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBlockOffsetBatch.SetBlockMargins(Nevron.Nov.Text.NBlock,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets the margins to the specified block.
            </summary>
            <param name="block"></param>
            <param name="margins"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NModifyBlockOffsetBatch.m_BlockSide">
            <summary>
            The block side to modify.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NModifyBlockOffsetBatch.m_Step">
            <summary>
            The modification step.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NModifyBlockOffsetBatch.m_Value">
            <summary>
            The modification value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NModifyBlockOffsetBatch.m_MaxValue">
            <summary>
            The maximum allowed value.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NModifyBorderAndThicknessBatch">
            <summary>
            Modifies the border and the thickness of the currently selected block elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBorderAndThicknessBatch.#ctor(Nevron.Nov.UI.NBorderAndThickness)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="borderAndThickness"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyBorderAndThicknessBatch.ProcessBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Processes the given block element.
            </summary>
            <param name="block"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyBulletFormattingBatch">
            <summary>
            Applies bullet formatting to the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyBulletFormattingBatch.#ctor(Nevron.Nov.Text.ENBulletListTemplateType)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="bulletType"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletsAndNumberingBatch">
            <summary>
            Modifies the bullets and numbering style of the selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingBatch.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NClearBulletFormattingBatch">
            <summary>
            Clears bullet formatting from the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NClearBulletFormattingBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NEditBulletListBatch">
            <summary>
            Customizes bullet styles for the current document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditBulletListBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditBulletListBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEditBulletListBatch.InitializeDialog(Nevron.Nov.Editors.NEditorWindow)">
            <summary>
            Initializes the given dialog.
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NEditDocumentBatch">
            <summary>
            Edits the document information properties.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditDocumentBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NEditDocumentInfoBatch">
            <summary>
            Edits the document information properties.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditDocumentInfoBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NCopyBatch">
            <summary>
            Copies the current selection to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCopyBatch.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCopyBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NCutBatch">
            <summary>
            Cuts the current selection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCutBatch.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDeleteNextGraphemeBatch">
            <summary>
            Deletes the next grapheme in case the selection does not contain a range.
            For range selection deletes the whole range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteNextGraphemeBatch.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDeletePrevCharBatch">
            <summary>
            Deletes the previous char in case the selection does not contain a range.
            For range selection deletes the whole range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeletePrevCharBatch.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDeleteRangeBatch">
            <summary>
            Deletes the currently selected range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteRangeBatch.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteRangeBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditFieldBatch">
            <summary>
            Shows a dialog for editing a field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditFieldBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditFieldBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NEditFieldBatch.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NFindBatch">
            <summary>
            Finds a given text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFindBatch.#ctor(Nevron.Nov.Text.NFindSettings)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NFindBatch.UsesDeferedCommit">
            <summary>
            Whether this batch uses defered commit
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFindReplaceAllBatch">
            <summary>
            Replaces all occurances of the specified text with other text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFindReplaceAllBatch.#ctor(Nevron.Nov.Text.NReplaceSettings)">
            <summary>
            Initializer constructor
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NFindReplaceAllBatch.ReplaceCount">
            <summary>
            Gets the replacement count the last time this batch was executed
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTextBatch">
            <summary>
            Replaces the current selection (if any) with the specified text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTextBatch.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text">text to insert</param>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTextBatch.#ctor(System.String,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
            <param name="fontName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTextBatch.CreateTransaction(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Creates a history transaction.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NPasteBatch">
            <summary>
            Replaces the current selection (if any) with the specified char
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPasteBatch.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NPasteFromFormatBatch">
            <summary>
            Replaces the current selection (if any) with the specified char.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPasteFromFormatBatch.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NReplaceBatch">
            <summary>
            Replaces the specified range with the specified text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NReplaceBatch.#ctor(Nevron.Nov.Graphics.NRangeI,System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="range"></param>
            <param name="text"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NTryDeleteTabBatch">
            <summary>
            Replaces the current selection (if any) with the specified text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTryDeleteTabBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTryDeleteTabBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NAddFontStyleToInlinesBatch">
            <summary>
            Sets the specified font style to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NAddFontStyleToInlinesBatch.#ctor(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Initializer consrtuctor.
            </summary>
            <param name="fontStyle"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NChangeCharacterSpacingToInlinesBatch">
            <summary>
            Set the font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NChangeCharacterSpacingToInlinesBatch.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="increase"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NChangeFontSizeToInlinesBatch">
            <summary>
            Set the font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NChangeFontSizeToInlinesBatch.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="increase"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NChangeWordSpacingToInlinesBatch">
            <summary>
            Set the font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NChangeWordSpacingToInlinesBatch.#ctor(System.Boolean)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="increase"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NClearFontStyleFromInlinesBatch">
            <summary>
            Clears the specified font style from the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NClearFontStyleFromInlinesBatch.#ctor(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Initializer consrtuctor.
            </summary>
            <param name="fontStyle"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NClearPropertyValueInlinesBatch">
            <summary>
            Clears the value of a given property for the selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NClearPropertyValueInlinesBatch.#ctor(Nevron.Nov.Dom.NProperty)">
            <summary>
            Initializing consrtuctor.
            </summary>
            <param name="property"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NInlineBatch">
            <summary>
            Base for all batches that modify the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineBatch.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetBaselineToInlinesBatch">
            <summary>
            Sets the specified baseline (normal, superscript or subscript) to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetBaselineToInlinesBatch.#ctor(Nevron.Nov.Graphics.ENBaseline)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="baseline"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetFontNameToInlinesBatch">
            <summary>
            Sets the font name to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetFontNameToInlinesBatch.#ctor(System.String)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="fontFamily"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetFontSizeToInlinesBatch">
            <summary>
            Set the font size to the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetFontSizeToInlinesBatch.#ctor(System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fontSize"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetFillToInlinesBatch">
            <summary>
            Applies the specified property value to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetFillToInlinesBatch.#ctor(Nevron.Nov.Graphics.NFill,Nevron.Nov.Text.ENTextFillType)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="fill"></param>
            <param name="textFillType"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetShadowToInlinesBatch">
            <summary>
            Sets the shadow of the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetShadowToInlinesBatch.#ctor(Nevron.Nov.Graphics.NShadow)">
            <summary>
            Initializer consrtuctor.
            </summary>
            <param name="shadow"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetStrokeToInlinesBatch">
            <summary>
            Sets the stroke of the currently selected inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetStrokeToInlinesBatch.#ctor(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Initializer consrtuctor.
            </summary>
            <param name="stroke"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NUpdateFieldBatch">
            <summary>
            Updates the currently selected fields.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NUpdateFieldBatch.#ctor">
            <summary>
            Default consrtuctor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NUpdateFieldBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertFieldBatch">
            <summary>
            Shows a dialog for inserting a field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertFieldBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertFieldBatch.#ctor(Nevron.Nov.Text.NFieldValue,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fieldValue"></param>
            <param name="showDialog">Specifies whether to show a dialog for modifying field properties
            or to insert the field directly into the document.</param>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertFieldBatch.UsesDeferedCommit">
            <summary>
            Whether this batch uses defered commit
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertFieldBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertFieldBatch.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertNewParagraphBatch">
            <summary>
            Inserts a new paragraph at the currently selection position. 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertNewParagraphBatch.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertSectionBreakBatch">
            <summary>
            Inserts an image at the currently selected range or position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertSectionBreakBatch.#ctor(Nevron.Nov.Text.ENSectionBreakType)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertSectionBreakBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Can execute only if current target is body
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTextAtomBatch">
            <summary>
            Inserts a text atome at the currently selected range or position.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTextAtomBatch.#ctor(Nevron.Nov.Text.NTextAtom)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMatchFieldsBatch">
            <summary>
            Shows a dialog for choosing the mail merge to data source column mappings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMatchFieldsBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMatchFieldsBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Checks whether the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NMergeAndSaveBatch">
            <summary>
            Creates a document for each record in the mail merge data source, merges all such
            documents to one large document and shows a "Save As" dialog for saving it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeAndSaveBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeAndSaveBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Checks whether the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeAndSaveBatch.MergeDocument(Nevron.Nov.Text.NDocumentBlock)">
            <summary>
            Merges the given source document with each of the data source records and returns
            the resulting document.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeAndSaveBatch.MergeSection(Nevron.Nov.Text.NSection)">
            <summary>
            Merges the field values in the given section with the currently selected mail merge data record.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeAndSaveBatch.UpdateMergeFields(Nevron.Nov.Text.NDocumentBlock)">
            <summary>
            Updates the mail merge field values of the given document block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeAndSaveBatch.ConvertFieldToTextInlines(Nevron.Nov.Text.NSection)">
            <summary>
            Clones the given section, converts its field inlines to text inlines and returns
            the resulting section.
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSelectDataRecordBatch">
            <summary>
            Selects a mail merge data record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectDataRecordBatch.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="dataRecordIndex"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectDataRecordBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Checks whether the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSelectRecipientsBatch">
            <summary>
            Shows a dilog for selecting a mail merge data source (e.g. an Access database).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectRecipientsBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBatch">
            <summary>
             The base of all batches
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBatch.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBatch.Name">
            <summary>
            Gets the name of this batch.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBatch.UsesDeferedCommit">
            <summary>
            Whether this batch uses defered commit
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBatch.FocusOnCommit">
            <summary>
            Whether the text control must regaing focus when the batch is comitted.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBatch.Execute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Executes the batch.
            </summary>
            <param name="richTextView"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBatch.CreateTransaction(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Creates a transaction with this batch name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBatchContainer">
            <summary>
            Represents a batch that consists of one or more batches.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBatchContainer.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBatchContainer.Batches">
            <summary>
            Gets or sets the batches contained in this batch container
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBatchContainer.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBatchContainer.m_Batches">
            <summary>
            The batches of this batch container.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDialogBatch">
            <summary>
            Base class for all batches that show a dialog window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDialogBatch.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NDialogBatch.UsesDeferedCommit">
            <summary>
            Whether this batch uses defered commit
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDialogBatch.InitializeDialog(Nevron.Nov.Editors.NEditorWindow)">
            <summary>
            Initializes the given dialog.
            </summary>
            <param name="dialog"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDialogBatch.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has been closed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDialogBatch.CreateDefaultDesignerDialog(Nevron.Nov.Text.INRichTextView,Nevron.Nov.Dom.NNode)">
            <summary>
            Creates and opens a dialog window that hosts the editor of the specified node and
            subscribes to the Close event of the window.
            </summary>
            <param name="richText"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDialogBatch.CreateEditorWindow(Nevron.Nov.Text.INRichTextView,Nevron.Nov.Editors.NEditor)">
            <summary>
            
            </summary>
            <param name="richText"></param>
            <param name="editor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDialogBatch.CreateStateEditorDialog(Nevron.Nov.Text.INRichTextView,Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NDesigner)">
            <summary>
            Creates a state editor dialog
            </summary>
            <param name="richText"></param>
            <param name="node"></param>
            <param name="designer"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyLeftMarginParagraphBatch">
            <summary>
            Applies paragraph left margin to the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyLeftMarginParagraphBatch.#ctor(System.Double)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="leftMargin"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyLeftMarginParagraphBatch.ProcessParagraph(Nevron.Nov.Text.NParagraph)">
            <summary>
            Sets the left margin of the given paragraph.
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyParagraphAlignmentBatch">
            <summary>
            Applies paragraph alignment to the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyParagraphAlignmentBatch.#ctor(Nevron.Nov.Text.ENAlign)">
            <summary>
            Initializer consrtuctor.
            </summary>
            <param name="align"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyParagraphAlignmentBatch.ProcessParagraph(Nevron.Nov.Text.NParagraph)">
            <summary>
            Sets the horizontal alignment of the given paragraph.
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyParagraphLineHeightFactorBatch">
            <summary>
            Sets paragraph line height factor to the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyParagraphLineHeightFactorBatch.#ctor(System.Double)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="lineHeightFactor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyParagraphLineHeightFactorBatch.ProcessParagraph(Nevron.Nov.Text.NParagraph)">
            <summary>
            Sets a line height factor to the given paragraph. 
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyRightMarginParagraphBatch">
            <summary>
            Applies paragraph right margin to the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyRightMarginParagraphBatch.#ctor(System.Double)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="rightMargin"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyRightMarginParagraphBatch.ProcessParagraph(Nevron.Nov.Text.NParagraph)">
            <summary>
            Sets the right margin of the given paragraph.
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NEditParagraphBatch">
            <summary>
            Edits the currently selected paragraph.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditParagraphBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditParagraphBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditTabStopBatch">
            <summary>
            Edits the currently selected paragraph
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTabStopBatch.#ctor(Nevron.Nov.Text.NTabStop)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NModifyImageBatch">
            <summary>
            Modifies the properties of an image inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyImageBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyImageBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NModifyParagraphFirstLineIndentBatch">
            <summary>
            Modifies the currently selected paragraphs first line indent by a given amount.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyParagraphFirstLineIndentBatch.#ctor(System.Double,System.Double)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="step"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyParagraphFirstLineIndentBatch.ProcessParagraph(Nevron.Nov.Text.NParagraph)">
            <summary>
            Sets the first line indent of the given paragraph.
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphBatch">
            <summary>
            Base for all batches that modify the currently selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphBatch.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphBatch.ProcessParagraph(Nevron.Nov.Text.NParagraph)">
            <summary>
            Processes the paragraph
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NEditSectionBatch">
            <summary>
            Edits the currently selected section
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditSectionBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditSectionBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditSectionPageBatch">
            <summary>
            Edits the currently selected section
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditSectionPageBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditSectionPageBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSetSectionColumnCountBatch">
            <summary>
            Sets the specified column count of the currently selected section
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetSectionColumnCountBatch.#ctor(System.Int32)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="columnCount"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NDeleteTableColumnsBatch">
            <summary>
            Deletes the current table column to the left of the current table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteTableColumnsBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteTableColumnsBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditTableColumnBatch">
            <summary>
            Edits the currently selected column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableColumnBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableColumnBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableColumnBatch">
            <summary>
            Inserts a table column to the left or to the right of the current table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableColumnBatch.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableColumnBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSelectTableColumnBatch">
            <summary>
            Selects a table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableColumnBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableColumnBatch.#ctor(Nevron.Nov.Text.NTableColumn)">
            <summary>
            Initializer constructor
            </summary>
            <param name="tableColumn"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableColumnBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NTableColumnBatch">
            <summary>
            The base for all batches that depend on the current common table column.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumnBatch.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumnBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NAlignTableCellBatch">
            <summary>
            Aligns the content of one or more table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NAlignTableCellBatch.#ctor(Nevron.Nov.ENContentAlignment)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="alignment"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NAlignTableCellBatch.ProcessCell(Nevron.Nov.Text.NTableCell)">
            <summary>
            Processes the given cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NApplyCellBackgroundBatch">
            <summary>
            Applies background fill to one or more table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyCellBackgroundBatch.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NApplyCellBackgroundBatch.ProcessCell(Nevron.Nov.Text.NTableCell)">
            <summary>
            Processes the given cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NModifyCellBorderAndThicknessBatch">
            <summary>
            Modifies the border and border thickness of one or more table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyCellBorderAndThicknessBatch.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="borderAndThickness"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NModifyCellBorderAndThicknessBatch.ProcessCell(Nevron.Nov.Text.NTableCell)">
            <summary>
            Processes the given table cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NMultipleTableCellsBatch">
            <summary>
            Base class for all batches that modify the properties of multiple table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMultipleTableCellsBatch.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NMultipleTableCellsBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMultipleTableCellsBatch.ProcessCell(Nevron.Nov.Text.NTableCell)">
            <summary>
            Processes the given table cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NMultipleTableCellsBatch.GetCells(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Gets the table cells this batch should be executed for. The default implementation
            returns the currently selected table cells.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSetTableCellTextDirectionBatch">
            <summary>
            Aligns the content of one or more table cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTableCellTextDirectionBatch.#ctor(Nevron.Nov.Text.ENTableCellTextDirection)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="direction"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTableCellTextDirectionBatch.ProcessCell(Nevron.Nov.Text.NTableCell)">
            <summary>
            Processes the given cell.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NDeleteTableBatch">
            <summary>
            Deletes a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteTableBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteTableBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditTableBatch">
            <summary>
            Edits the properties of a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableAtSelectedPositionBatch">
            <summary>
            Inserts a new table at the currently selected position. The table is created
            according to the specified settings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableAtSelectedPositionBatch.#ctor(Nevron.Nov.Text.NInsertTableSettings)">
            <summary>
            Initializer constructor
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableAtSelectedPositionBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableAtSelectedRangeBatch">
            <summary>
            Inserts a new table at the currently selected text range. The text range will be split accordingly.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableAtSelectedRangeBatch.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableAtSelectedRangeBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSelectTableBatch">
            <summary>
            Selects a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSetTableColumnsWidthModeBatch">
            <summary>
            Sets the table columns width mode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTableColumnsWidthModeBatch.#ctor(Nevron.Nov.Text.ENColumnWidthMode)">
            <summary>
            Creates a table column width mode batch for the given column width mode.
            </summary>
            <param name="columnWidthMode"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTableColumnsWidthModeBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSetTableRowsHeightModeBatch">
            <summary>
            Sets the table Rows Height mode
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTableRowsHeightModeBatch.#ctor(Nevron.Nov.Text.ENRowHeightMode)">
            <summary>
            Creates a table Row Height mode batch for the given Row Height mode.
            </summary>
            <param name="RowHeightMode"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTableRowsHeightModeBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NTableColumnWidthModeBatch">
            <summary>
            Sets the column width in a table using a specified column width mode.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumnWidthModeBatch.#ctor(Nevron.Nov.Text.ENColumnWidthMode)">
            <summary>
            Creates a table column width mode batch for the given column width mode.
            </summary>
            <param name="columnWidthMode"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumnWidthModeBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NDeleteTableRowsBatch">
            <summary>
            Deletes one or more table rows.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteTableRowsBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDeleteTableRowsBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditTableRowBatch">
            <summary>
            Edits the currently selected table row
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableRowBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableRowBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableRowBatch">
            <summary>
            Inserts a new table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableRowBatch.#ctor(System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableRowBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NDecreaseTableCellColSpanBatch">
            <summary>
            Decreases the currently selected cell column span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDecreaseTableCellColSpanBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDecreaseTableCellRowSpanBatch">
            <summary>
            Decreases the currently selected cell row span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDecreaseTableCellRowSpanBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NEditTableCellBatch">
            <summary>
            Edits the properties of a table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableCellBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditTableCellBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NIncreaseTableCellColSpanBatch">
            <summary>
            Decreases the currently selected cell col span
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NIncreaseTableCellColSpanBatch.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NIncreaseTableCellRowSpanBatch">
            <summary>
            Increases the currently selected cell row span.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NIncreaseTableCellRowSpanBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMergeCellslBatch">
            <summary>
            Increases the currently selected cell row span.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMergeCellslBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSelectTableCellBatch">
            <summary>
            Selects a table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableCellBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableCellBatch.#ctor(Nevron.Nov.Text.NTableCell)">
            <summary>
            Initializer constructor
            </summary>
            <param name="tableCell"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelectTableCellBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSingleTableCellBatch">
            <summary>
            Base for all batches that modify properties of a single table cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSingleTableCellBatch.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSingleTableCellBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSplitCellHorizontallyBatch">
            <summary>
            Splits the currently selected row master cell horizontally
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSplitCellHorizontallyBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSplitCellVerticallyBatch">
            <summary>
            Splits the currently selected row master cell horizontally
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSplitCellVerticallyBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NEditShapeBlockBatch">
            <summary>
            Edits the currently selected shape block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditShapeBlockBatch.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditShapeBlockBatch.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="richText"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NSetTextAnchorBatch">
            <summary>
            Sets the text anchor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetTextAnchorBatch.#ctor(System.Boolean)">
            <summary>
            Initializer consrtuctor.
            </summary>
            <param name="anchorToFlow"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NSetWrapModeBatch">
            <summary>
            Sets the font name to the currently selected inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSetWrapModeBatch.#ctor(Nevron.Nov.Text.ENWrapModeCommand)">
            <summary>
            Initializer consrtuctor
            </summary>
            <param name="wrapMode"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NImageAtom">
            <summary>
            Represents an image atom.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageAtom.#ctor(Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializer constructor 
            </summary>
            <param name="image"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NImageAtom.AtomType">
            <summary>
            Gets the atom type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NImageAtom.PreferredWidth">
            <summary>
            Gets/Sets the preferred width of the image. By default set to "NMultiLength.NewFixed(Double.NaN)",
            which means to use the original width of the image.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NImageAtom.PreferredHeight">
            <summary>
            Gets/Sets the preferred height of the image. By default set to NMultiLength.NewFixed(Double.NaN),
            which means to use the original height of the image.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageAtom.CreateHostInlineInternal">
            <summary>
            Creates a host inline.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInlineAtom">
            <summary>
            Represents an inline atom.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineAtom.#ctor(Nevron.Nov.Text.NInline)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="inline"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineAtom.AtomType">
            <summary>
            Gets the atom type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineAtom.CreateHostInlineInternal">
            <summary>
            Creates a host inline.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NTextAtom">
            <summary>
            Represents a text atom.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextAtom.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextAtom.IsFontNameEmpty">
            <summary>
            Returns true if the font name is empty
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextAtom.CreateHostInline">
            <summary>
            Creates a host inline.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NTextAtom.AtomType">
            <summary>
            Gets the atom type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextAtom.CreateHostInlineInternal">
            <summary>
            Creates a host inline.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletList">
            <summary>
            Represents a bullet list template
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.#ctor(Nevron.Nov.Text.ENBulletListTemplateType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="bulletListTemplateType"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletList.Levels">
            <summary>
            Gets / sets the bullet list levels
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletList.ListId">
            <summary>
            Gets the unique list id of this bullet list
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletList.NBulletListSchema">
            <summary>
            Schema associated with NRangeTextElementCollection.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletList.LevelsChild">
            <summary>
            Reference to the list levels child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletList.ListIdProperty">
            <summary>
            Reference to the Id property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletList.NBulletListTemplateDesigner">
            <summary>
            Designer for NBulletListTemplate.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.NBulletListTemplateDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.NBulletListTemplateDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates an editor that should edit the given node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.NBulletListTemplateDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletList.SUMC.CreateControl">
            <summary>
            Overriden to create the hierarchy editor content.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletListCollection">
            <summary>
            Represents a collection of bullet list levels
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListCollection.#ctor(Nevron.Nov.Text.NBulletListCollection)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListCollection.NBulletListCollectionSchema">
            <summary>
            Schema associated with NBulletListCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletListCollection.NBulletListCollectionDesigner">
            <summary>
            Designer for NBulletListCollection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListCollection.NBulletListCollectionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletListLevel">
            <summary>
            Represents a bullet list level
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.#ctor(Nevron.Nov.Text.NBulletListLevel)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.Format">
            <summary>
            Gets or sets the bullet list item format for this level
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.StartNumber">
            <summary>
            Gets or sets the start number for this level
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.BulletType">
            <summary>
            Gets or sets the bullet type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.BulletText">
            <summary>
            Gets / sets the bullet text when the bullet type is set to text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.BulletFollowChar">
            <summary>
            The type of char following the bullet
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.TabStop">
            <summary>
            Gets / sets the tab stop associated with this bullet when bullet follow char is set to Tab
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletListLevel.Alignment">
            <summary>
            Gets or sets the bullet alignment
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.ToString">
            <summary>
            Gets the string representation of this node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.NBulletListLevelSchema">
            <summary>
            Schema associated with NListElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.FormatProperty">
            <summary>
            Reference to Format property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.StartNumberProperty">
            <summary>
            Reference to StartNumber property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.BulletTypeProperty">
            <summary>
            Reference to the bullet type property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.BulletTextProperty">
            <summary>
            Reference to the bullet char property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.BulletFollowCharProperty">
            <summary>
            Reference to the BulletFollowChar property.
            </summary>
            <remarks>
            The character following the bullet.
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.TabStopProperty">
            <summary>
            Reference to the TabStop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevel.AlignmentProperty">
            <summary>
            Reference to the bullet char property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletListLevel.NBulletListLevelDesigner">
            <summary>
            Designer for NBulletListLevel.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.NBulletListLevelDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevel.NBulletListLevelDesigner.CreateHierarchyCommands(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates a list of the commands, which can modify the hierarchy of the specified
            node, in the context of the specified editor. Overriden to return an empty list.
            </summary>
            <param name="node"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletListLevelCollection">
            <summary>
            Represents a collection of bullet list levels
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevelCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevelCollection.#ctor(Nevron.Nov.Text.NBulletListLevelCollection)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevelCollection.OnChildInserted(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node has been inserted.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevelCollection.OnChildRemoved(Nevron.Nov.Dom.NRemoveChildData)">
            <summary>
            Called when a child node has been removed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevelCollection.OnUnregistered">
            <summary>
            Called after this node has been unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletListLevelCollection.NBulletListLevelCollectionSchema">
            <summary>
            Schema associated with NBulletListLevelCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletListLevelCollection.NBulletListLevelCollectionDesigner">
            <summary>
            Designer for NBulletListLevelCollection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletListLevelCollection.NBulletListLevelCollectionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletInline">
            <summary>
            Represents a bullet inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletInline.ListLevel">
            <summary>
            Gets / sets the bullet level 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletInline.ListRef">
            <summary>
            Gets / sets a reference to the bullet list
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletInline.List">
            <summary>
            Gets / sets the bullet list
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test geometry for this element.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.GetCharAt(System.Int32)">
            <summary>
            Gets the character at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the parent block
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local and/or computed value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletInline.TabStopInfo">
            <summary>
            Gets / sets the tab stop info associated with this tab
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletInline.TabWidth">
            <summary>
            Gets / sets the tab width
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletInline.GetTabGlyphRun">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletInline.NBulletInlineSchema">
            <summary>
            Schema associated with NBulletInline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletInline.ListRefProperty">
            <summary>
            Reference to the bullet list property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletInline.ListLevelProperty">
            <summary>
            Reference to the bullet list level index property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NCounter">
            <summary>
            Represents a bullet list counter
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCounter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkList">
            <summary>
            Represents a list of bookmarks.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkManager">
            <summary>
            Manages document bookmarks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBookmarkManager.NameToBookmarkMap">
            <summary>
            Gets the map of name to bookmarks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkManager.GetBookmarkNames">
            <summary>
            Gets the names of the registered bookmarks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkManager.GetBookmarksWithName(System.String)">
            <summary>
            Returns a list of the bookmarks in this document, which have the given name or
            null is bookmarks with the given name does not exist in this document.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkManager.RegisterBookmark(System.String,Nevron.Nov.Text.NBookmarkInline)">
            <summary>
            Registers a bookmark.
            </summary>
            <param name="name"></param>
            <param name="bookmark"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkManager.UnregisterBookmark(System.String,Nevron.Nov.Text.NBookmarkInline)">
            <summary>
            Unregisters a bookmark.
            </summary>
            <param name="name"></param>
            <param name="bookmark"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkManager.NBookmarkManagerSchema">
            <summary>
            Schema associated with NBookmarkManager.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeDataSource">
            <summary>
            Represents the data source for mail merge.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeDataSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeDataSource.FieldMap">
            <summary>
            Gets or sets the mail merge field map
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeDataSource.LoadDataTable">
            <summary>
            Loads a data table from this source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeDataSource.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeDataSource.NMailMergeDataSourceSchema">
            <summary>
            Schema associated with NMailMergeDataSource
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeDataSource.FieldMapProperty">
            <summary>
            Reference to the field map property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeDataSource.NDataSourceDesigner">
            <summary>
            Designer for field inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeDataSource.NDataSourceDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeDataSource.NDataSourceDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NFieldMapPropertyEditor">
            <summary>
            Field map property editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldMapPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldMapPropertyEditor.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldMapPropertyEditor.CreateControl">
            <summary>
            Creates the widget that should edit this editor's value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NFieldMapPropertyEditor.NFieldMapPropertyEditorSchema">
            <summary>
            Schema associated with NFieldPropertyMapEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeFieldMap">
            <summary>
            A class that provides information about the mapping of predefined mail merge fields to
            data source field names.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldMap.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldMap.GetIterator">
            <summary>
            Gets an iterator that iterates through the field/name mappings of this mail merge field map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldMap.Set(Nevron.Nov.Text.ENMailMergeDataField,System.String)">
            <summary>
            Associates the given predefined data field with the specified column name.
            </summary>
            <param name="field"></param>
            <param name="mappedName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldMap.TryGet(Nevron.Nov.Text.ENMailMergeDataField,System.String@)">
            <summary>
            Tries to get the mapped name for the given data field and returns true on success.
            </summary>
            <param name="field"></param>
            <param name="mappedName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldMap.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeFieldMap.NMailMergeFieldMapSchema">
            <summary>
            Schema associated with NMailMergeFieldMap.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMerge">
            <summary>
            Base class for all data sources.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMerge.DataSource">
            <summary>
            Gets or sets the data source this mail merge should get data from.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMerge.DocumentType">
            <summary>
            Gets or sets the mail merge document type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMerge.PreviewMailMerge">
            <summary>
            Gets/Sets the value of the PreviewMailMerge property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMerge.CurrentDataRecordIndex">
            <summary>
            Gets/Sets the currently selected record index.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMerge.DataRecordCount">
            <summary>
            Gets the number of data records in the data source.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMerge.FieldsHighlightFill">
            <summary>
            Gets/Sets the fill to use to highlight mail merge field inlines. If set to null (the default)
            the mail merge fields will not be highlighted.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.CanMoveNext">
            <summary>
            Returns true if the selected index can be increased
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.MoveNext">
            <summary>
            Moves the current record to the next record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.CanMovePrev">
            <summary>
            Returns true if the selected index can be decreased
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.MovePrev">
            <summary>
            Moves the current record to the prev record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.MoveFirst">
            <summary>
            Moves the current record to the first record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.MoveLast">
            <summary>
            Moves the current record to the first record in the data source
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.CanMoveToRecord">
            <summary>
            Returns true if the mail merge can navigate to a record
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.MoveToRecord(System.Int32)">
            <summary>
            Moves the mail merge to the specified record
            </summary>
            <returns>The new row index</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMerge.OnAttributeChanged(Nevron.Nov.Dom.NAttribute)">
            <summary>
            
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMerge.NMailMergeSchema">
            <summary>
            Schema associated with NMailMerge.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMerge.PreviewMailMergeProperty">
            <summary>
            Reference to the PreviewMailMerge property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMerge.DocumentTypeProperty">
            <summary>
            Reference to the DocumentType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMerge.DataSourceProperty">
            <summary>
            Reference to the DataSource property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMerge.CurrentDataRecordIndexProperty">
            <summary>
            Refrences to the CurrentDataRecordIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMerge.FieldsHighlightFillProperty">
            <summary>
            Reference to the FieldsHighlightFillProperty property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NCurrentPageInfo">
            <summary>
            Represents information about the current page (used when the user selects current page from the print dialog)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCurrentPageInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCurrentPageInfo.#ctor(Nevron.Nov.Text.NCurrentPageInfo)">
            <summary>
            Copy constructor
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="F:Nevron.Nov.Text.NCurrentPageInfo.NCurrentPageInfoSchema">
            <summary>
            Schema associated with NCurrentPageInfo.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NCurrentPageInfo.HasPositionProperty">
            <summary>
            Referecne to HasPosition property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NCurrentPageInfo.IndexProperty">
            <summary>
            Referecne to Position property Position (in body) in case has position is true.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDocumentBlock">
            <summary>
            The document block represents the text document and contains one or more sections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.#ctor">
            <summary>
            Creates a new document block and adds the predefined styles to it.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new document block.
            </summary>
            <param name="addPredefinedStyles">Determines whether to add the predefined styles
            to the document block or not.</param>
            <param name="addDefaultDocumentStyles">Specifies whether to add default document styles
            to this document, i.e. styles that are applied to all paragraphs, inlines and tables
            in the document. The names of these styles are null and that is why they get
            applied to all elements of the specific type.</param>
        </member>
        <member name="E:Nevron.Nov.Text.NDocumentBlock.TransformChanged">
            <summary>
            Occurs when the element transform has changed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.ValidateMeasure">
            <summary>
            Deferly called to validate the element measure
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.ValidateArrange">
            <summary>
            Deferly called to validate the element arrange.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.GetPaintCacheMode">
            <summary>
            Gets the paint cache mode of this block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.AccumulateVRulerInfos(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NRulerRangeTextElementInfo},Nevron.Nov.Text.NBlock)">
            <summary>
            Accumulates the VRulerInfo objects for this element to the provided list.
            </summary>
            <param name="infos"></param>
            <param name="paperPage"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.EditTargetType">
            <summary>
            The edit target type of this root
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.UsesPagedPaint">
            <summary>
            Whether this root uses paged painting
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.LastCaretPosition">
            <summary>
            Gets the last valid caret position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from paged coordinate to local logical coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from local logical coordinate to paged coordinate.
            </summary>
            <param name="point"></param>
            <param name="hintPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.Nevron#Nov#UI#INPagedElement#IsSheetRangeModeSupported(Nevron.Nov.UI.ENSheetRangeMode)">
            <summary>
            Determines whether the specified printRangeMode option is supported by the element.
            </summary>
            <param name="WAnC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.Nevron#Nov#UI#INPagedElement#BeginPrinting(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Starts the printing.
            </summary>
            <param name="xAnC"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.Nevron#Nov#UI#INPagedElement#QueryPageSettings(Nevron.Nov.UI.NPagedContext)">
            <summary>
            Called before printing a page.
            </summary>
            <param name="YAnC"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.Nevron#Nov#UI#INPagedElement#PrintPage(Nevron.Nov.UI.NPagedContext)">
            <summary>
            
            </summary>
            <param name="AbnC"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.Nevron#Nov#UI#INPagedElement#EndPrinting">
            <summary>
            Ends the printing.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.Information">
            <summary>
            Gets or sets the document information
            </summary>
        </member>
        <member name="E:Nevron.Nov.Text.NDocumentBlock.InformationChanged">
            <summary>
            Occurs when the informaiton property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.Layout">
            <summary>
            Gets / sets the text layout of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.LineSpacingMode">
            <summary>
            Gets / sets whether the text uses typographic line spacing
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.IsLayoutPaged">
            <summary>
            Gets whether the layout is paged
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.SupportsPagedLayout">
            <summary>
            Gets whether the document supports paged layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.BulletLists">
            <summary>
            Gets / sets the bullet lists in this document block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.MailMerge">
            <summary>
            Gets or sets the mail merge object of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.SpellChecker">
            <summary>
            Gets the spellchecker attached to this document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.BookmarkManager">
            <summary>
            Gets the bookmark manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.Styles">
            <summary>
            Gets/Sets the rich text styles of this document block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.DefaultTabWidth">
            <summary>
            Gets / sets the default tab width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.EditTarget">
            <summary>
            Gets the edit target
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.OwnerView">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.Statistics">
            <summary>
            Gets the document statistics
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.ViewSettings">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.ZoomFactor">
            <summary>
            Gets or sets the zoom factor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.BoxTextElementEditors">
            <summary>
            Gets the box text element editors.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.GetVisibleLogicalRange(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the visible logical range
            </summary>
            <param name="visitor"></param>
            <param name="descendantBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.Goto(Nevron.Nov.Text.ENTextDocumentPart,System.String,System.Boolean)">
            <summary>
            Positions the caret at the specified position
            </summary>
            <param name="part"></param>
            <param name="reference"></param>
            <param name="ensureCaretVisible"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.IsBlockVisible(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets whether the block is visible.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.RegisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Registers a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.UnregisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Unregisters a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.Sections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.UseContentViewport">
            <summary>
            Gets / sets whether to use this block bounds or the content bounds as viewport
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.ViewportOriginX">
            <summary>
            Gets or sets the Origin X value.
            The Origin is the first visible point from the page (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.ViewportOriginY">
            <summary>
            Gets or sets the Origin Y value.
            The Origin is the first visible point from the page (in local coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.WindowOriginX">
            <summary>
            Gets or sets the Window Origin X value (in parent coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.WindowOriginY">
            <summary>
            Gets or sets the Window Origin Y value (in parent coordinates).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.ZoomStep">
            <summary>
            Gets or sets the step with which to change the zoom factor when zooming in and out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.MinZoomFactor">
            <summary>
            Gets or sets the minimum zoom factor value when changing the zoom factor from zoom in and out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.MaxZoomFactor">
            <summary>
            Gets or sets the maximum zoom factor value when changing the zoom factor from zoom in and out.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.SmallHScrollChange">
            <summary>
            Gets or sets the small H scroll change
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentBlock.SmallVScrollChange">
            <summary>
            Gets or sets the small V scroll change
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.CanTransform">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.ZoomIn">
            <summary>
            Increaseases the zoom factor with the zoom step.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.ZoomOut">
            <summary>
            Decreases the zoom factor with the zoom step
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls the viewport in the specified direction, with the specified amount of steps.
            </summary>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.AddPredefinedStyles">
            <summary>
            Adds the predefined rich text styles to this document block's collection of styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.AddDefaultDocumentStyles">
            <summary>
            Adds the default document styles to this document, i.e. styles that are applied to all
            paragraphs, inlines and tables in the document. The names of these styles are null and
            that is why they get applied to all elements of the specific type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.GetChildBlocksChild">
            <summary>
            Gets the child blocks child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateMeasure method of the first ancestor element that implements the INMeasureElement interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the first ancestor element that implements the INLayoutElement interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.InvalidateParentDisplay">
            <summary>
            Invalidates the display of element display parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateDisplay method of the first ancestor element that implements the INVisual interface.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the local and/or computed value of a property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.OnTransformChanged">
            <summary>
            Called when the transformation from local to parent coordinates of this page has changed.
            Raises the transform changed event.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.NDocumentBlockSchema">
            <summary>
            Schema associated with NDocumentRootElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.TransformChangedEvent">
            <summary>
            Reference to the transform changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.SectionsChild">
            <summary>
            Reference to the blocks child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.BulletListsChild">
            <summary>
            Reference to the BulletLists child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.PredefinedBulletListTemplatesChild">
            <summary>
            Reference to the predefined bullet list templates child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.StylesChild">
            <summary>
            Reference to the Styles child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.PageSettingsProperty">
            <summary>
            Schema associated with Page property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.InformationProperty">
            <summary>
            Schema associated with Information property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.MailMergeProperty">
            <summary>
            Reference to the MailMerge property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.LayoutProperty">
            <summary>
            Reference to the layout property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.LineSpacingModeProperty">
            <summary>
            Reference to LineSpacingMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.UseContentViewportProperty">
            <summary>
            Reference to the use content viewport property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.ViewportOriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.ViewportOriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.WindowOriginXProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.WindowOriginYProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.ZoomFactorProperty">
            <summary>
            Reference to the ZoomFactor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.ZoomStepProperty">
            <summary>
            Reference to the ZoomStep property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.MinZoomFactorProperty">
            <summary>
            Reference to the MinZoomFactorProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.MaxZoomFactorProperty">
            <summary>
            Reference to the MaxZoomFactorProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.SmallHScrollChangeProperty">
            <summary>
            Reference to the SmallHScrollChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.SmallVScrollChangeProperty">
            <summary>
            Reference to the SmallVScrollChange property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDocumentBlock.DefaultTabWidthProperty">
            <summary>
            Schema associated with default tab width property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDocumentBlock.NDocumentStateDesigner">
            <summary>
            Section state designer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.NDocumentStateDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.NDocumentStateDesigner.AddSizeCategory">
            <summary>
            Adds the Size category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentBlock.NDocumentStateDesigner.AddLayoutCategory">
            <summary>
            Adds the Layout category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NStatistics">
            <summary>
            Provides document statistics
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStatistics.PageCount">
            <summary>
            Gets the number of pages in the document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStatistics.WordCount">
            <summary>
            Gets the number of words in the document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStatistics.CharactersWithSpacesCount">
            <summary>
            Gets the number of characters with spaces in the document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStatistics.CharactersWithoutSpacesCount">
            <summary>
            Gets the number of characters without spaces in the document.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStatistics.ParagraphCount">
            <summary>
            Gets the number of paragraphs in the text document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStatistics.LineCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHeaderFooter">
            <summary>
            Represents a header footer element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHeaderFooter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHeaderFooter.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NHeaderFooter.EditTargetType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHeaderFooter.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from paged coordinate to local logical coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHeaderFooter.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from local logical coordinate to paged coordinate
            </summary>
            <param name="point"></param>
            <param name="hintPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHeaderFooter.OnContentChanged(Nevron.Nov.Dom.NNodeSubtreeChangeMonitor,Nevron.Nov.Dom.NEventArgs)">
            <summary>
            
            </summary>
            <param name="monitor"></param>
            <param name="arg1"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NHeaderFooter.NHeaderFooterSchema">
            <summary>
            Schema associated with NHeaderFooterRootElementElement
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlock">
            <summary>
            Base for all block text elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.PostPaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.CreateBorderWall(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the border wall that needs to be rendered
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.GetPaintCacheMode">
            <summary>
            Determines whether the 2D painting of the object can be cached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.AccumulateVRulerInfos(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NRulerRangeTextElementInfo},Nevron.Nov.Text.NBlock)">
            <summary>
            Accumulates the VRulerInfo objects for this element to the provided list.
            </summary>
            <param name="infos"></param>
            <param name="paperPage"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.FloatMode">
            <summary>
            Gets or sets the flow mode of this block
            </summary>
            <remarks>This is a shortcut property that modifies HorizontalAnchor, VerticalAnchor, HorizontalBlockAlignment, VerticalBlockAlignment and WrapMode properties</remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.ClearMode">
            <summary>
            Gets or sets the clear mode of this block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.AllowOverlap">
            <summary>
            Whether the block when floating allows other flow blocks to overlap it
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.HorizontalAnchor">
            <summary>
            Gets / set the block horizontal anchor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.HorizontalBlockAlignment">
            <summary>
            Gets / sets the block horizontal alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.VerticalAnchor">
            <summary>
            Gets / sets the block vertical anchor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.VerticalBlockAlignment">
            <summary>
            Gets / sets the block vertical alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.WrapMode">
            <summary>
            Gets / sets the block wrap mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.XOffset">
            <summary>
            Gets / sets the XOffset of the block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.YOffset">
            <summary>
            Gets / sets the YOffset of the block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.AllowAnchoredDescendantBlocks">
            <summary>
            Gets / sets whether the block allows anchored descendant blocks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.X">
            <summary>
            Gets the block X coordinate in the coordinate system of its parent block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.Y">
            <summary>
            Gets the block Y coordinate in the coordinate system of its parent block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.Width">
            <summary>
            Gets the block width.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.Height">
            <summary>
            Gets the block height.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.Location">
            <summary>
            Gets the block location in the coordinate system of its parent block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.Size">
            <summary>
            Gets the block size.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.Bounds">
            <summary>
            Gets the bounds of the block in the coordinate system of its parent block.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.DesiredWidth">
            <summary>
            Gets the Desired Width of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.DesiredHeight">
            <summary>
            Gets the Desired Height of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.DesiredSize">
            <summary>
            Gets the desired size
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.PageBreakBefore">
            <summary>
            Whether this block element always starts on a new page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.PageBreakAfter">
            <summary>
            Whether the end of this block element is the last block on the page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.AvoidPageBreaksInside">
            <summary>
            Whether the block will try to avoid page breaks.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.WrapDesiredWidth">
            <summary>
            Gets or sets whether to wrap the table desired width to the parent avaialable content width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.WrapMinWidth">
            <summary>
            Gets or sets whether to wrap the table desired width to the min width of the column
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.LineHeightFactor">
            <summary>
            Gets or sets the line height factor.
            </summary>
            <remarks>
            The line height factor controls the spacing between individual lines when LineHeightMode is set to Multiple or Typographic.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.LineHeight">
            <summary>
            Gets or sets the line height in DIPs.
            </summary>
            <remarks>
            Has effect only when the current line height Mode is set to AtLeast or Exactly.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.LineHeightMode">
            <summary>
            Gets or sets the line height mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.FirstLineIndent">
            <summary>
            Gets or sets the first line indent in the paragraph
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.HangingIndent">
            <summary>
            Gets or sets the hanging indent in the paragraph
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.ParagraphDirection">
            <summary>
            Gets or sets the paragraph direction
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.AllowSpacingBetweenCells">
            <summary>
            Gets / sets whether to allow spacing between cells
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.TableCellHorizontalSpacing">
            <summary>
            Gets / sets the horizontal border spacing for table cells
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.TableCellVerticalSpacing">
            <summary>
            Gets / sets the vertical border spacing for table cells
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.IntrinsicMinWidth">
            <summary>
            Gets the intrinsic min width of this block
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlock.IntrinsicMinHeight">
            <summary>
            Gets the intrinsic min height of this block
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlock.VisitBlockDelegate">
            <summary>
            Called when a block is visited
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.VisitBlocks(Nevron.Nov.Text.NBlock.VisitBlockDelegate)">
            <summary>
            Visits this block and its descendants
            </summary>
            <param name="proc"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.GetBoundsInAncestor(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the bounds of this block in the specified ancestor coordniates
            </summary>
            <param name="ancestor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.GetChildBlocksChild">
            <summary>
            Gets the child block child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateMeasure method of the parent block
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the parent block
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test geometry for this widget.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.NBlockSchema">
            <summary>
            Schema associated with NBlockElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.ClearModeProperty">
            <summary>
            Reference to the ClearModeProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.AllowOverlapProperty">
            <summary>
            Reference to the AllowOverlapProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.HorizontalBlockAlignmentProperty">
            <summary>
            Reference to the HozitonalBlockAlignmentProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.VerticalBlockAlignmentProperty">
            <summary>
            Reference to the VerticalBlockAlignmentProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.HorizontalAnchorProperty">
            <summary>
            Reference to the HorizontalAnchorProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.VerticalAnchorProperty">
            <summary>
            Reference to the VerticalAnchorProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.WrapModeProperty">
            <summary>
            Reference to the WrapModeProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.XOffsetProperty">
            <summary>
            Reference to the XOffsetProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.YOffsetProperty">
            <summary>
            Reference to the YOffsetProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.AllowAnchoredDescendantBlocksProperty">
            <summary>
            Reference to the AllowAnchoredDescendantBlock property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.DesiredWidthProperty">
            <summary>
            Reference to the Desired Width property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.DesiredHeightProperty">
            <summary>
            Reference to the Desired Height property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.IntrinsicMinWidthProperty">
            <summary>
            Reference to the IntrinsicMinWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.IntrinsicMinHeightProperty">
            <summary>
            Reference to the IntrinsicMinHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.PageBreakBeforeProperty">
            <summary>
            Reference to the page break before property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.PageBreakAfterProperty">
            <summary>
            Reference to the page break after property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.AvoidPageBreaksInsideProperty">
            <summary>
            Reference to the avoid page break inside property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.HorizontalAlignmentProperty">
            <summary>
            Reference to Horizontal Alignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.VerticalAlignmentProperty">
            <summary>
            Reference to Vertical Alignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.FirstLineIndentProperty">
            <summary>
            Reference to FirstLineIndent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.HangingIndentProperty">
            <summary>
            Reference to HangingIndentProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.LineHeightProperty">
            <summary>
            Reference to the LineHeightProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.LineHeightFactorProperty">
            <summary>
            Reference to LineSpacingProperty property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.LineHeightModeProperty">
            <summary>
            Reference to the LineHeightMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.ParagraphDirectionProperty">
            <summary>
            Reference to ParagraphDirection property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.AllowSpacingBetweenCellsProperty">
            <summary>
            Reference to the AllowSpacingBetweenCells property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.TableCellHorizontalSpacingProperty">
            <summary>
            Reference to TableCellHorizontalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.TableCellVerticalSpacingProperty">
            <summary>
            Reference to the TableCellVerticalSpacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.WrapDesiredWidthProperty">
            <summary>
            Reference to the WrapDesiredWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlock.WrapMinWidthProperty">
            <summary>
            Reference to the WrapMinIntrinsicWidth property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlock.NBlockDesigner">
            <summary>
            Designer for NBlock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.NBlockDesigner.#ctor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.NBlockDesigner.AddBlockCategory">
            <summary>
            Adds the block category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.NBlockDesigner.AddAppearanceCategory">
            <summary>
            Adds the Appearance category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.NBlockDesigner.AddLayoutCategory">
            <summary>
            Adds the Layout category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlock.NBlockDesigner.AddSizeCategory">
            <summary>
            Adds the Size category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlockCollection`1">
            <summary>
            Represents a collection of block elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockCollection`1.#ctor(Nevron.Nov.Text.NBlockCollection{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockCollection`1.SkipBranchDisplayTraversal(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Determines whether the visitor needs to visit this displayable branch.
            </summary>
            <param name="visitor"></param>
            <returns>true if the branch must be skipped, otherwise false</returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockCollection`1.NBlockCollectionSchema">
            <summary>
            Schema associated with NBlockElementCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlockContainer`1">
            <summary>
            Represents a block element that contains other block elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockContainer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockContainer`1.m_MinInvalidIndex">
            <summary>
            The minimum invalid index.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockContainer`1.m_MaxInvalidIndex">
            <summary>
            The maximum invalid index.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockContainer`1.NBlockElementContainerSchema">
            <summary>
            Schema associated with NBlockElementContainerElement
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGroupBlock">
            <summary>
            Represents a group block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGroupBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGroupBlock.Blocks">
            <summary>
            Gets / sets the child blocks of this group block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGroupBlock.ConvertToText">
            <summary>
            Converts this block to text by replacing the block with its contents thus effectively removing this block from the tree
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGroupBlock.GetChildBlocksChild">
            <summary>
            Gets the child block's child.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NGroupBlock.NGroupBlockSchema">
            <summary>
            Schema associated with NDivElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGroupBlock.BlocksChild">
            <summary>
            Reference to the blocks child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGroupBlock.NGroupBlockStateDesigner">
            <summary>
            Group block state designer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGroupBlock.NGroupBlockStateDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFootnoteContent">
            <summary>
            Represents a note content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NFootnoteContent.EditTargetType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from paged coordinate to local logical coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from local logical coordinate to paged coordinate
            </summary>
            <param name="point"></param>
            <param name="hintPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteContent.OnContentChanged(Nevron.Nov.Dom.NNodeSubtreeChangeMonitor,Nevron.Nov.Dom.NEventArgs)">
            <summary>
            
            </summary>
            <param name="monitor"></param>
            <param name="arg1"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NFootnoteContent.NFootnoteContentSchema">
            <summary>
            Schema associated with NFootnoteContentSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NNoteContent">
            <summary>
            Represents the base class for note content, such header, footers, footnotes, endnotes etc.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NNoteContent.Blocks">
            <summary>
            Gets or sets the child blocks element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NNoteContent.LastCaretPosition">
            <summary>
            Gets the last valid caret position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.GetContainingPage">
            <summary>
            Gets the paper page that contains this root block
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.GetChildBlocksChild">
            <summary>
            Gets the child block's child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the parent block
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteContent.OnUnregistered">
            <summary>
            Called when this node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NNoteContent.NNoteContentSchema">
            <summary>
            Schema associated with NNoteContentRootElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NNoteContent.BlocksChild">
            <summary>
            Reference to the blocks child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRootBlock`1">
            <summary>
            Represents a root block element. The root element contains a selection object
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.ValidateContentIntegrity">
            <summary>
            Validates the integrity of the element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRootBlock`1.Selection">
            <summary>
            Gets or the selection object
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRootBlock`1.EditTargetType">
            <summary>
            The edit target type of this root
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRootBlock`1.UsesPagedPaint">
            <summary>
            Whether this root uses paged painting
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRootBlock`1.LastCaretPosition">
            <summary>
            Gets the last valid caret position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.GetAutoNumberForField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Gets an auto number for the specified field
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.RegisterAutoNumberField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Registers an auto number field in the map
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.UnregisterAutoNumberField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Unregisters an auto number field from the map
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from document view coordinate to local coordinate of the returned target block.
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converters a point from local coordinate to paged coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage">hint logical page</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.GetTextPositionFromViewCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the text position from the specified coordinate.
            </summary>
            <param name="point"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.GetTextPositionFromCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position from the specified coordinate.
            </summary>
            <param name="viewPoint"></param>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.ValidateTextIntegrity">
            <summary>
            Validates the root element integrity
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.FindNext(Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Returns true if a next occurance of the search text is found. The global range of the text is contained in range.
            </summary>
            <remarks>Will use the persisted text seach options</remarks>
            <param name="range"></param>
            <returns>The index of the next occurance of text, -1 if not found</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.FindNext(Nevron.Nov.Text.NFindSettings,Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Returns true if a next occurance of the search text is found. The global range of the text is contained in range.
            </summary>
            <param name="settings"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.FindAll">
            <summary>
            Returns a all occurances of the specified text.
            </summary>
            <returns></returns>
            <remarks>
            Will use the persisted text seach options
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.FindAll(Nevron.Nov.Text.NFindSettings)">
            <summary>
            Returns a all occurances of the specified text
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.GetContainingPage">
            <summary>
            Gets the paper page that contains this root block
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NRootBlock`1.BlockArrangeManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRootBlock`1.TextElementMeasureManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.RegisterForMeasureValidation(Nevron.Nov.Text.NTextElement)">
            <summary>
            
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.UnregisterFromMeasureValidation(Nevron.Nov.Text.NTextElement)">
            <summary>
            
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.RegisterFlowEntryPoint(Nevron.Nov.Text.NBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.RegisterForContentValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Registers the block for content range validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.UnregisterFromContentValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Unregisters the block from content range validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.UnregisterFlowEntryPoint(Nevron.Nov.Text.NBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.PoolForDisplayValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRootBlock`1.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post children paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRootBlock`1.m_TextElementMeasureManager">
            <summary>
            The text element measure manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRootBlock`1.m_BlockArrangeManager">
            <summary>
            The block arrange manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRootBlock`1.NRootTextElementSchema">
            <summary>
            Schema associated with NRootTextElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRootBlock`1.SelectionProperty">
            <summary>
            Reference to SelectedionPropery
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableRootBlock">
            <summary>
            Represents a root block element. The root element contains a selection object
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.#ctor(System.Int32,System.Int32,Nevron.Nov.UI.NBorder,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
            <param name="border"></param>
            <param name="borderThickness"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.ValidateContentIntegrity">
            <summary>
            Validates the integrity of the element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRootBlock.Selection">
            <summary>
            Gets or the selection object
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRootBlock.EditTargetType">
            <summary>
            The edit target type of this root
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRootBlock.UsesPagedPaint">
            <summary>
            Whether this root uses paged painting
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRootBlock.LastCaretPosition">
            <summary>
            Gets the last valid caret position
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.GetAutoNumberForField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Gets an auto number for the specified field
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.RegisterAutoNumberField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Registers an auto number field in the map
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.UnregisterAutoNumberField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Unregisters an auto number field from the map
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converts a point from document view coordinate to local coordinate of the returned target block.
            </summary>
            <param name="point"></param>
            <param name="logicalPage"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converters a point from local coordinate to paged coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage">hint logical page</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.GetTextPositionFromViewCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the text position from the specified coordinate.
            </summary>
            <param name="point"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.GetTextPositionFromCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position from the specified coordinate.
            </summary>
            <param name="viewPoint"></param>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.ValidateTextIntegrity">
            <summary>
            Validates the root element integrity
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.FindNext(Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Returns true if a next occurance of the search text is found. The global range of the text is contained in range.
            </summary>
            <remarks>Will use the persisted text seach options</remarks>
            <param name="range"></param>
            <returns>The index of the next occurance of text, -1 if not found</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.FindNext(Nevron.Nov.Text.NFindSettings,Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Returns true if a next occurance of the search text is found. The global range of the text is contained in range.
            </summary>
            <param name="settings"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.FindAll">
            <summary>
            Returns a all occurances of the specified text.
            </summary>
            <returns></returns>
            <remarks>
            Will use the persisted text seach options
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.FindAll(Nevron.Nov.Text.NFindSettings)">
            <summary>
            Returns a all occurances of the specified text
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.GetContainingPage">
            <summary>
            Gets the paper page that contains this root block
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRootBlock.BlockArrangeManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRootBlock.TextElementMeasureManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.RegisterForMeasureValidation(Nevron.Nov.Text.NTextElement)">
            <summary>
            
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.UnregisterFromMeasureValidation(Nevron.Nov.Text.NTextElement)">
            <summary>
            
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.RegisterFlowEntryPoint(Nevron.Nov.Text.NBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.RegisterForContentValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Registers the block for content range validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.UnregisterFromContentValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Unregisters the block from content range validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.UnregisterFlowEntryPoint(Nevron.Nov.Text.NBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRootBlock.PoolForDisplayValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRootBlock.m_TextElementMeasureManager">
            <summary>
            The text element measure manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRootBlock.m_BlockArrangeManager">
            <summary>
            The block arrange manager.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRootBlock.NTableRootBlockSchema">
            <summary>
            Schema associated with NRootTextElementElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRootBlock.SelectionProperty">
            <summary>
            Reference to SelectedionPropery
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NVFlowBlockCollection`1">
            <summary>
            Represents a collection of inline elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.#ctor(Nevron.Nov.Text.NVFlowBlockCollection{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.GetBlocksIntersectingYIterator(System.Double)">
            <summary>
            Gets an iteratator that will output all blocks that intersect the specified coordinate
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.GetBlocksIntersectingRangeIterator(System.Double,System.Double)">
            <summary>
            Gets an iteratator that will output all blocks that intersect the specified range
            </summary>
            <param name="minY"></param>
            <param name="maxY"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.InvalidateBlockYIndex(Nevron.Nov.Text.ENBlockYIndex)">
            <summary>
            Invalidates the block y index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockCollection`1.GetContentYRange(Nevron.Nov.Graphics.NRange@)">
            <summary>
            Gets the content y range
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NVFlowBlockCollection`1.NVFlowBlockCollectionSchema">
            <summary>
            Schema associated with NVFlowBlockElementCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NVFlowBlockContainer`1">
            <summary>
            Base class for all block containers whose child blocks flow vertically.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockContainer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVFlowBlockContainer`1.ConvertToText">
            <summary>
            Converts this block to text by replacing the block with its contents thus effectively removing this block from the tree
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NVFlowBlockContainer`1.NVFlowBlockElementContainerSchema">
            <summary>
            Schema associated with NVFlowBlockElementContainerElement
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInlineCollection">
            <summary>
            Represents a collection of inline elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineCollection.#ctor(Nevron.Nov.Text.NInlineCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineCollection.NInlineCollectionSchema">
            <summary>
            Schema associated with NInlineCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraph">
            <summary>
            The paragraph block element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.#ctor(System.String)">
            <summary>
            Initializer construtor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.#ctor(System.String,Nevron.Nov.Text.NBulletList,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
            <param name="list"></param>
            <param name="listLevel"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.ParagraphEnd">
            <summary>
            Gets the paragraph end mark
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.Bullet">
            <summary>
            Gets / sets the bullet applied on this paragraph
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.Inlines">
            <summary>
            Gets / sets the paragraph inlines
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.TabStops">
            <summary>
            Gets / sets the paragraph tab stops
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.DefaultTabWidth">
            <summary>
            Gets / sets the default tab stop spacing
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.WidowOrphanControl">
            <summary>
            Whether the paragraph allows single begin or end lines to fall on a different page.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.SpaceBeforeAuto">
            <summary>
            Gets / sets whether the paragraph will automatically insert space if there are preceding blocks.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.SpaceAfterAuto">
            <summary>
            Gets / sets whether the paragraph will automatically insert after if there are following blocks.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.ContextualSpacing">
            <summary>
            Gets/Sets whether spacing between paragraphs (top and botttom margin) of the same style should
            be ignored or not. By default set to false, which means that the spacing is not ignored.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.OutlineLevel">
            <summary>
            Gets/Sets the outline level of this paragraph. It determines at what level the paragraph
            text should be included in a table of contents field. By default set to BodyText, which
            means that the paragraph won't be included in a table of contents.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraph.Text">
            <summary>
            Gets the text in the paragraph, including the bullet if present
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.GetWordRanges">
            <summary>
            Gets the ranges of all words contained in the paragraph in local indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.GetLineRanges">
            <summary>
            Gets the line ranges of this paragraph
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.SetBulletList(Nevron.Nov.Text.NBulletList,System.Int32)">
            <summary>
            Sets the specified bullet list to the paragraph.
            </summary>
            <param name="list"></param>
            <param name="listLevel"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.SetIndentationLevel(System.Int32)">
            <summary>
            Sets the paragraph indentation level.
            </summary>
            <param name="level"></param>
            <remarks>
            This method modifies both the left indent and the bullet list level
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.SetIndentationLevel(System.Int32,System.Double)">
            <summary>
            Sets the paragraph indentation level
            </summary>
            <remarks>
            This method modifies both the left indent and the bullet list level
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.IncreaseIndent">
            <summary>
            Increases the indentation of this paragraph
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.DecreaseIndent">
            <summary>
            Decreases the indentation of this paragraph
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.GetTextPositionFromCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element per page paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.GetChildBlocksChild">
            <summary>
            Gets the child block's child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.NParagraphSchema">
            <summary>
            Schema associated with NParagraphElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.ParagraphEndChild">
            <summary>
            Reference to the paragraph end child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.BulletChild">
            <summary>
            Reference to the bullet child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.InlinesChild">
            <summary>
            Reference to the inlines child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.TabStopsProperty">
            <summary>
            Reference to the tab stops property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.DefaultTabWidthProperty">
            <summary>
            Reference to default tab stops property property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.WidowOrphanControlProperty">
            <summary>
            Reference to the Widow - Orphan Control property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.SpaceBeforeAutoProperty">
            <summary>
            Reference to the space before auto property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.SpaceAfterAutoProperty">
            <summary>
            Reference to the space after auto property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.ContextualSpacingProperty">
            <summary>
            Reference to the ContextualSpacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.OutlineLevelProperty">
            <summary>
            Reference to the OutlineLevel property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.defaultWidowOrphanControl">
            <summary>
            Default WindowOrphanControl.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.defaultKeepWithNext">
            <summary>
            Default KeepWithNext.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.defaultSpaceBeforeAuto">
            <summary>
            Default SpaceBeforeAuto.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraph.defaultSpaceAfterAuto">
            <summary>
            Default SpaceAfterAuto.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraph.NParagraphStateDesigner">
            <summary>
            Paragraph state designer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraph.NParagraphStateDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTabStop">
            <summary>
            Represents a tab stop.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStop.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStop.#ctor(Nevron.Nov.Text.NTabStop)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStop.#ctor(System.Double,Nevron.Nov.Text.ENTabStopAlignment,Nevron.Nov.Text.ENTabStopLeaderStyle)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="position"></param>
            <param name="alignment"></param>
            <param name="leaderStyle"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTabStop.Position">
            <summary>
            The tab stop position
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTabStop.Alignment">
            <summary>
            Gets . sets The tab stop alignment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTabStop.LeaderStyle">
            <summary>
            Gets / sets the tab stop leader style
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStop.NTabStopSchema">
            <summary>
            Schema associated with NTabStop.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStop.PositionProperty">
            <summary>
            Reference to the Position property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStop.AlignmentProperty">
            <summary>
            Reference to the Alignment property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStop.LeaderStyleProperty">
            <summary>
            Reference to the Leader style property property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTabStop.NTabStopDesigner">
            <summary>
            The designer for style sheets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStop.NTabStopDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTabStopCollection">
            <summary>
            Represents a collection of tab stops
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStopCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStopCollection.#ctor(Nevron.Nov.Text.NTabStopCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source">The source object</param>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStopCollection.NTabStopCollectionSchema">
            <summary>
            Schema associated with NTabStopCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTabStopInfo">
            <summary>
            Repsents a tab stop information assigned to tabs
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSection">
            <summary>
            Represents a section of the document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.DoPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs block pre paint 
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.CanClip">
            <summary>
            Gets whether the node can provide a clip area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.AccumulateVRulerInfos(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NRulerRangeTextElementInfo},Nevron.Nov.Text.NBlock)">
            <summary>
            Accumulates the VRulerInfo objects for this element to the provided list.
            </summary>
            <param name="infos"></param>
            <param name="paperPage"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.GetPaintCacheMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PagesDocument">
            <summary>
            Gets or sets the pages document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.LogicalPagesDocument">
            <summary>
            Gets or sets the pages logical document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.Blocks">
            <summary>
            Gets / sets the child blocks of this section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.DifferentLeftRightHeadersAndFooters">
            <summary>
            Whether the header and footer are different for left / right pages.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.DifferentFirstHeaderAndFooter">
            <summary>
            Whether the header and footer are different for the first page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.Header">
            <summary>
            Gets / sets the section header
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.HeaderFirst">
            <summary>
            Gets / sets the header of first page in the section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.HeaderLeft">
            <summary>
            Gets / sets the header of left pages in the section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.HeaderRight">
            <summary>
            Gets / sets the header of right pages in the section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.Footer">
            <summary>
            Gets / sets the section footer
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.FooterFirst">
            <summary>
            Gets / sets the footer of the first page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.FooterLeft">
            <summary>
            Gets / sets the footer of left pages in the section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.FooterRight">
            <summary>
            Gets / sets the footer of right pages in the section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageSize">
            <summary>
            Gets or sets the page size A1, A2 etc.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageOrientation">
            <summary>
            Gets or sets the page orientation (Landscape, Portrait)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageMaxInsetsPercent">
            <summary>
            Max margins + padding + border percent of page height or width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageMargins">
            <summary>
            Gets or sets the page margins
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PagePadding">
            <summary>
            Gets / sets page padding
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageBorderThickness">
            <summary>
            Gets / sets the page border thickness
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.HeaderOffset">
            <summary>
            Gets / sets the header offset from top of page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.FooterOffset">
            <summary>
            Gets / sets the footer offset from bottom of page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.MaxHeaderPercent">
            <summary>
            Gets or sets the maximum header percent of the page body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.MaxFooterPercent">
            <summary>
            Gets or sets the maximum footer percent of the page body
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageFill">
            <summary>
            Gets / sets the fill of pages created by this section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageBorder">
            <summary>
            Gets / sets the border of pages created by this section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageBorderSurroundsHeader">
            <summary>
            Gets / sets whether the page border surrounds the header
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.PageBorderSurroundsFooter">
            <summary>
            Gets / sets whether the page border surrounds the footer
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.BreakType">
            <summary>
            Gets / sets the break type for this section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.ColumnCount">
            <summary>
            Gets / sets the column count of this section
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.ColumnSpacing">
            <summary>
            Gets / sets the spacing between the columns
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSection.ColumnSeparatorStroke">
            <summary>
            Gets / sets the column separator stroke
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.GetChildBlocksChild">
            <summary>
            Gets the child block's child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.NSectionSchema">
            <summary>
            Schema associated with NSectionElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.BlocksChild">
            <summary>
            Reference to the blocks child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.SectionBreakChild">
            <summary>
            Reference to the section break child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.HeaderChild">
            <summary>
            Reference to header child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.HeaderFirstChild">
            <summary>
            Reference to first header child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.HeaderLeftChild">
            <summary>
            Reference to left header child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.HeaderRightChild">
            <summary>
            Reference to left header child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.FooterChild">
            <summary>
            Reference to footer child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.FooterFirstChild">
            <summary>
            Reference to footer first child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.FooterLeftChild">
            <summary>
            Reference to footer left child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.FooterRightChild">
            <summary>
            Reference to footer right child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.BreakTypeProperty">
            <summary>
            Schema associated with Section break type property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PagesDocumentProperty">
            <summary>
            Reference to the pages document property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.LogicalPagesDocumentProperty">
            <summary>
            Reference to the columns document property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageSizeProperty">
            <summary>
            Schema associated with Size property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageOrientationProperty">
            <summary>
            Schema associated with Orientation property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageMarginsProperty">
            <summary>
            Schema associated with Page Margins property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PagePaddingProperty">
            <summary>
            Schema associated with Page Padding property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageBorderThicknessProperty">
            <summary>
            Schema associated with Page Border thickness property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageBorderSurroundsHeaderProperty">
            <summary>
            Schema associated with PageBorderSurroundsHeader property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageBorderSurroundsFooterProperty">
            <summary>
            Schema associated with PageBorderSurroundsHeader property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageFillProperty">
            <summary>
            Schema associated with Page fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageBorderProperty">
            <summary>
            Schema associated with Page border property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.MaxHeaderPercentProperty">
            <summary>
            Reference to MaxHeaderPercent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.MaxFooterPercentProperty">
            <summary>
            Reference to MaxFooterPercent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.PageMaxInsetsPercentProperty">
            <summary>
            Max margins + padding + border percent of page height or width
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.DifferentLeftRightHeadersAndFootersProperty">
            <summary>
            Reference to DifferentOddEvenHeadersAndFooters property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.DifferentFirstHeaderAndFooterProperty">
            <summary>
            Reference to DifferentFirstHeaderAndFooterProperty
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.HeaderOffsetProperty">
            <summary>
            Reference to the header offset property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.FooterOffsetProperty">
            <summary>
            Reference to the footer offset property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.ColumnCountProperty">
            <summary>
            Reference to the column count property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.ColumnSpacingProperty">
            <summary>
            Reference to the column spacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSection.ColumnSeparatorStrokeProperty">
            <summary>
            Reference to the column border property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSection.NSectionStateDesigner">
            <summary>
            Section state designer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.NSectionStateDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.NSectionStateDesigner.AddAppearanceCategory">
            <summary>
            Adds the Appearance category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.NSectionStateDesigner.AddSizeCategory">
            <summary>
            Adds the Size category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.NSectionStateDesigner.AddLayoutCategory">
            <summary>
            Adds the Layout category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSection.NSectionPageStateDesigner">
            <summary>
            Represents a section page state designer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSection.NSectionPageStateDesigner.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSectionBlocksCollection">
            <summary>
            Represents a collection of inline elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionBlocksCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionBlocksCollection.#ctor(Nevron.Nov.Text.NSectionBlocksCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionBlocksCollection.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionBlocksCollection.GetChildrenClip">
            <summary>
            Creates the clip region of the visual children (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NSectionBlocksCollection.NSectionBlocksCollectionSchema">
            <summary>
            Schema associated with NSectionBlocksCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSectionBreakInline">
            <summary>
            Represents a section break inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSectionBreakInline.NSectionBreakInlineSchema">
            <summary>
            Schema associated with NSectionBreakInline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSectionCollection">
            <summary>
            Represents a collection of sections
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionCollection.#ctor(Nevron.Nov.Text.NSectionCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NSectionCollection.NSectionCollectionSchema">
            <summary>
            Schema associated with NBlockElementCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NShapeBlock">
            <summary>
            Represents a shape block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.#ctor(Nevron.Nov.Text.NShapeInline)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.GetClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element per page paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.GetTextPositionFromCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the text position from the given coordinate.
            </summary>
            <param name="point"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NShapeBlock.ShapeInline">
            <summary>
            Gets/Sets the shape inline of this shape block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.InvalidateDisplay">
            <summary>
            Invalidates the 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NShapeBlock.NShapeBlockSchema">
            <summary>
            Schema associated with NShapeBlock.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NShapeBlock.ShapeInlineChild">
            <summary>
            Reference to the ShapeInline child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NShapeBlock.NShapeBlockStateDesigner">
            <summary>
            Bullet list item state designer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.NShapeBlockStateDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeBlock.GetChildBlocksChild">
            <summary>
            Gets the ChildBlocks child.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NTableOfContentsBlock">
            <summary>
            Represents a table of contents block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsBlock.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsBlock.Update">
            <summary>
            Updates this table of contents block.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsBlock.AddTitleParagraph(System.String)">
            <summary>
            Creates and adds the title paragraph of this table of contents block.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsBlock.OnRegistered">
            <summary>
            Called after the document node is registered in its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsBlock.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableOfContentsBlock.NTableOfContentsBlockSchema">
            <summary>
            Schema associated with NTableOfContentsBlock.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableOfContentsBlock.NTableOfContentsBlockDesigner">
            <summary>
            Designer for NTableOfContentsBlock.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsBlock.NTableOfContentsBlockDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableOfContentsField">
            <summary>
            Represents the content field of a table of contents block, i.e. the block,
            which holds the table of contents entries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsField.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsField.Update">
            <summary>
            Updates the entries of this table of contents field.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsField.DeepCopyCore(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called to perform the actual deep copying of the source node.
            </summary>
            <param name="source"></param>
            <param name="context"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsField.GetText(Nevron.Nov.Text.NParagraph)">
            <summary>
            Extracts the text of the given paragraph.
            </summary>
            <param name="paragraph"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsField.CreateTableOfContentsEntry(System.String,System.String,Nevron.Nov.Text.NFieldInline@)">
            <summary>
            Creates a table of contents entry.
            </summary>
            <param name="text"></param>
            <param name="bookmarkName"></param>
            <param name="pageRefInline">The page reference inline of the table of contents entry.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableOfContentsField.GetTabStopPosition">
            <summary>
            Gets the tab stop position for table of contents entries.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTableOfContentsField.NTableOfContentsFieldSchema">
            <summary>
            Schema associated with NTableOfContentsField.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableCell">
            <summary>
            Represents a table cell
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.#ctor(Nevron.Nov.Text.NParagraph)">
            <summary>
            Initializer constructor
            </summary>
            <param name="paragraph"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.ColSpan">
            <summary>
            Gets or sets the col span of this cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.RowSpan">
            <summary>
            Gets or sets the row span of this cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.TextDirection">
            <summary>
            Gets or sets the text direction of the cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.TableCellBounds">
            <summary>
            Gets the cell bounds in table coordinates
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.Row">
            <summary>
            Gets the table row containting this cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.Column">
            <summary>
            Gets the table col containting this cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.Table">
            <summary>
            Gets the table containting this cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.IsMasterCell">
            <summary>
            Returns true if this is a master cell
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.IsRowMasterCell">
            <summary>
            Returns true if this is a row master cell (spans more than one row)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCell.IsColMasterCell">
            <summary>
            Returns true if this is a col master cell (spans more than one col)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.InvalidateParentArrange(System.Object)">
            <summary>
            
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of the parent node.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableCell.NTableCellSchema">
            <summary>
            Schema associated with NListElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableCell.RowSpanProperty">
            <summary>
            Reference to the text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableCell.ColSpanProperty">
            <summary>
            Reference to the text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableCell.TextDirectionProperty">
            <summary>
            Reference to the text direction property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableCell.NTableCellStateDesigner">
            <summary>
            Designer for NTableCellState.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.NTableCellStateDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.NTableCellStateDesigner.AddLayoutCategory">
            <summary>
            Adds the Layout category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCell.NTableCellStateDesigner.AddSizeCategory">
            <summary>
            Adds the Size category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableCellCollection">
            <summary>
            Represents a collection of table cell elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCellCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCellCollection.#ctor(Nevron.Nov.Text.NTableCellCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCellCollection.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableCellCollection.NTableCellCollectionSchema">
            <summary>
            Schema associated with NTableColumnCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableColumn">
            <summary>
            The base of all appearance styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.#ctor(Nevron.Nov.NMultiLength)">
            <summary>
            Initializer constructor
            </summary>
            <param name="preferredWidth"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.PostPaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTableColumn.X">
            <summary>
            Gets / sets the start coordinate of the column
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableColumn.Width">
            <summary>
            Gets / sets the width of the column
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableColumn.Right">
            <summary>
            Gets the right side of the column in table coordinates
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Creates a hit test region.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumn.NTableColumnSchema">
            <summary>
            Schema associated with NTableColumn
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumn.XProperty">
            <summary>
            Reference to the X property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumn.WidthProperty">
            <summary>
            Reference to the Width property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumn.DesiredWidthProperty">
            <summary>
            Reference to the DesiredWidth propery.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumn.DesiredHeightProperty">
            <summary>
            Reference to the DesiredHeight propery.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumn.ColumnIntrinsicMinWidthProperty">
            <summary>
            Reference to the ColumnIntrinsicMinWidth property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableColumn.NTableColumnStateDesigner">
            <summary>
            Designer for NTableColumnState.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumn.NTableColumnStateDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableColumnCollection">
            <summary>
            Represents a collection of inline elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumnCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableColumnCollection.#ctor(Nevron.Nov.Text.NTableColumnCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableColumnCollection.NTableColumnCollectionSchema">
            <summary>
            Schema associated with NTableColumnCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableCellIterator">
            <summary>
            Represents an iterator which cycles over the cell of the specfied table
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCellIterator.#ctor(Nevron.Nov.Text.NTable)">
            <summary>
            Initializer constructor
            </summary>
            <param name="table"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTableCellIterator.Current">
            <summary>
            Gets the current cell
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCellIterator.MoveNext">
            <summary>
            Advances the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableCellIterator.Reset">
            <summary>
            Resets the enumerator
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTable">
            <summary>
            Represents a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.#ctor(System.Int32,System.Int32,Nevron.Nov.UI.NBorder,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rowCount"></param>
            <param name="colCount"></param>
            <param name="border"></param>
            <param name="borderThickness"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element per page paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.PostPaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element per page paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTable.Rows">
            <summary>
            Gets or sets the rows of this table 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTable.Columns">
            <summary>
            Gets or sets the columns of this table 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTable.StyleOptions">
            <summary>
            Gets/Sets the table style options that determine which table style rules
            should be applied to this table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.Normalize">
            <summary>
            Normalizes the table (column count equals max cell count). Cell count of each row equals max cell count
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.CreateNewCell">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.InsertRowAbove(Nevron.Nov.Text.NTableRow)">
            <summary>
            Inserts a new table row above the specified table row
            </summary>
            <param name="row"></param>
            <returns>The newly created table row</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.InsertRowBelow(Nevron.Nov.Text.NTableRow)">
            <summary>
            Inserts a new table row below the specified table row
            </summary>
            <param name="row"></param>
            <returns>The newly created table row</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.InsertColumnLeft(Nevron.Nov.Text.NTableColumn)">
            <summary>
            Inserts a new table row above the specified table row.
            </summary>
            <param name="column"></param>
            <returns>The newly created table column</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.InsertColumnRight(Nevron.Nov.Text.NTableColumn)">
            <summary>
            Inserts a new table row below the specified table row.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.RemoveColumn(Nevron.Nov.Text.NTableColumn)">
            <summary>
            Removes the specified column
            </summary>
            <param name="column"></param>
            <returns></returns>
            <remarks>
            Deleting the last column in the table will delete the table as well
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.RemoveColumnAt(System.Int32)">
            <summary>
            Removes the column at the soecified index.
            </summary>
            <param name="columnIndex"></param>
            <returns>false if the table was deleted, true otherwise</returns>
            <remarks>
            Deleting the last column in the table will delete the table as well.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.ConvertToText">
            <summary>
            Converts the table to text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.OnPropertyLocalValueChanging(Nevron.Nov.Dom.NLocalValueChangeData)">
            <summary>
            Called when the local value of a property is about to be changed.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.GetChildBlocksChild">
            <summary>
            Gets the child block's child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.OnStyleOptionsChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the StyleOptions property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTable.NTableSchema">
            <summary>
            Schema associated with NListElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTable.RowsChild">
            <summary>
            Reference to the rows child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTable.ColumnsChild">
            <summary>
            Reference to the cols child
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTable.StyleOptionsProperty">
            <summary>
            Reference to the StyleOptions property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTable.NTableDesigner">
            <summary>
            Designer for tables.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.NTableDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTable.NTableDesigner.#ctor(Nevron.Nov.Dom.NSchema)">
            <summary>
            Initializer constructor
            </summary>
            <param name="schema"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NTableRow">
            <summary>
            Represents a table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableRow.Cells">
            <summary>
            Gets or sets the cells collection of this table row.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.CanClip">
            <summary>
            Gets whether the node can provide a clip area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.CanClipChildren">
            <summary>
            Gets whether the node can provide a clip area for its children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.GetChildrenClip">
            <summary>
            Creates the clip region of the visual children (in local coordinates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.GetChildBlocksChild">
            <summary>
            Gets the child block's child.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.PrePaintTextElement(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRow.NTableRowSchema">
            <summary>
            Schema associated with NTableRowElement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRow.CellsChild">
            <summary>
            Reference to the cells child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableRow.NTableRowStateDesigner">
            <summary>
            Designer for NTableRowState.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.NTableRowStateDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.NTableRowStateDesigner.AddBlockCategory">
            <summary>
            Adds the Block category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.NTableRowStateDesigner.AddLayoutCategory">
            <summary>
            Adds the Layout category.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRow.NTableRowStateDesigner.AddSizeCategory">
            <summary>
            Adds the Size category.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableRowCollection">
            <summary>
            Represents a collection of inline elements.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRowCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRowCollection.#ctor(Nevron.Nov.Text.NTableRowCollection)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableRowCollection.CreateNewRow">
            <summary>
            Creates a new table row with the number of cells in the table column collection
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTableRowCollection.NTableRowCollectionSchema">
            <summary>
            Schema associated with NTableRowCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.CharInsertEventHandler">
            <summary>
            Delegate for event handlers, which require to have control over char insert changes in text inlines
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NCharInsertData">
            <summary>
            Holds character insert data information.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCharInsertData.#ctor(System.Char,System.Int32)">
            <summary>
            Initializer constructor
            </summary>
            <param name="c"></param>
            <param name="position"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NCharInsertData.Char">
            <summary>
            Gets the inserted char
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NCharInsertData.Position">
            <summary>
            Gets the inserted char position
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NCharInsertEventArgs">
            <summary>
            Character insert event arguments.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCharInsertEventArgs.#ctor(Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode,Nevron.Nov.Text.NCharInsertData)">
            <summary>
            Initializer constructor
            </summary>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
            <param name="data"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NCharInsertEventArgs.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBasePageBreakInline">
            <summary>
            Represents a break inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBasePageBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBasePageBreakInline.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBasePageBreakInline.NBasePageBreakInlineSchema">
            <summary>
            Schema associated with NBreakInline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBreakInline">
            <summary>
            Represents a break inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBreakInline.GetCharAt(System.Int32)">
            <summary>
            Gets the character at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBreakInline.NBreakInlineSchema">
            <summary>
            Schema associated with NBreakInline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NColumnBreakInline">
            <summary>
            Represents a page break inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnBreakInline.NColumnBreakInlineSchema">
            <summary>
            Schema associated with NColumnBreakInline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NLineBreakInline">
            <summary>
            Represents a line break
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NLineBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NLineBreakInline.NLineBreakInlineSchema">
            <summary>
            Schema associated with NLineBreakFragment
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NPageBreakInline">
            <summary>
            Represents a page break inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPageBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NPageBreakInline.NPageBreakInlineSchema">
            <summary>
            Schema associated with NPageBreakInline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphBreakInline">
            <summary>
            Represents a paragraph end
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphBreakInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphBreakInline.NParagraphBreakInlineSchema">
            <summary>
            Schema associated with NParagraphBreakInline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDateTimeFieldValue">
            <summary>
            Represents a field inline which can represent date / time values
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDateTimeFieldValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDateTimeFieldValue.#ctor(Nevron.Nov.Text.ENDateTimeFieldName,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fieldName"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDateTimeFieldValue.#ctor(Nevron.Nov.Text.ENDateTimeFieldName)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NDateTimeFieldValue.Format">
            <summary>
            Gets / sets the date time format string used to format the field value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDateTimeFieldValue.FieldName">
            <summary>
            Gets / sets the field name
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDateTimeFieldValue.FieldValueType">
            <summary>
            Gets the field type (numeric, datetime, string etc.)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDateTimeFieldValue.GetText">
            <summary>
            Gets the current text of the field
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NDateTimeFieldValue.NDateTimeFieldValueSchema">
            <summary>
            Schema associated with NDateTimeFieldValueSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDateTimeFieldValue.FormatProperty">
            <summary>
            Reference to Format property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDateTimeFieldValue.FieldNameProperty">
            <summary>
            Reference to Type property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDateTimeFieldValue.NDateTimeFieldValueDesigner">
            <summary>
            Designer for date/time field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDateTimeFieldValue.NDateTimeFieldValueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDateTimeFieldValue.NDateTimeFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NNumericFieldNamePropertyEditor">
            <summary>
            A pair box property editor, which is by default assigned to properties of Enum type. 
            The value control is a combo box, a list box or a radio group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldNamePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldNamePropertyEditor.GetOptions">
            <summary>
            Overriden to return the enum values of the property enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericFieldNamePropertyEditor.NNumericFieldNamePropertyEditorSchema">
            <summary>
            Schema associated with NEnumPropertyEditor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericFieldNamePropertyEditor.NumericFieldListBoxTemplate">
            <summary>
            An editor template, for an enum property editor, which is displayed as a list box
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NNumericFieldValue">
            <summary>
            Represents a numeric field inline value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.#ctor(Nevron.Nov.Text.ENNumericFieldName,System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fieldName"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.#ctor(Nevron.Nov.Text.ENNumericFieldName)">
            <summary>
            Initializer constructor
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NNumericFieldValue.Format">
            <summary>
            Gets / sets the numeric format string used to format the field value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NNumericFieldValue.FieldName">
            <summary>
            Gets / sets the field name
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.GetValue">
            <summary>
            Gets the value for this numeric field value instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NNumericFieldValue.FieldValueType">
            <summary>
            Gets the field type (numeric, datetime, string etc.)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.GetText">
            <summary>
            Gets the current text of the field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.CanUpdate">
            <summary>
            Returns true if the field can be updated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.CanInsertChars">
            <summary>
            Returns true if chars can be inserted in this inline
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.GetSection">
            <summary>
            Gets the section hosting this field
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericFieldValue.NNumericFieldValueSchema">
            <summary>
            Schema associated with NNumericFieldValueSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericFieldValue.FormatProperty">
            <summary>
            Reference to Format property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericFieldValue.FieldNameProperty">
            <summary>
            Reference to FieldName property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NNumericFieldValue.NNumericFieldValueDesigner">
            <summary>
            Designer for numeric field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.NNumericFieldValueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericFieldValue.NNumericFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NPageReferenceFieldValue">
            <summary>
            Represents a page reference to a bookmark inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPageReferenceFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPageReferenceFieldValue.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="bookmarkName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NPageReferenceFieldValue.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="bookmarkName"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NPageReferenceFieldValue.BookmarkName">
            <summary>
            Gets/Sets the name of the bookmark this page reference field should show the page number of.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPageReferenceFieldValue.GetValue">
            <summary>
            Gets the value for this numeric field value instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NPageReferenceFieldValue.NPageReferenceFieldValueSchema">
            <summary>
            Schema associated with NPageReferenceFieldValue.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NPageReferenceFieldValue.BookmarkNameProperty">
            <summary>
            Reference to the BookmarkName property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NStringFieldValue">
            <summary>
            A field inline value, which represents string values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.#ctor(Nevron.Nov.Text.ENStringFieldName)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.#ctor(Nevron.Nov.Text.ENStringFieldName,Nevron.Nov.Text.ENStringFieldValueFormat)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="fieldName"></param>
            <param name="format"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NStringFieldValue.Format">
            <summary>
            Gets / sets the format used to format the field value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStringFieldValue.FieldName">
            <summary>
            Gets / sets the field name
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NStringFieldValue.FieldValueType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.GetText">
            <summary>
            Gets the current text of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NStringFieldValue.NStringFieldValueSchema">
            <summary>
            Schema associated with NStringFieldValueSchema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NStringFieldValue.FieldNameProperty">
            <summary>
            Reference to the name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NStringFieldValue.FormatProperty">
            <summary>
            Reference to the format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NStringFieldValue.NStringFieldValueDesigner">
            <summary>
            Designer for string field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.NStringFieldValueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.NStringFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NStringFieldValue.NStringFieldValueDesigner.CreatePropertyEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext,Nevron.Nov.Dom.NProperty)">
            <summary>
            Creates a property editor for the given property of the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NGreetingLineFieldValue">
            <summary>
            A field inline value that represents a greeting line used in mail merge operations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGreetingLineFieldValue.#ctor">
            <summary>
            Creates a new greeting line field value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGreetingLineFieldValue.#ctor(System.String,Nevron.Nov.Text.ENGreetingLineContent,System.String)">
            <summary>
            Creates a new greeting line field value and initializes it with the given parameters.
            </summary>
            <param name="before"></param>
            <param name="content"></param>
            <param name="after"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NGreetingLineFieldValue.FieldType">
            <summary>
            Gets the type of this mail merge field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGreetingLineFieldValue.Name">
            <summary>
            Gets the name of this mail merge field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGreetingLineFieldValue.Before">
            <summary>
            Gets/Sets the text to display before the greeting line content.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGreetingLineFieldValue.Content">
            <summary>
            Gets/Sets the content of this greeting line field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGreetingLineFieldValue.After">
            <summary>
            Gets/Sets the text to display after the greeting line content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGreetingLineFieldValue.GetText">
            <summary>
            Gets the text of this field value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NGreetingLineFieldValue.NGreetingLineFieldValueSchema">
            <summary>
            Schema associated with NGreetingLineFieldValue.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGreetingLineFieldValue.BeforeProperty">
            <summary>
            Reference to the Before property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGreetingLineFieldValue.ContentProperty">
            <summary>
            Reference to the Content property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGreetingLineFieldValue.AfterProperty">
            <summary>
            Reference to the After property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGreetingLineFieldValue.NGreetingLineFieldValueDesigner">
            <summary>
            Designer for greeting line field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGreetingLineFieldValue.NGreetingLineFieldValueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGreetingLineFieldValue.NGreetingLineFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeFieldValue">
            <summary>
            Base class for all field inline value, which are used in mail merge operations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeFieldValue.FieldValueType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeFieldValue.FieldType">
            <summary>
            Gets the type of this mail merge field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeFieldValue.Name">
            <summary>
            Gets the name of this mail merge field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeFieldValue.DocumentBlock">
            <summary>
            Gets the document block that owns this mail merge field value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldValue.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeFieldValue.GetNoDataText">
            <summary>
            Gets the text of this field when it has no data.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeFieldValue.NMailMergeFieldValueSchema">
            <summary>
            Schema associated with NMailMergeFieldValue.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergePredefinedFieldValue">
            <summary>
            Represents a mail merge field value that gets data from a mail merge source field with
            a given name.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergePredefinedFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergePredefinedFieldValue.#ctor(Nevron.Nov.Text.ENMailMergeDataField)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="dataField"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergePredefinedFieldValue.FieldType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergePredefinedFieldValue.Name">
            <summary>
            Gets the name of this mail merge field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergePredefinedFieldValue.DataField">
            <summary>
            Gets/Sets the value of the DataField property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergePredefinedFieldValue.GetText">
            <summary>
            Gets the text of this field value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergePredefinedFieldValue.NMailMergePredefinedFieldValueSchema">
            <summary>
            Schema associated with NMailMergePredefinedFieldValue.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergePredefinedFieldValue.DataFieldProperty">
            <summary>
            Reference to the DataField property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergePredefinedFieldValue.NMailMergePredefinedFieldValueDesigner">
            <summary>
            Designer for mail merge predefined field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergePredefinedFieldValue.NMailMergePredefinedFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue">
            <summary>
            Displays the ordinal position of the record in the mail merge. This number is not visible until
            the mail merge is finished.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.FieldType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.Name">
            <summary>
            Gets the name of this mail merge field value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.GetText">
            <summary>
            Gets the text of this field value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.NMailMergeRecordMergeIndexFieldValueSchema">
            <summary>
            Schema associated with NMailMergeRecordMergeIndexFieldValue.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.NMailMergeRecordMergeIndexFieldValueDesigner">
            <summary>
            Designer for mail merge record source index field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeRecordMergeIndexFieldValue.NMailMergeRecordMergeIndexFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue">
            <summary>
            Displays the ordinal position of the mail merge data record in the list of selected records
            from the data source.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.FieldType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.Name">
            <summary>
            Gets the name of this mail merge field value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.GetText">
            <summary>
            Gets the text of this field value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.NMailMergeRecordSourceIndexFieldValueSchema">
            <summary>
            Schema associated with NMailMergeRecordSourceIndexFieldValue.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.NMailMergeRecordSourceIndexFieldValueDesigner">
            <summary>
            Designer for mail merge record source index field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeRecordSourceIndexFieldValue.NMailMergeRecordSourceIndexFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeSourceFieldValue">
            <summary>
            Represents a mail merge field value that gets data from a mail merge source field with
            a given name.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="sourceFieldName"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeSourceFieldValue.FieldType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeSourceFieldValue.Name">
            <summary>
            Gets the name of this mail merge field value.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMailMergeSourceFieldValue.SourceFieldName">
            <summary>
            Gets/Sets the value of the SourceFieldName property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.GetText">
            <summary>
            Gets the text of this field value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeSourceFieldValue.NMailMergeSourceFieldValueSchema">
            <summary>
            Schema associated with NMailMergeSourceFieldValue.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMailMergeSourceFieldValue.SourceFieldNameProperty">
            <summary>
            Reference to the SourceFieldName property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMailMergeSourceFieldValue.NMailMergeSourceFieldValueDesigner">
            <summary>
            Designer for mail merge source field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.NMailMergeSourceFieldValueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.NMailMergeSourceFieldValueDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.WISC.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMailMergeSourceFieldValue.WISC.CreateValueControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NFieldInline">
            <summary>
            Represents a field inline (multiple characters that behave as one text position).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor">
            <summary>
            Default constructor - creates a new autonumber numeric field inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.ENDateTimeFieldName)">
            <summary>
            Create a new date time field inline.
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.ENDateTimeFieldName,System.String)">
            <summary>
            Creates a new date time field inline.
            </summary>
            <param name="fieldName"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.ENNumericFieldName)">
            <summary>
            Creates a new numeric field inline.
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.ENNumericFieldName,System.String)">
            <summary>
            Creates a new numeric field inline.
            </summary>
            <param name="fieldName"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.ENStringFieldName)">
            <summary>
            Creates a new string field inline.
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.ENStringFieldName,Nevron.Nov.Text.ENStringFieldValueFormat)">
            <summary>
            Creates a new string field inline.
            </summary>
            <param name="fieldName"></param>
            <param name="format"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.#ctor(Nevron.Nov.Text.NFieldValue)">
            <summary>
            Creates a new field inline that contains the given field value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NFieldInline.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.Update">
            <summary>
            Updates the field value
            </summary>
            <returns>True if the field value has changed</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.CanUpdate">
            <summary>
            Returns true if the field can be updated
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NFieldInline.NFieldInlineSchema">
            <summary>
            Schema associated with NFieldInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFieldInline.ValueProperty">
            <summary>
            Reference to the Value property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFieldInline.NFieldInlineDesigner">
            <summary>
            Designer for field inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.NFieldInlineDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.NFieldInlineDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node">The node to edit, cannot be null.</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.NFieldInlineDesigner.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the state of the specified node.
            </summary>
            <param name="node">The node to edit, cannot be null.</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldInline.NFieldInlineDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer schema.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NFieldValue">
            <summary>
            Base class for all field values.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.GetText">
            <summary>
            Gets the text of this field value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NFieldValue.FieldValueType">
            <summary>
            Gets the field type (numeric, datetime, string etc.).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.CanInsertChars">
            <summary>
            Gets whether this field value can insert characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.CanUpdate">
            <summary>
            Gets whether this field value can update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.GetNoDataText">
            <summary>
            Gets the text of this field when it has no data.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NFieldValue.NFieldValueSchema">
            <summary>
            Schema associated with NFieldValue.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFieldValue.NFieldValueDesigner">
            <summary>
            Designer for NFieldValueTypeSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.NFieldValueDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFieldValue.NFieldValueDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NFootnoteInline">
            <summary>
            Represents a footnote inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteInline.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NFootnoteInline.Content">
            <summary>
            Gets the content child of this node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFootnoteInline.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the element to the provided list.
            This implementation accumulates the children of this this element, which are NVisual instances.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NFootnoteInline.NFootnoteInlineSchema">
            <summary>
            Schema associated with NFootnoteInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFootnoteInline.FootnoteContentChild">
            <summary>
            Reference to the footnote content child
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NNoteInline">
            <summary>
            Represents a note inline, which acts as a base for footnote and endnote
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNoteInline.#ctor(System.String)">
            <summary>
            Initializer constructor
            </summary>
            <param name="text"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NNoteInline.NNoteInlineSchema">
            <summary>
            Schema associated with NNoteInline.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkHyperlink">
            <summary>
            Represents a bookmark hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkHyperlink.#ctor">
            <summary>
            Creates a bookmark hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkHyperlink.#ctor(System.String)">
            <summary>
            Creates a bookmark hyperlink that leads to the bookmark with the given name.
            </summary>
            <param name="name">The name of the target bookmark.</param>
        </member>
        <member name="P:Nevron.Nov.Text.NBookmarkHyperlink.Name">
            <summary>
            Gets/Sets the name of the bookmark this hyperlink should lead to.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkHyperlink.GetBookmarkNames">
            <summary>
            Gets the names of the bookmarks of the document block this bookmark hyperlink
            is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkHyperlink.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node ancestors chain has changed. 
            </summary>
            <param name="reparentedNode"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkHyperlink.NBookmarkHyperlinkSchema">
            <summary>
            Schema associated with NBookmarkHyperlink.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkHyperlink.NameProperty">
            <summary>
            Reference to the Name property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkHyperlink.NBookmarklHyperlinkDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkHyperlink.NBookmarklHyperlinkDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkHyperlink.NBookmarklHyperlinkDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates an instance editor to edit the given node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkInline">
            <summary>
            Represents a bookmark inline element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
            <param name="text"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBookmarkInline.Name">
            <summary>
            Gets/Sets the name of this bookmark.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.GetBookmarkNames">
            <summary>
            Gets the names of all bookmarks registered in the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.OnUnregistered">
            <summary>
            Called when the element has been removed from its document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkInline.NBookmarkInlineSchema">
            <summary>
            Schema associated with NBookmarkInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkInline.NameProperty">
            <summary>
            Reference to the Name property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkInline.NBookmarkInlineDesigner">
            <summary>
            Designer for bookmark inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.NBookmarkInlineDesigner.#ctor">
            <summary>
            Creates a designer for editing of a bookmark.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.NBookmarkInlineDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkInline.NBookmarkInlineDesigner.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NHyperlink">
            <summary>
            Base class for hyperlink
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlink.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHyperlink.NHyperlinkSchema">
            <summary>
            Schema associated with NHyperlink.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHyperlink.NHyperlinkDesigner">
            <summary>
            Designer for NHyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlink.NHyperlinkDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlink.NHyperlinkDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NHyperlinkInline">
            <summary>
            Represents a hyperlink inline that the user can click to navigate to a bookmark
            in the document or an URL.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.#ctor(System.String)">
            <summary>
            Initailizer constructor.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.#ctor(System.String,System.String)">
            <summary>
            Initailizer constructor.
            </summary>
            <param name="text"></param>
            <param name="url"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.#ctor(System.String,System.String,Nevron.Nov.Text.ENUrlHyperlinkTarget)">
            <summary>
            Initailizer constructor
            </summary>
            <param name="text"></param>
            <param name="url"></param>
            <param name="target"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NHyperlinkInline.Hyperlink">
            <summary>
            Gets / sets the hyperlink of this inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Called when the mouse moves over this hyperlink inline.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the mouse button is pressed while the cursor is over this hyperlink inline.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NHyperlinkInline.NHyperlinkInlineSchema">
            <summary>
            Schema associated with NHyperlinkInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHyperlinkInline.HyperlinkProperty">
            <summary>
            Reference to the Hyperlink property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHyperlinkInline.NHyperlinkInlineDesigner">
            <summary>
            Designer for hyperlink inlines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.NHyperlinkInlineDesigner.#ctor">
            <summary>
            Creates a designer for editing of a hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.NHyperlinkInlineDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHyperlinkInline.NHyperlinkInlineDesigner.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NUrlHyperlink">
            <summary>
            Represents an URL hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NUrlHyperlink.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NUrlHyperlink.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NUrlHyperlink.#ctor(System.String,Nevron.Nov.Text.ENUrlHyperlinkTarget)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="url"></param>
            <param name="target"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NUrlHyperlink.Url">
            <summary>
            Specifies the URL this hyperlink leads to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NUrlHyperlink.Target">
            <summary>
            Defines the target this hyperlink's URL should be opened in.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NUrlHyperlink.NUrlHyperlinkSchema">
            <summary>
            Schema associated with NHyperlinkFragment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NUrlHyperlink.UrlProperty">
            <summary>
            Reference to the URL property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NUrlHyperlink.TargetProperty">
            <summary>
            Reference to the Target property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NUrlHyperlink.NUrlHyperlinkDesigner">
            <summary>
            Designer for NUrlHyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NUrlHyperlink.NUrlHyperlinkDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NUrlHyperlink.NUrlHyperlinkDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBidiFormatMarkInline">
            <summary>
            Represents a formatting mark as specified in the Unicode bi directional algorithm
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBidiFormatMarkInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBidiFormatMarkInline.#ctor(Nevron.Nov.Text.ENBidiFormatMarkType)">
            <summary>
            Initializer constructor
            </summary>
            <param name="bidiFormatMarkType"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBidiFormatMarkInline.BidiFormatMarkType">
            <summary>
            Gets or sets the font
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBidiFormatMarkInline.GetCharAt(System.Int32)">
            <summary>
            Gets the character at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBidiFormatMarkInline.NBidiFormatMarkSchema">
            <summary>
            Schema associated with NBidiFormatMarkFragment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBidiFormatMarkInline.BidiFormatTypeProperty">
            <summary>
            Reference to the bidi format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NExpressionTextInline">
            <summary>
            Represents a numeric field inline value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NExpressionTextInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NExpressionTextInline.NExpressionTextInlineSchema">
            <summary>
            Schema associated with NExpressionTextInlineSchema.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGlyphInline">
            <summary>
            Base for all inline elements that display text or glyph(s).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGlyphInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGlyphInline.NGlyphInlineSchema">
            <summary>
            Schema associated with NGlyphInlineElement
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NImageInline">
            <summary>
            Represents an image inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageInline.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageInline.#ctor(Nevron.Nov.Graphics.NImage)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="image"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NImageInline.Image">
            <summary>
            Gets/Sets the image displayed by this inline.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NImageInline.RegardImageResolution">
            <summary>
            Gets/Sets whether the image resolution should be regarded when the image inline computes its desired size.
            Taken into account only if the value of the <see cref="P:Nevron.Nov.Text.NImageInline.Image"/> property is a raster image.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NImageInline.Hyperlink">
            <summary>
            Gets / sets the hyperlink of this inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageInline.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Called when the mouse moves over this hyperlink inline.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NImageInline.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Called when the mouse button is pressed while the cursor is over this hyperlink inline.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NImageInline.NImageInlineSchema">
            <summary>
            Schema associated with NImageInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NImageInline.ImageProperty">
            <summary>
            Reference to the Image property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NImageInline.RegardImageResolutionProperty">
            <summary>
            Reference to the RegardImageResolution property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NImageInline.HyperlinkProperty">
            <summary>
            Reference to the Hyperlink property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NImageInline.NImageInlineStateDesigner">
            <summary>
            Designer for NImageInline state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageInline.NImageInlineStateDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NImageInline.NImageInlineHyperlinkDesigner">
            <summary>
            Designer for NImageInline hyperlinks.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageInline.NImageInlineHyperlinkDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInline">
            <summary>
            Base for all inline elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInline.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test geometry for this element.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NInline.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInline.InvalidateDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInline.NInlineSchema">
            <summary>
            Schema associated with NInlineElement
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInline.TextPositionMarkersProperty">
            <summary>
            Reference to the TextPositionMarkersProperty property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NShapeInline">
            <summary>
            Base for all box inlines (image or widget)
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NShapeInline.MaintainAspect">
            <summary>
            Gets or sets whether to maintain the image aspect ratio when only 
            preferred width or preferred height is set. By default set to true.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeInline.GetCharAt(System.Int32)">
            <summary>
            Gets the character at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NShapeInline.NShapeInlineSchema">
            <summary>
            Schema associated with NShapeInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NShapeInline.MaintainAspectProperty">
            <summary>
            Reference to the MaintainAspectProperty property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NShapeInline.NShapeInlineStateDesigner">
            <summary>
            Designer for NShapeInlineState.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NShapeInline.NShapeInlineStateDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTabInline">
            <summary>
            Represents a tab inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabInline.GetCharAt(System.Int32)">
            <summary>
            Gets the character at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NTabInline.TabStopInfo">
            <summary>
            Gets / sets the tab stop associated with this tab
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTabInline.TabWidth">
            <summary>
            Gets / sets the tab width
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabInline.GetTabGlyphRun">
            <summary>
            Gets the tab glyph run
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTabInline.NTabInlineSchema">
            <summary>
            Schema associated with NTabInlineFragment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTabInline.TabChar">
            <summary>
            New line char as defined in Unicode
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextInline">
            <summary>
            Represents a text inline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.#ctor(System.String)">
            <summary>
            Initailizer ctor
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.#ctor(System.String,Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Initailizer ctor
            </summary>
            <param name="text"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.#ctor(System.String,Nevron.Nov.Graphics.ENFontStyle,Nevron.Nov.Graphics.NFill)">
            <summary>
            Initailizer ctor
            </summary>
            <param name="text"></param>
            <param name="fontStyle"></param>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.#ctor(System.Char[])">
            <summary>
            Initailizer ctor
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Initailizer ctor
            </summary>
            <param name="chars"></param>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTextInline.Text">
            <summary>
            Gets or sets the text displayed by this fragment
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextInline.AllowMerge">
            <summary>
            Gets or sets whether this inline can be merged with other text inlines
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.GetCharAt(System.Int32)">
            <summary>
            Gets the character at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextInline.InvalidateDisplay">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextInline.NTextInlineSchema">
            <summary>
            Schema associated with NTextInline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextInline.CharInsertEvent">
            <summary>
            Reference to the CharInsert event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextInline.CharRemoveEvent">
            <summary>
            Reference to the CharInsert event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextInline.TextProperty">
            <summary>
            Reference to the text property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextInline.AllowMergeProperty">
            <summary>
            Reference to the allow merge property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NWidgetInline">
            <summary>
            Represents an inlined widget 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.#ctor(Nevron.Nov.UI.NWidget)">
            <summary>
            Initializer constructor
            </summary>
            <param name="content"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NWidgetInline.Content">
            <summary>
            Gets / sets the contained widged
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NWidgetInline.DocumentBoxSurface">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.LocalToParent(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in local coordinates to the coordinates of its parent coordinate system
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.ParentToLocal(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Transforms a point in parent coordinates to local coordinates
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.CanTransform">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.GetTransform">
            <summary>
            Gets the matrix that transforms local to parent coordinates, 
            that are measured with the specified unit and resolution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.InvalidateMeasureFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NWidgetInline.InvalidateArrangeFromChild(Nevron.Nov.Dom.NElement,Nevron.Nov.Dom.ENLayoutParentInvalidationReason,System.Object)">
            <summary>
            Invalidates the arrange of this element from the given child.
            </summary>
            <param name="childElement"></param>
            <param name="reason"></param>
            <param name="hint"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NWidgetInline.NWidgetInlineSchema">
            <summary>
            Schema associated with NWidgetInline.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NWidgetInline.DocumentBoxSurfaceChild">
            <summary>
            Reference to the DocumentBoxSurface child.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.INBlockRangeIterator">
            <summary>
            Iterates through a block range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INBlockRangeIterator.MoveNext(Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Moves to the next item.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.INBulletListTemplatesCollectionHost">
            <summary>
            Bullet list templates collection host interface.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.INDocumentBlock">
            <summary>
            Interface implemented by document blocks.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.Layout">
            <summary>
            Gets / sets the text layout of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.LineSpacingMode">
            <summary>
            Gets / sets whether the text uses typographic line spacing
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.IsLayoutPaged">
            <summary>
            Gets whether the layout is paged
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.SupportsPagedLayout">
            <summary>
            Gets whether the document supports paged layout
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.BulletLists">
            <summary>
            Gets the bullet lists of this document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.BookmarkManager">
            <summary>
            Gets the bookmark manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.DefaultTabWidth">
            <summary>
            Gets / sets the default tab width
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.MailMerge">
            <summary>
            Gets or sets the mail merge object of the document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.SpellChecker">
            <summary>
            Gets the spellchecker attached to this document
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.Styles">
            <summary>
            Gets/Sets the rich text styles of this document block.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.EditTarget">
            <summary>
            Gets the edit target
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.OwnerView">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.Statistics">
            <summary>
            Gets the document statistics
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.ViewSettings">
            <summary>
            Gets the view containing this root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.BoxTextElementEditors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INDocumentBlock.ZoomFactor">
            <summary>
            Gets or sets the zoom factor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INDocumentBlock.GetVisibleLogicalRange(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the visible logical range
            </summary>
            <param name="visitor"></param>
            <param name="descendantBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INDocumentBlock.Goto(Nevron.Nov.Text.ENTextDocumentPart,System.String,System.Boolean)">
            <summary>
            Positions the caret at the specified position
            </summary>
            <param name="part"></param>
            <param name="reference"></param>
            <param name="ensureCaretVisible"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INDocumentBlock.IsBlockVisible(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets whether the block is visible
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INDocumentBlock.RegisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Registers a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INDocumentBlock.UnregisterTableOfContentsBlock(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Unregisters a table of contents block
            </summary>
            <param name="tocBlock"></param>
        </member>
        <member name="T:Nevron.Nov.Text.INRichTextView">
            <summary>
            Interface implemented by rich text views.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.IsActive">
            <summary>
            Retursnt true if the view is active
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.IsInPlace">
            <summary>
            Returns true if the view is in place edit view (and handles Esc key)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.IsReadOnly">
            <summary>
            Returns true if the view is readonly
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.IsSelectable">
            <summary>
            Returns true if the view is selectable
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.AdjustTextColorForReadability">
            <summary>
            Returns true whether to adjust text color for readability purposes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.ViewSettings">
            <summary>
            Gets the view settingss
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.EditSettings">
            <summary>
            Gets the edit settingss
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.FindSettings">
            <summary>
            Gets the view find settingss
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.InsertDateSettings">
            <summary>
            Gets the insert date settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.InsertTimeSettings">
            <summary>
            Gets the insert time settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.SpellChecker">
            <summary>
            Gets the spell checker attached to the view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.EditingRoot">
            <summary>
            Gets the current root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.TextDocument">
            <summary>
            Gets the document of this view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.TextContent">
            <summary>
            Gets the content of this rich text view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.HRuler">
            <summary>
            Gets the HRuler
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.VRuler">
            <summary>
            Gets the VRuler
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.AcceptsTab">
            <summary>
            Returns true if the rich text accepts the tab
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRichTextView.ContextMenuBuilder">
            <summary>
            Gets the context menu builder
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.UpdateCaretInfo">
            <summary>
            Updates the cartet information
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.EnsureCaretVisible">
            <summary>
            Ensures that the carret is visible
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.GetPageUpPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the prev page position
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.GetPageDownPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the next page position
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.IsPointOverText(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Returns true if the point is over text
            </summary>
            <param name="point"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.TryGetTextPositionFromMousePosition(Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position in the current editing root given the current mouse position
            </summary>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.TryGetMousePositionInDocumentCoordinates(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to get the mouse position in document coordinates
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.ViewToDocument(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a pont form view to document coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRichTextView.GetOwnerWidget">
            <summary>
            Gets the owner widget of this view
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.INRootTextMeasureArrangeElement">
            <summary>
            Root text measure arrange element interface.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRootTextMeasureArrangeElement.BlockArrangeManager">
            <summary>
            The block arrange manager
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRootTextMeasureArrangeElement.TextElementMeasureManager">
            <summary>
            The text element measure manager
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.RegisterForMeasureValidation(Nevron.Nov.Text.NTextElement)">
            <summary>
            Registers the text element for measure validation
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.UnregisterFromMeasureValidation(Nevron.Nov.Text.NTextElement)">
            <summary>
            Unregisters the text element from measure validation
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.RegisterForContentValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Registers the block for content range validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.UnregisterFromContentValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Unregisters the block from content range validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.RegisterFlowEntryPoint(Nevron.Nov.Text.NBlock)">
            <summary>
            Registers the block as a flow entry point
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.UnregisterFlowEntryPoint(Nevron.Nov.Text.NBlock)">
            <summary>
            Unregisters the block as a flow entry point.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootTextMeasureArrangeElement.PoolForDisplayValidation(Nevron.Nov.Text.NBlock)">
            <summary>
            Pools the block for display validation.
            </summary>
            <param name="block"></param>
        </member>
        <member name="T:Nevron.Nov.Text.INRootRangeTextElement">
            <summary>
            Interface implemented by root range text elements.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRootRangeTextElement.Selection">
            <summary>
            The selected range of text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRootRangeTextElement.EditTargetType">
            <summary>
            The edit target type of this root
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRootRangeTextElement.UsesPagedPaint">
            <summary>
            Whether this root uses paged painting
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.INRootRangeTextElement.LastCaretPosition">
            <summary>
            Gets the last valid caret position for this root
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.GetAutoNumberForField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Gets the automatic number for the specified field
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.RegisterAutoNumberField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Registers an auto number field in the map
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.UnregisterAutoNumberField(Nevron.Nov.Text.NFieldInline)">
            <summary>
            Unregisters an auto number field from the map
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.DocumentViewToLocal(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converters a point from ancestor paged  coordinate to local coordinate
            </summary>
            <param name="point"></param>
            <param name="logicalPage">the logical page containing the point</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.LocalToDocumentView(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NBlock@)">
            <summary>
            Converters a point from local coordinate to paged coordinates
            </summary>
            <param name="point"></param>
            <param name="logicalPage">hint page</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.ValidateTextIntegrity">
            <summary>
            Validates the root element integrity
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.FindNext(Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Returns true if a next occurance of the search text is found. The global range of the text is contained in range.
            </summary>
            <remarks>Will use the persisted text seach options</remarks>
            <param name="range"></param>
            <returns>The index of the next occurance of text, -1 if not found</returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.FindNext(Nevron.Nov.Text.NFindSettings,Nevron.Nov.Graphics.NRangeI@)">
            <summary>
            Returns true if a next occurance of the search text is found. The global range of the text is contained in range.
            </summary>
            <param name="settings"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.FindAll">
            <summary>
            Returns a all occurances of the specified text.
            </summary>
            <returns></returns>
            <remarks>
            Will use the persisted text seach options
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.FindAll(Nevron.Nov.Text.NFindSettings)">
            <summary>
            Returns a all occurances of the specified text
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.GetTextPositionFromViewCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the text position from the specified view coordinate
            </summary>
            <param name="point"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.GetTextPositionFromCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position from the specified coordinate
            </summary>
            <param name="point"></param>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.INRootRangeTextElement.GetContainingPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.INTextBlockViewoportContent">
            <summary>
            Interface implemented by text block content
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDocumentLoadedEventArgs">
            <summary>
            Document loaded event args
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentLoadedEventArgs.#ctor(Nevron.Nov.Text.NDocumentBlock,Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode)">
            <summary>
            Initializer constructors
            </summary>
            <param name="document"></param>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentLoadedEventArgs.Document">
            <summary>
            Gets the document of the event args
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDocumentSavedEventArgs">
            <summary>
            Document saved event args
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDocumentSavedEventArgs.#ctor(Nevron.Nov.Text.NDocumentBlock,Nevron.Nov.Dom.NEvent,Nevron.Nov.Dom.NNode)">
            <summary>
            Initializer constructors
            </summary>
            <param name="document"></param>
            <param name="domEvent"></param>
            <param name="targetNode"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NDocumentSavedEventArgs.Document">
            <summary>
            Gets the document of the event args
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRangeTextElement">
            <summary>
            Base for all elements that can contain content
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRangeTextElement.Range">
            <summary>
            Gets the range of this element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.GetRangeTextElementAt``1(System.Int32)">
            <summary>
            Gets the range 
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NRangeTextElement.VisitRangeDelegate">
            <summary>
            Called when a block is visited.
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.VisitRanges(Nevron.Nov.Text.NRangeTextElement.VisitRangeDelegate)">
            <summary>
            Visits this range and its descendants.
            </summary>
            <param name="proc"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.GetCharAt(System.Int32)">
            <summary>
            Get the character at the specified local position
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.GetIndexOfChar(System.Int32,System.Char)">
            <summary>
            Gets the index of the specified character
            </summary>
            <param name="startPosition"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.SplitAt(System.Int32)">
            <summary>
            Splits the range element so that the specified position becomes
            the first position when traversing the document tree from top to bottom.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.SplitAt(System.Int32,System.Int32@)">
            <summary>
            Splits the range element so that the specified position becomes
            the first position when traversing the document tree from top to bottom.
            </summary>
            <param name="position"></param>
            <param name="positionShift"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElement.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRangeTextElement.NRangeTextElementSchema">
            <summary>
            Schema associated with NRangeTextElementElement
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRangeTextElementCollection`1">
            <summary>
            Represents a range text element collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElementCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRangeTextElementCollection`1.#ctor(Nevron.Nov.Text.NRangeTextElementCollection{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRangeTextElementCollection`1.NRangeTextElementCollectionSchema">
            <summary>
            Schema associated with NRangeTextElementCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextDocument">
            <summary>
            Represents a document that contains an NDocumentBlock element.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextDocument.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextDocument.#ctor(Nevron.Nov.Text.NDocumentBlock)">
            <summary>
            Initializer constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextDocument.InitBlank(System.String,System.String)">
            <summary>
            Applies the default settings for a blank rich text document.
            </summary>
            <param name="documentTitle"></param>
            <param name="documentFileName"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextDocument.NRichTextDocumentSchema">
            <summary>
            Schema associated with NRichTextDocument.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextView">
            <summary>
            Represents a rich text edit control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.VisitChildDisplaySubtree(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.Dom.NVisual)">
            <summary>
            
            </summary>
            <param name="child"></param>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnPaintWindowBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to paint the window background, after the widget background and border are painted.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnPostPaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element post-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.IsActive">
            <summary>
            Retursnt true if the view is active
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.IsInPlace">
            <summary>
            Returns true if the view is in place edit view (and handles Esc key)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.IsReadOnly">
            <summary>
            Returns true if the view is readonly
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.IsSelectable">
            <summary>
            Returns true if the view is readonly
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.AdjustTextColorForReadability">
            <summary>
            Returns true whether to adjust text color for readability purposes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.ViewSettings">
            <summary>
            Gets the view settingss
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.EditSettings">
            <summary>
            Gets the edit settingss
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.InsertDateSettings">
            <summary>
            <summary>
            Gets the insert date settings
            </summary>
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.InsertTimeSettings">
            <summary>
            Gets the insert time settings
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.EnsureCaretVisible">
            <summary>
            Ensures that the carret is visible
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.UpdateCaretInfo">
            <summary>
            Immediately calls the UpdateCaretInfo of the caret if any.
            Does nothing if the m_nUpdateTextCounter is raised.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetPageUpPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the prev page position
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetPageDownPosition(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the next page position
            </summary>
            <param name="position"></param>
            <param name="textPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.IsPointOverText(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Graphics.NSize)">
            <summary>
            Returns true if the point is over text
            </summary>
            <param name="point"></param>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.EditingRoot">
            <summary>
            Gets the current root element
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.TextDocument">
            <summary>
            Gets the document of this view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.TextContent">
            <summary>
            Gets the content of this rich text view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.Selection">
            <summary>
            Gets the view selection
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.SpellChecker">
            <summary>
            Gets the spell checker attached to the view
            </summary>
            <summary>
            Gets or sets the spell check service of this view
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.AcceptsTab">
            <summary>
            Gets or sets whether tab characters are accepted as input.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.ContextMenuBuilder">
            <summary>
            Gets the context menu builder
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.TryGetTextPositionFromMousePosition(Nevron.Nov.Text.NTextPosition@,Nevron.Nov.DataStructures.INFilter{Nevron.Nov.Text.NBlock})">
            <summary>
            Gets the text position in the current editing root given the current mouse position
            </summary>
            <param name="textPosition"></param>
            <param name="blockFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.TryGetMousePositionInDocumentCoordinates(Nevron.Nov.Graphics.NPoint@)">
            <summary>
            Tries to get the mouse position in document coordinates
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.ViewToDocument(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Converts a pont form view to document coordinates.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetOwnerWidget">
            <summary>
            Gets the owner widget of this view
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.Nevron#Nov#Text#INSpellCheckerHost#ClearSpellCheck">
            <summary>
            Stops the spell checking and clears the results
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.Nevron#Nov#Text#INSpellCheckerHost#InvalidateSpellCheck">
            <summary>
            Invalidates the current results of spell checking
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.FindSettings">
            <summary>
            Gets the find settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.ReplaceSettings">
            <summary>
            Gets the replace settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.GotoSettings">
            <summary>
            Gets the goto settings
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.ContentBackgroundFill">
            <summary>
            Gets or sets the content background fill.
            </summary>
            <remarks>
            The content background fill is used to specify the filling of pages in Print view or the background fill 
            of the view when in Normal / Web view.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.HRuler">
            <summary>
            Gets or sets the horizontal ruler of the rich text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.VRuler">
            <summary>
            Gets or sets the vertical ruler of the rich text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.HScrollBar">
            <summary>
            Gets or sets the HScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.VScrollBar">
            <summary>
            Gets or sets the VScrollBar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.HScrollMode">
            <summary>
            Gets or sets the scroll mode, which specifies the visibility of the H scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.VScrollMode">
            <summary>
            Gets or sets the scroll mode, which specifies the visibility of the Y scrollbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.EditTargetType">
            <summary>
            Gets or sets the current edit target
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.EnsureCaretVisibleOnResize">
            <summary>
            Gets whether to ensure the caret visibility when the rich text view is resized
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextView.Text">
            <summary>
            Gets or sets the content of the view in plain text format
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.ScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Scrolls the viewport in the specified direction, with the specified amount of steps.
            </summary>
            <remarks>
            Overriden to call the Document.ScrollInDirection method.
            </remarks>
            <param name="direction"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.Print">
            <summary>
            Prints the document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.Cut">
            <summary>
            Cuts the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.Copy">
            <summary>
            Copyies the current selection to the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.Paste">
            <summary>
            Pastes the clipboard content to the view. 
            </summary>
            <remarks>
            If there is selected text it is replaced
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnDocumentChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Document property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.AccumulateContentDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Accumulates the display children of the node that are considered to be content.
            </summary>
            <param name="visitor"></param>
            <param name="list"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetTopSideAdorner">
            <summary>
            Overriden to return the horizontal ruler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetLeftSideAdorner">
            <summary>
            Overriden to return the vertical ruler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetBottomSideAdorner">
            <summary>
            Overriden return an instance of a NHScrollBar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetRightSideAdorner">
            <summary>
            Overriden return an instance of a NVScrollBar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetHScrollBar">
            <summary>
            Overriden to return the HScrollBar child
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetVScrollBar">
            <summary>
            Overriden to return the VScrollBar child
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetHScrollMode">
            <summary>
            Overriden to return the value of the HScrollMode property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetVScrollMode">
            <summary>
            Overriden to return the value of the VScrollMode property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetNoScrollHAlign">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetNoScrollVAlign">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetHScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the HScrollbar for the viewport parameters, in case the HScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetVScrollBarSettings(Nevron.Nov.Graphics.NRectangle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the settings that need to be applied to the VScrollbar for the viewport parameters, in case the VScrollBar is visible.
            </summary>
            <param name="totalViewport"></param>
            <param name="viewportSize"></param>
            <param name="viewportOrigin"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetViewportOrigin">
            <summary>
            Overriden to return the Document ViewportOrigin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.SetViewportOrigin(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Overriden to set the Document ViewportOrigin
            </summary>
            <param name="origin"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetZoomMode">
            <summary>
            Overriden to return ENZoomMode.Normal
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetZoomFactor">
            <summary>
            Gets the viewport zoom factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.SetZoomFactor(System.Double)">
            <summary>
            
            </summary>
            <param name="factor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.GetTotalViewport">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.ComputeWindowSize(Nevron.Nov.Graphics.NRectangle,System.Boolean,System.Boolean)">
            <summary>
            Computes the window size based on a content rect and the specified scrollbars visibility
            </summary>
            <param name="ca"></param>
            <param name="showHScrollBar"></param>
            <param name="showVScrollBar"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the measure.
            </summary>
            <param name="hint"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnArrangeSlotChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the width or height of the arrange slot has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.MeasureContent(System.Boolean)">
            <summary>
            Measures the element's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnFocusIn(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusInEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnFocusOut(Nevron.Nov.UI.NFocusChangeEventArgs)">
            <summary>
            Default handler for the NKeyboard.FocusOutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.OnZoomFactorChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            Called when the Orientation property has changed.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the rich text commander, by adding the rich text command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.BuildInteractor(Nevron.Nov.UI.NInteractor)">
            <summary>
            Builds the rich text interactor by adding the rich text tools.
            </summary>
            <param name="interactor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.CreateSpellChecker">
            <summary>
            Creates the spell checker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.ZoomIn">
            <summary>
            Increaseases the zoom factor with the zoom step.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.ZoomOut">
            <summary>
            Decreases the zoom factor with the zoom step
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.CreateSaveFileDialog(Nevron.Nov.Text.Formats.NTextFormat,Nevron.Nov.Text.Formats.NTextFormatRegistry)">
            <summary>
            Creates the save file dialog shown by the SaveToFile methods that do not have a fileName parameter.
            Overriden to set the default file format to DOCX if the current document has never been saved.
            </summary>
            <param name="defaultFormat"></param>
            <param name="formatRegistry"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextView.CreateNewDocument">
            <summary>
            Creates a new document.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.NRichTextViewSchema">
            <summary>
            Schema associated with NRichTextSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.CaretChild">
            <summary>
            Reference to caret child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.HScrollBarChild">
            <summary>
            Reference to the HScrollBar child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.VScrollBarChild">
            <summary>
            Reference to the VScrollBar child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.HRulerChild">
            <summary>
            Reference to the HRuler child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.VRulerChild">
            <summary>
            Reference to the VRuler child.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.HScrollModeProperty">
            <summary>
            Reference to the HScrollMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.VScrollModeProperty">
            <summary>
            Reference to the VScrollMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.ViewSettingsProperty">
            <summary>
            Reference to ViewSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.EditSettingsProperty">
            <summary>
            Reference to EditSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.FindSettingsProperty">
            <summary>
            Reference to FindSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.ReplaceSettingsProperty">
            <summary>
            Reference to ReplaceSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.GotoSettingsProperty">
            <summary>
            Reference to GotoSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.ContentBackgroundFillProperty">
            <summary>
            Reference to the ContentBackgroundFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.AcceptsTabProperty">
            <summary>
            Reference to the AcceptsTab property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.SpellCheckerProperty">
            <summary>
            Reference to the SpellChecker property. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextView.EnsureCaretVisibleOnResizeProperty">
            <summary>
            Reference to the EnsureCaretVisibleOnResizeProperty property. 
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextViewWithCommandBars">
            <summary>
            A rich text view with command bars.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextViewWithCommandBars.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextViewWithCommandBars.CreateUIBuilder">
            <summary>
            Creates the rich text command bars builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextViewWithCommandBars.CreateView">
            <summary>
            Creates the rich text view.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextViewWithCommandBars.NRichTextViewWithCommandBarsSchema">
            <summary>
            Schema associated with NRichTextViewWithCommandBars.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextViewWithRibbon">
            <summary>
            A rich text view with ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextViewWithRibbon.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextViewWithRibbon.CreateUIBuilder">
            <summary>
            Creates the rich text ribbon builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextViewWithRibbon.CreateView">
            <summary>
            Creates the rich text view.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextViewWithRibbon.NRichTextViewWithRibbonSchema">
            <summary>
            Schema associated with NRichTextViewWithRibbon.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextElement">
            <summary>
            Base of all text elements
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontName">
            <summary>
            The name of the used font
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontSize">
            <summary>
            Gets or Sets the em size of the used font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontCharacterSpacing">
            <summary>
            Gets or Sets the em size of the used font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontWordSpacing">
            <summary>
            Gets or Sets the em size of the used font.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontStyleBold">
            <summary>
            Gets or sets whether the font style is bold
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontStyleItalic">
            <summary>
            Gets or sets whether the font style is italic
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontStyleUnderline">
            <summary>
            Gets or sets whether the font style underline
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontStyleStrikethrough">
            <summary>
            Gets or sets whether the font style is striketrough
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.FontStyle">
            <summary>
            The style of the used font
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Baseline">
            <summary>
            Gets or sets the base line of the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Panose">
            <summary>
            Gets / sets the font panose number
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Fill">
            <summary>
            Gets or sets the fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.HighlightFill">
            <summary>
            Gets / sets the highlight fill
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Stroke">
            <summary>
            Gets or sets the stroke
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.BackgroundFill">
            <summary>
            Reference to the Background Fill property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Border">
            <summary>
            Gets or sets the border
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Shadow">
            <summary>
            Gets or sets the shadow
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MarginLeft">
            <summary>
            Gets or sets the left margin
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MarginTop">
            <summary>
            Gets or sets the top margin
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MarginRight">
            <summary>
            Gets or sets the right margin
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MarginBottom">
            <summary>
            Gets or sets the bottom margin
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Margins">
            <summary>
            Gets or sets the margins 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.Padding">
            <summary>
            Gets or sets the padding 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.PaddingLeft">
            <summary>
            Gets or sets the left padding 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.PaddingTop">
            <summary>
            Gets or sets the top padding 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.PaddingRight">
            <summary>
            Gets or sets the right padding 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.PaddingBottom">
            <summary>
            Gets or sets the bottom padding 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.BorderThickness">
            <summary>
            Gets or sets the border thickness
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MinWidth">
            <summary>
            Gets or sets the min width of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MinHeight">
            <summary>
            Gets or sets the min height of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MaxWidth">
            <summary>
            Gets or sets the max width of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.MaxHeight">
            <summary>
            Gets or sets the max height of the element 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.PreferredWidth">
            <summary>
            Gets or sets the suggested width of the element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.PreferredHeight">
            <summary>
            Gets or sets the suggested height of the element.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.IsSelected">
            <summary>
            Gets whether the element is selected.
            Automatically update by Nevron.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextElement.ParentBlock">
            <summary>
            Gets the block containing this text element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.RemoveFromParent">
            <summary>
            Removes the text element from its parent
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            Hit tests the node by point (in view coordinates).
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.HitTest(Nevron.Nov.Dom.NRegionHitTestVisitor)">
            <summary>
            Hit tests the node by region
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.InvalidateDisplay">
            <summary>
            Invalidates the display of the node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateMeasure method of the parent block
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.InvalidateParentArrange(System.Object)">
            <summary>
            Invalidates the layout of element layout parent(s).
            </summary>
            <remarks>
            This implementation calls the InvalidateLayout method of the parent block
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.CreateHitTestRegion(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            Gets the hit test geometry for this widget.
            </summary>
            <param name="visitor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.NTextElementSchema">
            <summary>
            Schema associated with NTextElement.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontNameProperty">
            <summary>
            Schema associated with Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontSizeProperty">
            <summary>
            Schema associated with EmSize property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontCharacterSpacingProperty">
            <summary>
            Reference to font character spacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontWordSpacingProperty">
            <summary>
            /// Reference to font word spacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontStyleBoldProperty">
            <summary>
            Reference ot the FontStyleBold property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontStyleItalicProperty">
            <summary>
            Reference ot the FontStyleItalic property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontStyleUnderlineProperty">
            <summary>
            Reference ot the FontStyleUnderline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FontStyleStrikethroughProperty">
            <summary>
            Reference ot the FontStyleStrikethrough property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.BaselineProperty">
            <summary>
            Schema associated with BaseLine property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PanoseProperty">
            <summary>
            Schema associated with Panose property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.FillProperty">
            <summary>
            Reference to the Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.HighlightFillProperty">
            <summary>
            Reference to the Highlight Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.BackgroundFillProperty">
            <summary>
            Reference to the Background Fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.BorderProperty">
            <summary>
            Reference to the Border property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.ShadowProperty">
            <summary>
            Reference to the Shadow property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MarginLeftProperty">
            <summary>
            Reference to the MarginLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MarginTopProperty">
            <summary>
            Reference to the MarginTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MarginRightProperty">
            <summary>
            Reference to the MarginRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MarginBottomProperty">
            <summary>
            Reference to the MarginBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PaddingLeftProperty">
            <summary>
            Reference to the PaddingLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PaddingTopProperty">
            <summary>
            Reference to the PaddingTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PaddingRightProperty">
            <summary>
            Reference to the PaddingRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PaddingBottomProperty">
            <summary>
            Reference to the PaddingBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.BorderThicknessProperty">
            <summary>
            Reference to the BorderThickness property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PreferredWidthProperty">
            <summary>
            Reference to the PreferredWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.PreferredHeightProperty">
            <summary>
            Reference to the PreferredHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MinWidthProperty">
            <summary>
            Reference to the MinWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MinHeightProperty">
            <summary>
            Reference to the MinHeight property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MaxWidthProperty">
            <summary>
            Reference to the MaxWidth property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElement.MaxHeightProperty">
            <summary>
            Reference to the MaxHeight property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextElement.NTextElementDesigner">
            <summary>
            Paragraph state designer
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElement.NTextElementDesigner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextElementCollection`1">
            <summary>
            Base for all collections that contain text elements
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElementCollection`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElementCollection`1.#ctor(Nevron.Nov.Text.NTextElementCollection{`0})">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextElementCollection`1.OnUnregistered">
            <summary>
            Called after the document node is unregistered from its owner document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElementCollection`1.m_ParentBlock">
            <summary>
            Reference to the parent block.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextElementCollection`1.NTextElementCollectionSchema">
            <summary>
            Schema associated with NTextElementCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NImageClipboardTextFormat">
            <summary>
            Base class for image text formats
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NImageClipboardTextFormat.FromDataObject(System.Object)">
            <summary>
            Imports a document from a data object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NImageClipboardTextFormat.ToDataObject(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.UI.NDataObject)">
            <summary>
            Exports a document to a data object
            </summary>
            <param name="document"></param>
            <param name="dataObject"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NImageClipboardTextFormat.DataFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NPngImageClipboardTextFormat">
            <summary>
            Represents the png text format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NPngImageClipboardTextFormat.TextFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRasterImageClipboardTextFormat">
            <summary>
            Base class for raster based text formats
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NClipboardTextFormat">
            <summary>
            Base for all clipboard text formats
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NClipboardTextFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NClipboardTextFormat.Name">
            <summary>
            Gets the name of this text format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NClipboardTextFormat.HasFormatting">
            <summary>
            Returns true if the format has formatting
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NClipboardTextFormat.IsContainedInClipboard">
            <summary>
            Returns true if the clipboard contains the text format.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NClipboardTextFormat.IsContainedInDataObject(Nevron.Nov.UI.NDataObject)">
            <summary>
            Returns true if the data object contains the text format.
            </summary>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NClipboardTextFormat.FromDataObject(System.Object)">
            <summary>
            Imports a document from a data object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NClipboardTextFormat.ToDataObject(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.UI.NDataObject)">
            <summary>
            Exports the specified document to the specified data object
            </summary>
            <param name="document"></param>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NClipboardTextFormat.TextFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NClipboardTextFormat.DataFormat">
            <summary>
            The associated clipboard data format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHtmlClipboardTextFormat">
            <summary>
            Represents the html text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHtmlClipboardTextFormat.TextFormat">
            <summary>
            The underlying text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHtmlClipboardTextFormat.DataFormat">
            <summary>
            The underlying data format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHtmlClipboardTextFormat.FromDataObject(System.Object)">
            <summary>
            Imports a document from a data object.
            </summary>
            <param name="obj"></param>
            <param name="documentReadyCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHtmlClipboardTextFormat.ToDataObject(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.UI.NDataObject)">
            <summary>
            Exports a document to a data object.
            </summary>
            <param name="document"></param>
            <param name="dataObject"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NHtmlClipboardTextFormat.Instance">
            <summary>
            The single instance of this text format.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRtfClipboardTextFormat">
            <summary>
            Represents the rtf text format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRtfClipboardTextFormat.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRtfClipboardTextFormat.TextFormat">
            <summary>
            The underling text format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRtfClipboardTextFormat.DataFormat">
            <summary>
            The underling text format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRtfClipboardTextFormat.FromDataObject(System.Object)">
            <summary>
            Imports a document from a data object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRtfClipboardTextFormat.ToDataObject(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.UI.NDataObject)">
            <summary>
            Exports a document to a data object.
            </summary>
            <param name="document"></param>
            <param name="dataObject"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NTextClipboardTextFormat">
            <summary>
            Represents the plain text text format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextClipboardTextFormat.HasFormatting">
            <summary>
            Returns true if the format has formatting
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextClipboardTextFormat.FromDataObject(System.Object)">
            <summary>
            Imports a document from a data object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextClipboardTextFormat.ToDataObject(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.UI.NDataObject)">
            <summary>
            Exports a document to a data object
            </summary>
            <param name="document"></param>
            <param name="dataObject"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTextClipboardTextFormat.TextFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTextClipboardTextFormat.DataFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NCopyPasteOptions">
            <summary>
            Represents paste options applied when a paste command is executed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCopyPasteOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NCopyPasteOptions.AllowImages">
            <summary>
            Gets or sets whether images are allowed in paste operations
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NCopyPasteOptions.AllowTables">
            <summary>
            Gets or sets whether tables are allowed in paste operations
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NCopyPasteOptions.AllowSections">
            <summary>
            Gets or sets whether multiple sections are allowed in paste operations
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCopyPasteOptions.FilterDocument(Nevron.Nov.Text.NRichTextDocument)">
            <summary>
            Filters the document for content as per the paste option settings
            </summary>
            <param name="document"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NCopyPasteOptions.NCopyPasteOptionsSchema">
            <summary>
            Schema associated with NPasteOptions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NCopyPasteOptions.AllowImagesProperty">
            <summary>
            Reference to the AllowImages property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NCopyPasteOptions.AllowTablesProperty">
            <summary>
            Reference to the AllowTables property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NCopyPasteOptions.AllowSectionsProperty">
            <summary>
            Reference to the AllowSections property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSelection">
            <summary>
            Represents the selection of text document. 
            </summary>
            <remarks>
            The selection consists of two properties - anchor and position. 
            When the user moves the caret this results in changes to the position. 
            Modifier keys reflect when the anchor is changed as well (expanding selection).
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedSections">
            <summary>
            Gets the selected sections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedBlocks">
            <summary>
            Gets the selected blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedParagraphs">
            <summary>
            Gets the currently selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedInlines(System.Boolean)">
            <summary>
            Gets the currently selected inline elements 
            </summary>
            <param name="extendSelectedRange">whether to extend the selected range to include a paragraph end mark</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedTableRows">
            <summary>
            Gets the currently selected table rows iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedTableColumns">
            <summary>
            Gets the currently selected table columns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedTableCells">
            <summary>
            Gets the selected table cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedTables">
            <summary>
            Gets the selected tables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedGroupBlocks">
            <summary>
            Gets the selected group blocks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetDecreaseIndentTargetBlocks">
            <summary>
            Gets the blocks currently target for a decrease indent operation
            </summary>
            <returns></returns>
        </member>
        <member name="E:Nevron.Nov.Text.NSelection.Selected">
            <summary>	
            Event, which occurs when an item has been selected
            </summary>
        </member>
        <member name="E:Nevron.Nov.Text.NSelection.Deselected">
            <summary>
            Event, which occurs when an item has been deselected
            </summary>
        </member>
        <member name="E:Nevron.Nov.Text.NSelection.SelectionChanged">
            <summary>
            Occurs when the selection has changed
            </summary>
        </member>
        <member name="E:Nevron.Nov.Text.NSelection.UpdateStarted">
            <summary>
            Event, which occurs when the selection is to updated
            </summary>
        </member>
        <member name="E:Nevron.Nov.Text.NSelection.UpdateEnded">
            <summary>
            Event, which occurs when the selection has been updated
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.Mode">
            <summary>
            Gets or sets the selection mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.Position">
            <summary>
            Gets or sets the selection position.
            Valid only in Range or Caret mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.Anchor">
            <summary>
            Gets or sets the selection anchor.
            Valid only in Range mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.SelectedRanges">
            <summary>
            Gets the currently selected range.
            Valid only in Range mode.
            </summary>
            <remarks>
            The range contains the indices of the currently selected text atoms.
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.SelectedRange">
            <summary>
            Gets the last selected range
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.SelectedElementsRange">
            <summary>
            Gets the first selected element, when the selection is in Elements mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.SelectedItemsCount">
            <summary>
            Gets the count of selected items.
            Valid only in Items selection mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.SelectedItems">
            <summary>
            Gets a list that contains the selected items.
            Valid only in Items selection mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.EnableTextIntegrityValidation">
            <summary>
            Gets or sets whether text integrity validation is enabled
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CaretInline">
            <summary>
            Gets the inline that currently contains the the caret
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.ClipboardTextFormats">
            <summary>
            Gets or sets the clipboard text formats to use when copying/pasting from the clipboard
            </summary>
            <remarks>
            When set to null the selection will use the default set of clipboard text formats
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CommonFontName">
            <summary>
            Gets the common font name
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CommonFontSize">
            <summary>
            Gets the common font size
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CommonFontStyleBold">
            <summary>
            Gets the common font style bold
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CommonFontStyleItalic">
            <summary>
            Gets the common font style bold
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CommonFontStyleUnderline">
            <summary>
            Gets the common font style bold
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CommonFontStyleeStrikeThrough">
            <summary>
            Gets the common font style strike trough
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetSelectedText">
            <summary>
            Accumulates and returns the selected text of this rich text view replacing breaks and tabs
            with a single space character.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.PasteOptions">
            <summary>
            Gets or sets the paste options applied when a paste operation is performed
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSelection.CopyOptions">
            <summary>
            Gets or sets the copy options applied when a copy operation is performed
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanCopy">
            <summary>
            Returns true if the current selection can be copied to the clipboard
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.Copy(Nevron.Nov.Text.NClipboardTextFormat[])">
            <summary>
            Copies the selected text into the clipboard with the specified text formats
            </summary>
            <param name="cliboardTextFormats"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.Copy">
            <summary>
            Copies the selected text into the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanPaste">
            <summary>
            Returns true if the clipboard contains text in one of the supported clipboard formats
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.Paste">
            <summary>
            Pastes the text from the clipboard
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanPasteFromFormat(System.String)">
            <summary>
            Returns true if the clipboard contains text in the specified format
            </summary>
            <param name="mime"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.PasteFromFormat(System.String)">
            <summary>
            Pastes the content of the clipboard in the specified format
            </summary>
            <param name="mime"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SingleSelect(Nevron.Nov.Text.NTextElement)">
            <summary>
            Makes the specified item the one and only selected item
            </summary>
            <param name="item">item to single select</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SingleSelect(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NTextElement})">
            <summary>
            Makes the specified items the only selected items.
            </summary>
            <param name="items">item to select</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.MultiSelect(Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the specified item to the selection list, without removing the currently selected items.
            </summary>
            <param name="item">item to select</param>
            <returns>true if the item was successfully selected, otherwise false</returns> 
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.MultiSelect(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NTextElement})">
            <summary>
            Appends the specified items to the selection list, without removing the currently selected items.
            </summary>
            <param name="items">item to select</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ToggleSelect(Nevron.Nov.Text.NTextElement)">
            <summary>
            Toggles the item selection state
            </summary>
            <param name="item">item to toggle</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ToggleSelect(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NTextElement})">
            <summary>
            Toggles the items selection state
            </summary>
            <param name="items">items to toggle</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.Deselect(Nevron.Nov.Text.NTextElement)">
            <summary>
            Deselects the specified item if it selected
            </summary>
            <param name="item">item to deselect</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.Deselect(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NTextElement})">
            <summary>
            Deselects the specified item
            </summary>
            <param name="items">item to deselect</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.IsSelected(Nevron.Nov.Text.NTextElement)">
            <summary>
            Determines whether the specified item is selected
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SelectAll">
            <summary>
            Selects the whole document
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SelectRange(Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Selects the specified range 
            </summary>
            <param name="range"></param>
            <remarks>
            The range is automatically normalized (begin is smaller than end). The begin value is used as anchor and the end value is used as position.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SelectRange(Nevron.Nov.Graphics.NRangeI,System.Boolean)">
            <summary>
            Selects the specified range 
            </summary>
            <param name="range"></param>
            <param name="addPrevSelectedRangeToSelection"></param>
            <remarks>
            The range is automatically normalized (begin is smaller than end). The begin value is used as anchor and the end value is used as position.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SelectRange(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition)">
            <summary>
            Selects the specified range (anchor and position);
            </summary>
            <param name="anchor"></param>
            <param name="position"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SelectRange(Nevron.Nov.Text.NTextPosition,Nevron.Nov.Text.NTextPosition,System.Boolean)">
            <summary>
            Selects the specified range (anchor and position);
            </summary>
            <param name="anchor"></param>
            <param name="position"></param>
            <param name="addPrevSelectedRangeToSelection"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.MoveCaret(Nevron.Nov.Text.ENCaretMoveDirection,System.Boolean)">
            <summary>
            Moves the caret in the specified direction. 
            </summary>
            <param name="direction"></param>
            <param name="select"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.MoveCaretTo(Nevron.Nov.Text.NTextPosition,System.Boolean)">
            <summary>
            Moves the caret to the specified position.
            </summary>
            <param name="position"></param>
            <param name="select"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeselectAll">
            <summary>
            Deselects all currently selected items
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertText(System.String)">
            <summary>
            Inserts a string at the current text position and advances it to the end of newly inserted text. If there is a selected range of text it is first removed.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertText(System.String,System.Boolean)">
            <summary>
            Inserts a string at the current text position and optionionally selects or advances
            the position to the end of newly inserted text. If there is a selected range of text
            it is first removed.
            </summary>
            <param name="text"></param>
            <param name="selected">whether the newly inserted text is selected</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertText(System.String,System.String,System.Boolean)">
            <summary>
            Inserts a string at the current text position and optionionally selects or advances
            the position to the end of newly inserted text. If there is a selected range of text
            it is first removed.
            </summary>
            <param name="text"></param>
            <param name="fontName"></param>
            <param name="selected">whether the newly inserted text is selected</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertAtom(Nevron.Nov.Text.NTextAtom)">
            <summary>
            Inserts a text atom at the currently selected position
            </summary>
            <param name="atom"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertSectionBreak(Nevron.Nov.Text.ENSectionBreakType)">
            <summary>
            Inserts a section break at the current position
            </summary>
            <param name="breakType"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.Delete">
            <summary>
            Delete the currently selected range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeleteNextGrapheme">
            <summary>
            Delete the next grapheme from the text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeletePrevChar">
            <summary>
            Delete the previous char from the text
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanInsertTable">
            <summary>
            Returns true if a table can be inserted at the current selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertTable(Nevron.Nov.Text.NTable)">
            <summary>
            Inserts the table at the current position.
            </summary>
            <param name="table"></param>
            <remarks>If the selection contains a range this range is removed from the text.</remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertTable">
            <summary>
            Inserts the table at the currently selected range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanInsertTableRow">
            <summary>
            Returns true if insert row above / below can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertTableRow(System.Boolean)">
            <summary>
            Inserts a table row above the current table cell
            </summary>
            <param name="above">whether to inser the new table row above or below the current cell</param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanInsertTableColumn">
            <summary>
            Returns true if a table column can be inserted given the current selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertTableColumn(System.Boolean)">
            <summary>
            Inserts a table column to the left or right of the currently selected table column
            </summary>
            <param name="left"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SelectTableColumn(Nevron.Nov.Text.NTableColumn)">
            <summary>
            Selects the specified table column
            </summary>
            <param name="tableColumn"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanDeleteTable">
            <summary>
            Returns true if the current selection contains a table (or a single table in the case of range selection)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeleteTable">
            <summary>
            Deletes the currently selected table.
            </summary>
            <returns>True if the table was deleted.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanDeleteTableRows">
            <summary>
            Returns true if the current selection contains a single table and hence the delete rows operation is supported
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeleteTableRows">
            <summary>
            Deletes the currently selected table table rows
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanDeleteTableColumns">
            <summary>
            Returns true if the current selection contains a single table column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeleteTableColumns">
            <summary>
            Deletes the currently selected table column
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanMergeCells">
            <summary>
            Returns true if the current selection can perform the merge cells command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.MergeCells">
            <summary>
            Merges the table cells in the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanSplitCellHorizontally">
            <summary>
            Returns true if the current cell can be split horizontally
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SplitCellHorizontally">
            <summary>
            Splits the currently selected cell horizontally
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanSplitCellVertically">
            <summary>
            Returns true if the current cell can be split vertically
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SplitCellVertically">
            <summary>
            Splits the currently selected cell horizontally
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ApplyBulletSettings(Nevron.Nov.Text.NBulletsAndNumberingSettings)">
            <summary>
            Applies the specified settings to the range.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ApplyBulletType(Nevron.Nov.Text.ENBulletListTemplateType)">
            <summary>
            Applies the specified bullet style to the range.
            </summary>
            <param name="bulletType"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DecreaseParagraphsDepth">
            <summary>
            Decreases the depth of all paragraph in the specified range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ClearBullets">
            <summary>
            Clears all bullet lists and bullet list items in the specified range.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertTableOfContents(Nevron.Nov.Text.NTableOfContentsBlock)">
            <summary>
            Inserts the given table of contents block at the current position.
            If the selection contains a range, then this range is removed from the text.
            </summary>
            <param name="tableOfContents"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeleteTableOfContents">
            <summary>
            Deletes the currently selected table of contents.
            </summary>
            <returns>True if the table of contents was deleted.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Inserts the given block at the current position. If the selection contains a range,
            then this range is removed from the text.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DeleteBlock(Nevron.Nov.Text.NBlock)">
            <summary>
            Deletes the given block element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetBlockFloatMode(Nevron.Nov.Text.ENFloatMode)">
            <summary>
            Applies the specified float mode to the range.
            </summary>
            <param name="floatMode"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ApplyParagraphStyleToSelectedParagraphs(Nevron.Nov.Text.NParagraphStyle)">
            <summary>
            Applies the given paragraph style to the currently selected paragraphs.
            </summary>
            <param name="paragraphStyle"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanInsertGroupBlock">
            <summary>
            Retuns true if the selection can currently insert a group block
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.InsertGroupBlock">
            <summary>
            Inserts a group block at the current selection and returns a reference to it
            </summary>
            <returns>reference to the newly created group block</returns>
            <remarks>
            This method differs from IncreatsIndent in that it splits the blocks that lie on the currenlty selected range
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SplitBlocksAtRange(Nevron.Nov.Graphics.NRangeI,Nevron.Nov.Text.NBlock@)">
            <summary>
            Splits the blocks at the specified range
            </summary>
            <param name="range"></param>
            <param name="splitRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetBlocksContainedInRange(Nevron.Nov.Graphics.NRangeI,Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the blocks contained in the specified range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GroupBlocks">
            <summary>
            Increases the indent of the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanUngroupBlocks">
            <summary>
            Gets whether the current selection contains blocks that can decrease their block indent from the root
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.UngroupBlocks">
            <summary>
            Decreases the indent of the blocks contained in the current selection
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.DecreaseIndent">
            <summary>
            Decreases the indentation of the selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.IncreaseIndent">
            <summary>
            Increases the indent of the selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CanDecreaseIndent">
            <summary>
            Returns true if the indent can be decreased on the current selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetBaseLineToSelectedInlines(Nevron.Nov.Graphics.ENBaseline)">
            <summary>
            Sets the specified baseline value to the currently selected inlines
            </summary>
            <param name="baseLine"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetStrokeToSelectedInlines(Nevron.Nov.Graphics.NStroke)">
            <summary>
            Sets the specified stroke to the currently selected inlines
            </summary>
            <param name="stroke"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetShadowToSelectedInlines(Nevron.Nov.Graphics.NShadow)">
            <summary>
            Sets the specified shadow to the currently selected inlines
            </summary>
            <param name="shadow"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetFillToSelectedInlines(Nevron.Nov.Graphics.NFill)">
            <summary>
            Sets the specified fill to the currently selected inlines
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetBackgroundFillToSelectedInlines(Nevron.Nov.Graphics.NFill)">
            <summary>
            Sets the specified background fill to the currently selected inlines.
            </summary>
            <param name="backgroundFill"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetHighlightFillToSelectedInlines(Nevron.Nov.Graphics.NFill)">
            <summary>
            Sets the specified highlight fill to the currently selected inlines.
            </summary>
            <param name="highlightFill"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetFontNameToSelectedInlines(System.String)">
            <summary>
            Sets the specified font name to the currently selected inlines
            </summary>
            <param name="fontName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.SetFontSizeToSelectedInlines(System.Double)">
            <summary>
            Sets the specified font size to the currently selected inlines
            </summary>
            <param name="fontSize"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ChangeFontSizeOfSelectedInlines(System.Boolean)">
            <summary>
            Changes the font size of the currently selected inlines
            </summary>
            <param name="increase"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ChangeWordSpacingOfSelectedInlines(System.Boolean)">
            <summary>
            Changes the font size of the currently selected inlines
            </summary>
            <param name="increase"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ChangeCharacterSpacingOfSelectedInlines(System.Boolean)">
            <summary>
            Changes the font size of the currently selected inlines
            </summary>
            <param name="increase"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ClearPropertyValueInSelectedInlines(Nevron.Nov.Dom.NProperty)">
            <summary>
            Clears the specified property from the currently selected inlines
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.AddFontStyleToSelectedInlines(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Adds the specified font style to the currently selected inlines
            </summary>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ClearFontStyleFromSelectedInlines(Nevron.Nov.Graphics.ENFontStyle)">
            <summary>
            Clears the specified font style from the currently selected inlines
            </summary>
            <param name="fontStyle"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.ApplyInlineStyleToSelectedInlines(Nevron.Nov.Text.NInlineStyle)">
            <summary>
            Applies the given inline style to the currently selected inlines.
            </summary>
            <param name="inlineStyle"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.StartTransaction(System.String)">
            <summary>
            Starts a history transaction
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.StartTransaction(Nevron.Nov.Dom.NTransactionHistoryUnit)">
            <summary>
            Starts a history transaction
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.CommitTransaction(System.Boolean)">
            <summary>
            Commits the last started transaction
            </summary>
            <param name="focus">whether to focus on the view</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.RollbackTransaction">
            <summary>
            Rollbacks the last started transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.OnSelectionChanged">
            <summary>
            Called when the selection has changed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetCaretInline">
            <summary>
            Gets the inline that contains the caret
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.GetCopyDocument">
            <summary>
            Gets the copy document
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.OnContextPopupClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the context popup is closed.
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.OnStartItemsUpdate">
            <summary>
            Called when the selection starts an update of the selected elements. Raises the UpdateStarted event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.OnEndItemsUpdate">
            <summary>
            Called when the selection has ended an updated of the selected elements. Raises the UpdateEnded event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.OnItemSelected(Nevron.Nov.Text.NTextElement)">
            <summary>
            Called when the specified item has been selected. Raises the Selected event
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSelection.OnItemDeselected(Nevron.Nov.Text.NTextElement)">
            <summary>
            Called when the specified item has been deselected
            </summary>
            <param name="item">item which has been deselected</param>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.NSelectionSchema">
            <summary>
            Schema associated with NSelection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.SelectedEvent">
            <summary>
            Item selected event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.DeselectedEvent">
            <summary>
            Item deselected event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.SelectionChangedEvent">
            <summary>
            Reference to the selection changed event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.UpdateStartedEvent">
            <summary>
            Multi selection started event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.UpdateEndedEvent">
            <summary>
            Multi selection ended event
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.PasteOptionsProperty">
            <summary>
            Schema associated with PasteOptions property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.CopyOptionsProperty">
            <summary>
            Schema associated with CopyOptions property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.EnableTextIntegrityValidationProperty">
            <summary>
            Schema associated with EnableTextIntegrityValidation property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.defaultPosition">
            <summary>
            The default Position.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.defaultAnchor">
            <summary>
            The default Anchor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSelection.defaultMode">
            <summary>
            The default selection Mode.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlockSettings">
            <summary>
            Contains a set of properties that are used to modify a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockSettings.#ctor(Nevron.Nov.Text.NBlockSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.PreferredWidth">
            <summary>
            Gets or sets the value of the PreferredWidth property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.MarginLeft">
            <summary>
            Gets or sets the value of the MarginLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.MarginTop">
            <summary>
            Gets or sets the value of the MarginTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.MarginRight">
            <summary>
            Gets or sets the value of the MarginsRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.MarginBottom">
            <summary>
            Gets or sets the value of the MarginsBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.PaddingLeft">
            <summary>
            Gets or sets the value of the PaddingLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.PaddingTop">
            <summary>
            Gets or sets the value of the MarginsTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.PaddingRight">
            <summary>
            Gets or sets the value of the MarginsRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBlockSettings.PaddingBottom">
            <summary>
            Gets or sets the value of the MarginsBottom property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockSettings.InitFrom(Nevron.Nov.Text.NBlock)">
            <summary>
            Initializes the settings from the given table.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockSettings.ApplyTo(Nevron.Nov.Text.NBlock)">
            <summary>
            Populates the settings to the given table.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockSettings.ToLength(System.Double)">
            <summary>
            Converts the given value from DIPs to an NLength of centimeters.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.NBlockSettingsSchema">
            <summary>
            Schema associated with NBlockSettingsSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.PreferredWidthProperty">
            <summary>
            Reference to the PreferredWidth property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.MarginLeftProperty">
            <summary>
            Reference to the MarginsLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.MarginTopProperty">
            <summary>
            Reference to the MarginsTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.MarginRightProperty">
            <summary>
            Reference to the MarginsRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.MarginBottomProperty">
            <summary>
            Reference to the MarginsBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.PaddingLeftProperty">
            <summary>
            Reference to the MarginsLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.PaddingTopProperty">
            <summary>
            Reference to the MarginsTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.PaddingRightProperty">
            <summary>
            Reference to the MarginsRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockSettings.PaddingBottomProperty">
            <summary>
            Reference to the MarginsBottom property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlockSettings.NBlockSettingsDesigner">
            <summary>
            Designer for NBlockSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockSettings.NBlockSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableSettings">
            <summary>
            Contains a set of properties that are used to modify a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSettings.#ctor(Nevron.Nov.Text.NTableSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.AllowSpacingBetweenCells">
            <summary>
            Gets/set the table border mode property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.CellMarginsLeft">
            <summary>
            Gets or sets the value of the CellMarginsLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.CellMarginsTop">
            <summary>
            Gets or sets the value of the CellMarginsTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.CellMarginsRight">
            <summary>
            Gets or sets the value of the CellMarginsRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.CellMarginsBottom">
            <summary>
            Gets or sets the value of the CellMarginsBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.HorizontalCellSpacing">
            <summary>
            Gets or sets the value of the CellSpacing property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableSettings.VerticalCellSpacing">
            <summary>
            Gets or sets the value of the VerticalCellSpacing property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSettings.InitFrom(Nevron.Nov.Text.NBlock)">
            <summary>
            Initializes the settings from the given table.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSettings.ApplyTo(Nevron.Nov.Text.NBlock)">
            <summary>
            Populates the settings to the given table.
            </summary>
            <param name="block"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.NTableSettingsSchema">
            <summary>
            Schema associated with NModifyTableSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.AllowSpacingBetweenCellsProperty">
            <summary>
            Reference to the TableBorderMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.CellMarginsLeftProperty">
            <summary>
            Reference to the CellMarginsLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.CellMarginsTopProperty">
            <summary>
            Reference to the CellMarginsTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.CellMarginsRightProperty">
            <summary>
            Reference to the CellMarginsRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.CellMarginsBottomProperty">
            <summary>
            Reference to the CellMarginsBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.HorizontalCellSpacingProperty">
            <summary>
            Reference to the HorizontalCellSpacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSettings.VerticalCellSpacingProperty">
            <summary>
            Reference to the VerticalCellSpacing property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableSettings.NTableSettingsDesigner">
            <summary>
            Designer for table settings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSettings.NTableSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertDateSettings">
            <summary>
            Represents settings for the insert date command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertDateSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertDateSettings.#ctor(Nevron.Nov.Text.NInsertDateSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertDateSettings.UpdateAutomatically">
            <summary>
            Determines whether the field value should be updated automatically.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertDateSettings.Format">
            <summary>
            Gets/Sets the format of the date field.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertDateSettings.NInsertDateSettingsSchema">
            <summary>
            Schema associated with NInsertDateSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertDateSettings.UpdateAutomaticallyProperty">
            <summary>
            Reference to update automatically property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertDateSettings.FormatProperty">
            <summary>
            Reference to format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertDateSettings.NInsertDateSettingsDesigner">
            <summary>
            Designer for NInsertDateSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertDateSettings.NInsertDateSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertDateSettings.NInsertDateSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTimeSettings">
            <summary>
            Represents settings for the insert date command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTimeSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTimeSettings.#ctor(Nevron.Nov.Text.NInsertTimeSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTimeSettings.UpdateAutomatically">
            <summary>
            Gets or sets whether the field is updated automatically
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTimeSettings.Format">
            <summary>
            Gets or sets the field format
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTimeSettings.NInsertTimeSettingsSchema">
            <summary>
            Schema associated with NInsertTimeSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTimeSettings.UpdateAutomaticallyProperty">
            <summary>
            Reference to update automatically property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTimeSettings.FormatProperty">
            <summary>
            Reference to format property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTimeSettings.NInsertTimeSettingsDesigner">
            <summary>
            Designer for NInsertTimeSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTimeSettings.NInsertTimeSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTimeSettings.NInsertTimeSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which should edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkGotoPart">
            <summary>
            Represents a book mark goto part
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkGotoPart.GetBookmarkNames">
            <summary>
            Gets the name of the bookmarks registered in the rich text view this GoTo part
            resides in.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NBookmarkGotoPart.Name">
            <summary>
            Gets / sets the bookmark name
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkGotoPart.OnAncestorsChanged(Nevron.Nov.Dom.NNode)">
            <summary>
            Called when the node ancestors chain has changed. 
            </summary>
            <param name="reparentedNode"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkGotoPart.NBookmarkGotoPartSchema">
            <summary>
            Schema associated with NBookmarkGotoPart.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkGotoPart.NameProperty">
            <summary>
            Reference to the Name property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkGotoPart.BookmarkNamesChangedEvent">
            <summary>
            Reference to the BookmarkNamesChanged event
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkGotoPart.NBookmarkGotoPartDesigner">
            <summary>
            Designer for NBookmarkGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkGotoPart.NBookmarkGotoPartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGotoPart">
            <summary>
            Base for all goto parts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGotoPart.NGotoPartSchema">
            <summary>
            Schema associated with NGotoPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGotoPart.NGotoPartDesigner">
            <summary>
            Designer for NGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoPart.NGotoPartDesigner.#ctor">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoPart.NGotoPartDesigner.#ctor(System.String)">
            <summary>
            Initializer constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoPart.NGotoPartDesigner.GetCompatibleTypes">
            <summary>
            Returns the types this designer is compatible with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoPart.NGotoPartDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NGotoSettings">
            <summary>
            A class that contains the settings necessary for a go to line operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGotoSettings.Part">
            <summary>
            Gets or sets the value of the PartType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGotoSettings.NGotoSettingsSchema">
            <summary>
            Schema associated with NGotoSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGotoSettings.PartProperty">
            <summary>
            Reference to the PartType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGotoSettings.NGotoSettingsDesigner">
            <summary>
            Designer for NGotoSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoSettings.NGotoSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoSettings.NGotoSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NGotoSettings.NGotoSettingsDesigner.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the state editor, which must edit the state of the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NLineGotoPart">
            <summary>
            Represents a go to line part.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NLineGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NLineGotoPart.NLineGotoPartSchema">
            <summary>
            Schema associated with NLineGotoPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NLineGotoPart.NLineGotoPartDesigner">
            <summary>
            Designer for NLineGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NLineGotoPart.NLineGotoPartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NNumericGotoPart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NNumericGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NNumericGotoPart.Number">
            <summary>
            Gets / sets the part number to go to
            </summary>
            <remarks>
            This is a string property to retain ability to check if the number should be treated as relative (e.g. goto paragraph +4 - means go to the the paragarph after three paragraphs from the current one)
            </remarks>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericGotoPart.NNumericGotoPartSchema">
            <summary>
            Schema associated with NNumericGotoPart.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NNumericGotoPart.NumberProperty">
            <summary>
            Reference to the Number property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NPageGotoPart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPageGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NPageGotoPart.NPageGotoPartSchema">
            <summary>
            Schema associated with NPageGotoPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NPageGotoPart.NPageGotoPartDesigner">
            <summary>
            Designer for NPageGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NPageGotoPart.NPageGotoPartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphGotoPart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphGotoPart.NParagraphGotoPartSchema">
            <summary>
            Schema associated with NParagraphGotoPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphGotoPart.NParagraphGotoPartDesigner">
            <summary>
            Designer for NParagraphGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphGotoPart.NParagraphGotoPartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSectionGotoPart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSectionGotoPart.NSectionGotoPartSchema">
            <summary>
            Schema associated with NSectionGotoPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSectionGotoPart.NSectionGotoPartDesigner">
            <summary>
            Designer for NSectionGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSectionGotoPart.NSectionGotoPartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableGotoPart">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableGotoPart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableGotoPart.NTableGotoPartSchema">
            <summary>
            Schema associated with NTableGotoPart.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableGotoPart.NTableGotoPartDesigner">
            <summary>
            Designer for NTableGotoPart.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableGotoPart.NTableGotoPartDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletsAndNumberingSettings">
            <summary>
            FIX: Extend the bullet settings
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingSettings.#ctor(Nevron.Nov.Text.NBulletsAndNumberingSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletsAndNumberingSettings.BulletType">
            <summary>
            Gets or sets the bullet type
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletsAndNumberingSettings.FollowChar">
            <summary>
            Gets or sets the character that follows the bullet
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletsAndNumberingSettings.Text">
            <summary>
            Gets or sets the text of the bullet
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBulletsAndNumberingSettings.Alignment">
            <summary>
            Gets or sets the bullet alignment
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingSettings.CreateBulletList">
            <summary>
            Creates a new bullet list based on this settings object
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletsAndNumberingSettings.NBulletsAndNumberingSettingsSchema">
            <summary>
            Schema associated with NBulletsAndNumberingSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletsAndNumberingSettings.BulletTypeProperty">
            <summary>
            Reference to the BulletType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletsAndNumberingSettings.BulletFollowCharProperty">
            <summary>
            Reference to the BulletType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletsAndNumberingSettings.TextProperty">
            <summary>
            Reference to the Text property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBulletsAndNumberingSettings.AlignmentProperty">
            <summary>
            Reference to the Alignment property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBulletsAndNumberingSettings.NBulletsAndNumberingSettingsDesigner">
            <summary>
            Designer for NBulletsAndNumberingSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingSettings.NBulletsAndNumberingSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingSettings.NBulletsAndNumberingSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node">The node to edit, cannot be null.</param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBulletsAndNumberingSettings.NBulletsAndNumberingSettingsDesigner.CreatePreviewFactory">
            <summary>
            Creates a preview factory for the instances of this designer.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NEditSettings">
            <summary>
            Controls various editing options of the text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NEditSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEditSettings.UseInsertToToggleOvertypeMode">
            <summary>
            Whether to use the Insert key to toggle between overwrite and insert modes
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NEditSettings.EnableOvertypeMode">
            <summary>
            Gets / sets whether overtype is enabled
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NEditSettings.NEditSettingsSchema">
            <summary>
            Schema associated with NEditSettings
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NEditSettings.UseInsertToToggleOvertypeModeProperty">
            <summary>
            Reference to UseInsertToToggleOvertypeMode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NEditSettings.EnableOvertypeModeProperty">
            <summary>
            Reference to EnableOvertypeMode property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFindSettings">
            <summary>
            Contains settings for text find operations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFindSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFindSettings.#ctor(Nevron.Nov.Text.NFindSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NFindSettings.FindWhat">
            <Summary>
            Gets or sets the text to search for
            </Summary>
        </member>
        <member name="P:Nevron.Nov.Text.NFindSettings.SearchDirection">
            <Summary>
            Gets or sets the search direction
            </Summary>
        </member>
        <member name="P:Nevron.Nov.Text.NFindSettings.Normalization">
            <summary>
            Gets or sets the type of normalization to apply to text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NFindSettings.MatchCase">
            <Summary>
            Gets or sets whether search is case sensitive
            </Summary>
        </member>
        <member name="P:Nevron.Nov.Text.NFindSettings.WholeWordsOnly">
            <Summary>
            Gets or sets whether whole words only will be matched
            </Summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFindSettings.NFindSettingsSchema">
            <summary>
            Schema associated with NFindSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFindSettings.FindWhatProperty">
            <summary>
            Reference to the FindWhat property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFindSettings.SearchDirectionProperty">
            <summary>
            Reference to the SearchDirection property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFindSettings.NormalizationProperty">
            <summary>
            Reference to the Normalization property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFindSettings.MatchCaseProperty">
            <summary>
            Reference to the MatchCase property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFindSettings.WholeWordsOnlyProperty">
            <summary>
            Reference to the WholeWordsOnly property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFindSettings.NFindSettingsDesigner">
            <summary>
            Designer for NFindSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFindSettings.NFindSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFindSettings.NFindSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertBreakSettings">
            <summary>
            Insert break settings object for the insert break command action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertBreakSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertBreakSettings.#ctor(Nevron.Nov.Text.NInsertBreakSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertBreakSettings.BreakType">
            <summary>
            Gets or sets the value of the BreakType property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertBreakSettings.NInsertBreakSettingsSchema">
            <summary>
            Schema associated with NInsertBreakSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertBreakSettings.BreakTypeProperty">
            <summary>
            Reference to the BreakType property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertBreakSettings.NInsertBreakSettingsDesigner">
            <summary>
            Designer for NInsertBreakSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertBreakSettings.NInsertBreakSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertBreakSettings.NInsertBreakSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates an editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NReplaceSettings">
            <summary>
            Contains settings for text replace operations.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NReplaceSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NReplaceSettings.#ctor(Nevron.Nov.Text.NReplaceSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NReplaceSettings.ReplaceWith">
            <summary>
            Gets or sets the value of the ReplaceWith property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NReplaceSettings.NReplaceSettingsSchema">
            <summary>
            Schema associated with NReplaceSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NReplaceSettings.ReplaceWithProperty">
            <summary>
            Reference to the ReplaceWith property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NReplaceSettings.NReplaceSettingsDesigner">
            <summary>
            Designer for NReplaceSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NReplaceSettings.NReplaceSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NReplaceSettings.NReplaceSettingsDesigner.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates an editor, which must edit the specified node.
            </summary>
            <param name="node"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NViewSettings">
            <summary>
            Controls various visibility options of the text.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NViewSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.PageSpacing">
            <summary>
            Spacing between two pages in dips
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.SelectionRenderMode">
            <summary>
            Gets / sets the selection render mode of the control
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.SelectionFill">
            <summary>
            Gets / sets the selection fill style
            </summary>
            <remarks>
            This property has effect when selection render mode is set to Fill
            </remarks>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ShowSectionBreak">
            <summary>
            Whether the control will show section breaks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ShowParagraphEnd">
            <summary>
            Whether the control will show paragraph end marks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ShowLineBreak">
            <summary>
             Whether the control will show line break marks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ShowSpace">
            <summary>
            Whether the control will show spaces
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ShowTab">
            <summary>
            Whether the control will show spaces
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ShowPageBreak">
            <summary>
            Whether the control will show page breaks when text layout is set to Normal
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.InactiveContentDisplayMode">
            <summary>
            Gets or sets the inactive content display mode
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ToggleMarkVisibility">
            <summary>
            Gets or sets the toggle mark visiblity settings (used from the ToggleMarksVisibility command)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.SpellCheckFill">
            <summary>
            Gets or sets the fill used to highligth mispelled words
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.RubberBandStroke">
            <summary>
            Gets or sets the stroke style of the rubber band displayed by bounds trackers
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.DisabledHandleColor">
            <summary>
            Gets or sets the color of the disabled handles
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.BoxHandleStyle">
            <summary>
            Get or sets the box handle style
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.MarksVisiblity">
            <summary>
            Gets / sets the marks visilbity
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NViewSettings.ExtendLineBreakWithSpaces">
            <summary>
            Whether to extend line breaks with spaces following the break or not. 
            </summary>
            <remarks>
            When set to true the editor behaves like Word/Wordpad whereas when set to false line breaks behave like in Notepad / Textbox
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NViewSettings.GetHandleStyle(Nevron.Nov.Text.ENHandleType)">
            <summary>
            Gets the handle style for the specified handle type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NViewSettings.OnPropertyValueChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.NViewSettingsSchema">
            <summary>
            Schema associated with NViewSettings
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.PageSpacingProperty">
            <summary>
            Reference to the page spacing property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.SelectionRenderModeProperty">
            <summary>
            Reference to selection render mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.SelectionFillProperty">
            <summary>
            Reference to selection render mode property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ShowParagraphEndProperty">
            <summary>
            Reference to display paragraph marks property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ShowLineBreakProperty">
            <summary>
            Reference to display line break marks property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ShowSpaceProperty">
            <summary>
            Reference to display line break marks property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ShowTabProperty">
            <summary>
            Reference to display tabs property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ShowPageBreakProperty">
            <summary>
            Reference to Show page breaks property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ShowSectionBreakProperty">
            <summary>
            Reference to Show page section breaks property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ExtendLineBreakWithSpacesProperty">
            <summary>
            Reference to the ExtendLineBreakWithSpaces property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.InactiveContentDisplayModeProperty">
            <summary>
            Reference to header / footer editing mode
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.ToggleMarkVisibilityProperty">
            <summary>
            Reference to the toggle marks visiblity property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.SpellCheckFillProperty">
            <summary>
            Reference to the spell check fill property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.RubberBandStrokeProperty">
            <summary>
            Reference to the RubberBandStroke property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.DisabledHandleColorProperty">
            <summary>
            Reference to the DisabledHandleColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NViewSettings.BoxHandleStyleProperty">
            <summary>
            Reference to the BoxHandleStyle property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableSettings">
            <summary>
            Contains a set of properties that are used to create a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableSettings.#ctor(Nevron.Nov.Graphics.NSizeI)">
            <summary>
            Initializer constructor
            </summary>
            <param name="tableSize"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTableSettings.ColumnCount">
            <summary>
            Gets or sets the value of the ColumnCount property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTableSettings.RowCount">
            <summary>
            Gets or sets the value of the RowCount property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTableSettings.ColumnWidthMode">
            <summary>
            Gets or sets the value of the ColumnWidthMode property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTableSettings.AutoSize">
            <summary>
            Gets or sets the value of the AutoSize property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTableSettings.FixedColumnWidth">
            <summary>
            Gets or sets the fixed column width (used in fixed column width mode)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInsertTableSettings.PercentColumnWidth">
            <summary>
            Gets or sets the percentage column width (used in percent column width mode)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.NInsertTableSettingsSchema">
            <summary>
            Schema associated with NInsertTableSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.ColumnCountProperty">
            <summary>
            Reference to the ColumnCount property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.RowCountProperty">
            <summary>
            Reference to the RowCount property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.ColumnWidthModeProperty">
            <summary>
            Reference to the ColumnWidthMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.AutoSizeProperty">
            <summary>
            Reference to the AutoSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.FixedColumnWidthProperty">
            <summary>
            Reference to the FixedColumnWidthProperty property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettings.PercentColumnWidthProperty">
            <summary>
            Reference to the PercentColumnWidthProperty property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableSettings.NInsertTableSettingsDesigner">
            <summary>
            Designer for NInsertTableSettings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableSettings.NInsertTableSettingsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInsertTableSettingsSizeCategoryEditor">
            <summary>
            Contains a set of properties that are used to create a table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableSettingsSizeCategoryEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInsertTableSettingsSizeCategoryEditor.CreateControl">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NInsertTableSettingsSizeCategoryEditor.NInsertTableSettingsSizeCategoryEditorSchema">
            <summary>
            Schema associated with NInsertTableSettings.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInlineRule">
            <summary>
            Represents a rich text inline rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineRule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineRule.#ctor(Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="fillColor"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontName">
            <summary>
            Gets/Sets the value of the FontName property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontSize">
            <summary>
            Gets/Sets the value of the FontSize property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontStyleBold">
            <summary>
            Gets or sets whether the font style is bold
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontStyleItalic">
            <summary>
            Gets or sets whether the font style is italic
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontStyleUnderline">
            <summary>
            Gets or sets whether the font style underline
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontStyleStrikethrough">
            <summary>
            Gets or sets whether the font style is striketrough
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.FontStyle">
            <summary>
            The style of the used font
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.Baseline">
            <summary>
            Gets or sets the base line of the text
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.Fill">
            <summary>
            Gets/Sets the text color of this inline style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.BackgroundFill">
            <summary>
            Gets/Sets the value of the BackgroundFill property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineRule.HighlightFill">
            <summary>
            Gets/Sets the value of the HighlightFill property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineRule.AddToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Adds the styling information of this inline rule to the given style rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.NInlineRuleSchema">
            <summary>
            Schema associated with NInlineRule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FontNameProperty">
            <summary>
            Reference to the FontName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FontSizeProperty">
            <summary>
            Reference to the FontSize property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FontStyleBoldProperty">
            <summary>
            Reference ot the FontStyleBold property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FontStyleItalicProperty">
            <summary>
            Reference ot the FontStyleItalic property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FontStyleUnderlineProperty">
            <summary>
            Reference ot the FontStyleUnderline property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FontStyleStrikethroughProperty">
            <summary>
            Reference ot the FontStyleStrikethrough property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.BaselineProperty">
            <summary>
            Reference to the BaseLine property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.FillProperty">
            <summary>
            Reference to the Fill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineRule.HighlightFillProperty">
            <summary>
            Reference to the HighlightFill property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInlineStyle">
            <summary>
            Represents a rich text inline style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.#ctor(Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates an inline style with the given scope.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.#ctor(System.String)">
            <summary>
            Creates an inline style with the given style id.
            </summary>
            <param name="styleId"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.#ctor(System.String,System.String)">
            <summary>
            Creates an inline style with the given style id and name.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.#ctor(System.String,System.String,Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates an inline style with the given styleId, styleName and scope.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
            <param name="scope"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineStyle.Type">
            <summary>
            Gets the type of this rich text style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NInlineStyle.Rule">
            <summary>
            Gets/Sets the rule of this inline style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.AddToStyleSheet(Nevron.Nov.Dom.NStyleSheet)">
            <summary>
            Adds the rules of this inline style to the given style sheet.
            </summary>
            <param name="styleSheet"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.CanApply(Nevron.Nov.Text.NTextElement)">
            <summary>
            Checks whether this rich text style can be applied on the given text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.ClearLocalStyle(Nevron.Nov.Text.NTextElement)">
            <summary>
            Clears the local style (i.e. the local values of properties subject to styling)
            of the given text element.
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineStyle.NInlineStyleSchema">
            <summary>
            Schema associated with NInlineStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NInlineStyle.RuleProperty">
            <summary>
            Reference to the Rule property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NInlineStyle.NInlineStyleDesigner">
            <summary>
            Designer for inline styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NInlineStyle.NInlineStyleDesigner.#ctor">
            <summary>
            Default constructors.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextRule">
            <summary>
            Base class for all rich text style rules. A rich text rule is a set of properties
            that can be added to a style rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextRule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextRule.AddToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Adds the styling information of this rich text rule to the given style rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextRule.AddFillDeclaration(Nevron.Nov.Dom.NRule,Nevron.Nov.Dom.NProperty)">
            <summary>
            Adds a fill declaration to the given rule.
            </summary>
            <param name="rule"></param>
            <param name="fillProperty"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextRule.NRichTextRuleSchema">
            <summary>
            Schema associated with NRichTextRule.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStyle">
            <summary>
            Base class for all rich text styles. A rich text style contains property values and rules
            that can be added to a style sheet and usually result in multiple style rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.#ctor">
            <summary>
            Creates a new rich text style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.#ctor(Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates a new rich text style with the given scope.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.#ctor(System.String)">
            <summary>
            Creates a new rich text style with the given styleId.
            </summary>
            <param name="styleId"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.#ctor(System.String,System.String)">
            <summary>
            Creates a new rich text style with the given styleId and styleName.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.#ctor(System.String,System.String,Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates a new rich text style with the given styleId, styleName and scope.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
            <param name="scope"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.Type">
            <summary>
            Gets the type of this rich text style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.Scope">
            <summary>
            Gets the scope of this rich text style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.StyleId">
            <summary>
            Gets the style ID of this rich text style. This is also the class name that is set to
            the UserClass property of text elements this style is applied to.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.StyleName">
            <summary>
            Gets/Sets the name of this rich text style. The style name is used in the UI.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.Inverted">
            <summary>
            If set to false (the default value) the style will be applied to all elements
            whose UserClass is equal to this style's name. If set to true, the style will
            be applied to all elements whose UserClass is different than this style's name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.IsUsed">
            <summary>
            Gets/Sets whether this rich text style is actually used in the document and its rules
            should be applied to the rich text document's style sheet. Used styles are always
            serialized when saving documents.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.IsModified">
            <summary>
            Gets/Sets whether this rich text style has been modified or not. Modified styles are always
            serialized when saving documents.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.ShowInGallery">
            <summary>
            Determines whether to show the style in a styles gallery.
            By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyle.IsEmpty">
            <summary>
            Checks whether the rich text style is empty, i.e. it does not contain any information
            that can be added to a style sheet.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.AddToStyleSheet(Nevron.Nov.Dom.NStyleSheet)">
            <summary>
            Adds the styling information of this rich text style to the given style sheet.
            </summary>
            <param name="styleSheet"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.CanApply(Nevron.Nov.Text.NTextElement)">
            <summary>
            Checks whether this rich text style can be applied on the given text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.Apply(Nevron.Nov.Text.NTextElement)">
            <summary>
            Applies this rich text style to the given text element and adds the style
            to the rich text document the given text element resides in.
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.ClearLocalStyle(Nevron.Nov.Text.NTextElement)">
            <summary>
            Clears the local style (i.e. the local values of properties subject to styling)
            of the given text element.
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.AddUserClassCondition(Nevron.Nov.Dom.NSelectorBuilder)">
            <summary>
            Adds the user class condition of this rich text style to the given selector builder.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.NRichTextStyleSchema">
            <summary>
            Schema associated with NRichTextStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.ScopeProperty">
            <summary>
            Reference to the Scope property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.StyleIdProperty">
            <summary>
            Reference to the StyleId property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.StyleNameProperty">
            <summary>
            Reference to the StyleName property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.IsUsedProperty">
            <summary>
            Reference to the IsUsed property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.IsModifiedProperty">
            <summary>
            Reference to the IsModified property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.InvertedProperty">
            <summary>
            Reference to the Inverted property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyle.ShowInGalleryProperty">
            <summary>
            Reference to the ShowInGallery property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStyle.NRichTextStyleDesigner">
            <summary>
            Designer for rich text styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.NRichTextStyleDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyle.NRichTextStyleDesigner.GetNodeText(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the text for the given node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStyleCollection">
            <summary>
            Represents a collection of rich text styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.FindStyleById(System.String)">
            <summary>
            Returns the rich text style with the given style id or null if a rich text style with
            such style id was not found in the collection.
            </summary>
            <param name="styleId"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.FindStyleByTypeAndId(Nevron.Nov.Text.ENRichTextStyleType,System.String)">
            <summary>
            Returns the rich text style with the given type and style id or null if a rich text style with
            such type and style id was not found in the collection.
            </summary>
            <param name="styleType"></param>
            <param name="styleId"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.FindStyleByTypeAndName(Nevron.Nov.Text.ENRichTextStyleType,System.String)">
            <summary>
            Returns the first rich text style with the given type and name or null if a rich text style with
            such type and name was not found in the collection.
            </summary>
            <param name="styleType"></param>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.FindStyleByTypeAndName(Nevron.Nov.Text.ENRichTextStyleType,System.String,System.Int32)">
            <summary>
            Returns the first rich text style with the given type and name or null if a rich text style with
            such type and name was not found in the collection. The search starts from the given index.
            </summary>
            <param name="styleType"></param>
            <param name="styleName"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.RebuildStyleRules">
            <summary>
            Rebuilds the style rules resulting from this style collection.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.OnRegistered">
            <summary>
            Called when the node is registered in its owner document. Overriden to rebuild
            the style rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.OnChildInserting(Nevron.Nov.Dom.NInsertChildData)">
            <summary>
            Called when a child node is about to be inserted at the specified index.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionSchema">
            <summary>
            Schema associated with NRichTextStyleCollection.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionDesigner">
            <summary>
            Designer for rich text style collections.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionDesigner.#ctor(Nevron.Nov.Text.ENRichTextStyleType)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="styleTypes"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionDesigner.GetCollectionChildrenTypes(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets a list of the children types for this designer schema 
            (e.g. the types of the nodes which can be children of the node associated with this designer schema).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionDesigner.CreateAddChildCommand(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditor)">
            <summary>
            Creates the add child command.
            </summary>
            <param name="node"></param>
            <param name="editor"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.NRichTextStyleCollectionDesigner.CreateDefaultInstanceEditor(Nevron.Nov.Dom.NNode)">
            <summary>
            Creates the default instance editor.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.AhlC.GetDesigner(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the designer of the specified node.
            </summary>
            <param name="bhlC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.AhlC.CreateHierarchyBrowser">
            <summary>
            Creates the hierarchy browser.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.ChlC.ShouldCreateItem(Nevron.Nov.Dom.NNode)">
            <summary>
            Determines whether an item should be created for the specified node.
            </summary>
            <param name="EhlC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleCollection.ChlC.GetInsertionIndex(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Gets the insertion index of the given node.
            </summary>
            <param name="fhlC"></param>
            <param name="GhlC"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStylingElement">
            <summary>
            Base class for all rich text styling element such as rich text styles and
            rich text rules.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylingElement.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStylingElement.NRichTextStylingElementSchema">
            <summary>
            Schema associated with NRichTextStylingElement.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphRule">
            <summary>
            Represents a rich text paragraph rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphRule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.Fill">
            <summary>
            Gets/Sets the text color of this paragraph style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.BackgroundFill">
            <summary>
            Gets/Sets the value of the BackgroundFill property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.HighlightFill">
            <summary>
            Gets/Sets the value of the HighlightFill property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.BorderRule">
            <summary>
            Gets/Sets the border rule of this paragraph style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.MarginLeft">
            <summary>
            Gets/Sets the value of the MarginLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.MarginTop">
            <summary>
            Gets/Sets the value of the MarginTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.MarginRight">
            <summary>
            Gets/Sets the value of the MarginRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.MarginBottom">
            <summary>
            Gets/Sets the value of the MarginBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.PaddingLeft">
            <summary>
            Gets/Sets the value of the PaddingLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.PaddingTop">
            <summary>
            Gets/Sets the value of the PaddingTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.PaddingRight">
            <summary>
            Gets/Sets the value of the PaddingRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.PaddingBottom">
            <summary>
            Gets/Sets the value of the PaddingBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.HangingIndent">
            <summary>
            Gets/Sets the value of the HangingIndent property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.SpaceBeforeAuto">
            <summary>
            Gets/Sets the value of the SpaceBeforeAuto property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.SpaceAfterAuto">
            <summary>
            Gets/Sets the value of the SpaceAfterAuto property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.ContextualSpacing">
            <summary>
            Gets/Sets whether spacing between paragraphs (top and botttom margin) of the same style should
            be ignored or not. By default set to false, which means that the spacing is not ignored.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.LineHeightMode">
            <summary>
            Gets/Sets the value of the LineHeightMode property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.LineHeight">
            <summary>
            Gets/Sets the value of the LineHeight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.LineHeightFactor">
            <summary>
            Gets/Sets the value of the LineHeightFactor property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.HorizontalAlignment">
            <summary>
            Gets/Sets the value of the HorizontalAlignment property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.PageBreakBefore">
            <summary>
            Gets/Sets the value of the PageBreakBefore property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.PageBreakAfter">
            <summary>
            Gets/Sets the value of the PageBreakAfter property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.AvoidPageBreaksInside">
            <summary>
            Whether the block will try to avoid page breaks
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.WidowOrphanControl">
            <summary>
            Whether the paragraph allows single begin or end lines to fall on a different page
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.OutlineLevel">
            <summary>
            Gets/Sets the outline level to apply on paragraphs styled by this rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.TabStops">
            <summary>
            Gets/Sets the value of the TabStops property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.Margins">
            <summary>
            Shortcut property for getting/setting the margins of this paragraph rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphRule.Padding">
            <summary>
            Shortcut property for setting the padding of this paragraph rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphRule.AddToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Adds the styling information of this paragraph rule to the given style rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.NParagraphRuleSchema">
            <summary>
            Schema associated with NParagraphRule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.FillProperty">
            <summary>
            Reference to the Fill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.HighlightFillProperty">
            <summary>
            Reference to the HighlightFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.BorderRuleProperty">
            <summary>
            Reference to the Border property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.MarginLeftProperty">
            <summary>
            Reference to the MarginLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.MarginTopProperty">
            <summary>
            Reference to the MarginTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.MarginRightProperty">
            <summary>
            Reference to the MarginRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.MarginBottomProperty">
            <summary>
            Reference to the MarginBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.PaddingLeftProperty">
            <summary>
            Reference to the PaddingLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.PaddingTopProperty">
            <summary>
            Reference to the PaddingTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.PaddingRightProperty">
            <summary>
            Reference to the PaddingRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.PaddingBottomProperty">
            <summary>
            Reference to the PaddingBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.HangingIndentProperty">
            <summary>
            Reference to the HangingIndent property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.SpaceBeforeAutoProperty">
            <summary>
            Reference to the SpaceBeforeAuto property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.SpaceAfterAutoProperty">
            <summary>
            Reference to the SpaceAfterAuto property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.ContextualSpacingProperty">
            <summary>
            Reference to the ContextualSpacing property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.LineHeightModeProperty">
            <summary>
            Reference to the LineHeightMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.LineHeightProperty">
            <summary>
            Reference to the LineHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.LineHeightFactorProperty">
            <summary>
            Reference to the LineHeightFactor property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.HorizontalAlignmentProperty">
            <summary>
            Reference to the HorizontalAlignment property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.PageBreakBeforeProperty">
            <summary>
            Reference to the PageBreakBefore property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.PageBreakAfterProperty">
            <summary>
            Reference to the PageBreakAfter property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.WidowOrphanControlProperty">
            <summary>
            Reference to the Widow - Orphan Control property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.AvoidPageBreaksInsideProperty">
            <summary>
            Reference to the avoid page break inside property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.OutlineLevelProperty">
            <summary>
            Reference to the OutlineLevel property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphRule.TabStopsProperty">
            <summary>
            Reference to the TabStops property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphStyle">
            <summary>
            Represents a rich text style that can be applied on paragraphs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.#ctor(Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates a paragraph style with the given scope.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.#ctor(System.String)">
            <summary>
            Creates a paragraph style with the given style id.
            </summary>
            <param name="styleId"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.#ctor(System.String,System.String)">
            <summary>
            Creates a paragraph style with the given style id and name.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.#ctor(System.String,System.String,Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates an paragraph style with the given styleId, styleName and scope.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
            <param name="scope"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphStyle.Type">
            <summary>
            Gets the type of this rich text style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphStyle.ParagraphRule">
            <summary>
            Gets/Sets the paragraph rule of this paragraph style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NParagraphStyle.InlineRule">
            <summary>
            Gets/Sets the inline rule of this paragraph style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.AddToStyleSheet(Nevron.Nov.Dom.NStyleSheet)">
            <summary>
            Adds the rules of this paragraph style to the given style sheet.
            </summary>
            <param name="styleSheet"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.CanApply(Nevron.Nov.Text.NTextElement)">
            <summary>
            Checks whether this rich text style can be applied on the given text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.ClearLocalStyle(Nevron.Nov.Text.NTextElement)">
            <summary>
            Clears the local style (i.e. the local values of properties subject to styling)
            of the given text element.
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphStyle.NParagraphStyleSchema">
            <summary>
            Schema associated with NParagraphStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphStyle.ParagraphRuleProperty">
            <summary>
            Reference to the ParagraphRule property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NParagraphStyle.InlineRuleProperty">
            <summary>
            Reference to the InlineRule property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NParagraphStyle.NParagraphStyleDesigner">
            <summary>
            Designer for paragraph styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NParagraphStyle.NParagraphStyleDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBorderRule">
            <summary>
            Represents a table border style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderRule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderRule.#ctor(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.LeftSide">
            <summary>
            Gets/Sets left border side rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.TopSide">
            <summary>
            Gets/Sets the top border side rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.RightSide">
            <summary>
            Gets/Sets the right border side rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.BottomSide">
            <summary>
            Gets/Sets the bottom border side rule.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.InsideHSides">
            <summary>
            Gets/Sets the horizontal inside sides rule, i.e. the rule for all horizontal edges
            of a group of cells except the topmost and the bottommost one.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.InsideVSides">
            <summary>
            Gets/Sets the vertical inside sides rule, i.e. the rule for all vertical edges
            of a group of cells except the leftmost and the rightmost one.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderRule.Thickness">
            <summary>
            Gets/Sets the border thickness.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderRule.AddToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Adds the styling information of this table border rule to the given rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderRule.CreateBorder">
            <summary>
            Creates an NBorder instance that corresponds to this table border rule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.NBorderRuleSchema">
            <summary>
            Schema associated with NBorderRule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.LeftSideProperty">
            <summary>
            Reference to the LeftSide property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.TopSideProperty">
            <summary>
            Reference to the TopSide property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.RightSideProperty">
            <summary>
            Reference to the RightSide property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.BottomSideProperty">
            <summary>
            Reference to the BottomSide property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.InsideHSidesProperty">
            <summary>
            Reference to the InsideHSides property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderRule.InsideVSidesProperty">
            <summary>
            Reference to the InsideVSides property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBorderSideRule">
            <summary>
            Represents a table border side rule.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderSideRule.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderSideRule.#ctor(Nevron.Nov.UI.ENPredefinedBorderStyle,Nevron.Nov.Graphics.NColor,System.Double)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
            <param name="thickness"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderSideRule.Style">
            <summary>
            Gets/Sets the border side style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderSideRule.Color">
            <summary>
            Gets/Sets the border side color.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderSideRule.Thickness">
            <summary>
            Gets/Sets the thickness of this border side.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderSideRule.AddToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Not supported for border side rules. Call the AddToRule method of the parent table rule instead.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderSideRule.CreateBorderSide">
            <summary>
            Creates an NBorderSide instance that corresponds to this table border side rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderSideRule.CreateBorder">
            <summary>
            Creates an NBorder instance that corresponds to this table border side rule.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderSideRule.NBorderSideRuleSchema">
            <summary>
            Schema associated with NBorderSideRule.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderSideRule.StyleProperty">
            <summary>
            Reference to the Style property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderSideRule.ColorProperty">
            <summary>
            Reference to the Color property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderSideRule.ThicknessProperty">
            <summary>
            Reference to the Thickness property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTablePartStyle">
            <summary>
            Represents a table part style, i.e. a style for a row, column, cell or a whole table.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.Type">
            <summary>
            Gets the type of this rich text style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.TablePart">
            <summary>
            Gets the table part this table part style is for.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.InlineRule">
            <summary>
            Gets/Sets the value of the InlineRule property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.ParagraphRule">
            <summary>
            Gets/Sets the value of the ParagraphRule property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.BorderRule">
            <summary>
            Gets/Sets the value of the BorderRule property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.BackgroundFill">
            <summary>
            Gets/Sets the the background fill of the table part style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.MarginLeft">
            <summary>
            Gets/Sets the value of the MarginLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.MarginTop">
            <summary>
            Gets/Sets the value of the MarginTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.MarginRight">
            <summary>
            Gets/Sets the value of the MarginRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.MarginBottom">
            <summary>
            Gets/Sets the value of the MarginBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.PaddingLeft">
            <summary>
            Gets/Sets the value of the PaddingLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.PaddingTop">
            <summary>
            Gets/Sets the value of the PaddingTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.PaddingRight">
            <summary>
            Gets/Sets the value of the PaddingRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.PaddingBottom">
            <summary>
            Gets/Sets the value of the PaddingBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellMarginLeft">
            <summary>
            Gets/Sets the value of the CellMarginLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellMarginTop">
            <summary>
            Gets/Sets the value of the CellMarginTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellMarginRight">
            <summary>
            Gets/Sets the value of the CellMarginRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellMarginBottom">
            <summary>
            Gets/Sets the value of the CellMarginBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellMargins">
            <summary>
            Gets/Sets the cell margins.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellPaddingLeft">
            <summary>
            Gets/Sets the value of the CellPaddingLeft property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellPaddingTop">
            <summary>
            Gets/Sets the value of the CellPaddingTop property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellPaddingRight">
            <summary>
            Gets/Sets the value of the CellPaddingRight property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellPaddingBottom">
            <summary>
            Gets/Sets the value of the CellPaddingBottom property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTablePartStyle.CellPadding">
            <summary>
            Gets/Sets the cell padding.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.AddToStyleSheet(Nevron.Nov.Dom.NStyleSheet)">
            <summary>
            Adds the rules of this paragraph style to the given style sheet.
            </summary>
            <param name="styleSheet"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.CanApply(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true. Has no meaning for table part styles.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.ClearLocalStyle(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to do nothing. Has no meaning for table part styles.
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.AddUserClassCondition(Nevron.Nov.Dom.NSelectorBuilder)">
            <summary>
            Adds the user class condition of this rich text style to the given selector builder.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.CreateTablePartSelector(Nevron.Nov.Dom.NSelectorBuilder)">
            <summary>
            Creates the selector for this table part style.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.AddTablePartPropertiesToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Adds the table part properties of this style to the given style rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTablePartStyle.AddTablePartCellPropertiesToRule(Nevron.Nov.Dom.NRule)">
            <summary>
            Adds the table part cell properties of this style to the given style rule.
            </summary>
            <param name="rule"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.NTablePartStyleSchema">
            <summary>
            Schema associated with NTablePartStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.TablePartProperty">
            <summary>
            Reference to the TablePart property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.InlineRuleProperty">
            <summary>
            Reference to the InlineRule property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.ParagraphRuleProperty">
            <summary>
            Reference to the ParagraphRule property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.BorderRuleProperty">
            <summary>
            Reference to the Border property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.BackgroundFillProperty">
            <summary>
            Reference to the BackgroundFill property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.MarginLeftProperty">
            <summary>
            Reference to the MarginLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.MarginTopProperty">
            <summary>
            Reference to the MarginTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.MarginRightProperty">
            <summary>
            Reference to the MarginRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.MarginBottomProperty">
            <summary>
            Reference to the MarginBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.PaddingLeftProperty">
            <summary>
            Reference to the PaddingLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.PaddingTopProperty">
            <summary>
            Reference to the PaddingTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.PaddingRightProperty">
            <summary>
            Reference to the PaddingRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.PaddingBottomProperty">
            <summary>
            Reference to the PaddingBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellMarginLeftProperty">
            <summary>
            Reference to the CellMarginLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellMarginTopProperty">
            <summary>
            Reference to the CellMarginTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellMarginRightProperty">
            <summary>
            Reference to the CellMarginRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellMarginBottomProperty">
            <summary>
            Reference to the CellMarginBottom property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellPaddingLeftProperty">
            <summary>
            Reference to the CellPaddingLeft property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellPaddingTopProperty">
            <summary>
            Reference to the CellPaddingTop property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellPaddingRightProperty">
            <summary>
            Reference to the CellPaddingRight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTablePartStyle.CellPaddingBottomProperty">
            <summary>
            Reference to the CellPaddingBottom property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableStyle">
            <summary>
            Represents a rich text table style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.#ctor(Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates a table style with the given scope.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.#ctor(System.String)">
            <summary>
            Creates a table style with the given style id.
            </summary>
            <param name="styleId"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.#ctor(System.String,System.String)">
            <summary>
            Creates a table style with the given style id and name.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.#ctor(System.String,System.String,Nevron.Nov.Text.ENRichTextStyleScope)">
            <summary>
            Creates a table style with the given styleId, styleName and scope.
            </summary>
            <param name="styleId"></param>
            <param name="styleName"></param>
            <param name="scope"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.Type">
            <summary>
            Gets the type of this rich text style.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.WholeTable">
            <summary>
            Gets/Sets the rule for the whole table.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.FirstRow">
            <summary>
            Gets/Sets the rule for the first row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.EvenRow">
            <summary>
            Gets/Sets the rule for even rows.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.OddRow">
            <summary>
            Gets/Sets the value of the OddRow property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.LastRow">
            <summary>
            Gets/Sets the rule for the last row.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.FirstColumn">
            <summary>
            Gets/Sets the rule for the first column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.EvenColumn">
            <summary>
            Gets/Sets the rule for even columns.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.OddColumn">
            <summary>
            Gets/Sets the value of the OddColumn property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.LastColumn">
            <summary>
            Gets/Sets the rule for the last column.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.TopLeftCell">
            <summary>
            Gets/Sets the rule for the top left cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.TopRightCell">
            <summary>
            Gets/Sets the rule for the top right cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.BottomLeftCell">
            <summary>
            Gets/Sets the rule for the bottom left cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyle.BottomRightCell">
            <summary>
            Gets/Sets the rule for the bottom right cell.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.AddToStyleSheet(Nevron.Nov.Dom.NStyleSheet)">
            <summary>
            Adds the rules of this table style to the given style sheet.
            </summary>
            <param name="styleSheet"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.CanApply(Nevron.Nov.Text.NTextElement)">
            <summary>
            Checks whether this rich text style can be applied on the given text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.ClearLocalStyle(Nevron.Nov.Text.NTextElement)">
            <summary>
            Clears the local style (i.e. the local values of properties subject to styling)
            of the given text element.
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.NTableStyleSchema">
            <summary>
            Schema associated with NTableStyle.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.WholeTableProperty">
            <summary>
            Reference to the WholeTable property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.FirstRowProperty">
            <summary>
            Reference to the FirstRow property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.EvenRowProperty">
            <summary>
            Reference to the EvenRow property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.OddRowProperty">
            <summary>
            Reference to the OddRow property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.LastRowProperty">
            <summary>
            Reference to the LastRow property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.FirstColumnProperty">
            <summary>
            Reference to the FirstColumn property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.EvenColumnProperty">
            <summary>
            Reference to the EvenColumn property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.OddColumnProperty">
            <summary>
            Reference to the OddColumn property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.LastColumnProperty">
            <summary>
            Reference to the LastColumn property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.TopLeftCellProperty">
            <summary>
            Reference to the TopLeftCell property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.TopRightCellProperty">
            <summary>
            Reference to the TopRightCell property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.BottomLeftCellProperty">
            <summary>
            Reference to the BottomLeftCell property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyle.BottomRightCellProperty">
            <summary>
            Reference to the BottomRightCell property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableStyle.NTableStyleDesigner">
            <summary>
            Designer for table styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyle.NTableStyleDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENNormalization">
            <summary>
            Enumerates the normalization used when searching trough text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNormalization.None">
            <summary>
            No normalization is applied
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNormalization.Compatible">
            <summary>
            Use compatible normalization (NFKC)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNormalization.Canonical">
            <summary>
            Use canonical normalization (NFC)
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENLineHeightMode">
            <summary>
            Enumerates the line height modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineHeightMode.AtLeast">
            <summary>
            The line height is the maximum value between the LineHeight property and the max character height
            contained on the line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineHeightMode.Exactly">
            <summary>
            The line height is the value of the LineHeight property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineHeightMode.Multiple">
            <summary>
            The line height is computed as a multiple of the max character height and the LineGapFactor property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENHorizontalAnchor">
            <summary>
            Enumerates the block flow modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.Flow">
            <summary>
            Anchored to column
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.Margin">
            <summary>
            Anchored to page margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.Page">
            <summary>
            Anchored to page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.LeftMargin">
            <summary>
            Specifies that the horizontal positioning shall be relative to the left margin of the page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.RightMargin">
            <summary>
            Specifies that the horizontal positioning shall be relative to the right margin of the page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.InsideMargin">
            <summary>
            Specifies that the horizontal positioning shall be relative to the inside margin of the current
            page (the left margin on odd pages, right on even pages).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.OutsideMargin">
            <summary>
            Specifies that the horizontal positioning shall be relative to the outside margin of the current
            page (the right margin on odd pages, left on even pages).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalAnchor.Ancestor">
            <summary>
            Anchored to ancestor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENVerticalAnchor">
            <summary>
            Enumerates the block flow modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.Flow">
            <summary>
            Anchored to flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.Margin">
            <summary>
            Anchored to page margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.Page">
            <summary>
            Anchored to page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.TopMargin">
            <summary>
            Anchored to top page margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.BottomMargin">
            <summary>
            Anchored to bottom margin
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.InsideMargin">
            <summary>
            Anchored to inside margin (the top margin on odd pages, bottom on even pages)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.OutsideMargin">
            <summary>
            Anchored to outside margin (the bottom margin on odd pages, left on even pages)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalAnchor.Ancestor">
            <summary>
            Anchored to ancestor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTableStyleOptions">
            <summary>
            Enumerates the table style options.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.None">
            <summary>
            None of the table part rules should be applied.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.FirstRow">
            <summary>
            Denotes the first row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.EvenRow">
            <summary>
            Denotes an even row, i.e. the 2-nd row, the 4-th row, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.OddRow">
            <summary>
            Denotes and odd row, i.e. the 1-st row, the 3-rd row, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.LastRow">
            <summary>
            Denotes the last row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.FirstColumn">
            <summary>
            Denotes the first column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.EvenColumn">
            <summary>
            Denotes an even column, i.e. the 2-nd column, the 4-th column, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.OddColumn">
            <summary>
            Denotes an odd row, i.e. the 1-st column, the 3-rd column, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.LastColumn">
            <summary>
            Denotes the last column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableStyleOptions.All">
            <summary>
            Denotes that all style options are turned on.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTablePart">
            <summary>
            Enumerates the table parts used for table styling.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.WholeTable">
            <summary>
            Whole table.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.FirstRow">
            <summary>
            First row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.EvenRow">
            <summary>
            Even row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.OddRow">
            <summary>
            Odd row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.LastRow">
            <summary>
            Last row.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.FirstColumn">
            <summary>
            First column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.EvenColumn">
            <summary>
            Even column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.OddColumn">
            <summary>
            Odd column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.LastColumn">
            <summary>
            Last column.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.TopLeftCell">
            <summary>
            Top left cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.TopRightCell">
            <summary>
            Top right cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.BottomLeftCell">
            <summary>
            Bottom left cell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTablePart.BottomRightCell">
            <summary>
            Bottom right cell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENOutlineLevel">
            <summary>
            Enumerates the paragraph outline levels.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level1">
            <summary>
            Level 1.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level2">
            <summary>
            Level 2.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level3">
            <summary>
            Level 3.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level4">
            <summary>
            Level 4.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level5">
            <summary>
            Level 5.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level6">
            <summary>
            Level 6.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level7">
            <summary>
            Level 7.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level8">
            <summary>
            Level 8.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.Level9">
            <summary>
            Level 9.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENOutlineLevel.BodyText">
            <summary>
            Body text.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENParagraphDirection">
            <summary>
            Enumerates the paragraph directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENParagraphDirection.LeftToRight">
            <summary>
            Specifies left to right direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENParagraphDirection.RightToLeft">
            <summary>
            Specifies right to left direction.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENParagraphDirection.Automatic">
            <summary>
            Automatic direction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENHorizontalBlockAlignment">
            <summary>
            Enumerates the block horizontal alignment modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalBlockAlignment.Left">
            <summary>
            Left aligned.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalBlockAlignment.Center">
            <summary>
            Centered.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHorizontalBlockAlignment.Right">
            <summary>
            Right aligned.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENVerticalBlockAlignment">
            <summary>
            Enumerates the block vertical alignment modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalBlockAlignment.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalBlockAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVerticalBlockAlignment.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENClearMode">
            <summary>
            Enumerates the block clear modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENClearMode.None">
            <summary>
            Allows floating elements on both sides
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENClearMode.Left">
            <summary>
            Will be positioned after all left floating blocks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENClearMode.Right">
            <summary>
            Will be positioned after all right floating blocks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENClearMode.Center">
            <summary>
            Will be positioned after all center floating blocks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENClearMode.All">
            <summary>
            Will be positioned after all floating blocks
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTableBorders">
            <summary>
            Enumerates the table borders configurations used by the table style editor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.AllBorders">
            <summary>
            All borders.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.NoBorder">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.OutsideBorders">
            <summary>
            Outside borders.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.InsideBorders">
            <summary>
            Inside borders.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.TopBorder">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.BottomBorder">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.LeftBorder">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.RightBorder">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.InsideHorizontalBorder">
            <summary>
            Inside horizontal border.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableBorders.InsideVerticalBorder">
            <summary>
            Inside vertical border.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENSearchDirection">
            <summary>
            Enumerates the text search directions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSearchDirection.Forward">
            <summary>
            Search text up.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSearchDirection.Backward">
            <summary>
            Search text down.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENUrlHyperlinkTarget">
            <summary>
            Enumerates the URL hyperlink targets.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENUrlHyperlinkTarget.NewWindow">
            <summary>
            Opens the URL in a new browser window.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENUrlHyperlinkTarget.SameWindowParentFrame">
            <summary>
            Opens the URL in the same browser window, but in the parent frame.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENUrlHyperlinkTarget.SameWindowSameFrame">
            <summary>
            Opens the URL in the same browser window and frame.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENUrlHyperlinkTarget.SameWindowTopFrame">
            <summary>
            Opens the URL in the full body of the window.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTableCellSeparator">
            <summary>
            Enumerates the table cell separators, when converting a table to text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellSeparator.Paragraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellSeparator.Comma">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellSeparator.Tab">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellSeparator.Char">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENLineSpacingMode">
            <summary>
            Enumerates the line spcaing modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineSpacingMode.AscendDescentLineGap">
            <summary>
            The line spacing is computed as the ascend, descent and line gap of the values specified in the hhea table.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineSpacingMode.AscendDescentLineGapTypographic">
            <summary>
            The line spacing is computed as the ascend, descent and line gap of the values specified in the OS2 table.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTableCellTextDirection">
            <summary>
            Enumerates the possible text directions in the table cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellTextDirection.TopToBottom">
            <summary>
            Text flows from the top to bottom of the cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellTextDirection.RightToLeft">
            <summary>
            Text flows from the right to the left of the cell
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableCellTextDirection.LeftToRight">
            <summary>
            Text flows from the left to the right of the cell
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTableElement">
            <summary>
            Enumerates the table elements
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableElement.Cell">
            <summary>
            Cell table element
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableElement.Column">
            <summary>
            Column table element
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTableElement.Row">
            <summary>
            Row table element
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENFieldValueType">
            <summary>
            Enumerates the field types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFieldValueType.Numeric">
            <summary>
            Field value is numeric.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFieldValueType.DateTime">
            <summary>
            Field value is date time.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFieldValueType.String">
            <summary>
            Field value is string.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFieldValueType.MailMerge">
            <summary>
            Field value is used in mail merge.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTextFillType">
            <summary>
            Enumerates the text fill types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextFillType.Foreground">
            <summary>
            Foreground text fill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextFillType.Background">
            <summary>
            Background text fill
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextFillType.Highlight">
            <summary>
            Highlight text fill
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENRichTextStyleType">
            <summary>
            Enumerates the rich text style types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRichTextStyleType.Inline">
            <summary>
            Denotes an inline style.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRichTextStyleType.Paragraph">
            <summary>
            Denotes a paragraph style.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRichTextStyleType.Table">
            <summary>
            Denotes a table style.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENRichTextStyleScope">
            <summary>
            Enumerates the rich text style scopes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRichTextStyleScope.Document">
            <summary>
            Default document style.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRichTextStyleScope.Type">
            <summary>
            Style applied to all elements of a given type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRichTextStyleScope.Instance">
            <summary>
            Style applied to elements with a specific class name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENDataSourceFormatType">
            <summary>
            Enumerates the data source formats
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDataSourceFormatType.Access">
            <summary>
            The data source is stored in an Access file
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDataSourceFormatType.Csv">
            <summary>
            The data source is stored in a CSV file
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDataSourceFormatType.DataTable">
            <summary>
            The data source is stored in xml serielized data table
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDataSourceFormatType.Excel">
            <summary>
            The data source is stored in a CSV file
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENMailMergeDocumentType">
            <summary>
            Enumerates the DOCX mail merge source document types (the ST_MailMergeDocType simple type).
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDocumentType.catalog">
            <summary>
            Specifies that the mail merge source document is of the catalog type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDocumentType.envelopes">
            <summary>
            Specifies that the mail merge source document is of the envelope type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDocumentType.mailingLabels">
            <summary>
            Specifies that the mail merge source document is of the mailing label type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDocumentType.formLetters">
            <summary>
            Specifies that the mail merge source document is of the form letter type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDocumentType.email">
            <summary>
            Specifies that the mail merge source document is of the e-mail message type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDocumentType.fax">
            <summary>
            Specifies that the mail merge source document is of the fax type.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENMailMergeDestination">
            <summary>
            Enumerates the mail merge destinations
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDestination.NewDocument">
            <summary>
            Document
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDestination.Printer">
            <summary>
            Printer
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDestination.Mail">
            <summary>
            Mail
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDestination.Fax">
            <summary>
            Fax
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENSelectionMode">
            <summary>
            Enumerates the selection modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSelectionMode.Caret">
            <summary>
            In this selection mode only the position is regarded
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSelectionMode.Range">
            <summary>
            In this mode the Anchor/Position fields in the selection form a selected range of text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSelectionMode.Items">
            <summary>
            In this mode the selection contains explicitly selected items
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENStringFieldValueFormat">
            <summary>
            Enumerates the value formats
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldValueFormat.None">
            <summary>
            No transformation is applied
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldValueFormat.UpperCase">
            <summary>
            All letters become upper case
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldValueFormat.LowerCase">
            <summary>
            All letters become lower case
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldValueFormat.FirstUpper">
            <summary>
            First letter becomes capital (upper) all other chars become lower case
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldValueFormat.Caps">
            <summary>
            All first word letters become capital, all other letters become lower case
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENGutterPosition">
            <summary>
            Enumerates the gutter positions
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGutterPosition.Left">
            <summary>
            Gutter is positioned on the left
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGutterPosition.Top">
            <summary>
            Gutter is positioned on the top
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENSectionBreakType">
            <summary>
            Enumerates the section break type
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSectionBreakType.Continuous">
            <summary>
            The section is continuous (continues in the page generated by the previous section)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSectionBreakType.ColumnBreak">
            <summary>
            The section breaks the current column break and starts on a new one
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSectionBreakType.NextPage">
            <summary>
            The section always starts on a new page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSectionBreakType.EvenPage">
            <summary>
            The section always starts on an even page
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSectionBreakType.OddPage">
            <summary>
            The section always starts on odd page
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBulletListTemplateType">
            <summary>
            Defines the style of bullets
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.Bullet">
            <summary>
            Circle bullet list template
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.Decimal">
            <summary>
            Arabic numbers - 1, 2, 3, 4, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.LowerRoman">
            <summary>
            Lower case roman numbers - i, ii, iii, iv, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.UpperRoman">
            <summary>
            Upper case roman numbers - I, II, III, IV, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.LowerAlpha">
            <summary>
            Lower case letters - a, b, c, d, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.UpperAlpha">
            <summary>
            Upper case letters - A, B, C, D, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.OrdinalEnglish">
            <summary>
            Ordinal number - 1st, 2nd, 3rd, 4th, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.CardinalTextEnglish">
            <summary>
            Cardinal text number - One, Two Three, Four, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.OrdinalTextEnglish">
            <summary>
            Ordinal text number - First, Second, Third, Fourth, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletListTemplateType.Custom">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBulletType">
            <summary>
            Defines the style of bullets
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.Text">
            <summary>
            Bullet specified from the bullet text property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.Decimal">
            <summary>
            Arabic numbers - 1, 2, 3, 4, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.LowerRoman">
            <summary>
            Lower case roman numbers - i, ii, iii, iv, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.UpperRoman">
            <summary>
            Upper case roman numbers - I, II, III, IV, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.LowerAlpha">
            <summary>
            Lower case letters - a, b, c, d, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.UpperAlpha">
            <summary>
            Upper case letters - A, B, C, D, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.OrdinalEnglish">
            <summary>
            Ordinal number - 1st, 2nd, 3rd, 4th, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.CardinalTextEnglish">
            <summary>
            Cardinal text number - One, Two Three, Four, etc.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletType.OrdinalTextEnglish">
            <summary>
            Ordinal text number - First, Second, Third, Fourth, etc.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBulletFollowChar">
            <summary>
            The type of char following the bullet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletFollowChar.None">
            <summary>
            No char follows the bullet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletFollowChar.Space">
            <summary>
            The bullet is followed by space
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletFollowChar.Tab">
            <summary>
            The bullet is followed by tab
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTabStopLeaderStyle">
            <summary>
            Enumerates the tab stop leader styles
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.None">
            <summary>
            No leader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.Dots">
            <summary>
            Dots leader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.MiddleDots">
            <summary>
            Middle dots leader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.Hyphens">
            <summary>
            Hyphens leader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.Underline">
            <summary>
            Underline leader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.ThickLine">
            <summary>
            Thick line leader
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTabStopLeaderStyle.EqualSigns">
            <summary>
            Equal signs leader
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBreakType">
            <summary>
            Enumerates the supported break types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.LineBreak">
            <summary>
            Line break.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.PageBreak">
            <summary>
            Page break.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.ColumnBreak">
            <summary>
            Column break.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.SectionNextPage">
            <summary>
            Next page section.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.SectionContinuous">
            <summary>
            Continuous section.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.SectionOddPage">
            <summary>
            Odd page section.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBreakType.SectionEvenPage">
            <summary>
            Even page section.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTextDocumentPart">
            <summary>
            Enumerates the text document parts.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextDocumentPart.Page">
            <summary>
            Refers to a page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextDocumentPart.Section">
            <summary>
            Refers to a section.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextDocumentPart.Line">
            <summary>
            Refers to a line.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextDocumentPart.Table">
            <summary>
            Refers to a table.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextDocumentPart.Paragraph">
            <summary>
            Refers to a paragraph
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextDocumentPart.Bookmark">
            <summary>
            Refers to a bookmark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENColumnWidthMode">
            <summary>
            Enumerates the column width modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENColumnWidthMode.Auto">
            <summary>
            The column width is detemined by the size of its content.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENColumnWidthMode.Fixed">
            <summary>
            The column has fixed width.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENColumnWidthMode.Percentage">
            <summary>
            The column width is specified as a percentage of the table's width.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENRowHeightMode">
            <summary>
            Enumerates the column height modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRowHeightMode.Auto">
            <summary>
            The row height is automatically determined based on content
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENRowHeightMode.Fixed">
            <summary>
            The row height is at least the specfied size
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENSelectionRenderMode">
            <summary>
            Enumerates the selection render modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSelectionRenderMode.Fill">
            <summary>
            Draws a filled rectange under selected regions of text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSelectionRenderMode.Invert">
            <summary>
            Inverts the filling of selected regions of text
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENSelectionRenderMode.None">
            <summary>
            Does not draw the selection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTextAtomType">
            <summary>
            Enumerates the text atom types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.Char">
            <summary>
            Char atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.Object">
            <summary>
            Object atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.NewLine">
            <summary>
            New line atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.PageBreak">
            <summary>
            Page break atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.Tab">
            <summary>
            Tab atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.ParagraphEnd">
            <summary>
            Paragraph end atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.BidiFormatMark">
            <summary>
            Bidi format atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.Bullet">
            <summary>
            Bullet atom type.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.SectionBreak">
            <summary>
            Section break type
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextAtomType.ColumnBreak">
            <summary>
            Column break
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENMarkVisibility">
            <summary>
            Enumerates the mark visibilities
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.None">
            <summary>
            Don't show marks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.ParagraphEnd">
            <summary>
            Show paragraph ends
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.SectionBreak">
            <summary>
            Show section breaks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.LineBreak">
            <summary>
            Show line breaks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.PageBreak">
            <summary>
            Show page breaks
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.Space">
            <summary>
            Show spaces
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.Tab">
            <summary>
            Show tabs
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMarkVisibility.All">
            <summary>
            Show all marks
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENInactiveContentDisplayMode">
            <summary>
            Enumerates the inactive content display modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENInactiveContentDisplayMode.Hide">
            <summary>
            Does not display inactive content 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENInactiveContentDisplayMode.Dim">
            <summary>
            Dims the inactive content
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENInactiveContentDisplayMode.Normal">
            <summary>
            Paints inactive content normally
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENEditTargetType">
            <summary>
            Enumerates the editing targets.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENEditTargetType.Body">
            <summary>
            Current editing target is section body.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENEditTargetType.Header">
            <summary>
            Current editing target is section header.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENEditTargetType.Footer">
            <summary>
            Current editing target is section footer.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENEditTargetType.Footnote">
            <summary>
            Current editing target is foot note
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENTextLayout">
            <summary>
            Enumerates the text layout types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextLayout.Normal">
            <summary>
            Normal layout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextLayout.Print">
            <summary>
            Print layout
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENTextLayout.Web">
            <summary>
            Web Layout
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENFloatMode">
            <summary>
            Enumerates the block flow modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFloatMode.Normal">
            <summary>
            Normal flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFloatMode.Left">
            <summary>
            Left flow
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFloatMode.Right">
            <summary>
            Right flow
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENWrapMode">
            <summary>
            Enumerates the wrapping modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapMode.None">
            <summary>
            The block does not use wrapping. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapMode.Before">
            <summary>
            Block allows inline content to flow only before its left edge 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapMode.After">
            <summary>
            Block allows inline content to flow only after its right edge 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapMode.Parallel">
            <summary>
            Block allows inline content to flow before its left edge and after its right edge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapMode.Through">
            <summary>
            Block allows inline content to flow inside its area
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENWrapModeCommand">
            <summary>
            Enumerates the wrap mode commands 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapModeCommand.None">
            <summary>
            The block does not use wrapping. 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapModeCommand.Before">
            <summary>
            Block allows inline content to flow only before its left edge 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapModeCommand.After">
            <summary>
            Block allows inline content to flow only after its right edge 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapModeCommand.Parallel">
            <summary>
            Block allows inline content to flow before its left edge and after its right edge
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapModeCommand.Through">
            <summary>
            Block allows inline content to flow inside its area
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENWrapModeCommand.Inline">
            <summary>
            Convert to inline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBlockSide">
            <summary>
            Enumerates the block sides
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockSide.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockSide.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockSide.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockSide.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBidiFormatMarkType">
            <summary>
            Enumerates the possible types of the bidi inline element
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.LRE">
            <summary>
            Left to Right Embedding
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.RLE">
            <summary>
            Right to Left Embedding
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.LRO">
            <summary>
            Left to Right Override
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.RLO">
            <summary>
            Right to Left Override
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.PDF">
            <summary>
            Pop Directionional Formatting
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.LRM">
            <summary>
            Left to Right Mark
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBidiFormatMarkType.RLM">
            <summary>
            Right to Left Mark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENHyperlinkLinkType">
            <summary>
            Enumerates the hyperlink types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHyperlinkLinkType.Url">
            <summary>
            Link to a file or url
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHyperlinkLinkType.Bookmark">
            <summary>
            Link to a bookmark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENAlign">
            <summary>
            Enumerates the text alignment within a paragraph
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENAlign.Left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENAlign.Center">
            <summary>
            Center alignment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENAlign.Right">
            <summary>
            Right alignment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENAlign.Justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENVAlign">
            <summary>
            Enumerates the vertical alignment within a block element.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVAlign.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVAlign.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENVAlign.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENLineTrimMode">
            <summary>
            Enumerates the line trimming modes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineTrimMode.Char">
            <summary>
            Line trim is performed to the nearest char that can fit bounds
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineTrimMode.Word">
            <summary>
            Line trim is performed to the nearest word that can fit bounds
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineTrimMode.CharEllipsis">
            <summary>
            Line trim is performed to the nearest char that can fit bounds and then ellipsis are added
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENLineTrimMode.WordEllipsis">
            <summary>
            Line trim is performed to the nearest word that can fit bounds and then ellipsis are added
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBulletChar">
            <summary>
            Enumerates some commonly used bullet chars
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.None">
            <summary>
            Empty bullet char
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.BlackCircle">
            <summary>
            Standard bullet char (disc, black circle)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.BlackTrianngle">
            <summary>
            Triangular bullet char
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.BlackSquare">
            <summary>
            Filled suqare char
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.WhiteSquare">
            <summary>
            White square char
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.WhiteCircle">
            <summary>
            White circle char
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.Hyphen">
            <summary>
            Hyphen bullet
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBulletChar.Asterisk">
            <summary>
            Asterisk
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENNumericFieldName">
            <summary>
            Enumerates the numeric field types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.AutoNumber">
            <summary>
            Automatic number.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.EditTime">
            <summary>
            Editing time in minutes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.FileSize">
            <summary>
            The file size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.NumberOfChars">
            <summary>
            Number of chars in the document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.PageCount">
            <summary>
            Number of pages in the document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.NumberOfWords">
            <summary>
            Number of words in the document.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.PageNumber">
            <summary>
            Current page number.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.SectionNumber">
            <summary>
            Current section number.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.SectionPageNumber">
            <summary>
            Current section page number.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENNumericFieldName.SectionPageCount">
            <summary>
            Number of pages in the current section.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENDateTimeFieldName">
            <summary>
            Enumerates the date time field types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDateTimeFieldName.CreationDate">
            <summary>
            The document creation date
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDateTimeFieldName.CurrentDate">
            <summary>
            The current date
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDateTimeFieldName.PrintDate">
            <summary>
            The last print date
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENDateTimeFieldName.SavedDate">
            <summary>
            The last saved date
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENStringFieldName">
            <summary>
            Enumerates the string field types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.Author">
            <summary>
            The document author
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.FileName">
            <summary>
            The document file name
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.Keywords">
            <summary>
            Keywords
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.LastSavedBy">
            <summary>
            Last saved by
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENStringFieldName.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENMailMergeFieldType">
            <summary>
            Enumerates the mail merge field value types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeFieldType.GreetingLine">
            <summary>
            Represents a greeting line field value.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeFieldType.PredefinedField">
            <summary>
            Represents a mail merge field value that gets data from a mail merge source field with
            a given name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeFieldType.SourceField">
            <summary>
            Represents a mail merge field value that gets data from a mail merge source field with
            a given name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeFieldType.RecordSourceNumber">
            <summary>
            The ordinal position of the mail merge data record in the list of selected records
            from the data source.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeFieldType.RecordMergeNumber">
            <summary>
            The ordinal position of the record in the mail merge. This number is not visible until
            the mail merge is finished.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBlockYIndex">
            <summary>
            Enumerates the block Y indexes
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockYIndex.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockYIndex.Top">
            <summary>
            Top block index
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockYIndex.Bottom">
            <summary>
            Bottom block index
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockYIndex.All">
            <summary>
            All
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENMailMergeDataField">
            <summary>
            Enumerates the supported mail merge data fields, i.e. fields that are used
            for special mail merge features, for example for GreetingLine.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.UniqueIdentifier">
            <summary>
            Specifies a unique identifier, for example an ID.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.CourtesyTitle">
            <summary>
            Specifies a courtesy title.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.FirstName">
            <summary>
            Specifies a first name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.MiddleName">
            <summary>
            Specifies a middle name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.LastName">
            <summary>
            Specifies a last name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Suffix">
            <summary>
            Specifies a suffix.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Nickname">
            <summary>
            Specifies a nickname.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.JobTitle">
            <summary>
            Specifies a job title.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Company">
            <summary>
            Specifies a company name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Address1">
            <summary>
            Specifies an address.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Address2">
            <summary>
            Specifies an address.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Address3">
            <summary>
            Specifies an address.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.City">
            <summary>
            Specifies a city.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.State">
            <summary>
            Specifies a state.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PostalCode">
            <summary>
            Specifies a postal code.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.CountryOrRegion">
            <summary>
            Specifies a country or a region.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.BusinessPhone">
            <summary>
            Specifies a business phone.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.BusinessFax">
            <summary>
            Specifies a business fax.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.HomePhone">
            <summary>
            Specifies a home phone.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.HomeFax">
            <summary>
            Specifies a home fax.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.EmailAddress">
            <summary>
            Specifies an email address.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Webpage">
            <summary>
            Specifies a wbe page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PartnerCourtesyTitle">
            <summary>
            Specifies the courtesy title of a spouse/partner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PartnerFirstName">
            <summary>
            Specifies the first name of a spouse/partner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PartnerMiddleName">
            <summary>
            Specifies the middle name of a spouse/partner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PartnerLastName">
            <summary>
            Specifies the last name of a spouse/partner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PartnerNickname">
            <summary>
            Specifies the nickname of a spouse/partner.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PhoneticGuideForFirstName">
            <summary>
            Specifies a phonetic guide for the first name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.PhoneticGuideForLastName">
            <summary>
            Specifies a phonetic guide for the last name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENMailMergeDataField.Department">
            <summary>
            Specifies a department.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENFieldContentPartType">
            <summary>
            Enumerates the supported field content part types.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFieldContentPartType.Placeholder">
            <summary>
            Represents a placeholder (data field) field content part.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENFieldContentPartType.String">
            <summary>
            Represents a string field content part.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENGreetingLineContent">
            <summary>
            Enumerates the greeting line contents.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.TitleAndLastName">
            <summary>
            Courtesy title and last name, for example "Mr. Randall".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.TitleLastNameAndPartnerTitle">
            <summary>
            Title, last name and partner title, for example "Mr. and Mrs. Randall".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.TitleFirstNameLastNameAndSuffix">
            <summary>
            Title, first name, last name and suffix, for example "Mr. Joshua Randall Jr.".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.TitleLastNameSuffixAndNickname">
            <summary>
            TitleLastNameSuffixAndNickname, for example "Mr. Josh Randall Jr.".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.FirstNameLastNameAndSuffix">
            <summary>
            First name, last name and suffix, for example "Joshua Randall Jr.".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.LastNameSuffixAndNickname">
            <summary>
            Last name, suffix and nickname, for example "Josh Randall Jr.".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.FirstNameLastNameAndPartnerFirstName">
            <summary>
            First name, last name and partner first name, for example "Josh and Cynthia Randall".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.LastNameNicknameAndParnerFirstName">
            <summary>
            Last name, nickname and parner first name, for example "Josh and Cynthia Randall".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.FirstName">
            <summary>
            First name, for example "Joshua".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.Nickname">
            <summary>
            Nickname, for example "Josh".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.FirstNameAndPartnerFirstName">
            <summary>
            First name and partner first name, for example "Joshua and Cynthia".
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENGreetingLineContent.NicknameAndPartnerFirstName">
            <summary>
            Nickname and partner first name, for example "Josh and Cynthia".
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENZoomCommandMode">
            <summary>
            Enumerates the supported zoom command modes.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENZoomCommandMode.ZoomToParameter">
            <summary>
            Zooms to the parameter passed to the command action.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENZoomCommandMode.ZoomTo100">
            <summary>
            Zooms to 100%.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENZoomCommandMode.ZoomToPage">
            <summary>
            Zooms to page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENZoomCommandMode.ZoomToTwoPages">
            <summary>
            Zooms to two pages.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENZoomCommandMode.ZoomToPageWidth">
            <summary>
            Zooms to page width.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENBlockCopyRangeContainment">
            <summary>
            Mask that enumerates whether the block range boundaries are 
            contained in the current selection range
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockCopyRangeContainment.None">
            <summary>
            Outside selection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockCopyRangeContainment.Begin">
            <summary>
            Begin block range is contained in the selection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockCopyRangeContainment.End">
            <summary>
            End block range is contained in the selection
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENBlockCopyRangeContainment.ContainedMask">
            <summary>
            Completely contained
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBlockArrangeManager">
            <summary>
            Represents a block arrange manager
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBlockArrangeManager.#ctor(Nevron.Nov.Text.NBlock)">
            <summary>
            Initializer constructor
            </summary>
            <param name="rootBlock"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockArrangeManager.m_NextProcessedBlock">
            <summary>
            The next block for processing 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockArrangeManager.m_ProcessedBlock">
            <summary>
            The currently processed block
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockArrangeManager.m_PooledForArrange">
            <summary>
            Whether the manager is pooled for arrange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBlockArrangeManager.m_DisableArrangePooling">
            <summary>
            Disable arrange pooling
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextElementMeasureManager">
            <summary>
            Represents a Element measure manager
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NValueCommonValue`1">
            <summary>
            Common value implementation for value types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nevron.Nov.Text.NValueCommonValue`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializer constructor
            </summary>
            <param name="hasCommon"></param>
            <param name="value"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NValueCommonValue`1.HasCommon">
            <summary>
            Gets whether there is a common value
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NValueCommonValue`1.Value">
            <summary>
            Gets the value
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection">
            <summary>
            Enumerates and loads Nevron spell check dictionaries for the Nevron spell checker.
            This default implementation lists and loads only the embedded "English (US)" dictionary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.#ctor">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.#ctor(Nevron.Nov.Globalization.NDictionarySource[])">
            <summary>
            Initializer constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.AddNonDuplicateCulture(Nevron.Nov.Globalization.NDictionarySource)">
            <summary>
            Adds a new dictionary info to the list, ensuring that its culture is not a duplicate of an alterady added dictionary info
            </summary>
            <param name="dictionarySource"></param>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.IndexOfCulture(System.String)">
            <summary>
            Gets the index of the dictionary for the given culture ("en-US", "de-DE", "bg-BG, etc.).
            Returns -1 if this dictionary list doesn't have a dictionary for the given culture.
            </summary>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.GetDictionaryForCulture(System.String)">
            <summary>
            Gets the dictionary for the given culture ("en-US", "de-DE", "bg-BG, etc.).
            Returns null if this dictionary list doesn't have a dictionary for the given culture.
            </summary>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.CreateFromFolder(Nevron.Nov.IO.NFolder)">
            <summary>
            Creates a dictionary list that contains the dictionary infos from the specified folder
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.SpellCheck.NDictionarySourceCollection.NDictionarySourceCollectionSchema">
            <summary>
            Reference to DictionarySourceCollectionSchema collection scheme
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryInfo">
            <summary>
            Hunspell dictionary info.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryInfo.#ctor(System.String,System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="cultureName"></param>
            <param name="description"></param>
        </member>
        <member name="T:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader">
            <summary>
            Reads dictionaries in the Hunspell format, such as the Open Office dictionaries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader.#ctor">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader.CaseSensitive">
            <summary>
            Defines whether this reader should treat the dictionary data as case sensitive or not.
            By default set to false (i.e. not case sensitive).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader.ReadInfoFromStream(System.IO.Stream)">
            <summary>
            Gets the dictionary info from the specified stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader.ReadDictionaryFromStream(System.IO.Stream)">
            <summary>
            Loads a spell check dictionary from an OXT stream (dictionary in the OpenOffice extension format).
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader.LoadFromStreams(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Loads a spell check dictionary from 2 streams - one containing the dictionary items and one
            describing the affixes.
            </summary>
            <param name="cultureName"></param>
            <param name="affixStream"></param>
            <param name="dictionaryStream"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NHunspellDictionaryReader.CreateDictionary(System.String,System.Int32)">
            <summary>
            Creates a new spell check dictionary with enough capacity for the given number of words.
            </summary>
            <param name="cultureName"></param>
            <param name="wordCount"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary">
            <summary>
            Represents a dictionary that can be used to check whether a word is correct and
            to get spell checking suggetions if it is not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="cultureName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.#ctor(System.String,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.#ctor(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="cultureName"></param>
            <param name="caseSensitive"></param>
            <param name="keyNodeCapacity"></param>
            <param name="innerNodeCapacity"></param>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.WordCount">
            <summary>
            Gets the number of words in this dictionary.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.CaseSensitive">
            <summary>
            Gets whether this spell check dictionary is case sensitive or not.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.AddWord(System.String)">
            <summary>
            Adds the given word to the dictionary.
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.RemoveAllWords">
            <summary>
            Removes all words from the dictionary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.IsCorrect(System.Char[],System.Int32,System.Int32)">
            <summary>
            Checks whether the given word is correct according to this spell check dictionary.
            </summary>
            <param name="chars">The char array the word is part of.</param>
            <param name="startIndex">The inclusive start char index of the word.</param>
            <param name="endIndex">The inclusive end char index of the word.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.GetSuggestions(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets an iterator that iterates through the words which are similar to
            the given one and may be used as suggestions in spell checking. The most
            similar words come first.
            </summary>
            <param name="chars">The char array the word is part of.</param>
            <param name="startIndex">The inclusive start char index of the word.</param>
            <param name="endIndex">The inclusive end char index of the word.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NTernarySpellCheckDictionary.GetAllWords">
            <summary>
            Gets an iterator that iterates through all words currently stored in the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.SpellCheck.NDictionary">
            <summary>
            Base class for all spell check dictionaries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionary.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="cultureName"></param>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NDictionary.WordCount">
            <summary>
            Gets the number of words in this dictionary.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NDictionary.CultureName">
            <summary>
            Gets/Sets the culture name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NDictionary.Description">
            <summary>
            Gets/Sets the dictionary description.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionary.AddWord(System.String)">
            <summary>
            Adds the given word to the dictionary.
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionary.RemoveAllWords">
            <summary>
            Removes all words from the dictionary.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionary.IsCorrect(System.Char[],System.Int32,System.Int32)">
            <summary>
            Checks whether the given word is correct according to this spell check dictionary.
            </summary>
            <param name="chars">The char array the word is part of.</param>
            <param name="startIndex">The inclusive start char index of the word.</param>
            <param name="endIndex">The inclusive end char index of the word.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionary.GetSuggestions(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets an iterator that iterates through the words which are similar to
            the given one and may be used as suggestions in spell checking. The most
            similar words come first.
            </summary>
            <param name="chars">The char array the word is part of.</param>
            <param name="startIndex">The inclusive start char index of the word.</param>
            <param name="endIndex">The inclusive end char index of the word.</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NDictionary.GetAllWords">
            <summary>
            Gets an iterator that iterates through all words currently stored in the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.SpellCheck.NSpellChecker">
            <summary>
            Provides spell check functionality for the Nevron Rich Text control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NSpellChecker.#ctor">
            <summary>
            Creates a new spell checker and initializes it with the default dictionary manager.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NSpellChecker.DictionarySource">
            <summary>
            Gets or sets the current dictionary source
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NSpellChecker.DictionarySources">
            <summary>
            Gets/Sets the dictionary manager that should enumerate and load spell check
            dictionaries for this spell checker.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.SpellCheck.NSpellChecker.Enabled">
            <summary>
            Gets or sets whether the spell checker is enabled.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NSpellChecker.GetOrCreateDictionarySources">
            <summary>
            Gets or creates the dictionary sources.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NSpellChecker.TrySelectDictionaryForCulture(System.String)">
            <summary>
            Tries to select a dictionary info for the specified culture name
            </summary>
            <param name="cultureName"></param>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NSpellChecker.GetMisspelledWordRanges(System.Char[],System.Boolean,Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Gets a list of misspelled word ranges
            </summary>
            <param name="chars"></param>
            <param name="protectWordRange">when set to true the spellchecker must check the words that intersect the specified range as the user may be currently typing there.</param>
            <param name="protectedWordRange">the protected word range</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NSpellChecker.IsCorrect(System.Char[],System.Int32,System.Int32)">
            <summary>
            Returns true if the word at [beginIndex, endIndex] is correct
            </summary>
            <param name="chars"></param>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.SpellCheck.NSpellChecker.GetSuggestions(System.Char[],System.Int32,System.Int32)">
            <summary>
            Returns an iterator of words that are similar to this word
            </summary>
            <param name="chars"></param>
            <param name="beginIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.SpellCheck.NSpellChecker.NSpellCheckerSchema">
            <summary>
            Schema associated with NSpellChecker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.SpellCheck.NSpellChecker.EnabledProperty">
            <summary>
            Reference to the Enabled property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.SpellCheck.NSpellChecker.DictionarySourceProperty">
            <summary>
            Reference to the DictionarySourceProperty property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.SpellCheck.NSpellChecker.DictionarySourcesProperty">
            <summary>
            Reference to the DictionarySourceList property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.INSpellCheckerHost">
            <summary>
            Interface implemented by spell checker hosts.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INSpellCheckerHost.ClearSpellCheck">
            <summary>
            Clears the current results of spell checking
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INSpellCheckerHost.InvalidateSpellCheck">
            <summary>
            Invalidates the current results of spell checking
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NClickSelectTool">
            <summary>
            NClickSelectTool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NClickSelectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NClickSelectTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NClickSelectTool.NClickSelectToolSchema">
            <summary>
            Schema associated with NRichTextInputTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NContextMenuTool">
            <summary>
            The NContextMenuTool is used to provide context menu functionality to a NRichTextView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NContextMenuTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NContextMenuTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NContextMenuTool.NContextMenuToolSchema">
            <summary>
            Schema associated with NContextMenuTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NCreateTabStopTool">
            <summary>
            NCreateTabStopTool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NCreateTabStopTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NCreateTabStopTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NCreateTabStopTool.NCreateTabStopToolSchema">
            <summary>
            Schema associated with NRichTextInputTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NCursorTool">
            <summary>
            A tool, which monitors the mouse move over a rich text view and changes the cursor
            as appropriate, for example to an I-beam cursor when the mouse is over a page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NCursorTool.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NCursorTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NCursorTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NCursorTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NCursorTool.NCursorToolSchema">
            <summary>
            Schema associated with NCursorTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NDragDropSelectionTool">
            <summary>
            Represents a tool that allows the user to resize images
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.OperatesInWindowArea">
            <summary>
            Returns true if the tool operates in the window area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Returns true if the tool can be activated.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragDropSelectionTool.OnAborted">
            <summary>
            Called when the tool was aborted
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NDragDropSelectionTool.NDragDropSelectionToolSchema">
            <summary>
            Schema associated with NDragDropSelectionToolSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NDragHandleTool">
            <summary>
            Represents a tool that allows the user to resize images
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.OperatesInWindowArea">
            <summary>
            Returns true if the tool operates in the window area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Returns true if the tool can be activated.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.OnActivated">
            <summary>
            Activates the tool.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragHandleTool.OnAborted">
            <summary>
            Called when the tool was aborted
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NDragHandleTool.NDragHandleToolSchema">
            <summary>
            Schema associated with NDragHandleToolSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NDragShapeBlockTool">
            <summary>
            Represents a tool that allows the user to resize images
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.OperatesInWindowArea">
            <summary>
            Returns true if the tool operates in the window area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.OnActivated">
            <summary>
            Called when the tool was activated. Raises the Activated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated. Raises the Deactivated event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.OnAborted">
            <summary>
            Called when the tool was aborted. Raises the Aborted event
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NDragShapeBlockTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Returns true if the tool can be activated.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NDragShapeBlockTool.NDragShapeBlockToolSchema">
            <summary>
            Schema associated with NDragShapeBlockToolSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NKeyboardInputTool">
            <summary>
            NKeyboardInputTool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NKeyboardInputTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Tools.NKeyboardInputTool.AllowInsertPageBreak">
            <summary>
            Gets or sets the allow insert page break property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Tools.NKeyboardInputTool.AllowInsertSectionBreak">
            <summary>
            Gets or sets the allow insert section break property
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.Tools.NKeyboardInputTool.AllowInsertLineBreak">
            <summary>
            Gets or sets the allow insert line break property
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NKeyboardInputTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            Called on keyboard key down.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NKeyboardInputTool.OnInputChar(Nevron.Nov.UI.NInputCharEventArgs)">
            <summary>
            Called on character entered.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NKeyboardInputTool.NKeyboardInputToolSchema">
            <summary>
            Schema associated with NKeyboardInputTool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NKeyboardInputTool.AllowInsertPageBreakProperty">
            <summary>
            Schema associated with AllowInsertPageBreak property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NKeyboardInputTool.AllowInsertSectionBreakProperty">
            <summary>
            Schema associated with AllowInsertSectionBreak property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NKeyboardInputTool.AllowInsertLineBreakProperty">
            <summary>
            Schema associated with AllowInsertLineBreak property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NKeyboardNavigationTool">
            <summary>
            NKeyboardNavigationTool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NKeyboardNavigationTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NKeyboardNavigationTool.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NKeyboardNavigationTool.NKeyboardNavigationToolSchema">
            <summary>
            Schema associated with NRichTextInputTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NRangeSelectTool">
            <summary>
            The NRangeSelectTool is used to provide range selection functionality to a NRichTextView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NRangeSelectTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NRangeSelectTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NRangeSelectTool.OperatesInWindowArea">
            <summary>
            Gets whether this tool operates in the window area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NRangeSelectTool.OnActivated">
            <summary>
            Called when this tool is activated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NRangeSelectTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and the tooltip for when the tool is in active state.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NRangeSelectTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            Gets the cursor and the tooltip for when the tool is in ready state.
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NRangeSelectTool.NRangeSelectToolSchema">
            <summary>
            Schema associated with NRichTextInputTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NScrollAndZoomTool">
            <summary>
            A tool, which implements mouse wheel scrolling and zooming of a NRichTextView.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NScrollAndZoomTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NScrollAndZoomTool.DoScrollInDirection(Nevron.Nov.Graphics.ENCompassDirection,System.Double)">
            <summary>
            Performs scroll in the given direction.
            </summary>
            <param name="dir"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NScrollAndZoomTool.DoZoomIn">
            <summary>
            Performs zoom in.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NScrollAndZoomTool.DoZoomOut">
            <summary>
            Performs zoom out.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NScrollAndZoomTool.DoZoomIn(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Performs zoom in around the given pin point.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NScrollAndZoomTool.DoZoomOut(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Performs zoom out arounf the given pin point.
            </summary>
            <param name="pin"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NScrollAndZoomTool.NScrollAndZoomToolSchema">
            <summary>
            Schema associated with NScrollAndZoomTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NSelectEditTargetTool">
            <summary>
            The select edit target tool is used to dynamically change the current edit target when 
            the user double clicks on the header / footer or click away from a header footer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectEditTargetTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectEditTargetTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NSelectEditTargetTool.NSelectEditTargetToolSchema">
            <summary>
            Schema associated with NSelectEditTargetTool.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NTextViewportDragTool">
            <summary>
            Represents a tool that allows the user to resize images
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NTextViewportDragTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NTextViewportDragTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Returns true if the tool can be activated.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NTextViewportDragTool.GetTargetRichTextView(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the current target rich text view
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NTextViewportDragTool.RequiresPointOverTextArea">
            <summary>
            True if the point has to be over the rich text area
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NTextViewportDragTool.m_RichTextView">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NTextViewportDragTool.NTextViewportDragToolSchema">
            <summary>
            Schema associated with NTextViewportDragToolSchema
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NResizeTableColumnTool">
            <summary>
            Represents a tool that allows the user to resize table columns
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.TryGetRowColumnFromMousePosition(Nevron.Nov.Text.INRichTextView@,Nevron.Nov.Text.NTextElement@)">
            <summary>
            Gets the table element 
            </summary>
            <param name="richTextView"></param>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.GetCursorFromOrientation(System.Boolean)">
            <summary>
            Gets the cursor from the specified orientation
            </summary>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.GetTooltip">
            <summary>
            Gets the tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.ClearState">
            <summary>
            Clears the state of this tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Returns true if the tool can be activated.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableColumnTool.OnActivated">
            <summary>
            Activates the tool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NResizeTableColumnTool.NResizeTableColumnToolSchema">
            <summary>
            Schema associated with NResizeTableColumnTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool">
            <summary>
            Represents a base tool that allows the user to resize table rows / columns
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.TryGetRowColumnFromMousePosition(Nevron.Nov.Text.INRichTextView@,Nevron.Nov.Text.NTextElement@)">
            <summary>
            Gets the table element
            </summary>
            <param name="richTextView"></param>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.GetCursorFromOrientation(System.Boolean)">
            <summary>
            Gets the cursor from the specified orientation
            </summary>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.GetTooltip">
            <summary>
            Gets the tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.ClearState">
            <summary>
            Clears the state of this tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.OperatesInWindowArea">
            <summary>
            Returns true if the tool operates in the window area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.GetActiveCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.GetReadyCursorAndTooltip(Nevron.Nov.UI.NCursor@,Nevron.Nov.UI.NTooltip@)">
            <summary>
            
            </summary>
            <param name="cursor"></param>
            <param name="toolTip"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.GetTargetRichTextView(Nevron.Nov.Graphics.NPoint)">
            <summary>
            Gets the current target rich text view
            </summary>
            <param name="mousePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.RequiresPointOverTextArea">
            <summary>
            True if the point has to be over the rich text area
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.OnDeactivated">
            <summary>
            Called when the tool was deactivated.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.OnAborted">
            <summary>
            Called when the tool was aborted
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NResizeTableRowColumnTool.NResizeTableRowColumnToolSchema">
            <summary>
            Schema associated with NResizeTableRowColumnTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NResizeTableRowTool">
            <summary>
            Represents a tool that allows the user to resize table rows
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.TryGetRowColumnFromMousePosition(Nevron.Nov.Text.INRichTextView@,Nevron.Nov.Text.NTextElement@)">
            <summary>
            Gets the table element 
            </summary>
            <param name="richTextView"></param>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.GetCursorFromOrientation(System.Boolean)">
            <summary>
            Gets the cursor from the specified orientation
            </summary>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.GetTooltip">
            <summary>
            Gets the tooltip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.ClearState">
            <summary>
            Clears the state of this tool
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.CanActivate(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Returns true if the tool can be activated.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NResizeTableRowTool.OnActivated">
            <summary>
            Activates the tool.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NResizeTableRowTool.NResizeTableRowToolSchema">
            <summary>
            Schema associated with NResizeTableRowTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NSelectTableCellTool">
            <summary>
            Represents a tool that allows the user to select table cells
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableCellTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NSelectTableCellTool.NSelectTableCellToolSchema">
            <summary>
            Schema associated with NSelectTableCellTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NSelectTableColumnTool">
            <summary>
            Represents a tool that allows the user to select table rows
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableColumnTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NSelectTableColumnTool.NSelectTableColumnToolSchema">
            <summary>
            Schema associated with NSelectTableColumnTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NSelectTableElementTool">
            <summary>
            Base tool for selecting table rows or cols
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableElementTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableElementTool.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableElementTool.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableElementTool.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NSelectTableElementTool.NSelectTableElementToolSchema">
            <summary>
            Schema associated with NSelectTableColumnTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.Tools.NSelectTableRowTool">
            <summary>
            Represents a tool that allows the user to select table rows
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.Tools.NSelectTableRowTool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.Tools.NSelectTableRowTool.NSelectTableRowToolSchema">
            <summary>
            Schema associated with NSelectTableRowTool
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBoxTextElementEditor">
            <summary>
            Represents shape editor. 
            A shape editor consists of multiple trackers each allowing the editing of specific shape aspects.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBoxTextElementEditor.OwnerTextView">
            <summary>
            Gets the drawing owning this shape editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBoxTextElementEditor.HitTest(Nevron.Nov.Dom.NPointHitTestVisitor)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBoxTextElementEditor.CanClip">
            <summary>
            Overriden to return true
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBoxTextElementEditor.GetClip">
            <summary>
            Overriden to return the bounds region of all contained trackers/
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NBoxTextElementEditor.OnPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the trackers
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NBoxTextElementEditor.EditedTextElement">
            <summary>
            Gets the edited shape
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBoxTextElementEditor.NTextElementSizeEditorSchema">
            <summary>
            Schema associated with NTextElementSizeEditor
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBoxTextElementEditorCollection">
            <summary>
            A collection of box editor editors
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBoxTextElementEditorCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBoxTextElementEditorCollection.NBoxTextElementEditorCollectionSchema">
            <summary>
            Schema associated with NBoxTextElementEditorCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENHandleType">
            <summary>
            Defines the possible handle types
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHandleType.Box">
            <summary>
            Handle for alignment box
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.ENHandleShape">
            <summary>
            Defines the currently available handle shapes 
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHandleShape.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHandleShape.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.ENHandleShape.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHandleStyle">
            <summary>
            Represents an attribute, which controls the appearance of a specific set of handles
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHandleStyle.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHandleStyle.#ctor(Nevron.Nov.Text.ENHandleShape,Nevron.Nov.Graphics.NSize,Nevron.Nov.Graphics.NColor,Nevron.Nov.Graphics.NColor)">
            <summary>
            Initializer constructor
            </summary>
            <param name="shape"></param>
            <param name="size"></param>
            <param name="fillColor"></param>
            <param name="borderColor"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NHandleStyle.FillColor">
            <summary>
            Gets or sets the handle fill color
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHandleStyle.BorderColor">
            <summary>
            Gets or sets the handle border color
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHandleStyle.Shape">
            <summary>
            Gets or sets the handle shape
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHandleStyle.Size">
            <summary>
            Gets or sets the handle size
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHandleStyle.NHandleStyleSchema">
            <summary>
            Schema associated with NHandleStyle
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHandleStyle.FillColorProperty">
            <summary>
            Reference to the FillColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHandleStyle.BorderColorProperty">
            <summary>
            Reference to the BorderColor property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHandleStyle.ShapeProperty">
            <summary>
            Reference to the Shape property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHandleStyle.SizeProperty">
            <summary>
            Reference to the Size property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextEditMenuBuilder">
            <summary>
            Creates the "Edit" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextEditMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextEditMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the "Edit" menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextFileMenuBuilder">
            <summary>
            Creates the "File" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextFileMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextFileMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the "File" menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextFormatMenuBuilder">
            <summary>
            Creates the "Format" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextFormatMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextFormatMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the "Format" menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextInsertMenuBuilder">
            <summary>
            Creates the "Insert" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextInsertMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextInsertMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the "Insert" menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextTableMenuBuilder">
            <summary>
            Creates the Table menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextTableMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextTableMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the Table menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextToolsMenuBuilder">
            <summary>
            Creates the "Tools" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextToolsMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextToolsMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the "Tools" menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextViewMenuBuilder">
            <summary>
            Creates the "View" menu.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextViewMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextViewMenuBuilder.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the "View" menu items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder">
            <summary>
            Creates the Nevron rich text command bar UI.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.AddMenuDropDownBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NMenuDropDownBuilder})">
            <summary>
            Adds the rich text menu drop down builders.
            </summary>
            <param name="menuBuilders"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.AddToolBarBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NToolBarBuilder})">
            <summary>
            Adds the rich text toolbar builders.
            </summary>
            <param name="toolBarBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.CreateStatusBarBuilder">
            <summary>
            Creates the rich text status bar builder.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.ToolbarBlockName">
            <summary>
            The name of the "Block" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.ToolbarFormatName">
            <summary>
            The name of the "Format" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.ToolbarMailMergeName">
            <summary>
            The name of the "Mail Merge" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.ToolbarStandardName">
            <summary>
            The name of the "Standard" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.ToolbarTableName">
            <summary>
            The name of the "Table" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.ToolbarViewName">
            <summary>
            The name of the "View" toolbar.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuEditName">
            <summary>
            The name of the "Edit" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuFileName">
            <summary>
            The name of the "File" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuFormatName">
            <summary>
            The name of the "Format" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuInsertName">
            <summary>
            The name of the "Insert" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuTableName">
            <summary>
            The name of the "Table" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuToolsName">
            <summary>
            The name of the "Tools" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuViewName">
            <summary>
            The name of the "View" menu.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextCommandBarBuilder.MenuHelpName">
            <summary>
            The name of the menu help.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextStatusBarBuilder">
            <summary>
            Creates the rich text status bar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStatusBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStatusBarBuilder.Create">
            <summary>
            Creates the rich text status bar.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextBlockToolBarBuilder">
            <summary>
            Creates the Block toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextBlockToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextBlockToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextFormatToolBarBuilder">
            <summary>
            Creates the Format toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextFormatToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextFormatToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextMailMergeToolBarBuilder">
            <summary>
            Creates the "Mail Merge" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMailMergeToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMailMergeToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextStandardToolBarBuilder">
            <summary>
            Creates the Standard toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStandardToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStandardToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextTableToolBarBuilder">
            <summary>
            Creates the Table toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextTableToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextTableToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextViewToolBarBuilder">
            <summary>
            Creates the "View" toolbar.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextViewToolBarBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextViewToolBarBuilder.AddItems(Nevron.Nov.UI.NCommandBarItemCollection)">
            <summary>
            Adds the toolbar items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NBarcodeInlineMenuGroup">
            <summary>
            Represents the barcode inline menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBarcodeInlineMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBarcodeInlineMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for widget inlines, which contain a QR code.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBarcodeInlineMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NBookmarkInlineMenuGroup">
            <summary>
            Represents the bookmark inline menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBookmarkInlineMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBookmarkInlineMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for bookmark inlines.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBookmarkInlineMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NFieldInlineMenuGroup">
            <summary>
            Represents the field inline menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NFieldInlineMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NFieldInlineMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for field inlines.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NFieldInlineMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHyperlinkInlineMenuGroup">
            <summary>
            Represents the hyperlink inline menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHyperlinkInlineMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHyperlinkInlineMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for hyperlink inlines.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHyperlinkInlineMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NShapeInlineMenuGroup">
            <summary>
            Represents the barcode inline menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NShapeInlineMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NShapeInlineMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for widget inlines, which contain a QR code.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NShapeInlineMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTextInlineMenuGroup">
            <summary>
            Represents the text inline context menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTextInlineMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTextInlineMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for text inlines.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTextInlineMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NBulletListItemMenuGroup">
            <summary>
            Represents the bullet list item menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListItemMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListItemMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for bullet list items.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListItemMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListItemMenuGroup.AppendPropertiesTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu property items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NBulletListMenuGroup">
            <summary>
            Represents the bullet list menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for bullet lists.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NBulletListMenuGroup.AppendPropertiesTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu property items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NCommonContextMenuGroup">
            <summary>
            Represents the common context menu group (i.e. the menu items that are shown
            for all text elements).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NCommonContextMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NCommonContextMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Gets whether this context menu group should be shown for the given
            text element. Overriden to return true for every text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NCommonContextMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NGroupBlockMenuGroup">
            <summary>
            Represents the group block menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NGroupBlockMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NGroupBlockMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for group block text elements.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NGroupBlockMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NProofingMenuGroup">
            <summary>
            Represents the proofing context menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NProofingMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NProofingMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Returns true if this rich text context menu group applies to the given text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NProofingMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextMenuGroup">
            <summary>
            Represents a rich text menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroup.#ctor(System.String)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Returns true if this rich text context menu group applies to the given text element.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroup.AppendPropertiesTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu property items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.BarcodeInline">
            <summary>
            The barcode inline group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.BookmarkInline">
            <summary>
            The bookmark inline group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.FieldInline">
            <summary>
            The field inline group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.HyperlinkInline">
            <summary>
            The hyperlink inline group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.TextInline">
            <summary>
            The text inline group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.BulletList">
            <summary>
            The bullet list group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.BulletListItem">
            <summary>
            The bullet list item group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.Common">
            <summary>
            The common group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.GroupBlock">
            <summary>
            The group block group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.TableOfContents">
            <summary>
            The table of contents group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.Proofing">
            <summary>
            The proofing group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.TableCell">
            <summary>
            The table cell group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextMenuGroup.Table">
            <summary>
            The table group name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableCellContextGroup">
            <summary>
            Represents the table cell context menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableCellContextGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableCellContextGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for table cells.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableCellContextGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableCellContextGroup.AppendPropertiesTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu property items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableMenuGroup">
            <summary>
            Represents the table context menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for table text elements.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableMenuGroup.AppendPropertiesTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu property items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableOfContentsMenuGroup">
            <summary>
            Represents the table of contents menu group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableOfContentsMenuGroup.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableOfContentsMenuGroup.AppliesTo(Nevron.Nov.Text.NTextElement)">
            <summary>
            Overriden to return true for table of content blocks.
            </summary>
            <param name="textElement"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableOfContentsMenuGroup.AppendActionsTo(Nevron.Nov.UI.NMenu,Nevron.Nov.Text.NTextElement)">
            <summary>
            Appends the context menu action items from this group to the given menu.
            </summary>
            <param name="menu">The menu to append to.</param>
            <param name="textElement">The text element this menu is built for.</param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextContextMenu">
            <summary>
            Represents the context menu shown for a Nevron Rich Text control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenu.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenu.NavigateToOwnerMenuItem">
            <summary>
            Navigates to the owner menu item, if the menu is owned by a menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextContextMenu.NRichTextContextMenuSchema">
            <summary>
            Schema associated with NRichTextContextMenu.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder">
            <summary>
            A class that builds rich text context menus.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.ShowMiniToolbar">
            <summary>
            Whether the context menu will also contain the mini toolbar
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.Groups">
            <summary>
            Gets the groups in this context menu builder
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.ResetGroups">
            <summary>
            Clears the current list of rich text context menu groups and
            repopulates it only with the default ones.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.ClearAllGroups">
            <summary>
            Clears all groups in the builder
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.CreateContextPopupWindow(Nevron.Nov.Text.NTextElement)">
            <summary>
            Creates a context menu popup window for the given text element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.CreateTextFormattingMiniToolBar">
            <summary>
            Creates the text formatting mini toolbar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextContextMenuBuilder.CreateContextMenu(Nevron.Nov.Text.NTextElement,Nevron.Nov.DataStructures.NList{System.Int32})">
            <summary>
            Creates the context menu given the specified text element.
            </summary>
            <param name="textElement"></param>
            <param name="groupIndexes"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextMenuGroupList">
            <summary>
            Represents a list of rich text menu groups
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroupList.RemoveByName(System.String)">
            <summary>
            Removes the context menu group with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroupList.GetByName(System.String)">
            <summary>
            Returns the rich text context menu group with the given name or null
            if this rich text context menu builder does not have a group with
            this name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextMenuGroupList.IndexOf(System.String)">
            <summary>
            Gets the index of the context menu group with the given name. Returns -1 if this 
            rich text context menu builder does not have a group with the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextRibbonBuilder">
            <summary>
            Creates the Nevron rich text ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.CreateRibbonTabContextCommandSource">
            <summary>
            Creates the ribbon tab context command source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.CreateApplicationMenu">
            <summary>
            Creates the rich text application menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.AddTabPageBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageBuilder})">
            <summary>
            Adds the rich text ribbon tab page builders.
            </summary>
            <param name="tabPageBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.AddTabPageGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageGroupBuilder})">
            <summary>
            Adds the rich text ribbon tab page group builders.
            </summary>
            <param name="tabPageGroupBuilders"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.CreateStatusBarBuilder">
            <summary>
            Creates the status bar builder.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.HomeTabPageBuilder">
            <summary>
            The home tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.InsertTabPageBuilder">
            <summary>
            The insert tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.PageLayoutTabPageBuilder">
            <summary>
            THe page layout tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.ReferencesTabPageBuilder">
            <summary>
            The references tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.ViewTabPageBuilder">
            <summary>
            The view tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.ReviewTabPageBuilder">
            <summary>
            The review tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.MailingsTabPageBuilder">
            <summary>
            The malings tab page builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TableTabPageGroupBuilder">
            <summary>
            Table tab page group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPageHomeName">
            <summary>
            The name of the "Home" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPageInsertName">
            <summary>
            The name of the "Insert" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPageMailingsName">
            <summary>
            The name of the "Mailings" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPagePageLayoutName">
            <summary>
            The name of the "Page Layout" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPageReferencesName">
            <summary>
            The name of the "References" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPageReviewName">
            <summary>
            The name of the "Review" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabPageViewName">
            <summary>
            The name of the "View" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonBuilder.TabGroupTableName">
            <summary>
            The name of the "Table" tab page group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextStyleGalleryCommandSource">
            <summary>
            Command source for rich text ribbon style galleries.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStyleGalleryCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStyleGalleryCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStyleGalleryCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element selected style.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextStyleGalleryCommandSource.GetParameter(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Gets the parameter associated with the given table picker cell.
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextStyleGalleryCommandSource.NRichTextStyleGalleryCommandSourceSchema">
            <summary>
            Schema associated with NRichTextStyleGalleryCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHomeClipboardGroupBuilder">
            <summary>
            Creates the rich text "Clipboard" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeClipboardGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeClipboardGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHomeEditingGroupBuilder">
            <summary>
            Creates the rich text "Editing" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeEditingGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeEditingGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeEditingGroupBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a split button.
            </summary>
            <typeparam name="tQlC"></typeparam>
            <param name="image"></param>
            <param name="moreOptionsImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHomeFontGroupBuilder">
            <summary>
            Creates the rich text "Font" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeFontGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeFontGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHomeParagraphGroupBuilder">
            <summary>
            Creates the rich text "Paragraph" ribbon group of the "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeParagraphGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.UI.NHomeParagraphGroupBuilder.DialogLauncherButtonCommand">
            <summary>
            Overriden to return the rich text edit paragraph command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeParagraphGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeParagraphGroupBuilder.CreateMenuSplitButton(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a menu split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHomeStyleGroupBuilder">
            <summary>
            Creates the rich text "Style" ribbon group in the "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeStyleGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.UI.NHomeStyleGroupBuilder.DialogLauncherButtonCommand">
            <summary>
            Overriden to return the rich text edit styles command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeStyleGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NHomeTabPageBuilder">
            <summary>
            Creates the rich text ribbon "Home" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NHomeTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.HomeClipboardGroupBuilder">
            <summary>
            The home clipboard group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.HomeFontGroupBuilder">
            <summary>
            The home font group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.HomeParagraphGroupBuilder">
            <summary>
            The home paragraph group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.HomeStyleGroupBuilder">
            <summary>
            The home style group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.HomeEditingGroupBuilder">
            <summary>
            The home editing group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.GroupClipboardName">
            <summary>
            The "Clipboard" ribbon group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.GroupFontName">
            <summary>
            The "Font" ribbon group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.GroupParagraphName">
            <summary>
            The "Paragraph" ribbon group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.GroupStyleName">
            <summary>
            The "Style" ribbon group name.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NHomeTabPageBuilder.GroupEditingName">
            <summary>
            The "Editing" ribbon group name.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertIllustrationsGroupBuilder">
            <summary>
            Creates the rich text "Illustrations" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertIllustrationsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertIllustrationsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertLinksGroupBuilder">
            <summary>
            Creates the rich text "Links" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertLinksGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertLinksGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertPagesGroupBuilder">
            <summary>
            Creates the rich text "Page" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertPagesGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertPagesGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertSymbolsGroupBuilder">
            <summary>
            Creates the rich text "Symbols" ribbon group of the "Insert" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertSymbolsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertSymbolsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertTablesGroupBuilder">
            <summary>
            Creates the "Tables" group builder.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertTablesGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertTablesGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertTabPageBuilder">
            <summary>
            Creates the rich text ribbon "Insert" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NInsertTabPageBuilder.InsertPagesGroupBuilder">
            <summary>
            The insert pages group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NInsertTabPageBuilder.InsertTablesGroupBuilder">
            <summary>
            The insert tables group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NInsertTabPageBuilder.InsertIllustrationsGroupBuilder">
            <summary>
            The insert illustrations group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NInsertTabPageBuilder.InsertLinksGroupBuilder">
            <summary>
            The insert links group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NInsertTabPageBuilder.InsertTextGroupBuilder">
            <summary>
            The insert text group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NInsertTabPageBuilder.InsertSymbolsGroupBuilder">
            <summary>
            The insert symbols group builder
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NInsertTextGroupBuilder">
            <summary>
            Creates the rich text "Text" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertTextGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NInsertTextGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NMailingsFieldsGroupBuilder">
            <summary>
            Creates the rich text "Fields" ribbon group of the "Mailings" tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsFieldsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsFieldsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NMailingsFinishGroupBuilder">
            <summary>
            Creates the rich text "Finish" ribbon group of the "Mailings" tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsFinishGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsFinishGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NMailingsPreviewGroupBuilder">
            <summary>
            Creates the rich text "Preview" ribbon group of the "Mailings" tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsPreviewGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsPreviewGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsPreviewGroupBuilder.CreateRecordNavigationPanel">
            <summary>
            Creates the mail merge record navigation panel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NMailingsStartMailMergeGroupBuilder">
            <summary>
            Creates the rich text "Start Mail Merge" ribbon group of the "Mailings" tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsStartMailMergeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsStartMailMergeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NMailingsTabPageBuilder">
            <summary>
            Creates the rich text "Mailings" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.MailingsStartMailMergeGroupBuilder">
            <summary>
            The mailings start mail merge group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.MailingsFieldsGroupBuilder">
            <summary>
            The mailings fields group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.MailingsPreviewGroupBuilder">
            <summary>
            The mailings preview group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.MailingsFinishGroupBuilder">
            <summary>
            The mailings  finish group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.GroupFieldsName">
            <summary>
            The name of the "Fields" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.GroupFinishName">
            <summary>
            The name of the "Finish" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.GroupPreviewName">
            <summary>
            The name of the "Preview" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NMailingsTabPageBuilder.GroupStartMailMergeName">
            <summary>
            The name of the "Start Mail Merge" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NPageLayoutPageBackgroundGroupBuilder">
            <summary>
            Creates the "Page Background" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutPageBackgroundGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutPageBackgroundGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutPageBackgroundGroupBuilder.CreateSplitButton``1(Nevron.Nov.Graphics.NImage,Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a split button.
            </summary>
            <typeparam name="GrlC"></typeparam>
            <param name="image"></param>
            <param name="moreOptionsImage"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NPageLayoutPageSetupGroupBuilder">
            <summary>
            Creates the rich text "Page Setup" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutPageSetupGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutPageSetupGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder">
            <summary>
            Creates the "Paragraph" ribbon group of the "Page Layout" ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder.CreateMeasureUpDown(Nevron.Nov.NUnit[],Nevron.Nov.NUnit,Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a measure up down and associates an NMeasureUpDownCommandSource to it.
            </summary>
            <param name="units">The units to show in the measure up down.</param>
            <param name="selectedUnit">The initially selected unit.</param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder.CreateTableFlowPanel">
            <summary>
            Creates a table flow panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder.CreatePairBox(System.String,Nevron.Nov.UI.NTableFlowPanel)">
            <summary>
            Creates a pair box with the given title and content below the title.
            </summary>
            <param name="title"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutParagraphGroupBuilder.OnMeasureUpDownSelectedUnitChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the unit of a measure up down has been changed. Updates the Step and the
            DecimalPlaces of the measure up down to values appropriate for the currently selected unit.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder">
            <summary>
            Creates the rich text "Page Layout" ribbon tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.PageLayoutPageSetupGroupBuilder">
            <summary>
            The page layouts page setup groupd builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.PageLayoutPageBackgroundGroupBuilder">
            <summary>
            The page layout page background group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.PageLayoutParagraphGroupBuilder">
            <summary>
            The page layout paragraph group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.GroupParagraphName">
            <summary>
            Gets the name of the "Paragraph" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.GroupPageSetupName">
            <summary>
            Gets the name of the "Page Setup" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NPageLayoutTabPageBuilder.GroupPageBackgroundName">
            <summary>
            Gets the name of the "Page Background" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NReferencesTableOfContentsGroupBuilder">
            <summary>
            Creates the rich text "Table of Contents" ribbon group of the "References" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReferencesTableOfContentsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReferencesTableOfContentsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NReferencesTabPageBuilder">
            <summary>
            Creates the rich text ribbon "References" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReferencesTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReferencesTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NReferencesTabPageBuilder.ReferencesTableOfContentsGroupBuilder">
            <summary>
            The references table of contents groupd builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NReferencesTabPageBuilder.GroupTableOfContentsName">
            <summary>
            Gets the name of the "Table of Contents" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NReviewProofingGroupBuilder">
            <summary>
            Creates the rich text "Proofing" ribbon group of the "Review" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReviewProofingGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReviewProofingGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NReviewTabPageBuilder">
            <summary>
            Creates the rich text "Review" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReviewTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NReviewTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NReviewTabPageBuilder.ReviewProofingGroupBuilder">
            <summary>
            The review proofing group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NReviewTabPageBuilder.GroupProofingName">
            <summary>
            The name of the "Proofing" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NViewShowGroupBuilder">
            <summary>
            Creates the rich text "Show" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewShowGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewShowGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NViewTabPageBuilder">
            <summary>
            Creates the rich text "View" ribbon tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NViewTabPageBuilder.ViewViewGroupBuilder">
            <summary>
            The view view group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NViewTabPageBuilder.ViewShowGroupBuilder">
            <summary>
            The view show group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NViewTabPageBuilder.ViewZoomGroupBuilder">
            <summary>
            The view zoom group builder
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NViewTabPageBuilder.GroupViewName">
            <summary>
            The name of the "View" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NViewTabPageBuilder.GroupShowName">
            <summary>
            The name of the "Show" ribbon group.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NViewTabPageBuilder.GroupZoomName">
            <summary>
            The name of the "Zoom" ribbon group.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NViewViewGroupBuilder">
            <summary>
            Creates the rich text "View" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewViewGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewViewGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Creates the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NViewZoomGroupBuilder">
            <summary>
            Creates the rich text "Zoom" ribbon group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewZoomGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NViewZoomGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NRichTextRibbonTabContextCommandSource">
            <summary>
            A command source for the rich text ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonTabContextCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonTabContextCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonTabContextCommandSource.CreateDefaultTooltipContent">
            <summary>
            Overriden to return null in order to not have tooltip inherited by all elements in the ribbon without tooltip.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NRichTextRibbonTabContextCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the visibility of ribbon tab page groups.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NRichTextRibbonTabContextCommandSource.NRichTextRibbonTabContextCommandSourceSchema">
            <summary>
            Schema associated with NRichTextRibbonTabContextCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableDesignTableStyleGroupBuilder">
            <summary>
            Creates the rich text "Table Style" ribbon group of the "Table - Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTableStyleGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.UI.NTableDesignTableStyleGroupBuilder.DialogLauncherButtonCommand">
            <summary>
            Overriden to return the rich text edit styles command.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTableStyleGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTableStyleGroupBuilder.CreateRibbonGallery(Nevron.Nov.Graphics.NImage,Nevron.Nov.UI.NTablePicker,Nevron.Nov.UI.NRibbonGalleryCommandSource)">
            <summary>
            Creates a ribbon gallery. Overriden to set the MinimumPopupColumnCount and the ColumnCountStep
            of the gallery to the number of columns of the given table picker.
            </summary>
            <param name="icon"></param>
            <param name="tablePicker"></param>
            <param name="commandSource"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableDesignTableStyleOptionsGroupBuilder">
            <summary>
            Creates the rich text "Table Style Options" ribbon group of the "Table - Design" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTableStyleOptionsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTableStyleOptionsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableDesignTabPageBuilder">
            <summary>
            Creates the rich text "Table - Design" ribbon tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableDesignTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableLayoutAlignmentGroupBuilder">
            <summary>
            Creates the rich text "Alignment" ribbon group of the "Table - Layout" tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutAlignmentGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutAlignmentGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableLayoutMergeGroupBuilder">
            <summary>
            Creates the rich text "Merge" ribbon group of the "Table - Layout" ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutMergeGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutMergeGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutMergeGroupBuilder.CreateRibbonCollapsiblePanel">
            <summary>
            Creates a ribbon collapsible panel.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableLayoutRowsAndColumnsGroupBuilder">
            <summary>
            Creates the rich text "Rows &amp; Columns" ribbon group of the "Table - Layout" ribbon tab.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutRowsAndColumnsGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutRowsAndColumnsGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableLayoutTableGroupBuilder">
            <summary>
            Creates the rich text "Table" ribbon group of the "Table - Layout" ribbon tab..
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutTableGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutTableGroupBuilder.AddRibbonGroupItems(Nevron.Nov.UI.NRibbonGroupItemCollection)">
            <summary>
            Adds the ribbon group items.
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableLayoutTabPageBuilder">
            <summary>
            Creates the rich text "Table - Layout" ribbon tab page.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutTabPageBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableLayoutTabPageBuilder.AddRibbonGroupBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonGroupBuilder})">
            <summary>
            Adds the ribbon group builders.
            </summary>
            <param name="ribbonGroupBuilders"></param>
        </member>
        <member name="T:Nevron.Nov.Text.UI.NTableTabPageGroupBuilder">
            <summary>
            Creates the rich text "Table" ribbon tab page group.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableTabPageGroupBuilder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.UI.NTableTabPageGroupBuilder.AddTabPageBuilders(Nevron.Nov.UI.NCommandBuilderCollection{Nevron.Nov.UI.NRibbonTabPageBuilder})">
            <summary>
            Adds the tab page builders.
            </summary>
            <param name="tabPageBuilders"></param>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NTableTabPageGroupBuilder.TabPageTableDesignName">
            <summary>
            The name of the "Design" tab page.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.UI.NTableTabPageGroupBuilder.TabPageTableLayoutName">
            <summary>
            The name of the "Layout" tab page.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSpellSuggestionMenuItem">
            <summary>
            A menu item that shows a spell check suggestion.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSpellSuggestionMenuItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSpellSuggestionMenuItem.#ctor(System.String,Nevron.Nov.Text.NSelection,Nevron.Nov.Graphics.NRangeI)">
            <summary>
            Creates a new spell check suggestion menu item for the given text inline
            and the specified suggestion.
            </summary>
            <param name="suggestion">The spell suggestion shown by this item.</param>
            <param name="selection">The selection object to work with inline this menu item is meant for.</param>
            <param name="wordRange">The char indexes range.</param>
        </member>
        <member name="P:Nevron.Nov.Text.NSpellSuggestionMenuItem.Suggestion">
            <summary>
            Gets/Sets the spell suggestion this menu item represents.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSpellSuggestionMenuItem.OnPopupQueryStayOpen">
            <summary>
            Called when the popup queries whether to stay opened.
            This implementation returns true if the popup is active or has active descendant windows.
            </summary>
            <returns>true if the popup should stay opened.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSpellSuggestionMenuItem.OnClick">
            <summary>
            Called when the spell suggestion menu item is clicked.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NSpellSuggestionMenuItem.NSpellSuggestionMenuItemSchema">
            <summary>
            Schema associated with NSpellSuggestionMenuItem.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDataSourceBuilderChainTask">
            <summary>
            Base class for data source builder chain tasks.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDataSourceBuilderTask">
            <summary>
            Base class for data source builder tasks.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NSendEmailDialog">
            <summary>
            A dialog for configuring email send options for mail merge "Merge &amp; Send" operation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.Name">
            <summary>
            Gets/Sets the name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.FromEmailAddress">
            <summary>
            Gets/Sets the from e-mail address.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.FromEmailPassword">
            <summary>
            Gets/Sets the from e-mail password.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.FromEmailHost">
            <summary>
            Gets/Sets the from e-mail host.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.FromEmailPort">
            <summary>
            Gets/Sets the from e-mail port. Returns -1 if port is not entered.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.UseDefaultCredentials">
            <summary>
            Gets/Sets whether to use default credentials or not.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.EnableSsl">
            <summary>
            Gets/Sets whether the outgoing mail server uses SSL connection.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.ToEmailFieldName">
            <summary>
            Gets/Sets the to email field name.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.MessageSubject">
            <summary>
            Gets/Sets the message subject.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NSendEmailDialog.MessageBody">
            <summary>
            Gets/Sets the message body.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.Initialize(Nevron.Nov.Text.NMailMerge)">
            <summary>
            Initializes this dialog using the given mail merge object.
            </summary>
            <param name="mailMerge"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.OnClosing">
            <summary>
            Called when the window is about to be closed. Validates the user input
            and cancels the closing if it's invalid and the user has clicked the OK button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.CreateContent">
            <summary>
            Creates the content of this dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.CreateFromGroupBox">
            <summary>
            Creates the From group box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.CreateToGroupBox">
            <summary>
            Creates the To group box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NSendEmailDialog.CreateMessageGroupBox">
            <summary>
            Creates the message group box.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NSendEmailDialog.NSendEmailDialogSchema">
            <summary>
            Schema associated with NSendEmailDialog.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NGuideline">
            <summary>
            Serves as base class for horizontal and vertical guidelines.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NGuideline.CanClip">
            <summary>
            Returns true.
            </summary>
            <returns>Returns true.</returns>
        </member>
        <member name="M:Nevron.Nov.Text.NGuideline.GetClip">
            <summary>
            Creates the clip region of the visual (in local coordinates).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NGuideline.GetDisplayBounds">
            <summary>
            Gets the bounds of the guideline in the page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NGuideline.Coordinate">
            <summary>
            Gets or sets the coordinate of the guideline
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NGuideline.Stroke">
            <summary>
            Gets or sets the coordinate of the guideline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGuideline.NGuidelineSchema">
            <summary>
            Schema associated with NGuideline
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGuideline.CoordinateProperty">
            <summary>
            Reference to the coordinate property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NGuideline.StrokeProperty">
            <summary>
            Reference to the Stroke property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHorizontalGuideline">
            <summary>
            NHorizontalGuideline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHorizontalGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHorizontalGuideline.GetDisplayBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHorizontalGuideline.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NHorizontalGuideline.NHorizontalGuidelineSchema">
            <summary>
            Schema associated with NHorizontalGuideline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NVerticalGuideline">
            <summary>
            NVerticalGuideline
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVerticalGuideline.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVerticalGuideline.GetDisplayBounds">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NVerticalGuideline.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Performs the element pre-children custom paint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NVerticalGuideline.NVerticalGuidelineSchema">
            <summary>
            Schema associated with NVerticalGuideline
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBookmarkNamePropertyEditor">
            <summary>
            The NBookmarkNamePropertyEditor class is assigned to the name property of a hyperlink.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkNamePropertyEditor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkNamePropertyEditor.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkNamePropertyEditor.OnEditedNodeChanged(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Overriden to check for the BookmarkNamesChangedEvent and refill the combo if needed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NBookmarkNamePropertyEditor.CreateControl">
            <summary>
            Overriden to create a stack panel
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NBookmarkNamePropertyEditor.NBookmarkNamePropertyEditorSchema">
            <summary>
            Schema associated with NMultiLengthPropertyEditor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NMarginsLengthPropertyEditor">
            <summary>
            Represents a property editor that allows to edit a margins structure with unit information
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMarginsLengthPropertyEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMarginsLengthPropertyEditor.Minimum">
            <summary>
            Gets / sets the min value of the property editor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NMarginsLengthPropertyEditor.Maximum">
            <summary>
            Gets / sets the max value of the property editor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMarginsLengthPropertyEditor.OnUpdateFromEditedNode">
            <summary>
            Overriden to update this property editor from its edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NMarginsLengthPropertyEditor.CreateControl">
            <summary>
            Creates the UI control for this editor.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NMarginsLengthPropertyEditor.NMarginsLengthPropertyEditorSchema">
            <summary>
            Schema associated with NMarginsFLengthPropertyEditor.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMarginsLengthPropertyEditor.MinimumProperty">
            <summary>
            Reference to the min value property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NMarginsLengthPropertyEditor.MaximumProperty">
            <summary>
            Reference to the max value property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NFirstLineIndentRulerMark">
            <summary>
            An HRuler mark, that is used to modify the first line indent of a block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NFirstLineIndentRulerMark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NFirstLineIndentRulerMark.NFirstLineIndentRulerMarkSchema">
            <summary>
            Schema associated with NFirstLineIndentRulerMark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHangingIndentRulerMark">
            <summary>
            An HRuler mark, that is used to modify the hanging indent of a block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHangingIndentRulerMark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHangingIndentRulerMark.NHangingIndentRulerMarkSchema">
            <summary>
            Schema associated with NHangingIndentRulerMark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NLeftMarginRulerMark">
            <summary>
            An HRuler mark, that is used to modify the right margin of blocks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NLeftMarginRulerMark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NLeftMarginRulerMark.NLeftMarginRulerMarkSchema">
            <summary>
            Schema associated with NLeftMarginRulerMark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRightMarginRulerMark">
            <summary>
            An HRuler mark, that is used to modify the right margin of blocks
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRightMarginRulerMark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRightMarginRulerMark.NRightMarginRulerMarkSchema">
            <summary>
            Schema associated with NRightMarginRulerMark
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTabStopRulerMark">
            <summary>
            An HRuler mark, that is used to modify an explicit tab stop of a block
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStopRulerMark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTabStopRulerMark.TabStopAlignment">
            <summary>
            Gets / sets the tab stop alignment
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStopRulerMark.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStopRulerMark.OnShowTabStopProperties(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when an add/remove menu item was clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTabStopRulerMark.OnDeleteTabStop(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when an add/remove menu item was clicked
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStopRulerMark.NTabStopRulerMarkSchema">
            <summary>
            Schema associated with NTabStopRulerMark.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTabStopRulerMark.TabStopAlignmentProperty">
            <summary>
            Reference to the TabStopAlignment property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NHRuler">
            <summary>
            Represents the horizontal ruler of a rich text editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHRuler.Lane">
            <summary>
            Gets the ruler lanes panel
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.Nevron#Nov#UI#INThumbAxis#GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value
            </summary>
            <param name="UxpC"></param>
            <param name="vxpC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.MeasureContent(System.Boolean)">
            <summary>
            Measures the element's content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.BuildBlockLane(Nevron.Nov.Text.NBlock)">
            <summary>
            Builds the 
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NHRuler.CanReuseBuildBlockLaneMarks">
            <summary>
            Determines whether the 
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NHRuler.NHRulerSchema">
            <summary>
            Schema associated with NHRuler
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NHRuler.LaneChild">
            <summary>
            Reference to the Lane child
            </summary>/
        </member>
        <member name="T:Nevron.Nov.Text.NHRulerLane">
            <summary>
            Represents a lane from the horizontal ruler.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHRulerLane.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NHRulerLane.OwnerRuler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NHRulerLane.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <remarks>
            Override to paint the HRuler scale
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NHRulerLane.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.Text.NHRulerLane.NHRulerLaneSchema">
            <summary>
            Schema associated with NHRulerLane
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerRangeTextElementInfo">
            <summary>
            Serves as base class for ruler range text element infos
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerTextElementInfo">
            <summary>
            Serves as base class for element info objects that text elements dynamically provide to rulers.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.INVRulerTextElement">
            <summary>
            Implemented by text elements, which can be represented on the VRuler.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.INVRulerTextElement.AccumulateVRulerInfos(Nevron.Nov.DataStructures.NList{Nevron.Nov.Text.NRulerRangeTextElementInfo},Nevron.Nov.Text.NBlock)">
            <summary>
            Accumulates the VRulerInfo objects for this element to the provided list.
            </summary>
            <param name="infos"></param>
            <param name="paperPage"></param>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerMark">
            <summary>
            A ruler item, that draws a specific mark and which the user can drag.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerMark.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerMark.Position">
            <summary>
            Gets or sets the position of the ruler mark (in DocumentRoot coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerMark.PinAlignment">
            <summary>
            The alignment of the ruler mark pin relatively to the ruler lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerMark.LocPinAlignment">
            <summary>
            The alignment of the local pin relatively to the mark size.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerMark.NRulerMarkSchema">
            <summary>
            Schema associated with NRulerMark
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerMark.PositionProperty">
            <summary>
            Reference to the Position property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerMark.PinAlignmentProperty">
            <summary>
            Reference to the PinAlignment property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerMark.LocPinAlignmentProperty">
            <summary>
            Reference to the LocPinAlignment property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerMarkCollection">
            <summary>
            A collection of ruler mark items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerMarkCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerMarkCollection.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list.
            This implementation accumulates the children of this this element, which implement the INVisual interface.
            </summary>
            <param name="list"></param>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerMarkCollection.NRulerMarkCollectionSchema">
            <summary>
            Schema associated with NRulerMarkCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerRange">
            <summary>
            A ruler lane item, that represents a range.
            </summary>
            <remarks>
            Ruler ranges are automatically scaled by the V or H ruler lanes respectively, according to their Start and End positions, that are in DocumentRoot coordinates.
            That is why ruler ranges are used to hight text element projections in the respective dimension.
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerRange.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerRange.StartPosition">
            <summary>
            Gets or sets the start position of the range (in DocumentRoot coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerRange.EndPosition">
            <summary>
            Gets or sets the end position of the range (in DocumentRoot coordinates)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerRange.StartSpanPercent">
            <summary>
            Gets or sets the start span percent of the range (by default 0)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerRange.EndSpanPercent">
            <summary>
            Gets or sets the end position of the range (by default 100)
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerRange.NRulerRangeSchema">
            <summary>
            Schema associated with NRulerRange
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerRange.StartPositionProperty">
            <summary>
            Reference to the StartPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerRange.EndPositionProperty">
            <summary>
            Reference to the EndPosition property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerRange.StartSpanPercentProperty">
            <summary>
            Reference to the StartSnapPercent property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerRange.EndSpanPercentProperty">
            <summary>
            Reference to the EndSnanPercent property
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerRangeCollection">
            <summary>
            A collection of ruler range items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerRangeCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerRangeCollection.OnChildrenChanged(Nevron.Nov.Dom.NChildChangeData)">
            <summary>
            Called when a child was inserted or removed from this node.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerRangeCollection.NRulerRangeCollectionSchema">
            <summary>
            Schema associated with NRulerRangeCollection
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRuler">
            <summary>
            Represents a rich text editor ruler. Serves as base class for horizontal and vertical rulers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRuler.StepMode">
            <summary>
            Controls the mode in which the X step is determined. By default set to Normal. 
            If set to Fixed the FixedStep property defines a constant step, 
            which is independent from the page zoom factor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRuler.FixedStep">
            <summary>
            Specifies the X step when the XStepMode is set to Fixed (in page logical units)
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRuler.TicksStroke">
            <summary>
            Controls the appearance of the major grid lines
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRuler.MinorTicksCount">
            <summary>
            Gets or sets the minor ticks count
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRuler.Unit">
            <summary>
            Gets/Sets the unit of this ruler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRuler.OwnerRichText">
            <summary>
            Gets the rich text that owns this lane.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.AppendContextMenuItems(Nevron.Nov.UI.NMenu,System.Boolean)">
            <summary>
            Appends the context menu items related to this widget.
            </summary>
            <param name="menu"></param>
            <param name="readOnly"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.OnVisibilityChanged(Nevron.Nov.Dom.NValueChangeData)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Handles the MouseDown event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.OnEditRulerMenuItemClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the "Edit Ruler..." menu item has been clicked.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.OnEditRulerDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the "Edit Ruler" dialog has been closed.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRuler.NRulerSchema">
            <summary>
            Schema associated with NRuler.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRuler.StepModeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRuler.FixedStepProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRuler.TicksStrokeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRuler.MinorTicksCountProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRuler.UnitProperty">
            <summary>
            Reference to the Unit property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRuler.NRulerDesigner">
            <summary>
            Designer for rulers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.NRulerDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRuler.NRulerDesigner.GetChildrenBrowsable(Nevron.Nov.Dom.NNode)">
            <summary>
            Gets whether the children of the given node should be browsable.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerLane">
            <summary>
            Represents a lane from a ruler, which is a widget composed of ruler ranges and ruler marks.
            Serves as base class for horizontal and vertical lanes
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerLane.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerLane.CanClip">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerLane.OwnerRichText">
            <summary>
            Gets the rich text that owns this lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerLane.Ranges">
            <summary>
            Gets the ranges of this lane.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRulerLane.Marks">
            <summary>
            Gets the marks of this lane.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerLane.NRulerLaneSchema">
            <summary>
            Schema associated with NRulerLane
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerLane.RangesChild">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerLane.MarksChild">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRulerLanesPanel`1">
            <summary>
            A collection of ruler lanes, that serves as base class for horizontal and vertical ruler lane panels.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerLanesPanel`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerLanesPanel`1.GetLayout">
            <summary>
            Creates a new layout and configures it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerLanesPanel`1.CreateLayout">
            <summary>
            Overriden to create a new instance of the NStackLayout
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRulerLanesPanel`1.GetOrientation">
            <summary>
            Must override to return the orientation of the lanes
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NRulerLanesPanel`1.NRulerLanesPanelSchema">
            <summary>
            Schema associated with NRuler
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NVProjectionRulerRange">
            <summary>
            A vertical ruler range, that is used to highlight the projection of the currently visible text elements on the VRuler.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVProjectionRulerRange.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NVProjectionRulerRange.OwnerVRuler">
            <summary>
            Gets the owner VRuler
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVProjectionRulerRange.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVProjectionRulerRange.OnMouseIn(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.InEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVProjectionRulerRange.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Default handler for the NMouse.OutEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NVProjectionRulerRange.NVProjectionRulerRangeSchema">
            <summary>
            Schema associated with NVProjectionRulerRange
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NVRuler">
            <summary>
            Represents the vertical ruler of a rich text editor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.Nevron#Nov#UI#INThumbAxis#GetThumbValue(Nevron.Nov.UI.NThumb,Nevron.Nov.Graphics.NPoint)">
            <summary>
            Given a thumb position in thumb axis coordinates, determines the thumb value
            </summary>
            <param name="KAQC"></param>
            <param name="lAQC"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Text.NVRuler.Lane">
            <summary>
            Gets the ruler lane
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NVRuler.ResizeArea">
            <summary>
            Gets or sets the area of the ruler which can be used to resize it.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NVRuler.IsResized">
            <summary>
            Gets whether the ruler is currently being resized.
            The value of this property is automatically updated by Nevron.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.GetPadding">
            <summary>
            Overriden to incorporate the ResizeArea in the box padding.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.DownEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Default handler for the NMouse.MoveEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Default handler for the NMouse.UpEvent event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.OnLostMouseCapture(Nevron.Nov.UI.NMouseCaptureChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.OnKeyDown(Nevron.Nov.UI.NKeyEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Overriden to make the content occupy the content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRuler.MeasureContent(System.Boolean)">
            <summary>
            Overriden to return the desired size of the content.
            </summary>
            <param name="defaultMeasure"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NVRuler.NVRulerSchema">
            <summary>
            Schema associated with NVRuler
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NVRuler.LaneChild">
            <summary>
            Reference to the Laness child
            </summary>/
        </member>
        <member name="F:Nevron.Nov.Text.NVRuler.IsResizedProperty">
            <summary>
            Reference to the IsResized property
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NVRuler.ResizeAreaProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NVRulerLane">
            <summary>
            Represents a lane from the horizontal ruler.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVRulerLane.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NVRulerLane.OwnerRuler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NVRulerLane.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint 
            </summary>
            <remarks>
            Override to paint the VRuler scale
            </remarks>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NVRulerLane.ArrangeContent(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            Arranges the content of the element within the specified content area.
            </summary>
            <param name="ca">The content area.</param>
        </member>
        <member name="F:Nevron.Nov.Text.NVRulerLane.NVRulerLaneSchema">
            <summary>
            Schema associated with NVRulerLane
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NBorderStyleComboBox">
            <summary>
            A combo box for selecting a border style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NBorderStyleComboBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NBorderStyleComboBox.SelectedBorderStyle">
            <summary>
            Gets/Sets the selected border style.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NBorderStyleComboBox.NBorderStyleComboBoxSchema">
            <summary>
            Schema associated with NBorderStyleComboBox.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NColumnPageLayoutDropDown">
            <summary>
            A drop down that lets the user select a column page layout (from 1 to 4 columns).
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDown.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="E:Nevron.Nov.Text.NColumnPageLayoutDropDown.ColumnCountChanged">
            <summary>
            Occurs when the ColumnCount property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NColumnPageLayoutDropDown.SelectedColumnCount">
            <summary>
            Gets or sets the value of the SelectedColumnCount property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDown.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened. Creates the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDown.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDown.OnDeepCopied(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called after the node is deeply copied from the specified source node.
            </summary>
            <param name="source">The source node.</param>
            <param name="context">Context for deep cloning.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDown.UpdatePreview">
            <summary>
            Updates the button preview.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutDropDown.NColumnPageLayoutDropDownSchema">
            <summary>
            Schema associated with NColumnPageLayoutDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutDropDown.SelectedColumnCountProperty">
            <summary>
            Reference to the SelectedColumnCount property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutDropDown.PreviewSizeProperty">
            <summary>
            Reference to the PreviewSize property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource">
            <summary>
            Command source for <see cref="T:Nevron.Nov.Text.NColumnPageLayoutDropDown"/> widgets.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.OnColumnCountChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the selected selected column count of the column page layout drop down has changed.
            Executes the command with the currently selected column count.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutDropDownCommandSource.NColumnPageLayoutDropDownCommandSourceSchema">
            <summary>
            Schema associated with NColumnPageLayoutDropDownCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NColumnPageLayoutPickerCell">
            <summary>
            A cell of a column page layout picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutPickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutPickerCell.#ctor(System.Int32)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="columnCount"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NColumnPageLayoutPickerCell.ColumnCount">
            <summary>
            Gets or sets the value of the ColumnCount property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NColumnPageLayoutPickerCell.ColumnSpacingPercent">
            <summary>
            Gets or sets the spacing between the columns as a percentage from the total cell width. By default set to 5%.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutPickerCell.OnPaintBackground(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Paints the background of the box, which is performed before the custom painting in OnPrePaint.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NColumnPageLayoutPickerCell.SetupContentAreaFill(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Overriden to set a Filling to the paint visitor, that will be used to fill the content area of the widget.
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutPickerCell.NColumnPageLayoutPickerCellSchema">
            <summary>
            Schema associated with NColumnPageLayoutPickerCell.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutPickerCell.ColumnCountProperty">
            <summary>
            Reference to the ColumnCount property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NColumnPageLayoutPickerCell.ColumnSpacingPercentProperty">
            <summary>
            Reference to the ColumnSpacingPercent property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDataRecordSelector">
            <summary>
            A widget that lets the user select a data record.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelector.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="E:Nevron.Nov.Text.NDataRecordSelector.SelectedIndexChanged">
            <summary>
            Occurs when the selected index property has changed.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDataRecordSelector.SelectedIndex">
            <summary>
            Gets/Sets the currently selected record index.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDataRecordSelector.Minimum">
            <summary>
            Gets/Sets the value of the Minimum property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NDataRecordSelector.Maximum">
            <summary>
            Gets/Sets the value of the Maximum property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDataRecordSelector.NDataRecordSelectorSchema">
            <summary>
            Schema associated with NDataRecordSelector.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDataRecordSelector.SelectedIndexProperty">
            <summary>
            Reference to the SelectedIndex property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDataRecordSelector.MinimumProperty">
            <summary>
            Reference to the Minimum property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NDataRecordSelector.MaximumProperty">
            <summary>
            Reference to the Maximum property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NDataRecordSelectorCommandSource">
            <summary>
            A command source that can be applied to data record selectors. It subsrcibes to the
            NDataRecordSelector.SelectedIndexChanged event to execute the command with a parameter
            equal to selected data record index.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated
            at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element SelectedIndex property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NDataRecordSelectorCommandSource.OnDataRecordSelectorSelectedIndexChanged(Nevron.Nov.Dom.NValueChangeEventArgs)">
            <summary>
            Called when the data record selector selected index has changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NDataRecordSelectorCommandSource.NDataRecordSelectorCommandSourceSchema">
            <summary>
            Schema associated with NDataRecordSelectorCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStylePicker">
            <summary>
            Base class for all rich text style pickers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePicker.#ctor">
            <summary>
            Creates a rich text style picker and initializes it with the predefined styles
            supported by this picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePicker.#ctor(Nevron.Nov.Text.NRichTextStyleCollection)">
            <summary>
            Creates a rich text style picker and initializes it with the styles from the given
            rich text style collection.
            </summary>
            <param name="styles"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStylePicker.SelectedStyle">
            <summary>
            Gets/Sets the currently selected rich text style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePicker.CreateCell(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Creates a cell for this picker.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePicker.GetPredefinedStyles">
            <summary>
            Gets the predefined styles for this picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePicker.ShouldBeVisible(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Gets whether the given style should be displayed in this picker.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStylePicker.NRichTextStylePickerSchema">
            <summary>
            Schema associated with NRichTextStylePicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStylePickerCell">
            <summary>
            Base class for all text style picker cells.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePickerCell.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePickerCell.#ctor(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="style"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStylePickerCell.Style">
            <summary>
            Gets/Sets the style associated with this text style picker cell.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStylePickerCell.EditorWindowTitle">
            <summary>
            Gets the title of the editor window, which is shown for editing a style or creating a new one.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePickerCell.CreatePreview">
            <summary>
            Creates a preview of the style represented by this cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStylePickerCell.OnMouseUp(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to show a context menu.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStylePickerCell.NRichTextStylePickerCellSchema">
            <summary>
            Schema associated with NRichTextStylePickerCell.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStyleSplitButton">
            <summary>
            Base class for all rich text style split buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NRichTextStyleSplitButton.SelectedStyle">
            <summary>
            Gets/Sets the value of the SelectedStyle property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.CreateActionButton">
            <summary>
            Overriden to perform the default initialization of the ActionButton content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.CreateCommandSource(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a command source for this split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.CreatePopupContent">
            <summary>
            Creates the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to not hide the popup content when the user has right clicked a style picker cell.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.OnDeepCopied(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NDomDeepCopyContext)">
            <summary>
            Called after the node is deeply copied from the specified source node.
            </summary>
            <param name="source">The source node.</param>
            <param name="context">Context for deep cloning.</param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.CreateActionButtonPreview">
            <summary>
            Creates the preview for the action button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.GetNoStyleActionButtonImage">
            <summary>
            Gets the image of the action button when no style is selected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.CreateStylePicker">
            <summary>
            Creates the style picker for this split button.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButton.UpdateButtonPreview(Nevron.Nov.UI.NSplitButtonActionButton)">
            <summary>
            Updates the button preview.
            </summary>
            <param name="actionButton"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyleSplitButton.NRichTextStyleSplitButtonSchema">
            <summary>
            Schema associated with NRichTextStyleSplitButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource">
            <summary>
            Command source associated with rich text style split buttons.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.#ctor(Nevron.Nov.UI.NCommand)">
            <summary>
            Initializing cnostructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element selected style.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.OnButtonClick(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the owner split button has been clicked. Calls the ExecuteCommand method with an empty parameter.
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NRichTextStyleSplitButtonCommandSource.NRichTextStyleSplitButtonCommandSourceSchema">
            <summary>
            Schema associated with NRichTextStyleSplitButtonCommandSource.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableStylePicker">
            <summary>
            A picker for selecting a table style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStylePicker.#ctor">
            <summary>
            Creates a rich text style picker and initializes it with the predefined styles
            supported by this picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStylePicker.#ctor(Nevron.Nov.Text.NRichTextStyleCollection)">
            <summary>
            Creates a rich text style picker and initializes it with the table styles from the given
            rich text style collection.
            </summary>
            <param name="styles"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStylePicker.StyleOptions">
            <summary>
            Gets/Sets the value of the StyleOptions property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStylePicker.CreateCell(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Creates a cell for this picker.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStylePicker.GetPredefinedStyles">
            <summary>
            Gets the predefined styles for this picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStylePicker.ShouldBeVisible(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Gets whether the given style should be displayed in this picker.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStylePicker.NTableStylePickerSchema">
            <summary>
            Schema associated with NTableStylePicker.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStylePicker.StyleOptionsProperty">
            <summary>
            Reference to the StyleOptions property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableStyleSplitButton">
            <summary>
            Split button for selecting a table style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NTableStyleSplitButton.StyleOptions">
            <summary>
            Gets/Sets the value of the StyleOptions property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleSplitButton.CreateCommandSource(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a command source for this split button and associates it with the given command.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleSplitButton.CreateActionButtonPreview">
            <summary>
            Creates the action button preview.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleSplitButton.GetNoStyleActionButtonImage">
            <summary>
            Gets the action button image if text style is not set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableStyleSplitButton.CreateStylePicker">
            <summary>
            Creates the style picker.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyleSplitButton.NTableStyleSplitButtonSchema">
            <summary>
            Schema associated with NTableStyleSplitButton.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableStyleSplitButton.StyleOptionsProperty">
            <summary>
            Reference to the StyleOptions property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextStylePicker">
            <summary>
            A picker for selecting a text style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStylePicker.#ctor">
            <summary>
            Creates a rich text style picker and initializes it with the predefined styles
            supported by this picker.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStylePicker.#ctor(Nevron.Nov.Text.NRichTextStyleCollection)">
            <summary>
            Creates a rich text style picker and initializes it with the styles from the given
            rich text style collection.
            </summary>
            <param name="styles"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStylePicker.CreateCell(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Creates a cell for this picker.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStylePicker.GetPredefinedStyles">
            <summary>
            Gets the predefined styles for this picker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStylePicker.ShouldBeVisible(Nevron.Nov.Text.NRichTextStyle)">
            <summary>
            Gets whether the given style should be displayed in this picker.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTextStylePicker.NTextStylePickerSchema">
            <summary>
            Schema associated with NTextStylePicker.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextStyleSplitButton">
            <summary>
            A text button for selecting a text style.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStyleSplitButton.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStyleSplitButton.CreateActionButtonPreview">
            <summary>
            Creates the action button preview.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStyleSplitButton.GetNoStyleActionButtonImage">
            <summary>
            Gets the action button image if text style is not set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTextStyleSplitButton.CreateStylePicker">
            <summary>
            Creates the style picker.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTextStyleSplitButton.NTextStyleSplitButtonSchema">
            <summary>
            Schema associated with NTextStyleSplitButton.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTableSizeDropDown">
            <summary>
            A drop down for selecting a table size.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSizeDropDown.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSizeDropDown.#ctor(System.Object)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="content"></param>
        </member>
        <member name="E:Nevron.Nov.Text.NTableSizeDropDown.InsertTableMenuItemClick">
            <summary>
            Occurs when "Insert Table..." menu item has been clicked.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSizeDropDown.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSizeDropDown.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTableSizeDropDown.CreatePopupContent">
            <summary>
            Creates the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSizeDropDown.NTableSizeDropDownSchema">
            <summary>
            Schema associated with NTableSizeDropDown.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTableSizeDropDown.InsertTableMenuItemClickEvent">
            <summary>
            Reference to the InsertTableMenuItemClick event.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NCustomDialogWindow">
            <summary>
            A custom dialog window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCustomDialogWindow.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCustomDialogWindow.#ctor(Nevron.Nov.Text.NCustomDialogWindow)">
            <summary>
            Copy constructor.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Nevron.Nov.Text.NCustomDialogWindow.Editor">
            <summary>
            Gets or sets the editor that is hosted in this dialog window.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Text.NCustomDialogWindow.ButtonStrip">
            <summary>
            Gets the button strip shown at the bottom of this dialog window.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCustomDialogWindow.OnOpened">
            <summary>
            Called when the window is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NCustomDialogWindow.OnClosed">
            <summary>
            Called when the custom dialog window is closed.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NCustomDialogWindow.NCustomDialogWindowSchema">
            <summary>
            Schema associated with NCustomDialogWindow.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Text.NTextUIThemePlugin">
            <summary>
            A theme plugin that adds rules for the Nevron rich text control.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.CreateStyles(Nevron.Nov.UI.NUITheme)">
            <summary>
            Creates the style sheet rules for this theme plugin.
            </summary>
            <param name="uiTheme"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.CreateContexts">
            <summary>
            Creates the contexts of this theme plugin.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.CreateRulerStyles">
            <summary>
            Creates the styles for the rulers.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.CreateRuleLaneStyles">
            <summary>
            Creates the styles for the rule lanes.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.CreateTablePickerStyles">
            <summary>
            Creates the styles for special UI widgets used by the rich text commands and dialogs.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.CreateContextMenuStyles">
            <summary>
            Creates the context menu styles.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.AddTabStopSymbol(Nevron.Nov.Dom.NThemeSkin,Nevron.Nov.Text.ENTabStopAlignment)">
            <summary>
            Adds a tab stop symbol to the given style.
            </summary>
            <param name="skin"></param>
            <param name="tabStopAlignment"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.TabStopLeftSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Adds a tab stop left symbol to the given style.
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.TabStopRightSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Adds a tab stop right symbol to the given style.
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.TabStopCenterSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Adds a tab stop center symbol to the given style.
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
        </member>
        <member name="M:Nevron.Nov.Text.NTextUIThemePlugin.TabStopDecimalSymbol(Nevron.Nov.Dom.NThemeStyle,Nevron.Nov.Graphics.NSize,Nevron.Nov.Dom.NProperty,Nevron.Nov.Graphics.NColor)">
            <summary>
            Adds a tab stop decimal symbol to the given style.
            </summary>
            <param name="style"></param>
            <param name="size"></param>
            <param name="symbolProperty"></param>
            <param name="fillColor"></param>
        </member>
        <member name="F:Nevron.Nov.Text.NTextUIThemePlugin.UITheme">
            <summary>
            The theme this plugin should add rules to.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Text.NTextUIThemePlugin.InRichTextCellAlignmentMenuItemContext">
            <summary>
            Matches a widget, direct child of a rich text cell alignment menu item.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.SWxb.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.SWxb.Extensions">
            <summary>
            Gets the possible file extnesions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.SWxb.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.SWxb.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.SWxb.OnUse">
            <summary>
            Called when the format is used.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.SWxb.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="tWxb"></param>
            <param name="UWxb"></param>
            <param name="vWxb"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.SWxb.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="WWxb"></param>
            <param name="xWxb"></param>
            <param name="YWxb"></param>
            <param name="Axxb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.Exxb.Extensions">
            <summary>
            Gets the possible file extnesions of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Exxb.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Exxb.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Exxb.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Exxb.OnUse">
            <summary>
            Called when the format is used.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Exxb.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="fxxb"></param>
            <param name="Gxxb"></param>
            <param name="hxxb"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.Exxb.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="Ixxb"></param>
            <param name="jxxb"></param>
            <param name="Kxxb"></param>
            <param name="lxxb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.Qxxb.Extensions">
            <summary>
            Gets the extension of the format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Qxxb.Mime">
            <summary>
            Gets the mime type.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.Qxxb.Name">
            <summary>
            Gets the name of the format.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Qxxb.OnUse">
            <summary>
            Called when the format is used
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Qxxb.LoadFromStreamCoreAsync(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            Loads a rich text document from the given HTML stream asynchronously.
            </summary>
            <param name="Sxxb"></param>
            <param name="txxb"></param>
            <param name="Uxxb"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Qxxb.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            Loads a rich text document from the given HTML stream. If the HTML contains links to external CSS files,
            this method will throw an exception. Use the <see cref="M:Nevron.Nov.Internal.Qxxb.LoadFromStreamCoreAsync(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)"/>
            to load HTML documents that contain links to external CSS files.
            </summary>
            <param name="vxxb"></param>
            <param name="Wxxb"></param>
            <param name="xxxb"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.Qxxb.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            Saves the given rich text document to the specified stream as HTML.
            </summary>
            <param name="Yxxb"></param>
            <param name="AYxb"></param>
            <param name="bYxb"></param>
            <param name="CYxb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.OYxb.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.OYxb.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.OYxb.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.OYxb.CanLoad">
            <summary>
            Returns true if the format can load a text document from stream
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.OYxb.OnUse">
            <summary>
            Called when the format is used.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.OYxb.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="pYxb"></param>
            <param name="QYxb"></param>
            <param name="rYxb"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OYxb.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="SYxb"></param>
            <param name="tYxb"></param>
            <param name="UYxb"></param>
            <param name="vYxb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.YYxb.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.YYxb.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.YYxb.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.YYxb.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.YYxb.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="AAYb"></param>
            <param name="bAYb"></param>
            <param name="CAYb"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.YYxb.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="dAYb"></param>
            <param name="EAYb"></param>
            <param name="fAYb"></param>
            <param name="GAYb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.KAYb.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.KAYb.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.KAYb.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.KAYb.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="QAYb"></param>
            <param name="rAYb"></param>
            <param name="SAYb"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.KAYb.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="tAYb"></param>
            <param name="UAYb"></param>
            <param name="vAYb"></param>
            <param name="WAYb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.EAfC.Filter(Nevron.Nov.Compression.NZipItem)">
            <summary>
            Determines whether the given item should be decompressed or not.
            Overriden to always return true.
            </summary>
            <param name="GAfC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EAfC.OnItemDecompressed(Nevron.Nov.Compression.NZipItem)">
            <summary>
            Called when a zip item has been decompressed.
            </summary>
            <param name="hAfC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MxfC.Equals(System.Object)">
            <summary>
            Checks whether this CSS class id list contains the same class ids
            the given one.
            </summary>
            <param name="OxfC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.MxfC.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.nAGC.Equals(System.Object)">
            <summary>
            Checks whether this HTML light element list contains the same
            HTML light elements as the given one.
            </summary>
            <param name="QAGC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.nAGC.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xrfC.WvfC.Compare(Nevron.Nov.Dom.NNode,Nevron.Nov.Dom.NNode)">
            <summary>
            Compares the given HTML table children and returns -1 if the first one should be
            before the second one in this child array of the table and 1 in the opposite case.
            </summary>
            <param name="xvfC"></param>
            <param name="YvfC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.Olnb.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.Olnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="plnb"></param>
            <param name="Qlnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.CMnb.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.CMnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="dMnb"></param>
            <param name="EMnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.fMnb.GetCommand">
            <summary>
            Gets the command associated with this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.fMnb.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            
            </summary>
            <param name="GMnb"></param>
            <param name="hMnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.tMnb.Create">
            <summary>
            Creates Nevron Writer's "File" menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.tMnb.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Adds the menu items.
            </summary>
            <param name="UMnb"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.xnnb.AddItems(Nevron.Nov.UI.NMenuItemCollection)">
            <summary>
            Add the items to the menu drop down.
            </summary>
            <param name="Ynnb"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.Gnnb.HelpButtonCommand">
            <summary>
            Gets the command that should be associated with the help button of the ribbon.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.nUIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="OUIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bvIC.GetBlockMargins(Nevron.Nov.Text.NBlock)">
            <summary>
            Gets the margins for the specified block
            </summary>
            <param name="GvIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bvIC.SetBlockMargins(Nevron.Nov.Text.NBlock,Nevron.Nov.Graphics.NMargins)">
            <summary>
            Sets the margins to the specified block
            </summary>
            <param name="hvIC"></param>
            <param name="IvIC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.KvIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Checks whether the batch can be executed.
            </summary>
            <param name="lvIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lWIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="MWIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rWIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="SWIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.vWIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="WWIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.vWIC.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog has been closed.
            </summary>
            <param name="xWIC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.UxIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="vxIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xxIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="YxIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EYIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="fYIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.hYIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="IYIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lYIC`1.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="nYIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.UYIC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="WYIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.UYIC.InitializeDialog(Nevron.Nov.Editors.NEditorWindow)">
            <summary>
            Initializes the given dialog.
            </summary>
            <param name="xYIC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.UYIC.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog window has been closed.
            </summary>
            <param name="YYIC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.WhMC.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog has been closed.
            </summary>
            <param name="YhMC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.jbjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="KbjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.tbjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="UbjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.fdjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="GdjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.IdjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="jdjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.IdjC.OnDialogClosed(Nevron.Nov.Dom.NEventArgs)">
            <summary>
            Called when the dialog has been closed.
            </summary>
            <param name="KdjC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MdjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="ndjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.jEjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="lEjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OEjC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="QEjC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WjMC.CanExecute(Nevron.Nov.Text.INRichTextView)">
            <summary>
            Returns true if the batch can be executed.
            </summary>
            <param name="YjMC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.fnMC.End">
            <summary>
            Marks the end of a cloning session.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.WvQC.Equals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
            <param name="pWQC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WvQC.GetHashCode">
            <summary>
            Returns the hash code of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WvQC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.KxQC.Equals(System.Object)">
            <summary>
            NInlineObstacleList
            </summary>
            <param name="pArC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.KxQC.GetHashCode">
            <summary>
            Returns the hash code of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.KxQC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rOSC.xOSC.CreateInstanceEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the specified node.
            </summary>
            <param name="YOSC">The node to edit, cannot be null.</param>
            <param name="ApSC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rOSC.xOSC.CreateStateEditor(Nevron.Nov.Dom.NNode,Nevron.Nov.Editors.NEditorContext)">
            <summary>
            Creates the editor, which must edit the state of the specified node.
            </summary>
            <param name="bpSC">The node to edit, cannot be null.</param>
            <param name="CpSC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.ndrC.OnUnregistered">
            <summary>
            Unregisters the page from the document.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.dhrC.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="IhrC"></param>
            <param name="hhrC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.rhnC.InvalidateParentMeasure(System.Object)">
            <summary>
            Invalidates the measure of element measure parent(s).
            </summary>
            <remarks>
            Pages don't invalidate thier parent
            </remarks>
        </member>
        <member name="M:Nevron.Nov.Internal.rhnC.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="YhnC"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.QSSC.Item(System.Int32)">
            <summary>
            Gets the page at the specified global page index
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.QUSC.Item(System.Int32)">
            <summary>
            Gets the page at the specified global page index
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.DoPrePaint(Nevron.Nov.Dom.NPaintVisitor)">
            <summary>
            Peforms the element pre children paint.
            </summary>
            <remarks>
            This implementation renders the element background and border background.
            </remarks>
            <param name="hjrC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.CreateBorderWall(Nevron.Nov.Dom.NDisplayVisitor)">
            <summary>
            
            </summary>
            <param name="IjrC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.OnUnregistered">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.lhrC.IsPooledForMeasure">
            <summary>
            Gets whether the element is pooled for measure validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.lhrC.IsMeasureValid">
            <summary>
            Gets whether the measure of the element is valid
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.InvalidateMeasure(System.Object)">
            <summary>
            Invalidates the element measure and pools the element for measure validation.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.ValidateMeasure">
            <summary>
            Called to validate the element measure
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.lhrC.IsPooledForArrange">
            <summary>
            Gets whether the element is pooled for arrange validation.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.lhrC.IsArrangeValid">
            <summary>
            Gets whether the arrange of the element is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.InvalidateArrange(System.Object)">
            <summary>
            Invalidates the element arrange
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lhrC.ValidateArrange">
            <summary>
            Called to arrange the element
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.dnrC.AccumulateDisplayChildren(Nevron.Nov.Dom.NDisplayVisitor,Nevron.Nov.DataStructures.NList{Nevron.Nov.Dom.NVisual})">
            <summary>
            Appends the displayable children of the node to the provided list
            </summary>
            <param name="SnrC"></param>
            <param name="rnrC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.vEOC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AEKC.Filter(Nevron.Nov.Dom.NNode)">
            <summary>
            Checks whether the given node is a non empty paragraph.
            </summary>
            <param name="bEKC"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.YMKC.Hyperlink">
            <summary>
            Gets/Sets the hyperlink of this hyperlink inline.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.AnKC.GetTextPositionFromCoordinate(Nevron.Nov.Graphics.NPoint,Nevron.Nov.Text.NTextPosition@)">
            <summary>
            Gets the text position corresponding to the specified coordinate
            </summary>
            <param name="bnKC"></param>
            <param name="CnKC"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.MnKC.TabStopInfo">
            <summary>
            Gets / sets the tab stop info associated with this tab
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.MnKC.TabWidth">
            <summary>
            Gets / sets the tab width
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.MnKC.GetTabGlyphRun">
            <summary>
            Gets the tab run
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pnKC.GetBlocksIntersectingYIterator(System.Double)">
            <summary>
            Gets an iteratator that will output all blocks that intersect the specified coordinate
            </summary>
            <param name="QnKC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pnKC.GetBlocksIntersectingRangeIterator(System.Double,System.Double)">
            <summary>
            Gets an iteratator that will output all blocks that intersect the specified range
            </summary>
            <param name="rnKC"></param>
            <param name="SnKC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.pnKC.InvalidateBlockYIndex(Nevron.Nov.Text.ENBlockYIndex)">
            <summary>
            Invalidates the block y index
            </summary>
            <param name="tnKC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.pnKC.GetContentYRange(Nevron.Nov.Graphics.NRange@)">
            <summary>
            Gets the content y range
            </summary>
            <param name="UnKC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.rtOC.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.YtOC.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.WnKC.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Overriden to paint a column page layout preview.
            </summary>
            <param name="xnKC"></param>
            <param name="YnKC"></param>
            <param name="AOKC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MOKC.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.MUOC.UpdatePreview">
            <summary>
            Updates the preview based on the previewed value.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.rUOC.CreatePreview(Nevron.Nov.Graphics.NSize)">
            <summary>
            Creates a table style preview with the given size.
            </summary>
            <param name="SUOC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.tUOC.PaintPreview(Nevron.Nov.Dom.NPaintVisitor,Nevron.Nov.Graphics.NRectangle,System.Boolean)">
            <summary>
            Paints the preview in the specified level of detail.
            </summary>
            <param name="UUOC"></param>
            <param name="vUOC"></param>
            <param name="WUOC"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.EjSC.TextFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.WxOC.FromDataObject(System.Object)">
            <summary>
            Imports a document from a data object
            </summary>
            <param name="xxOC"></param>
            <param name="documentReadyCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.WxOC.ToDataObject(Nevron.Nov.Text.NRichTextDocument,Nevron.Nov.UI.NDataObject)">
            <summary>
            Exports a document to a data object
            </summary>
            <param name="YxOC"></param>
            <param name="AYOC"></param>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.WxOC.TextFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.WxOC.DataFormat">
            <summary>
            The underling text format
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.jClC.UndoAction">
            <summary>
            Undoes the specific node action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.jClC.RedoAction">
            <summary>
            Redoes the specific node action
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.GCpC.DeepClone">
            <summary>
            Creates an exact replica of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.bMlC`1.HasCommon">
            <summary>
            Gets whether there is a common value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetSelectedSections">
            <summary>
            Gets the selected sections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetSelectedBlocks">
            <summary>
            Gets the selected blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetSelectedParagraphs">
            <summary>
            Gets the currently selected paragraphs
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetSelectedInlines(System.Boolean)">
            <summary>
            Gets the currently selected inline elements 
            </summary>
            <param name="fMlC">whether to extend the selected range to include a paragraph end mark</param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetSelectedTableRows">
            <summary>
            Gets the currently selected table rows iterator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetSelectedTableCells">
            <summary>
            Gets the selected table cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.EMlC.GetDecreaseIndentTargetBlocks">
            <summary>
            Gets the blocks currently target for a decrease indent operation
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.OnhC`1.HasCommon">
            <summary>
            Gets whether there is a common value
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.nthC.ToString">
            <summary>
            Returns the string representation of this affix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.dUhC.ToString">
            <summary>
            Returns the string representation of this affix command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.nUhC.ToString">
            <summary>
            Returns the string representation of this affix command condition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.SUhC.ToString">
            <summary>
            Returns the string representation of this affixed word.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xxhC.ToString">
            <summary>
            Returns the string representation of this dictionary item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.SShC.DoThreadedTask">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fhfC.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fhfC.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fhfC.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.fhfC.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.fhfC.OnUse">
            <summary>
            Called when the format is used
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.fhfC.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="GhfC"></param>
            <param name="hhfC"></param>
            <param name="IhfC"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.fhfC.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="jhfC"></param>
            <param name="KhfC"></param>
            <param name="lhfC"></param>
            <param name="MhfC"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Nevron.Nov.Internal.QhfC.Name">
            <summary>
            Gets the name of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.QhfC.Extensions">
            <summary>
            Gets the extnesion of the format
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.QhfC.FileSignature">
            <summary>
            Gets the file signature of this document format.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Internal.QhfC.Mime">
            <summary>
            Gets the mime type 
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.QhfC.OnUse">
            <summary>
            Called when the format is used
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.QhfC.LoadFromStreamCore(System.IO.Stream,Nevron.Nov.Text.Formats.NTextLoadSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="ShfC"></param>
            <param name="thfC"></param>
            <param name="UhfC"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.QhfC.SaveToStreamCore(Nevron.Nov.Text.NRichTextDocument,System.IO.Stream,Nevron.Nov.Text.Formats.NTextSaveSettings,Nevron.Nov.NProgress)">
            <summary>
            
            </summary>
            <param name="vhfC"></param>
            <param name="WhfC"></param>
            <param name="xhfC"></param>
            <param name="YhfC"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Nevron.Nov.Internal.MbIC.ProvideRichTextView(Nevron.Nov.Graphics.NRectangle)">
            <summary>
            
            </summary>
            <param name="nbIC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.MbIC.ProvideRichTextView(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AxpC.NavigateToContent">
            <summary>
            Navigates to the first item of this item menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AxpC.CreatePopupWindow">
            <summary>
            Creates a popup window that hosts a table picker for selecting a table cell.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AxpC.IsPopupEmpty">
            <summary>
            Gets whether the menu contains at least one sub item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.AxpC.OnPopupOpened">
            <summary>
            Called when the popup is opened.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.AxpC.OnPopupQueryStayOpen">
            <summary>
            Called when the popup queries whether to stay opened.
            This implementation returns true if the popup is active or has active descendant windows.
            </summary>
            <returns>true if the popup should stay opened.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.CCQC.PreVisit(Nevron.Nov.Dom.NVisual)">
            <summary>
            Called before the visitor visits the node children
            </summary>
            <param name="hCQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.CCQC.SkipBranchTraversal(Nevron.Nov.Dom.NVisual)">
            <summary>
            Determines whether the visitor needs to visit of the specified displayable branch.
            </summary>
            <param name="ICQC"></param>
            <returns>true to skip branch traversal, otherwise false</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.jbMC.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.jbMC.CreateControl">
            <summary>
            Creates the control that should edit the properties of the edited node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.jbMC.OnUpdatePreview">
            <summary>
            Raises the UpdatePreview event.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.dGQC.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lGQC.OnUpdateFromEditedNode">
            <summary>
            Updates the editor from the edited node.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.lGQC.CreateControl">
            <summary>
            Creates the control that should edit the properties of the edited node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.UhQC.OnPopupOpening">
            <summary>
            Called when the popup is about to be opened. Creates the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.UhQC.OnPopupClosed">
            <summary>
            Called when the drop down has been closed.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.OIQC.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element.
            </summary>
            <param name="QIQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OIQC.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source from the specified element.
            </summary>
            <param name="rIQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OIQC.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.SlQC.CreateCommandSource(Nevron.Nov.UI.NCommand)">
            <summary>
            Creates a command source for this split button and associates it with the given command.
            </summary>
            <param name="dMQC"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.SlQC.CreateActionButton">
            <summary>
            Overriden to perform the default initialization of the ActionButton content.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.SlQC.CreatePopupContent">
            <summary>
            Creates the popup content.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.MMQC.AttachToSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Attaches the command source to the specified element
            </summary>
            <param name="OMQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MMQC.DetachFromSource(Nevron.Nov.Dom.NElement)">
            <summary>
            Detaches the command source to the specified element
            </summary>
            <param name="pMQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MMQC.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element field names.
            </summary>
            <param name="QMQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.MMQC.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nevron.Nov.Internal.fOSC.EditorWindowTitle">
            <summary>
            Gets the title of the editor window, which is shown for editing a style or creating a new one.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.hOSC.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element selected style.
            </summary>
            <param name="jOSC"></param>
        </member>
        <member name="P:Nevron.Nov.Internal.lOSC.EditorWindowTitle">
            <summary>
            Gets the title of the editor window, which is shown for editing a style or creating a new one.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Internal.fpQC.UpdateOwnerElementCore(Nevron.Nov.UI.NUpdateCommandSourceEventArgs)">
            <summary>
            Overriden to update the command source element field names.
            </summary>
            <param name="hpQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.fpQC.GetUpdateMask(Nevron.Nov.UI.ENCommandSourceUpdateReason)">
            <summary>
            Gets the mask that defines the aspects of the owner element that need to be updated at update timer ticks and after command execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OpQC.NavigateToCell(Nevron.Nov.UI.NTablePickerCell)">
            <summary>
            Overriden to highlight all cells from the top left corner to the given cell.
            </summary>
            <param name="SpQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OpQC.OnMouseMove(Nevron.Nov.UI.NMouseEventArgs)">
            <summary>
            Overriden to highlight cells when the mouse cursor is in the inter cell area.
            </summary>
            <param name="tpQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OpQC.OnMouseOut(Nevron.Nov.UI.NMouseOverChangeEventArgs)">
            <summary>
            Overriden to unhighlight all cells of this picker.
            </summary>
            <param name="UpQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.OpQC.OnMouseDown(Nevron.Nov.UI.NMouseButtonEventArgs)">
            <summary>
            Overriden to selectd the nearest clicked cell when the mouse cursor is in the inter cell area.
            </summary>
            <param name="vpQC"></param>
        </member>
        <member name="M:Nevron.Nov.Internal.KKIC.DeepClone">
            <summary>
            Must override to create a copy of the current object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.ElIC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.GpIC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.YQQC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.CrQC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.IrQC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.lrQC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.SbMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xbMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.fCMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.xfMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.OGMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.bhMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="M:Nevron.Nov.Internal.hhMC.DeepClone">
            <summary>
            Creates an identical copy of this object.
            </summary>
            <returns>A copy of this instance.</returns>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NOptionsTextCommandAction">
            <summary>
            Modifies the text options.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NOptionsTextCommandAction.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NOptionsTextCommandAction.GetCommand">
            <summary>
            Gets the command associated with this command action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NOptionsTextCommandAction.Execute(Nevron.Nov.Dom.NNode,System.Object)">
            <summary>
            Executes the command action.
            </summary>
            <param name="target"></param>
            <param name="parameter"></param>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NOptionsTextCommandAction.NSettingsTextCommandActionSchema">
            <summary>
            Schema associated with NSettingsTextCommandAction.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NWriterRichTextView">
            <summary>
            Represents the rich text view used in Nevron Writer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NWriterRichTextView.CreateDefaultSaveSettings(Nevron.Nov.Text.Formats.NTextFormat)">
            <summary>
            Creates the default save settings for the given document format.
            </summary>
            <param name="docFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NWriterRichTextView.BuildCommander(Nevron.Nov.UI.NCommander)">
            <summary>
            Builds the rich text commander, by adding the rich text command actions
            </summary>
            <param name="commander"></param>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NWriterRichTextView.CreateNewDocument">
            <summary>
            Creates a new document.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterRichTextView.NWriterRichTextViewSchema">
            <summary>
            Schema associated with NWriterRichTextViewSchema.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterRichTextView.AboutCommand">
            <summary>
            The About command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterRichTextView.OptionsCommand">
            <summary>
            The Options command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterRichTextView.HelpCommand">
            <summary>
            The Help command.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterRichTextView.ExitCommand">
            <summary>
            The Exit command.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NWriterOptions">
            <summary>
            Holds the options of Nevron Writer.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NWriterOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NWriterOptions.DocxCompressionLevel">
            <summary>
            Gets/Sets the compression level to use for DOCX files.
            By default set to MediumCompression.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NWriterOptions.EmbedImagesInHtml">
            <summary>
            Specifies whether to embed images as Base64 strings in the generated
            HTML documents or not. By default set to true.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NWriterOptions.InlineCssStyles">
            <summary>
            Determines whether to inline the CSS styles in "style" attributes or to create and
            use CSS classes. By default set to false.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NWriterOptions.MinifyHtml">
            <summary>
            Determines whether to minify the resulting HTML by not adding any new lines or tabulations.
            By default set to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterOptions.NWriterOptionsSchema">
            <summary>
            Schema associated with NWriterOptions.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterOptions.DocxCompressionLevelProperty">
            <summary>
            Reference to the DocxCompressionLevel property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterOptions.EmbedImagesInHtmlProperty">
            <summary>
            Reference to the EmbedImagesInHtml property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterOptions.InlineCssStylesProperty">
            <summary>
            Reference to the InlineCssStyles property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NWriterOptions.MinifyHtmlProperty">
            <summary>
            Reference to the MinifyHtml property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NWriterOptions.NWriterOptionsDesigner">
            <summary>
            Designer for NWriterOptions.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NWriterOptions.NWriterOptionsDesigner.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem">
            <summary>
            Represents a workspace item, which loads/saves the Writer format settings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.DocxCompressionLevel">
            <summary>
            The DOCX compression level.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.EmbedImagesInHtml">
            <summary>
            Determines whether to embed images in HTML.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.InlineCssStyles">
            <summary>
            Determines whether to inline CSS styles in "style" attributes.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.MinifyHtml">
            <summary>
            Determines whether to minify the resulting HTML by not adding any new lines or tabulations.
            By default set to true.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.NFormatsWorkspaceItemSchema">
            <summary>
            Schema associated with NFormatsWorkspaceItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.DocxCompressionLevelProperty">
            <summary>
            Reference to the DocxCompressionLevel property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.EmbedImagesInHtmlProperty">
            <summary>
            Reference to the EmbedImagesInHtml property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.InlineCssStylesProperty">
            <summary>
            Reference to the InlineCssStyles property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NFormatsWorkspaceItem.MinifyHtmlProperty">
            <summary>
            Reference to the MinifyHtml property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem">
            <summary>
            Represents a workspace item, which loads/saves the rich text view state.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.MarksVisibility">
            <summary>
            The marks visibility.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.HorizontalRulerSettings">
            <summary>
            The settings of the horizontal ruler.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.VerticalRulerSettings">
            <summary>
            Stores the settings of the vertical ruler.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.NRichTextViewStateWorkspaceItemSchema">
            <summary>
            Schema associated with NRichTextViewStateWorkspaceItem.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.MarksVisibilityProperty">
            <summary>
            Reference to the MarksVisibility property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.HorizontalRulerSettingsProperty">
            <summary>
            Reference to the HorizontalRulerSettings property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRichTextViewStateWorkspaceItem.VerticalRulerSettingsProperty">
            <summary>
            Reference to the VerticalRulerSettings property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NRulerSettings">
            <summary>
            Stores ruler settings.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NRulerSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRulerSettings.Visibility">
            <summary>
            Ruler visibility.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRulerSettings.TicksStroke">
            <summary>
            Ruler ticks stroke.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRulerSettings.Unit">
            <summary>
            Ruler unit.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRulerSettings.StepMode">
            <summary>
            Ruler step mode.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.Writer.NRulerSettings.FixedStep">
            <summary>
            Ruler fixed step.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NRulerSettings.ApplyToRuler(Nevron.Nov.Text.NRuler)">
            <summary>
            Applies these ruler settings to the given ruler.
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRulerSettings.NRulerSettingsSchema">
            <summary>
            Schema associated with NRulerSettings.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRulerSettings.VisibilityProperty">
            <summary>
            Reference to the Visibility property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRulerSettings.TicksStrokeProperty">
            <summary>
            Reference to the TicksStroke property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRulerSettings.UnitProperty">
            <summary>
            Reference to the Unit property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRulerSettings.StepModeProperty">
            <summary>
            Reference to the StepMode property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NRulerSettings.FixedStepProperty">
            <summary>
            Reference to the FixedStep property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NRulerSettings.CreateFromRuler(Nevron.Nov.Text.NRuler)">
            <summary>
            Creates a ruler settings object from the given ruler.
            </summary>
            <param name="ruler"></param>
            <returns></returns>
        </member>
        <member name="T:Nevron.Nov.Office.Writer.NSpellCheckWorkspaceItem">
            <summary>
            Nevron Writer's spell check workspace item.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NSpellCheckWorkspaceItem.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.Writer.NSpellCheckWorkspaceItem.GetSpellChecker(Nevron.Nov.UI.INDocumentView)">
            <summary>
            Gets the spell checker of the given document view.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Office.Writer.NSpellCheckWorkspaceItem.NSpellCheckWorkspaceItemSchema">
            <summary>
            Schema associated with NSpellCheckWorkspaceItem.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase">
            <summary>
            Base class for spell check workspace items.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.ActiveDictionarySource">
            <summary>
            Gets/Sets the value of the ActiveDictionarySource property.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.CustomDictionaries">
            <summary>
            Gets/Sets the file names of the custom dictionaries loaded from file.
            Valid only for non-sandboxed applications.
            </summary>
        </member>
        <member name="P:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.SpellCheckEnabled">
            <summary>
            Gets/Sets the value of the SpellCheckEnabled property.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.GetSpellChecker(Nevron.Nov.UI.INDocumentView)">
            <summary>
            Gets the spell checker of the given document view.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.NSpellCheckWorkspaceItemBaseSchema">
            <summary>
            Schema associated with NSpellCheckWorkspaceItemBase.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.ActiveDictionarySourceProperty">
            <summary>
            Reference to the ActiveDictionarySource property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.CustomDictionariesProperty">
            <summary>
            Reference to the CustomDictionaries property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Office.NSpellCheckWorkspaceItemBase.SpellCheckEnabledProperty">
            <summary>
            Reference to the SpellCheckEnabled property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NDictionarySource">
            <summary>
            Contains information about a dictionary
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NDictionarySource.#ctor(Nevron.Nov.Globalization.NLanguageInfo,System.String,System.Boolean)">
            <summary>
            Initializing constructor.
            </summary>
            <param name="languageInfo"></param>
            <param name="description"></param>
            <param name="caseSensitive"></param>
        </member>
        <member name="P:Nevron.Nov.Globalization.NDictionarySource.LanguageInfo">
            <summary>
            Gets the language info of the dictionary
            </summary>
        </member>
        <member name="P:Nevron.Nov.Globalization.NDictionarySource.Description">
            <summary>
            Gets the description of the dictionary
            </summary>
        </member>
        <member name="P:Nevron.Nov.Globalization.NDictionarySource.CaseSensitive">
            <summary>
            Gets whether the dictionary source is case sensitive
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NDictionarySource.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Nevron.Nov.Globalization.NDictionarySource.LoadDictionary">
            <summary>
            Loads the dictionary referenced by this source.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Globalization.NDictionarySource.NDictionarySourceSchema">
            <summary>
            Schema associated with NDictionarySource.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NDictionarySource.LanguageInfoProperty">
            <summary>
            Reference to the LanguageInfoProperty property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NDictionarySource.CaseSensitiveProperty">
            <summary>
            Reference to the CaseSensitiveProperty property.
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NDictionarySource.DescriptionProperty">
            <summary>
            Reference to the DescriptionProperty property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NFileDictionarySource">
            <summary>
            Represents a dictionary source that references a dictionary stored in a file
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NFileDictionarySource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NFileDictionarySource.#ctor(Nevron.Nov.Globalization.NLanguageInfo,System.String,System.Boolean,Nevron.Nov.IO.NFile)">
            <summary>
            Initializer constructor
            </summary>
            <param name="languageInfo"></param>
            <param name="description"></param>
            <param name="caseSensitive"></param>
            <param name="file"></param>
        </member>
        <member name="P:Nevron.Nov.Globalization.NFileDictionarySource.File">
            <summary>
            Gets the file path of the dictionary
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NFileDictionarySource.LoadDictionary">
            <summary>
            Loads the dictionary referenced by this source.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Globalization.NFileDictionarySource.NFileDictionarySourceSchema">
            <summary>
            Reference to NFileDictionarySource schema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NFileDictionarySource.FileProperty">
            <summary>
            Reference to the FilePathProperty property.
            </summary>
        </member>
        <member name="T:Nevron.Nov.Globalization.NResourceDictionarySource">
            <summary>
            Represents a dictionary source that references a dictionary stored in an embedded resource.
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NResourceDictionarySource.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NResourceDictionarySource.#ctor(Nevron.Nov.Globalization.NLanguageInfo,System.String,System.Boolean,Nevron.Nov.NEmbeddedResource)">
            <summary>
            Initializing constructor
            </summary>
            <param name="languageInfo"></param>
            <param name="description"></param>
            <param name="caseSensitive"></param>
            <param name="resource"></param>
        </member>
        <member name="P:Nevron.Nov.Globalization.NResourceDictionarySource.Resource">
            <summary>
            Gets the resource container
            </summary>
        </member>
        <member name="M:Nevron.Nov.Globalization.NResourceDictionarySource.LoadDictionary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Nevron.Nov.Globalization.NResourceDictionarySource.NResourceDictionarySourceSchema">
            <summary>
            Reference to NResourceDictionarySourceSchema schema
            </summary>
        </member>
        <member name="F:Nevron.Nov.Globalization.NResourceDictionarySource.ResourceProperty">
            <summary>
            Reference to the ResourceContainer
            </summary>
        </member>
    </members>
</doc>
